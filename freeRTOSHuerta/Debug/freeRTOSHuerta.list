
freeRTOSHuerta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008854  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080089f4  080089f4  000189f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b6c  08008b6c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008b6c  08008b6c  00018b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b74  08008b74  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b74  08008b74  00018b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b78  08008b78  00018b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043bc  2000007c  08008bf8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004438  08008bf8  00024438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177d8  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d23  00000000  00000000  00037884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  0003b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001408  00000000  00000000  0003cb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a81f  00000000  00000000  0003df68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a870  00000000  00000000  00058787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f8a8  00000000  00000000  00072ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011289f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e84  00000000  00000000  001128f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080089dc 	.word	0x080089dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080089dc 	.word	0x080089dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <delay>:
uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

__STATIC_INLINE void delay(volatile uint16_t microseconds) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
    delay_us(microseconds);
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f9ac 	bl	80010dc <delay_us>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4619      	mov	r1, r3
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f003 f842 	bl	8003e44 <HAL_GPIO_Init>
}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000de4:	887b      	ldrh	r3, [r7, #2]
 8000de6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	4619      	mov	r1, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f003 f824 	bl	8003e44 <HAL_GPIO_Init>
}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <DHT_Start>:

/**
 * Iniciamos el proceso de lectura del sensor DHT22
 **/
void DHT_Start (void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    /********  Tbe  ********/
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000e08:	2101      	movs	r1, #1
 8000e0a:	480a      	ldr	r0, [pc, #40]	; (8000e34 <DHT_Start+0x30>)
 8000e0c:	f7ff ffbe 	bl	8000d8c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000e10:	2200      	movs	r2, #0
 8000e12:	2101      	movs	r1, #1
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <DHT_Start+0x30>)
 8000e16:	f003 f9b1 	bl	800417c <HAL_GPIO_WritePin>
	delay (1200);  // >1ms delay
 8000e1a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000e1e:	f7ff ffa7 	bl	8000d70 <delay>

    /********  Tgo  ********/
    Set_Pin_Input(DHT_PORT, DHT_PIN);
 8000e22:	2101      	movs	r1, #1
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <DHT_Start+0x30>)
 8000e26:	f7ff ffcf 	bl	8000dc8 <Set_Pin_Input>
    delay (30);   // wait for 30us
 8000e2a:	201e      	movs	r0, #30
 8000e2c:	f7ff ffa0 	bl	8000d70 <delay>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40020000 	.word	0x40020000

08000e38 <DHT_Check_Response>:


/**
 * Esperamos la respuesta inicial del sensor DHT22
 **/
uint8_t DHT_Check_Response (void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	71fb      	strb	r3, [r7, #7]
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000e42:	2101      	movs	r1, #1
 8000e44:	4810      	ldr	r0, [pc, #64]	; (8000e88 <DHT_Check_Response+0x50>)
 8000e46:	f003 f981 	bl	800414c <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10e      	bne.n	8000e6e <DHT_Check_Response+0x36>
	{
		delay (80);
 8000e50:	2050      	movs	r0, #80	; 0x50
 8000e52:	f7ff ff8d 	bl	8000d70 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000e56:	2101      	movs	r1, #1
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <DHT_Check_Response+0x50>)
 8000e5a:	f003 f977 	bl	800414c <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <DHT_Check_Response+0x32>
 8000e64:	2301      	movs	r3, #1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	e001      	b.n	8000e6e <DHT_Check_Response+0x36>
		else Response = -1;
 8000e6a:	23ff      	movs	r3, #255	; 0xff
 8000e6c:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000e6e:	bf00      	nop
 8000e70:	2101      	movs	r1, #1
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <DHT_Check_Response+0x50>)
 8000e74:	f003 f96a 	bl	800414c <HAL_GPIO_ReadPin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f8      	bne.n	8000e70 <DHT_Check_Response+0x38>

	return Response;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40020000 	.word	0x40020000

08000e8c <DHT_Read>:


/**
 * Leemos la respuesta del sensor DHT22
 **/
uint8_t DHT_Read (void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	71bb      	strb	r3, [r7, #6]
 8000e96:	e037      	b.n	8000f08 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000e98:	bf00      	nop
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	481e      	ldr	r0, [pc, #120]	; (8000f18 <DHT_Read+0x8c>)
 8000e9e:	f003 f955 	bl	800414c <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f8      	beq.n	8000e9a <DHT_Read+0xe>
		delay (35);   // wait for 40 us
 8000ea8:	2023      	movs	r0, #35	; 0x23
 8000eaa:	f7ff ff61 	bl	8000d70 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4819      	ldr	r0, [pc, #100]	; (8000f18 <DHT_Read+0x8c>)
 8000eb2:	f003 f94b 	bl	800414c <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d10e      	bne.n	8000eda <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	b25a      	sxtb	r2, r3
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	e00b      	b.n	8000ef2 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000eda:	79bb      	ldrb	r3, [r7, #6]
 8000edc:	f1c3 0307 	rsb	r3, r3, #7
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	b25a      	sxtb	r2, r3
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000ef2:	bf00      	nop
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4808      	ldr	r0, [pc, #32]	; (8000f18 <DHT_Read+0x8c>)
 8000ef8:	f003 f928 	bl	800414c <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f8      	bne.n	8000ef4 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	3301      	adds	r3, #1
 8000f06:	71bb      	strb	r3, [r7, #6]
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	d9c4      	bls.n	8000e98 <DHT_Read+0xc>
	}
	return i;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020000 	.word	0x40020000

08000f1c <DHT_GetData>:

/**
 * Iniciamos la toma de datos y la almacenamos en nuestra estructura basica
 **/
void
DHT_GetData (DHT_DataTypeDef *DHT_Data) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000f24:	f7ff ff6e 	bl	8000e04 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000f28:	f7ff ff86 	bl	8000e38 <DHT_Check_Response>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b33      	ldr	r3, [pc, #204]	; (8001000 <DHT_GetData+0xe4>)
 8000f32:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000f34:	f7ff ffaa 	bl	8000e8c <DHT_Read>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b31      	ldr	r3, [pc, #196]	; (8001004 <DHT_GetData+0xe8>)
 8000f3e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000f40:	f7ff ffa4 	bl	8000e8c <DHT_Read>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <DHT_GetData+0xec>)
 8000f4a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000f4c:	f7ff ff9e 	bl	8000e8c <DHT_Read>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <DHT_GetData+0xf0>)
 8000f56:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000f58:	f7ff ff98 	bl	8000e8c <DHT_Read>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <DHT_GetData+0xf4>)
 8000f62:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000f64:	f7ff ff92 	bl	8000e8c <DHT_Read>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b29      	ldr	r3, [pc, #164]	; (8001014 <DHT_GetData+0xf8>)
 8000f6e:	801a      	strh	r2, [r3, #0]

	if (SUM == (uint8_t)(Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2)){
 8000f70:	4b24      	ldr	r3, [pc, #144]	; (8001004 <DHT_GetData+0xe8>)
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <DHT_GetData+0xec>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <DHT_GetData+0xf0>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <DHT_GetData+0xf4>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4413      	add	r3, r2
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <DHT_GetData+0xf8>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d12f      	bne.n	8000ff6 <DHT_GetData+0xda>
        DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2) / 10.0;
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <DHT_GetData+0xf0>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <DHT_GetData+0xf4>)
 8000f9e:	7812      	ldrb	r2, [r2, #0]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fac6 	bl	8000534 <__aeabi_i2d>
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <DHT_GetData+0xfc>)
 8000fae:	f7ff fc55 	bl	800085c <__aeabi_ddiv>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff fd37 	bl	8000a2c <__aeabi_d2uiz>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	701a      	strb	r2, [r3, #0]
        DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2) / 10.0;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <DHT_GetData+0xe8>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <DHT_GetData+0xec>)
 8000fce:	7812      	ldrb	r2, [r2, #0]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff faae 	bl	8000534 <__aeabi_i2d>
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <DHT_GetData+0xfc>)
 8000fde:	f7ff fc3d 	bl	800085c <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fd1f 	bl	8000a2c <__aeabi_d2uiz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	705a      	strb	r2, [r3, #1]
	}
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000009e 	.word	0x2000009e
 8001004:	20000098 	.word	0x20000098
 8001008:	20000099 	.word	0x20000099
 800100c:	2000009a 	.word	0x2000009a
 8001010:	2000009b 	.word	0x2000009b
 8001014:	2000009c 	.word	0x2000009c
 8001018:	40240000 	.word	0x40240000

0800101c <TimerDelay_Init>:
volatile static uint32_t gu32_ticks = 0;

void Error_Handler();

void TimerDelay_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
	gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8001022:	f004 fa99 	bl	8005558 <HAL_RCC_GetHCLKFreq>
 8001026:	4603      	mov	r3, r0
 8001028:	4a28      	ldr	r2, [pc, #160]	; (80010cc <TimerDelay_Init+0xb0>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	0c9b      	lsrs	r3, r3, #18
 8001030:	4a27      	ldr	r2, [pc, #156]	; (80010d0 <TimerDelay_Init+0xb4>)
 8001032:	6013      	str	r3, [r2, #0]
	HTIMx.Instance = TIMER;
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <TimerDelay_Init+0xb8>)
 8001036:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <TimerDelay_Init+0xbc>)
 8001038:	601a      	str	r2, [r3, #0]

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]


    HTIMx.Init.Prescaler = gu32_ticks-1;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <TimerDelay_Init+0xb4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3b01      	subs	r3, #1
 8001056:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <TimerDelay_Init+0xb8>)
 8001058:	6053      	str	r3, [r2, #4]
    HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <TimerDelay_Init+0xb8>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
    HTIMx.Init.Period = 65535;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <TimerDelay_Init+0xb8>)
 8001062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001066:	60da      	str	r2, [r3, #12]
    HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <TimerDelay_Init+0xb8>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
    HTIMx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <TimerDelay_Init+0xb8>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&HTIMx) != HAL_OK)
 8001074:	4817      	ldr	r0, [pc, #92]	; (80010d4 <TimerDelay_Init+0xb8>)
 8001076:	f004 fc0b 	bl	8005890 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <TimerDelay_Init+0x68>
    {
      Error_Handler();
 8001080:	f000 fb8e 	bl	80017a0 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&HTIMx, &sClockSourceConfig) != HAL_OK)
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	4619      	mov	r1, r3
 8001090:	4810      	ldr	r0, [pc, #64]	; (80010d4 <TimerDelay_Init+0xb8>)
 8001092:	f004 fdab 	bl	8005bec <HAL_TIM_ConfigClockSource>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <TimerDelay_Init+0x84>
    {
      Error_Handler();
 800109c:	f000 fb80 	bl	80017a0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&HTIMx, &sMasterConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <TimerDelay_Init+0xb8>)
 80010ae:	f004 ffc9 	bl	8006044 <HAL_TIMEx_MasterConfigSynchronization>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <TimerDelay_Init+0xa0>
    {
      Error_Handler();
 80010b8:	f000 fb72 	bl	80017a0 <Error_Handler>
    }

    HAL_TIM_Base_Start(&HTIMx);
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <TimerDelay_Init+0xb8>)
 80010be:	f004 fc12 	bl	80058e6 <HAL_TIM_Base_Start>

}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	431bde83 	.word	0x431bde83
 80010d0:	200000e0 	.word	0x200000e0
 80010d4:	200000a0 	.word	0x200000a0
 80010d8:	40000400 	.word	0x40000400

080010dc <delay_us>:

void delay_us(volatile uint16_t au16_us)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
	HTIMx.Instance->CNT = 0;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <delay_us+0x30>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
	while (HTIMx.Instance->CNT < au16_us);
 80010ee:	bf00      	nop
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <delay_us+0x30>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	88fa      	ldrh	r2, [r7, #6]
 80010f8:	b292      	uxth	r2, r2
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d3f8      	bcc.n	80010f0 <delay_us+0x14>
}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	200000a0 	.word	0x200000a0

08001110 <delay_ms>:

void delay_ms(volatile uint16_t au16_ms)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	while(au16_ms > 0)
 800111a:	e00f      	b.n	800113c <delay_ms+0x2c>
	{
		HTIMx.Instance->CNT = 0;
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <delay_ms+0x44>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
		au16_ms--;
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	b29b      	uxth	r3, r3
 8001128:	3b01      	subs	r3, #1
 800112a:	b29b      	uxth	r3, r3
 800112c:	80fb      	strh	r3, [r7, #6]
		while (HTIMx.Instance->CNT < 1000);
 800112e:	bf00      	nop
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <delay_ms+0x44>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800113a:	d3f9      	bcc.n	8001130 <delay_ms+0x20>
	while(au16_ms > 0)
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	b29b      	uxth	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1eb      	bne.n	800111c <delay_ms+0xc>
	}
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	200000a0 	.word	0x200000a0

08001158 <ADC_Select_CH1>:
static void MX_ADC1_Init(void);




void ADC_Select_CH1 (void){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0

		ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
	    sConfig.Channel = ADC_CHANNEL_1;
 800116a:	2301      	movs	r3, #1
 800116c:	603b      	str	r3, [r7, #0]
	    sConfig.Rank = 1;
 800116e:	2301      	movs	r3, #1
 8001170:	607b      	str	r3, [r7, #4]
	    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
	    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001176:	463b      	mov	r3, r7
 8001178:	4619      	mov	r1, r3
 800117a:	4806      	ldr	r0, [pc, #24]	; (8001194 <ADC_Select_CH1+0x3c>)
 800117c:	f002 f868 	bl	8003250 <HAL_ADC_ConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <ADC_Select_CH1+0x32>
	    {
	        Error_Handler();
 8001186:	f000 fb0b 	bl	80017a0 <Error_Handler>
	    }

}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000e4 	.word	0x200000e4

08001198 <BSP_Init>:
	        Error_Handler();
	    }

}

void BSP_Init() {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
    HAL_Init();
 800119c:	f001 fe44 	bl	8002e28 <HAL_Init>
    SystemClock_Config();
 80011a0:	f000 f8f6 	bl	8001390 <SystemClock_Config>
    MX_GPIO_Init();
 80011a4:	f000 f9e8 	bl	8001578 <MX_GPIO_Init>
    MX_I2C1_Init();
 80011a8:	f000 f9b8 	bl	800151c <MX_I2C1_Init>
    MX_ADC1_Init();
 80011ac:	f000 f974 	bl	8001498 <MX_ADC1_Init>
    TimerDelay_Init();
 80011b0:	f7ff ff34 	bl	800101c <TimerDelay_Init>
    LCD_Init();
 80011b4:	f000 ff1e 	bl	8001ff4 <LCD_Init>
    keypad_init();
 80011b8:	f000 fb14 	bl	80017e4 <keypad_init>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); 					 // Init PWM
 80011bc:	2100      	movs	r1, #0
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <BSP_Init+0x48>)
 80011c0:	f004 fbda 	bl	8005978 <HAL_TIM_PWM_Start>

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); 		 //  ENA1
 80011c4:	2200      	movs	r2, #0
 80011c6:	2110      	movs	r1, #16
 80011c8:	4806      	ldr	r0, [pc, #24]	; (80011e4 <BSP_Init+0x4c>)
 80011ca:	f002 ffd7 	bl	800417c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);		 //  ENA2
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <BSP_Init+0x50>)
 80011d6:	f002 ffd1 	bl	800417c <HAL_GPIO_WritePin>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000200 	.word	0x20000200
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	40020800 	.word	0x40020800

080011ec <BSP_Delay>:

void BSP_Delay(uint16_t Delay){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
    delay_ms(Delay);
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff89 	bl	8001110 <delay_ms>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <BSP_LCD_Temperature>:

void BSP_LCD_Temperature(uint8_t temperature) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    LCD_SetCursor(1, 1);
 8001212:	2101      	movs	r1, #1
 8001214:	2001      	movs	r0, #1
 8001216:	f000 fdd3 	bl	8001dc0 <LCD_SetCursor>
    LCD_Print("   Grados:%1uC   ", temperature);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4619      	mov	r1, r3
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <BSP_LCD_Temperature+0x24>)
 8001220:	f000 feb4 	bl	8001f8c <LCD_Print>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	080089f4 	.word	0x080089f4

08001230 <BSP_LCD_Humidity>:

void BSP_LCD_Humidity(uint8_t humidity) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
    LCD_SetCursor(2, 1);
 800123a:	2101      	movs	r1, #1
 800123c:	2002      	movs	r0, #2
 800123e:	f000 fdbf 	bl	8001dc0 <LCD_SetCursor>
    LCD_Print("HA:%1u%%   ", humidity);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	4619      	mov	r1, r3
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <BSP_LCD_Humidity+0x24>)
 8001248:	f000 fea0 	bl	8001f8c <LCD_Print>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	08008a08 	.word	0x08008a08

08001258 <BSP_LCD_SoilHumidity>:

void BSP_LCD_SoilHumidity(uint8_t soilHumidity){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	LCD_SetCursor(2, 10);
 8001262:	210a      	movs	r1, #10
 8001264:	2002      	movs	r0, #2
 8001266:	f000 fdab 	bl	8001dc0 <LCD_SetCursor>
	LCD_Print("HS:%1u%%  ", soilHumidity);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4619      	mov	r1, r3
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <BSP_LCD_SoilHumidity+0x24>)
 8001270:	f000 fe8c 	bl	8001f8c <LCD_Print>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	08008a14 	.word	0x08008a14

08001280 <BSP_Get_percentageHS>:


uint8_t BSP_Get_percentageHS(uint16_t value){
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
    int hummin = 4095;
 800128a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800128e:	617b      	str	r3, [r7, #20]
    int hummax = 2300;
 8001290:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8001294:	613b      	str	r3, [r7, #16]
//#define humminp = 0
    int hummaxp = 100;
 8001296:	2364      	movs	r3, #100	; 0x64
 8001298:	60fb      	str	r3, [r7, #12]
    if (value > hummin)
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	429a      	cmp	r2, r3
 80012a0:	da01      	bge.n	80012a6 <BSP_Get_percentageHS+0x26>
        value = hummin;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	80fb      	strh	r3, [r7, #6]
    if (value <= hummax)
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	db03      	blt.n	80012b6 <BSP_Get_percentageHS+0x36>
        value = hummax + 1;
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	80fb      	strh	r3, [r7, #6]
    value = value - hummax;
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	80fb      	strh	r3, [r7, #6]
    return 100 - ((value * hummaxp) / (hummin - hummax));
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	fb03 f202 	mul.w	r2, r3, r2
 80012c8:	6979      	ldr	r1, [r7, #20]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1acb      	subs	r3, r1, r3
 80012ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80012d8:	b2db      	uxtb	r3, r3
}
 80012da:	4618      	mov	r0, r3
 80012dc:	371c      	adds	r7, #28
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <BSP_SoilHumidity>:
//            estado_cortina = 0;                                                    //cambio de estado
//        }
//    }
//}

uint8_t BSP_SoilHumidity(){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
	uint16_t value_adc[3];
	uint8_t average;
	ADC_Select_CH1();
 80012ee:	f7ff ff33 	bl	8001158 <ADC_Select_CH1>
    HAL_ADC_Start(&hadc1);
 80012f2:	4814      	ldr	r0, [pc, #80]	; (8001344 <BSP_SoilHumidity+0x5c>)
 80012f4:	f001 fe42 	bl	8002f7c <HAL_ADC_Start>
    if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK){
 80012f8:	2105      	movs	r1, #5
 80012fa:	4812      	ldr	r0, [pc, #72]	; (8001344 <BSP_SoilHumidity+0x5c>)
 80012fc:	f001 ff17 	bl	800312e <HAL_ADC_PollForConversion>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10f      	bne.n	8001326 <BSP_SoilHumidity+0x3e>
        value_adc[0] = HAL_ADC_GetValue(&hadc1);
 8001306:	480f      	ldr	r0, [pc, #60]	; (8001344 <BSP_SoilHumidity+0x5c>)
 8001308:	f001 ff95 	bl	8003236 <HAL_ADC_GetValue>
 800130c:	4603      	mov	r3, r0
 800130e:	b29b      	uxth	r3, r3
 8001310:	803b      	strh	r3, [r7, #0]
        value_adc[0] = BSP_Get_percentageHS(value_adc[0]);
 8001312:	883b      	ldrh	r3, [r7, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ffb3 	bl	8001280 <BSP_Get_percentageHS>
 800131a:	4603      	mov	r3, r0
 800131c:	b29b      	uxth	r3, r3
 800131e:	803b      	strh	r3, [r7, #0]
        HAL_ADC_Stop(&hadc1);
 8001320:	4808      	ldr	r0, [pc, #32]	; (8001344 <BSP_SoilHumidity+0x5c>)
 8001322:	f001 fed1 	bl	80030c8 <HAL_ADC_Stop>
//    if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK){
//        value_adc[2] = HAL_ADC_GetValue(&hadc1);
//        value_adc[2] = BSP_Get_percentageHS(value_adc[2]);
//        HAL_ADC_Stop(&hadc1);
//    }
    average = (value_adc[0] + value_adc[1])/2;
 8001326:	883b      	ldrh	r3, [r7, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	4413      	add	r3, r2
 800132e:	0fda      	lsrs	r2, r3, #31
 8001330:	4413      	add	r3, r2
 8001332:	105b      	asrs	r3, r3, #1
 8001334:	71fb      	strb	r3, [r7, #7]
    return value_adc[0];
 8001336:	883b      	ldrh	r3, [r7, #0]
 8001338:	b2db      	uxtb	r3, r3
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200000e4 	.word	0x200000e4

08001348 <BSP_TurnOn_Valve>:

void BSP_TurnOn_Valve(){
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);   //  ENA
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001352:	4808      	ldr	r0, [pc, #32]	; (8001374 <BSP_TurnOn_Valve+0x2c>)
 8001354:	f002 ff12 	bl	800417c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);   //  IN1
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <BSP_TurnOn_Valve+0x2c>)
 8001360:	f002 ff0c 	bl	800417c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); //  IN2
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136a:	4802      	ldr	r0, [pc, #8]	; (8001374 <BSP_TurnOn_Valve+0x2c>)
 800136c:	f002 ff06 	bl	800417c <HAL_GPIO_WritePin>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40020800 	.word	0x40020800

08001378 <BSP_TurnOff_Valve>:

void BSP_TurnOff_Valve(){
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); //  ENA
 800137c:	2200      	movs	r2, #0
 800137e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001382:	4802      	ldr	r0, [pc, #8]	; (800138c <BSP_TurnOff_Valve+0x14>)
 8001384:	f002 fefa 	bl	800417c <HAL_GPIO_WritePin>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40020800 	.word	0x40020800

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b09a      	sub	sp, #104	; 0x68
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800139a:	2230      	movs	r2, #48	; 0x30
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f006 feb4 	bl	800810c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b31      	ldr	r3, [pc, #196]	; (8001490 <SystemClock_Config+0x100>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a30      	ldr	r2, [pc, #192]	; (8001490 <SystemClock_Config+0x100>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <SystemClock_Config+0x100>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <SystemClock_Config+0x104>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <SystemClock_Config+0x104>)
 80013ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <SystemClock_Config+0x104>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013fe:	230a      	movs	r3, #10
 8001400:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001402:	2301      	movs	r3, #1
 8001404:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001406:	2310      	movs	r3, #16
 8001408:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800140a:	2301      	movs	r3, #1
 800140c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140e:	2302      	movs	r3, #2
 8001410:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001412:	2300      	movs	r3, #0
 8001414:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001416:	2308      	movs	r3, #8
 8001418:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 100;
 800141a:	2364      	movs	r3, #100	; 0x64
 800141c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800141e:	2302      	movs	r3, #2
 8001420:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001422:	2308      	movs	r3, #8
 8001424:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001426:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800142a:	4618      	mov	r0, r3
 800142c:	f003 fc3a 	bl	8004ca4 <HAL_RCC_OscConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001436:	f000 f9b3 	bl	80017a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143a:	230f      	movs	r3, #15
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143e:	2302      	movs	r3, #2
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001446:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	2103      	movs	r1, #3
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fe91 	bl	8005180 <HAL_RCC_ClockConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001464:	f000 f99c 	bl	80017a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001468:	2302      	movs	r3, #2
 800146a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800146c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001470:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4618      	mov	r0, r3
 8001478:	f004 f8c0 	bl	80055fc <HAL_RCCEx_PeriphCLKConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001482:	f000 f98d 	bl	80017a0 <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	3768      	adds	r7, #104	; 0x68
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40007000 	.word	0x40007000

08001498 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <MX_ADC1_Init+0x78>)
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <MX_ADC1_Init+0x7c>)
 80014ae:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <MX_ADC1_Init+0x78>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_ADC1_Init+0x78>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_ADC1_Init+0x78>)
 80014be:	2201      	movs	r2, #1
 80014c0:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_ADC1_Init+0x78>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_ADC1_Init+0x78>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_ADC1_Init+0x78>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_ADC1_Init+0x78>)
 80014d8:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <MX_ADC1_Init+0x80>)
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_ADC1_Init+0x78>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_ADC1_Init+0x78>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_ADC1_Init+0x78>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_ADC1_Init+0x78>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <MX_ADC1_Init+0x78>)
 80014f8:	f001 fcfc 	bl	8002ef4 <HAL_ADC_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_ADC1_Init+0x6e>
    {
        Error_Handler();
 8001502:	f000 f94d 	bl	80017a0 <Error_Handler>
//    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200000e4 	.word	0x200000e4
 8001514:	40012000 	.word	0x40012000
 8001518:	0f000001 	.word	0x0f000001

0800151c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_I2C1_Init+0x50>)
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <MX_I2C1_Init+0x54>)
 8001524:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_I2C1_Init+0x50>)
 8001528:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_I2C1_Init+0x58>)
 800152a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_I2C1_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_I2C1_Init+0x50>)
 800153a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_I2C1_Init+0x50>)
 800155a:	f002 fe29 	bl	80041b0 <HAL_I2C_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8001564:	f000 f91c 	bl	80017a0 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000018c 	.word	0x2000018c
 8001570:	40005400 	.word	0x40005400
 8001574:	000186a0 	.word	0x000186a0

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	4b7d      	ldr	r3, [pc, #500]	; (8001788 <MX_GPIO_Init+0x210>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a7c      	ldr	r2, [pc, #496]	; (8001788 <MX_GPIO_Init+0x210>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b7a      	ldr	r3, [pc, #488]	; (8001788 <MX_GPIO_Init+0x210>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	4b76      	ldr	r3, [pc, #472]	; (8001788 <MX_GPIO_Init+0x210>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a75      	ldr	r2, [pc, #468]	; (8001788 <MX_GPIO_Init+0x210>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b73      	ldr	r3, [pc, #460]	; (8001788 <MX_GPIO_Init+0x210>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b6f      	ldr	r3, [pc, #444]	; (8001788 <MX_GPIO_Init+0x210>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a6e      	ldr	r2, [pc, #440]	; (8001788 <MX_GPIO_Init+0x210>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b6c      	ldr	r3, [pc, #432]	; (8001788 <MX_GPIO_Init+0x210>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b68      	ldr	r3, [pc, #416]	; (8001788 <MX_GPIO_Init+0x210>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a67      	ldr	r2, [pc, #412]	; (8001788 <MX_GPIO_Init+0x210>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b65      	ldr	r3, [pc, #404]	; (8001788 <MX_GPIO_Init+0x210>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b61      	ldr	r3, [pc, #388]	; (8001788 <MX_GPIO_Init+0x210>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a60      	ldr	r2, [pc, #384]	; (8001788 <MX_GPIO_Init+0x210>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b5e      	ldr	r3, [pc, #376]	; (8001788 <MX_GPIO_Init+0x210>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b5a      	ldr	r3, [pc, #360]	; (8001788 <MX_GPIO_Init+0x210>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a59      	ldr	r2, [pc, #356]	; (8001788 <MX_GPIO_Init+0x210>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b57      	ldr	r3, [pc, #348]	; (8001788 <MX_GPIO_Init+0x210>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f641 4108 	movw	r1, #7176	; 0x1c08
 800163c:	4853      	ldr	r0, [pc, #332]	; (800178c <MX_GPIO_Init+0x214>)
 800163e:	f002 fd9d 	bl	800417c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8001648:	4851      	ldr	r0, [pc, #324]	; (8001790 <MX_GPIO_Init+0x218>)
 800164a:	f002 fd97 	bl	800417c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001654:	484f      	ldr	r0, [pc, #316]	; (8001794 <MX_GPIO_Init+0x21c>)
 8001656:	f002 fd91 	bl	800417c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, LD4_Pin|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	f241 011c 	movw	r1, #4124	; 0x101c
 8001660:	484d      	ldr	r0, [pc, #308]	; (8001798 <MX_GPIO_Init+0x220>)
 8001662:	f002 fd8b 	bl	800417c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2104      	movs	r1, #4
 800166a:	484c      	ldr	r0, [pc, #304]	; (800179c <MX_GPIO_Init+0x224>)
 800166c:	f002 fd86 	bl	800417c <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PE3 PE5 */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001670:	2328      	movs	r3, #40	; 0x28
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	4843      	ldr	r0, [pc, #268]	; (8001790 <MX_GPIO_Init+0x218>)
 8001684:	f002 fbde 	bl	8003e44 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC3 PC10 PC11 PC12 */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001688:	f641 4308 	movw	r3, #7176	; 0x1c08
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	483a      	ldr	r0, [pc, #232]	; (800178c <MX_GPIO_Init+0x214>)
 80016a2:	f002 fbcf 	bl	8003e44 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA0 PA2 */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a6:	2301      	movs	r3, #1
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	4838      	ldr	r0, [pc, #224]	; (800179c <MX_GPIO_Init+0x224>)
 80016ba:	f002 fbc3 	bl	8003e44 <HAL_GPIO_Init>

    /*Configure GPIO pin : PC4 */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016be:	2310      	movs	r3, #16
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	482e      	ldr	r0, [pc, #184]	; (800178c <MX_GPIO_Init+0x214>)
 80016d2:	f002 fbb7 	bl	8003e44 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB0 PB2 */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80016d6:	2305      	movs	r3, #5
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016de:	2301      	movs	r3, #1
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	482a      	ldr	r0, [pc, #168]	; (8001794 <MX_GPIO_Init+0x21c>)
 80016ea:	f002 fbab 	bl	8003e44 <HAL_GPIO_Init>

    /*Configure GPIO pin : PE8 */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	4823      	ldr	r0, [pc, #140]	; (8001790 <MX_GPIO_Init+0x218>)
 8001704:	f002 fb9e 	bl	8003e44 <HAL_GPIO_Init>

    /*Configure GPIO pins : PE10 PE12 PE14 */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8001708:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	481b      	ldr	r0, [pc, #108]	; (8001790 <MX_GPIO_Init+0x218>)
 8001722:	f002 fb8f 	bl	8003e44 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB10 */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	4815      	ldr	r0, [pc, #84]	; (8001794 <MX_GPIO_Init+0x21c>)
 8001740:	f002 fb80 	bl	8003e44 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD4_Pin PD2 PD3 PD4 */
    GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001744:	f241 031c 	movw	r3, #4124	; 0x101c
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4619      	mov	r1, r3
 800175c:	480e      	ldr	r0, [pc, #56]	; (8001798 <MX_GPIO_Init+0x220>)
 800175e:	f002 fb71 	bl	8003e44 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA2 */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001762:	2304      	movs	r3, #4
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	4619      	mov	r1, r3
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <MX_GPIO_Init+0x224>)
 800177a:	f002 fb63 	bl	8003e44 <HAL_GPIO_Init>

}
 800177e:	bf00      	nop
 8001780:	3730      	adds	r7, #48	; 0x30
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40020800 	.word	0x40020800
 8001790:	40021000 	.word	0x40021000
 8001794:	40020400 	.word	0x40020400
 8001798:	40020c00 	.word	0x40020c00
 800179c:	40020000 	.word	0x40020000

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4a07      	ldr	r2, [pc, #28]	; (80017dc <vApplicationGetIdleTaskMemory+0x2c>)
 80017c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <vApplicationGetIdleTaskMemory+0x30>)
 80017c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000240 	.word	0x20000240
 80017e0:	20000294 	.word	0x20000294

080017e4 <keypad_init>:
#include "stm32f4xx_hal.h"
#include "keypad.h"

void keypad_init(void){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b51      	ldr	r3, [pc, #324]	; (8001934 <keypad_init+0x150>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a50      	ldr	r2, [pc, #320]	; (8001934 <keypad_init+0x150>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b4e      	ldr	r3, [pc, #312]	; (8001934 <keypad_init+0x150>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b4a      	ldr	r3, [pc, #296]	; (8001934 <keypad_init+0x150>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a49      	ldr	r2, [pc, #292]	; (8001934 <keypad_init+0x150>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <keypad_init+0x150>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
	
	
  GPIO_InitStruct.Pin 	= ROW1_PIN;
 8001822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW1_PORT, &GPIO_InitStruct);
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4619      	mov	r1, r3
 800183a:	483f      	ldr	r0, [pc, #252]	; (8001938 <keypad_init+0x154>)
 800183c:	f002 fb02 	bl	8003e44 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW2_PIN;
 8001840:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW2_PORT, &GPIO_InitStruct);
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	4619      	mov	r1, r3
 8001858:	4838      	ldr	r0, [pc, #224]	; (800193c <keypad_init+0x158>)
 800185a:	f002 faf3 	bl	8003e44 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW3_PIN;
 800185e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW3_PORT, &GPIO_InitStruct);
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4619      	mov	r1, r3
 8001876:	4831      	ldr	r0, [pc, #196]	; (800193c <keypad_init+0x158>)
 8001878:	f002 fae4 	bl	8003e44 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW4_PIN;
 800187c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW4_PORT, &GPIO_InitStruct);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	4619      	mov	r1, r3
 8001894:	4829      	ldr	r0, [pc, #164]	; (800193c <keypad_init+0x158>)
 8001896:	f002 fad5 	bl	8003e44 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a0:	4825      	ldr	r0, [pc, #148]	; (8001938 <keypad_init+0x154>)
 80018a2:	f002 fc6b 	bl	800417c <HAL_GPIO_WritePin>
	
  HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ac:	4823      	ldr	r0, [pc, #140]	; (800193c <keypad_init+0x158>)
 80018ae:	f002 fc65 	bl	800417c <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b8:	4820      	ldr	r0, [pc, #128]	; (800193c <keypad_init+0x158>)
 80018ba:	f002 fc5f 	bl	800417c <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018c4:	481d      	ldr	r0, [pc, #116]	; (800193c <keypad_init+0x158>)
 80018c6:	f002 fc59 	bl	800417c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 	= COL1_PIN;
 80018ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL1_PORT, &GPIO_InitStruct);
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	4817      	ldr	r0, [pc, #92]	; (800193c <keypad_init+0x158>)
 80018e0:	f002 fab0 	bl	8003e44 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL2_PIN;
 80018e4:	2304      	movs	r3, #4
 80018e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL2_PORT, &GPIO_InitStruct);
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4619      	mov	r1, r3
 80018f6:	4810      	ldr	r0, [pc, #64]	; (8001938 <keypad_init+0x154>)
 80018f8:	f002 faa4 	bl	8003e44 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL3_PIN;
 80018fc:	2301      	movs	r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8001904:	2301      	movs	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL3_PORT, &GPIO_InitStruct);
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	4619      	mov	r1, r3
 800190e:	480a      	ldr	r0, [pc, #40]	; (8001938 <keypad_init+0x154>)
 8001910:	f002 fa98 	bl	8003e44 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL4_PIN;
 8001914:	2310      	movs	r3, #16
 8001916:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 800191c:	2301      	movs	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL4_PORT, &GPIO_InitStruct);
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <keypad_init+0x15c>)
 8001928:	f002 fa8c 	bl	8003e44 <HAL_GPIO_Init>
		
}
 800192c:	bf00      	nop
 800192e:	3720      	adds	r7, #32
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800
 8001938:	40020400 	.word	0x40020400
 800193c:	40021000 	.word	0x40021000
 8001940:	40020800 	.word	0x40020800

08001944 <keypad_read>:

char keypad_read(void){
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
	char letras[4][4]={	{'1','2','3','A'},
 800194a:	4b9a      	ldr	r3, [pc, #616]	; (8001bb4 <keypad_read+0x270>)
 800194c:	463c      	mov	r4, r7
 800194e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                      {'4','5','6','B'},
                      {'7','8','9','C'},
                      {'*','0','#','D'}};
	int  i=0;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
	char valor=0;
 8001958:	2300      	movs	r3, #0
 800195a:	74fb      	strb	r3, [r7, #19]


	for(i=0;i<4;i++){
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e11e      	b.n	8001ba0 <keypad_read+0x25c>
		if(i==0){
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d143      	bne.n	80019f0 <keypad_read+0xac>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_SET);
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800196e:	4892      	ldr	r0, [pc, #584]	; (8001bb8 <keypad_read+0x274>)
 8001970:	f002 fc04 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197a:	488f      	ldr	r0, [pc, #572]	; (8001bb8 <keypad_read+0x274>)
 800197c:	f002 fbfe 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001986:	488c      	ldr	r0, [pc, #560]	; (8001bb8 <keypad_read+0x274>)
 8001988:	f002 fbf8 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001992:	488a      	ldr	r0, [pc, #552]	; (8001bbc <keypad_read+0x278>)
 8001994:	f002 fbf2 	bl	800417c <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 8001998:	200a      	movs	r0, #10
 800199a:	f001 fa87 	bl	8002eac <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[0][0];}	//1
 800199e:	e001      	b.n	80019a4 <keypad_read+0x60>
 80019a0:	783b      	ldrb	r3, [r7, #0]
 80019a2:	74fb      	strb	r3, [r7, #19]
 80019a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a8:	4883      	ldr	r0, [pc, #524]	; (8001bb8 <keypad_read+0x274>)
 80019aa:	f002 fbcf 	bl	800414c <HAL_GPIO_ReadPin>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f5      	beq.n	80019a0 <keypad_read+0x5c>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[0][1];}	//2
 80019b4:	e001      	b.n	80019ba <keypad_read+0x76>
 80019b6:	787b      	ldrb	r3, [r7, #1]
 80019b8:	74fb      	strb	r3, [r7, #19]
 80019ba:	2104      	movs	r1, #4
 80019bc:	487f      	ldr	r0, [pc, #508]	; (8001bbc <keypad_read+0x278>)
 80019be:	f002 fbc5 	bl	800414c <HAL_GPIO_ReadPin>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f6      	beq.n	80019b6 <keypad_read+0x72>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[0][2];}	//3
 80019c8:	e001      	b.n	80019ce <keypad_read+0x8a>
 80019ca:	78bb      	ldrb	r3, [r7, #2]
 80019cc:	74fb      	strb	r3, [r7, #19]
 80019ce:	2101      	movs	r1, #1
 80019d0:	487a      	ldr	r0, [pc, #488]	; (8001bbc <keypad_read+0x278>)
 80019d2:	f002 fbbb 	bl	800414c <HAL_GPIO_ReadPin>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f6      	beq.n	80019ca <keypad_read+0x86>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[0][3];}	//A
 80019dc:	e001      	b.n	80019e2 <keypad_read+0x9e>
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	74fb      	strb	r3, [r7, #19]
 80019e2:	2110      	movs	r1, #16
 80019e4:	4876      	ldr	r0, [pc, #472]	; (8001bc0 <keypad_read+0x27c>)
 80019e6:	f002 fbb1 	bl	800414c <HAL_GPIO_ReadPin>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f6      	beq.n	80019de <keypad_read+0x9a>
		}

		if(i==1){
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d143      	bne.n	8001a7e <keypad_read+0x13a>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019fc:	486f      	ldr	r0, [pc, #444]	; (8001bbc <keypad_read+0x278>)
 80019fe:	f002 fbbd 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 8001a02:	2201      	movs	r2, #1
 8001a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a08:	486b      	ldr	r0, [pc, #428]	; (8001bb8 <keypad_read+0x274>)
 8001a0a:	f002 fbb7 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a14:	4868      	ldr	r0, [pc, #416]	; (8001bb8 <keypad_read+0x274>)
 8001a16:	f002 fbb1 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a20:	4865      	ldr	r0, [pc, #404]	; (8001bb8 <keypad_read+0x274>)
 8001a22:	f002 fbab 	bl	800417c <HAL_GPIO_WritePin>

			HAL_Delay(10);
 8001a26:	200a      	movs	r0, #10
 8001a28:	f001 fa40 	bl	8002eac <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[1][0];}	//4
 8001a2c:	e001      	b.n	8001a32 <keypad_read+0xee>
 8001a2e:	793b      	ldrb	r3, [r7, #4]
 8001a30:	74fb      	strb	r3, [r7, #19]
 8001a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a36:	4860      	ldr	r0, [pc, #384]	; (8001bb8 <keypad_read+0x274>)
 8001a38:	f002 fb88 	bl	800414c <HAL_GPIO_ReadPin>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f5      	beq.n	8001a2e <keypad_read+0xea>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[1][1];}	//5
 8001a42:	e001      	b.n	8001a48 <keypad_read+0x104>
 8001a44:	797b      	ldrb	r3, [r7, #5]
 8001a46:	74fb      	strb	r3, [r7, #19]
 8001a48:	2104      	movs	r1, #4
 8001a4a:	485c      	ldr	r0, [pc, #368]	; (8001bbc <keypad_read+0x278>)
 8001a4c:	f002 fb7e 	bl	800414c <HAL_GPIO_ReadPin>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f6      	beq.n	8001a44 <keypad_read+0x100>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[1][2];}	//6
 8001a56:	e001      	b.n	8001a5c <keypad_read+0x118>
 8001a58:	79bb      	ldrb	r3, [r7, #6]
 8001a5a:	74fb      	strb	r3, [r7, #19]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4857      	ldr	r0, [pc, #348]	; (8001bbc <keypad_read+0x278>)
 8001a60:	f002 fb74 	bl	800414c <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f6      	beq.n	8001a58 <keypad_read+0x114>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[1][3];}	//B
 8001a6a:	e001      	b.n	8001a70 <keypad_read+0x12c>
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	74fb      	strb	r3, [r7, #19]
 8001a70:	2110      	movs	r1, #16
 8001a72:	4853      	ldr	r0, [pc, #332]	; (8001bc0 <keypad_read+0x27c>)
 8001a74:	f002 fb6a 	bl	800414c <HAL_GPIO_ReadPin>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f6      	beq.n	8001a6c <keypad_read+0x128>
		}

		if(i==2){
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d143      	bne.n	8001b0c <keypad_read+0x1c8>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a8a:	484c      	ldr	r0, [pc, #304]	; (8001bbc <keypad_read+0x278>)
 8001a8c:	f002 fb76 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a96:	4848      	ldr	r0, [pc, #288]	; (8001bb8 <keypad_read+0x274>)
 8001a98:	f002 fb70 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aa2:	4845      	ldr	r0, [pc, #276]	; (8001bb8 <keypad_read+0x274>)
 8001aa4:	f002 fb6a 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aae:	4842      	ldr	r0, [pc, #264]	; (8001bb8 <keypad_read+0x274>)
 8001ab0:	f002 fb64 	bl	800417c <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 8001ab4:	200a      	movs	r0, #10
 8001ab6:	f001 f9f9 	bl	8002eac <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[2][0];}	//7
 8001aba:	e001      	b.n	8001ac0 <keypad_read+0x17c>
 8001abc:	7a3b      	ldrb	r3, [r7, #8]
 8001abe:	74fb      	strb	r3, [r7, #19]
 8001ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac4:	483c      	ldr	r0, [pc, #240]	; (8001bb8 <keypad_read+0x274>)
 8001ac6:	f002 fb41 	bl	800414c <HAL_GPIO_ReadPin>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f5      	beq.n	8001abc <keypad_read+0x178>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[2][1];}	//8
 8001ad0:	e001      	b.n	8001ad6 <keypad_read+0x192>
 8001ad2:	7a7b      	ldrb	r3, [r7, #9]
 8001ad4:	74fb      	strb	r3, [r7, #19]
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	4838      	ldr	r0, [pc, #224]	; (8001bbc <keypad_read+0x278>)
 8001ada:	f002 fb37 	bl	800414c <HAL_GPIO_ReadPin>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f6      	beq.n	8001ad2 <keypad_read+0x18e>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[2][2];}	//9
 8001ae4:	e001      	b.n	8001aea <keypad_read+0x1a6>
 8001ae6:	7abb      	ldrb	r3, [r7, #10]
 8001ae8:	74fb      	strb	r3, [r7, #19]
 8001aea:	2101      	movs	r1, #1
 8001aec:	4833      	ldr	r0, [pc, #204]	; (8001bbc <keypad_read+0x278>)
 8001aee:	f002 fb2d 	bl	800414c <HAL_GPIO_ReadPin>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f6      	beq.n	8001ae6 <keypad_read+0x1a2>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[2][3];}	//C
 8001af8:	e001      	b.n	8001afe <keypad_read+0x1ba>
 8001afa:	7afb      	ldrb	r3, [r7, #11]
 8001afc:	74fb      	strb	r3, [r7, #19]
 8001afe:	2110      	movs	r1, #16
 8001b00:	482f      	ldr	r0, [pc, #188]	; (8001bc0 <keypad_read+0x27c>)
 8001b02:	f002 fb23 	bl	800414c <HAL_GPIO_ReadPin>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f6      	beq.n	8001afa <keypad_read+0x1b6>
		}

		if(i==3){
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d143      	bne.n	8001b9a <keypad_read+0x256>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 8001b12:	2201      	movs	r2, #1
 8001b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b18:	4828      	ldr	r0, [pc, #160]	; (8001bbc <keypad_read+0x278>)
 8001b1a:	f002 fb2f 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b24:	4824      	ldr	r0, [pc, #144]	; (8001bb8 <keypad_read+0x274>)
 8001b26:	f002 fb29 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b30:	4821      	ldr	r0, [pc, #132]	; (8001bb8 <keypad_read+0x274>)
 8001b32:	f002 fb23 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b3c:	481e      	ldr	r0, [pc, #120]	; (8001bb8 <keypad_read+0x274>)
 8001b3e:	f002 fb1d 	bl	800417c <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 8001b42:	200a      	movs	r0, #10
 8001b44:	f001 f9b2 	bl	8002eac <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[3][0];}	//*
 8001b48:	e001      	b.n	8001b4e <keypad_read+0x20a>
 8001b4a:	7b3b      	ldrb	r3, [r7, #12]
 8001b4c:	74fb      	strb	r3, [r7, #19]
 8001b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b52:	4819      	ldr	r0, [pc, #100]	; (8001bb8 <keypad_read+0x274>)
 8001b54:	f002 fafa 	bl	800414c <HAL_GPIO_ReadPin>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f5      	beq.n	8001b4a <keypad_read+0x206>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[3][1];}	//0
 8001b5e:	e001      	b.n	8001b64 <keypad_read+0x220>
 8001b60:	7b7b      	ldrb	r3, [r7, #13]
 8001b62:	74fb      	strb	r3, [r7, #19]
 8001b64:	2104      	movs	r1, #4
 8001b66:	4815      	ldr	r0, [pc, #84]	; (8001bbc <keypad_read+0x278>)
 8001b68:	f002 faf0 	bl	800414c <HAL_GPIO_ReadPin>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f6      	beq.n	8001b60 <keypad_read+0x21c>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[3][2];}	//+
 8001b72:	e001      	b.n	8001b78 <keypad_read+0x234>
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
 8001b76:	74fb      	strb	r3, [r7, #19]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4810      	ldr	r0, [pc, #64]	; (8001bbc <keypad_read+0x278>)
 8001b7c:	f002 fae6 	bl	800414c <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f6      	beq.n	8001b74 <keypad_read+0x230>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[3][3];}	//D
 8001b86:	e001      	b.n	8001b8c <keypad_read+0x248>
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	74fb      	strb	r3, [r7, #19]
 8001b8c:	2110      	movs	r1, #16
 8001b8e:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <keypad_read+0x27c>)
 8001b90:	f002 fadc 	bl	800414c <HAL_GPIO_ReadPin>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f6      	beq.n	8001b88 <keypad_read+0x244>
	for(i=0;i<4;i++){
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	f77f aedd 	ble.w	8001962 <keypad_read+0x1e>
		}
	}
	
	return valor;
 8001ba8:	7cfb      	ldrb	r3, [r7, #19]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	371c      	adds	r7, #28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd90      	pop	{r4, r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	08008a20 	.word	0x08008a20
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020800 	.word	0x40020800

08001bc4 <hi2cx_define>:
*/
I2C_HandleTypeDef hi2cx;
extern I2C_HandleTypeDef hi2c1; //* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type(i2c1,i2c2...) you use, default is hi2c1.
                                //That I2C_HandleTypeDef hi2c1 comes from main.c*.
static void hi2cx_define(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	hi2cx = hi2c1;	//* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type you use, default is hi2c1.
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <hi2cx_define+0x18>)
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <hi2cx_define+0x1c>)
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	2354      	movs	r3, #84	; 0x54
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f006 fa8c 	bl	80080f0 <memcpy>
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000494 	.word	0x20000494
 8001be0:	2000018c 	.word	0x2000018c

08001be4 <LCD_i2cDeviceCheck>:
/**
*@brief: Lcd i2c device check.
*@retval: none
*/
void LCD_i2cDeviceCheck(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
	/* Checks if target device is ready for communication. */
	/* 3 is number of trials, 1000ms is timeout */
	HAL_Delay(50);
 8001be8:	2032      	movs	r0, #50	; 0x32
 8001bea:	f001 f95f 	bl	8002eac <HAL_Delay>
	hi2cx_define();
 8001bee:	f7ff ffe9 	bl	8001bc4 <hi2cx_define>
	while (HAL_I2C_IsDeviceReady(&hi2cx, i2cDeviceAddr, 3, 1000) != HAL_OK) 
 8001bf2:	bf00      	nop
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <LCD_i2cDeviceCheck+0x30>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	2203      	movs	r2, #3
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <LCD_i2cDeviceCheck+0x34>)
 8001c02:	f002 fd17 	bl	8004634 <HAL_I2C_IsDeviceReady>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f3      	bne.n	8001bf4 <LCD_i2cDeviceCheck+0x10>
	{	
		
	}
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000494 	.word	0x20000494

08001c1c <LCD_Set_Command>:
/**
*@brief: Send commands to lcd.
*@retval: none
*/
void LCD_Set_Command(uint8_t cmd)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
	data_M = cmd & Mask_Data;        //Most significant bit
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <LCD_Set_Command+0x9c>)
 8001c28:	781a      	ldrb	r2, [r3, #0]
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <LCD_Set_Command+0xa0>)
 8001c32:	701a      	strb	r2, [r3, #0]
	data_L = (cmd << 4) & Mask_Data; //Least significant bit
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	b25a      	sxtb	r2, r3
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <LCD_Set_Command+0x9c>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b25b      	sxtb	r3, r3
 8001c40:	4013      	ands	r3, r2
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <LCD_Set_Command+0xa4>)
 8001c48:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <LCD_Set_Command+0xa0>)
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <LCD_Set_Command+0xa8>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <LCD_Set_Command+0xa0>)
 8001c58:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <LCD_Set_Command+0xa4>)
 8001c5c:	781a      	ldrb	r2, [r3, #0]
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <LCD_Set_Command+0xa8>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <LCD_Set_Command+0xa4>)
 8001c68:	701a      	strb	r2, [r3, #0]
	
	data[0] = data_M | LCD_E;  //Enable E pin, RS=0
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <LCD_Set_Command+0xa0>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <LCD_Set_Command+0xac>)
 8001c76:	701a      	strb	r2, [r3, #0]
	data[1] = data_M;          //Disable E pin, RS=0
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <LCD_Set_Command+0xa0>)
 8001c7a:	781a      	ldrb	r2, [r3, #0]
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <LCD_Set_Command+0xac>)
 8001c7e:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <LCD_Set_Command+0xa4>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <LCD_Set_Command+0xac>)
 8001c8c:	709a      	strb	r2, [r3, #2]
  data[3] = data_L;
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <LCD_Set_Command+0xa4>)
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <LCD_Set_Command+0xac>)
 8001c94:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();	
 8001c96:	f7ff ff95 	bl	8001bc4 <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <LCD_Set_Command+0xb0>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b299      	uxth	r1, r3
 8001ca0:	23c8      	movs	r3, #200	; 0xc8
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <LCD_Set_Command+0xac>)
 8001ca8:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <LCD_Set_Command+0xb4>)
 8001caa:	f002 fbc5 	bl	8004438 <HAL_I2C_Master_Transmit>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000001 	.word	0x20000001
 8001cbc:	200004ec 	.word	0x200004ec
 8001cc0:	200004ed 	.word	0x200004ed
 8001cc4:	200004ee 	.word	0x200004ee
 8001cc8:	200004e8 	.word	0x200004e8
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000494 	.word	0x20000494

08001cd4 <LCD_Write_Data>:
/**
*@brief: Write data to lcd.
*@retval: none
*/
void LCD_Write_Data(uint8_t datax)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
	data_M = datax & Mask_Data;        //Most significant bit
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <LCD_Write_Data+0xa8>)
 8001ce0:	781a      	ldrb	r2, [r3, #0]
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <LCD_Write_Data+0xac>)
 8001cea:	701a      	strb	r2, [r3, #0]
	data_L = (datax << 4) & Mask_Data; //Least significant bit
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	b25a      	sxtb	r2, r3
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <LCD_Write_Data+0xa8>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <LCD_Write_Data+0xb0>)
 8001d00:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <LCD_Write_Data+0xac>)
 8001d04:	781a      	ldrb	r2, [r3, #0]
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <LCD_Write_Data+0xb4>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <LCD_Write_Data+0xac>)
 8001d10:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <LCD_Write_Data+0xb0>)
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <LCD_Write_Data+0xb4>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <LCD_Write_Data+0xb0>)
 8001d20:	701a      	strb	r2, [r3, #0]
	 	
	data[0] = data_M | LCD_E|LCD_RS;  //Enable E pin, RS=1
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <LCD_Write_Data+0xac>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	f043 0305 	orr.w	r3, r3, #5
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <LCD_Write_Data+0xb8>)
 8001d2e:	701a      	strb	r2, [r3, #0]
	data[1] = data_M | LCD_RS;        //Disable E pin, RS=1
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <LCD_Write_Data+0xac>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <LCD_Write_Data+0xb8>)
 8001d3c:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E|LCD_RS;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <LCD_Write_Data+0xb0>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	f043 0305 	orr.w	r3, r3, #5
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <LCD_Write_Data+0xb8>)
 8001d4a:	709a      	strb	r2, [r3, #2]
  data[3] = data_L | LCD_RS;  
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <LCD_Write_Data+0xb0>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <LCD_Write_Data+0xb8>)
 8001d58:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();
 8001d5a:	f7ff ff33 	bl	8001bc4 <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <LCD_Write_Data+0xbc>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b299      	uxth	r1, r3
 8001d64:	23c8      	movs	r3, #200	; 0xc8
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2304      	movs	r3, #4
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <LCD_Write_Data+0xb8>)
 8001d6c:	4809      	ldr	r0, [pc, #36]	; (8001d94 <LCD_Write_Data+0xc0>)
 8001d6e:	f002 fb63 	bl	8004438 <HAL_I2C_Master_Transmit>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000001 	.word	0x20000001
 8001d80:	200004ec 	.word	0x200004ec
 8001d84:	200004ed 	.word	0x200004ed
 8001d88:	200004ee 	.word	0x200004ee
 8001d8c:	200004e8 	.word	0x200004e8
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000494 	.word	0x20000494

08001d98 <LCD_Clear>:
/**
*@brief: Clear lcd display.
*@retval: none
*/
void LCD_Clear(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7ff ff3d 	bl	8001c1c <LCD_Set_Command>
	HAL_Delay(10);
 8001da2:	200a      	movs	r0, #10
 8001da4:	f001 f882 	bl	8002eac <HAL_Delay>
	str_len = 0;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <LCD_Clear+0x20>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
	line_pos = 1;
 8001dae:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <LCD_Clear+0x24>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200004ef 	.word	0x200004ef
 8001dbc:	20000002 	.word	0x20000002

08001dc0 <LCD_SetCursor>:
*@brief: Set lcd cursor position.
*@param: line_x: line no, chr_x: character no.
*@retval: none
*/
void LCD_SetCursor(int line_x, int chr_x)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  line_pos = line_x; //hold line position.	
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <LCD_SetCursor+0x58>)
 8001dd0:	701a      	strb	r2, [r3, #0]
	
	if(((line_x >=1 && line_x <= line_MAX) && (chr_x >=1 && chr_x <= chr_MAX)))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	dd1b      	ble.n	8001e10 <LCD_SetCursor+0x50>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	461a      	mov	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4293      	cmp	r3, r2
 8001de0:	dc16      	bgt.n	8001e10 <LCD_SetCursor+0x50>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	dd13      	ble.n	8001e10 <LCD_SetCursor+0x50>
 8001de8:	2310      	movs	r3, #16
 8001dea:	461a      	mov	r2, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4293      	cmp	r3, r2
 8001df0:	dc0e      	bgt.n	8001e10 <LCD_SetCursor+0x50>
	{		
		LCD_Set_Command(LCD_SET_DDRAMADDR | Cursor_Data[line_x - 1][chr_x - 1]);		
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	1e5a      	subs	r2, r3, #1
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <LCD_SetCursor+0x5c>)
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	440a      	add	r2, r1
 8001e00:	4413      	add	r3, r2
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff06 	bl	8001c1c <LCD_Set_Command>
	}
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000002 	.word	0x20000002
 8001e1c:	08008af8 	.word	0x08008af8

08001e20 <LCD_Send_String>:
*@brief: Send string data to lcd.
*@param: str[]: string array, mode: str slide/noslide.
*@retval: none
*/
void LCD_Send_String(char str[], uint8_t mode)
{	 
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
	static char *buffer[100];
	static uint8_t i[4] = {chr_MAX,chr_MAX,chr_MAX,chr_MAX}; //i follows the ch position while sliding.
  static uint8_t c[4] = {0, 0, 0, 0}; //c follows the each ch of the str buffer while sliding.
  static uint8_t ch_len = 0; //follow the string lenght.
  str_len = 0;
 8001e2c:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <LCD_Send_String+0x154>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
	

	switch(mode)
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01e      	beq.n	8001e76 <LCD_Send_String+0x56>
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d021      	beq.n	8001e80 <LCD_Send_String+0x60>
					}												
			}
		 			
			break;	 
	}	
}
 8001e3c:	e096      	b.n	8001f6c <LCD_Send_String+0x14c>
				LCD_Write_Data (*str++);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff44 	bl	8001cd4 <LCD_Write_Data>
				str_len++;
 8001e4c:	4b49      	ldr	r3, [pc, #292]	; (8001f74 <LCD_Send_String+0x154>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <LCD_Send_String+0x154>)
 8001e56:	701a      	strb	r2, [r3, #0]
				if(str_len == chr_MAX)
 8001e58:	4b46      	ldr	r3, [pc, #280]	; (8001f74 <LCD_Send_String+0x154>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2210      	movs	r2, #16
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d109      	bne.n	8001e76 <LCD_Send_String+0x56>
					LCD_SetCursor(line_pos + 1, 1);
 8001e62:	4b45      	ldr	r3, [pc, #276]	; (8001f78 <LCD_Send_String+0x158>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	2101      	movs	r1, #1
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ffa8 	bl	8001dc0 <LCD_SetCursor>
					str_len = 0;
 8001e70:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <LCD_Send_String+0x154>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
			while (*str) 
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1df      	bne.n	8001e3e <LCD_Send_String+0x1e>
			break;
 8001e7e:	e075      	b.n	8001f6c <LCD_Send_String+0x14c>
		  for(int a = 0; a < BFR_MAX; a++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e009      	b.n	8001e9a <LCD_Send_String+0x7a>
		  buffer[a]=str++;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	493b      	ldr	r1, [pc, #236]	; (8001f7c <LCD_Send_String+0x15c>)
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		  for(int a = 0; a < BFR_MAX; a++)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	2364      	movs	r3, #100	; 0x64
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	dbf0      	blt.n	8001e86 <LCD_Send_String+0x66>
			ch_len = strlen(*buffer);
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <LCD_Send_String+0x15c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe f999 	bl	80001e0 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <LCD_Send_String+0x160>)
 8001eb4:	701a      	strb	r2, [r3, #0]
			LCD_SetCursor(line_pos, i[line_pos - 1]);	
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <LCD_Send_String+0x158>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	4b2e      	ldr	r3, [pc, #184]	; (8001f78 <LCD_Send_String+0x158>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	4a30      	ldr	r2, [pc, #192]	; (8001f84 <LCD_Send_String+0x164>)
 8001ec4:	5cd3      	ldrb	r3, [r2, r3]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f7ff ff7a 	bl	8001dc0 <LCD_SetCursor>
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <LCD_Send_String+0x158>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	4a2d      	ldr	r2, [pc, #180]	; (8001f88 <LCD_Send_String+0x168>)
 8001ed4:	5cd3      	ldrb	r3, [r2, r3]
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	e00a      	b.n	8001ef0 <LCD_Send_String+0xd0>
			LCD_Write_Data (*buffer[k]);
 8001eda:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <LCD_Send_String+0x15c>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fef5 	bl	8001cd4 <LCD_Write_Data>
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	3301      	adds	r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <LCD_Send_String+0x160>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	dbee      	blt.n	8001eda <LCD_Send_String+0xba>
			i[line_pos - 1]--;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <LCD_Send_String+0x158>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	4a20      	ldr	r2, [pc, #128]	; (8001f84 <LCD_Send_String+0x164>)
 8001f04:	5cd2      	ldrb	r2, [r2, r3]
 8001f06:	3a01      	subs	r2, #1
 8001f08:	b2d1      	uxtb	r1, r2
 8001f0a:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <LCD_Send_String+0x164>)
 8001f0c:	54d1      	strb	r1, [r2, r3]
			if(i[line_pos -1] == 0)
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <LCD_Send_String+0x158>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <LCD_Send_String+0x164>)
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d126      	bne.n	8001f6a <LCD_Send_String+0x14a>
				i[line_pos - 1] = 1;
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <LCD_Send_String+0x158>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <LCD_Send_String+0x164>)
 8001f24:	2101      	movs	r1, #1
 8001f26:	54d1      	strb	r1, [r2, r3]
				c[line_pos - 1]++;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <LCD_Send_String+0x158>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <LCD_Send_String+0x168>)
 8001f30:	5cd2      	ldrb	r2, [r2, r3]
 8001f32:	3201      	adds	r2, #1
 8001f34:	b2d1      	uxtb	r1, r2
 8001f36:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <LCD_Send_String+0x168>)
 8001f38:	54d1      	strb	r1, [r2, r3]
        if(c[line_pos - 1] == ch_len)
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <LCD_Send_String+0x158>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <LCD_Send_String+0x168>)
 8001f42:	5cd2      	ldrb	r2, [r2, r3]
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <LCD_Send_String+0x160>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d10e      	bne.n	8001f6a <LCD_Send_String+0x14a>
						i[line_pos - 1] = chr_MAX;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <LCD_Send_String+0x158>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	2110      	movs	r1, #16
 8001f54:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <LCD_Send_String+0x164>)
 8001f56:	54d1      	strb	r1, [r2, r3]
						c[line_pos - 1] = 0;
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <LCD_Send_String+0x158>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <LCD_Send_String+0x168>)
 8001f60:	2100      	movs	r1, #0
 8001f62:	54d1      	strb	r1, [r2, r3]
						ch_len = 0;						
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <LCD_Send_String+0x160>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
			break;	 
 8001f6a:	bf00      	nop
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200004ef 	.word	0x200004ef
 8001f78:	20000002 	.word	0x20000002
 8001f7c:	200004f0 	.word	0x200004f0
 8001f80:	20000680 	.word	0x20000680
 8001f84:	20000004 	.word	0x20000004
 8001f88:	20000684 	.word	0x20000684

08001f8c <LCD_Print>:
*@brief: Print value, ch to lcd.
*@param: *ch: "string + %f", value: float data variable
*@retval: none
*/
void LCD_Print(char const *ch, uint32_t value)       //antes estaba en float lo cambie
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b09c      	sub	sp, #112	; 0x70
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
	char data_ch[100]; //default data size:100.
	
	sprintf(data_ch, ch, value);
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f006 f8bc 	bl	800811c <siprintf>
	LCD_Send_String(data_ch, STR_NOSLIDE);	
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff38 	bl	8001e20 <LCD_Send_String>
}
 8001fb0:	bf00      	nop
 8001fb2:	3770      	adds	r7, #112	; 0x70
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <LCD_BackLight>:
*@brief: Backlight control
*@param: light_state: BL on/off
*@retval: none
*/
void LCD_BackLight(uint8_t light_state)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
	if(light_state == LCD_BL_ON)
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d106      	bne.n	8001fd6 <LCD_BackLight+0x1e>
	{
    data_BL = LCD_BL_ON;		
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <LCD_BackLight+0x38>)
 8001fca:	2208      	movs	r2, #8
 8001fcc:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20); //Empty character
 8001fce:	2020      	movs	r0, #32
 8001fd0:	f7ff fe80 	bl	8001cd4 <LCD_Write_Data>
	else if (light_state == LCD_BL_OFF)
	{
		data_BL = LCD_BL_OFF;
		LCD_Write_Data(0x20);
	}
}
 8001fd4:	e008      	b.n	8001fe8 <LCD_BackLight+0x30>
	else if (light_state == LCD_BL_OFF)
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d105      	bne.n	8001fe8 <LCD_BackLight+0x30>
		data_BL = LCD_BL_OFF;
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <LCD_BackLight+0x38>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20);
 8001fe2:	2020      	movs	r0, #32
 8001fe4:	f7ff fe76 	bl	8001cd4 <LCD_Write_Data>
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	200004ee 	.word	0x200004ee

08001ff4 <LCD_Init>:
/**
*@brief: Lcd initiliazing settings.
*@retval: none
*/
void LCD_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7ff fe0f 	bl	8001c1c <LCD_Set_Command>
	HAL_Delay(1000);
 8001ffe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002002:	f000 ff53 	bl	8002eac <HAL_Delay>
	LCD_Set_Command(LCD_RETURN_HOME);
 8002006:	2002      	movs	r0, #2
 8002008:	f7ff fe08 	bl	8001c1c <LCD_Set_Command>
	HAL_Delay(5);
 800200c:	2005      	movs	r0, #5
 800200e:	f000 ff4d 	bl	8002eac <HAL_Delay>
	LCD_Set_Command(LCD_FUNCTION_SET|MODE_4B|MODE_2L|MODE_5X8_DOTS);
 8002012:	2028      	movs	r0, #40	; 0x28
 8002014:	f7ff fe02 	bl	8001c1c <LCD_Set_Command>
	HAL_Delay(5);
 8002018:	2005      	movs	r0, #5
 800201a:	f000 ff47 	bl	8002eac <HAL_Delay>
	LCD_Set_Command(LCD_DISPLAY_CONTROL|DISPLAY_ON|CURSOR_OFF|BLINK_OFF);
 800201e:	200c      	movs	r0, #12
 8002020:	f7ff fdfc 	bl	8001c1c <LCD_Set_Command>
	HAL_Delay(5);
 8002024:	2005      	movs	r0, #5
 8002026:	f000 ff41 	bl	8002eac <HAL_Delay>
	LCD_Set_Command(LCD_SET_DDRAMADDR);
 800202a:	2080      	movs	r0, #128	; 0x80
 800202c:	f7ff fdf6 	bl	8001c1c <LCD_Set_Command>
	HAL_Delay(500);
 8002030:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002034:	f000 ff3a 	bl	8002eac <HAL_Delay>
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}

0800203c <main>:
void KeypadTask(void const * argument);
void SensorsTask(void const * argument);
void StateMachineTask(void const * argument);

int main(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af02      	add	r7, sp, #8
  BSP_Init();
 8002042:	f7ff f8a9 	bl	8001198 <BSP_Init>
  APP_Show_SystemIntro();
 8002046:	f000 fc97 	bl	8002978 <APP_Show_SystemIntro>

  Queue1Handle = xQueueCreate(3, sizeof(LCD_DataTypeDef));
 800204a:	2200      	movs	r2, #0
 800204c:	2103      	movs	r1, #3
 800204e:	2003      	movs	r0, #3
 8002050:	f004 f996 	bl	8006380 <xQueueGenericCreate>
 8002054:	4603      	mov	r3, r0
 8002056:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <main+0x88>)
 8002058:	6013      	str	r3, [r2, #0]
  Queue3Handle = xQueueCreate(3, sizeof(uint8_t));
 800205a:	2200      	movs	r2, #0
 800205c:	2101      	movs	r1, #1
 800205e:	2003      	movs	r0, #3
 8002060:	f004 f98e 	bl	8006380 <xQueueGenericCreate>
 8002064:	4603      	mov	r3, r0
 8002066:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <main+0x8c>)
 8002068:	6013      	str	r3, [r2, #0]
  Queue5Handle = xQueueCreate(3, sizeof(uint8_t));
 800206a:	2200      	movs	r2, #0
 800206c:	2101      	movs	r1, #1
 800206e:	2003      	movs	r0, #3
 8002070:	f004 f986 	bl	8006380 <xQueueGenericCreate>
 8002074:	4603      	mov	r3, r0
 8002076:	4a15      	ldr	r2, [pc, #84]	; (80020cc <main+0x90>)
 8002078:	6013      	str	r3, [r2, #0]

  xTaskCreate(KeypadTask, "KeypadTask", 512, NULL, 0, NULL);
 800207a:	2300      	movs	r3, #0
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	2300      	movs	r3, #0
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2300      	movs	r3, #0
 8002084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002088:	4911      	ldr	r1, [pc, #68]	; (80020d0 <main+0x94>)
 800208a:	4812      	ldr	r0, [pc, #72]	; (80020d4 <main+0x98>)
 800208c:	f004 fdab 	bl	8006be6 <xTaskCreate>
  xTaskCreate(SensorsTask, "SensorsTask", 512, NULL, 2, NULL);
 8002090:	2300      	movs	r3, #0
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	2302      	movs	r3, #2
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2300      	movs	r3, #0
 800209a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209e:	490e      	ldr	r1, [pc, #56]	; (80020d8 <main+0x9c>)
 80020a0:	480e      	ldr	r0, [pc, #56]	; (80020dc <main+0xa0>)
 80020a2:	f004 fda0 	bl	8006be6 <xTaskCreate>
  xTaskCreate(StateMachineTask, "UserInterfaceTask", 1280, NULL, 1, NULL);
 80020a6:	2300      	movs	r3, #0
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	2301      	movs	r3, #1
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	2300      	movs	r3, #0
 80020b0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80020b4:	490a      	ldr	r1, [pc, #40]	; (80020e0 <main+0xa4>)
 80020b6:	480b      	ldr	r0, [pc, #44]	; (80020e4 <main+0xa8>)
 80020b8:	f004 fd95 	bl	8006be6 <xTaskCreate>

  vTaskStartScheduler();
 80020bc:	f004 fefe 	bl	8006ebc <vTaskStartScheduler>

  while (1)
 80020c0:	e7fe      	b.n	80020c0 <main+0x84>
 80020c2:	bf00      	nop
 80020c4:	20000688 	.word	0x20000688
 80020c8:	2000068c 	.word	0x2000068c
 80020cc:	20000690 	.word	0x20000690
 80020d0:	08008a30 	.word	0x08008a30
 80020d4:	0800210d 	.word	0x0800210d
 80020d8:	08008a3c 	.word	0x08008a3c
 80020dc:	08002141 	.word	0x08002141
 80020e0:	08008a48 	.word	0x08008a48
 80020e4:	08002199 	.word	0x08002199

080020e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a04      	ldr	r2, [pc, #16]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d101      	bne.n	80020fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020fa:	f000 feb7 	bl	8002e6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40000c00 	.word	0x40000c00

0800210c <KeypadTask>:

void KeypadTask(void const * argument)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	uint8_t key;

  for(;;)
  {
	  key = keypad_read();
 8002114:	f7ff fc16 	bl	8001944 <keypad_read>
 8002118:	4603      	mov	r3, r0
 800211a:	73fb      	strb	r3, [r7, #15]

	if(key != 0){
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <KeypadTask+0x28>

		xQueueSend(Queue3Handle, &key, 5000);
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <KeypadTask+0x30>)
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	f107 010f 	add.w	r1, r7, #15
 800212a:	2300      	movs	r3, #0
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	f004 f988 	bl	8006444 <xQueueGenericSend>
	}
    vTaskDelay(10);
 8002134:	200a      	movs	r0, #10
 8002136:	f004 fe8d 	bl	8006e54 <vTaskDelay>
	  key = keypad_read();
 800213a:	e7eb      	b.n	8002114 <KeypadTask+0x8>
 800213c:	2000068c 	.word	0x2000068c

08002140 <SensorsTask>:
  }
}

void SensorsTask(void const * argument){
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	DHT_DataTypeDef DHT22;
	LCD_DataTypeDef LCD_Data;

	while(1){

		DHT_GetData(&DHT22);
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fee5 	bl	8000f1c <DHT_GetData>
		LCD_Data.humidity = DHT22.Humidity;
 8002152:	7b7b      	ldrb	r3, [r7, #13]
 8002154:	727b      	strb	r3, [r7, #9]
		LCD_Data.temperature = DHT22.Temperature;
 8002156:	7b3b      	ldrb	r3, [r7, #12]
 8002158:	723b      	strb	r3, [r7, #8]
		LCD_Data.soilHumidity = APP_SoilHumidity();
 800215a:	f000 fc27 	bl	80029ac <APP_SoilHumidity>
 800215e:	4603      	mov	r3, r0
 8002160:	72bb      	strb	r3, [r7, #10]
		xQueueSend(Queue1Handle, &LCD_Data, 0);
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <SensorsTask+0x50>)
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	f107 0108 	add.w	r1, r7, #8
 800216a:	2300      	movs	r3, #0
 800216c:	2200      	movs	r2, #0
 800216e:	f004 f969 	bl	8006444 <xQueueGenericSend>
		xQueueSend(Queue5Handle, &LCD_Data.soilHumidity, 0);
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <SensorsTask+0x54>)
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	1c99      	adds	r1, r3, #2
 800217c:	2300      	movs	r3, #0
 800217e:	2200      	movs	r2, #0
 8002180:	f004 f960 	bl	8006444 <xQueueGenericSend>
		vTaskDelay(1100);
 8002184:	f240 404c 	movw	r0, #1100	; 0x44c
 8002188:	f004 fe64 	bl	8006e54 <vTaskDelay>
		DHT_GetData(&DHT22);
 800218c:	e7dc      	b.n	8002148 <SensorsTask+0x8>
 800218e:	bf00      	nop
 8002190:	20000688 	.word	0x20000688
 8002194:	20000690 	.word	0x20000690

08002198 <StateMachineTask>:
	}
}

void StateMachineTask(void const * argument){
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

	uint8_t rx_key;
	uint8_t state = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	75fb      	strb	r3, [r7, #23]
	LCD_DataTypeDef LCD_Data;
	uint8_t irrigationHumidity;
	uint8_t rangohmin = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	75bb      	strb	r3, [r7, #22]
	uint8_t rangohmax = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	757b      	strb	r3, [r7, #21]

	while(1){

		xQueueReceive(Queue5Handle, &irrigationHumidity, 0);
 80021ac:	4bd4      	ldr	r3, [pc, #848]	; (8002500 <StateMachineTask+0x368>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f107 010f 	add.w	r1, r7, #15
 80021b4:	2200      	movs	r2, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 fa60 	bl	800667c <xQueueReceive>

			if(state == 6){
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
 80021be:	2b06      	cmp	r3, #6
 80021c0:	f040 808c 	bne.w	80022dc <StateMachineTask+0x144>

			 LCD_SetCursor(1, 1);
 80021c4:	2101      	movs	r1, #1
 80021c6:	2001      	movs	r0, #1
 80021c8:	f7ff fdfa 	bl	8001dc0 <LCD_SetCursor>
			 LCD_Print("                ", 1);
 80021cc:	2101      	movs	r1, #1
 80021ce:	48cd      	ldr	r0, [pc, #820]	; (8002504 <StateMachineTask+0x36c>)
 80021d0:	f7ff fedc 	bl	8001f8c <LCD_Print>
			 LCD_SetCursor(2, 1);
 80021d4:	2101      	movs	r1, #1
 80021d6:	2002      	movs	r0, #2
 80021d8:	f7ff fdf2 	bl	8001dc0 <LCD_SetCursor>
			 LCD_Print("    REGANDO     ", 1);
 80021dc:	2101      	movs	r1, #1
 80021de:	48ca      	ldr	r0, [pc, #808]	; (8002508 <StateMachineTask+0x370>)
 80021e0:	f7ff fed4 	bl	8001f8c <LCD_Print>

				if (irrigationHumidity < rangohmin){
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	7dba      	ldrb	r2, [r7, #22]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d901      	bls.n	80021f0 <StateMachineTask+0x58>
					BSP_TurnOn_Valve();
 80021ec:	f7ff f8ac 	bl	8001348 <BSP_TurnOn_Valve>
				}
			 	 if (irrigationHumidity >= rangohmax){
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	7d7a      	ldrb	r2, [r7, #21]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d803      	bhi.n	8002200 <StateMachineTask+0x68>
					BSP_TurnOff_Valve();
 80021f8:	f7ff f8be 	bl	8001378 <BSP_TurnOff_Valve>
					state = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	75fb      	strb	r3, [r7, #23]
				 }
			if(xQueueReceive(Queue3Handle, &rx_key, 0) == pdTRUE){
 8002200:	4bc2      	ldr	r3, [pc, #776]	; (800250c <StateMachineTask+0x374>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f107 0114 	add.w	r1, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f004 fa36 	bl	800667c <xQueueReceive>
 8002210:	4603      	mov	r3, r0
 8002212:	2b01      	cmp	r3, #1
 8002214:	d162      	bne.n	80022dc <StateMachineTask+0x144>
				switch (rx_key) {
 8002216:	7d3b      	ldrb	r3, [r7, #20]
 8002218:	3b23      	subs	r3, #35	; 0x23
 800221a:	2b21      	cmp	r3, #33	; 0x21
 800221c:	d85f      	bhi.n	80022de <StateMachineTask+0x146>
 800221e:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <StateMachineTask+0x8c>)
 8002220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002224:	080022d1 	.word	0x080022d1
 8002228:	080022df 	.word	0x080022df
 800222c:	080022df 	.word	0x080022df
 8002230:	080022df 	.word	0x080022df
 8002234:	080022df 	.word	0x080022df
 8002238:	080022df 	.word	0x080022df
 800223c:	080022df 	.word	0x080022df
 8002240:	080022ad 	.word	0x080022ad
 8002244:	080022df 	.word	0x080022df
 8002248:	080022df 	.word	0x080022df
 800224c:	080022df 	.word	0x080022df
 8002250:	080022df 	.word	0x080022df
 8002254:	080022df 	.word	0x080022df
 8002258:	080022cb 	.word	0x080022cb
 800225c:	080022df 	.word	0x080022df
 8002260:	080022df 	.word	0x080022df
 8002264:	080022df 	.word	0x080022df
 8002268:	080022df 	.word	0x080022df
 800226c:	080022df 	.word	0x080022df
 8002270:	080022df 	.word	0x080022df
 8002274:	080022df 	.word	0x080022df
 8002278:	080022df 	.word	0x080022df
 800227c:	080022df 	.word	0x080022df
 8002280:	080022df 	.word	0x080022df
 8002284:	080022df 	.word	0x080022df
 8002288:	080022df 	.word	0x080022df
 800228c:	080022df 	.word	0x080022df
 8002290:	080022df 	.word	0x080022df
 8002294:	080022df 	.word	0x080022df
 8002298:	080022df 	.word	0x080022df
 800229c:	080022b7 	.word	0x080022b7
 80022a0:	080022df 	.word	0x080022df
 80022a4:	080022c1 	.word	0x080022c1
 80022a8:	080022d7 	.word	0x080022d7

					case 42: state = 1; BSP_TurnOff_Valve(); break;							 //TECLA 'A'
 80022ac:	2301      	movs	r3, #1
 80022ae:	75fb      	strb	r3, [r7, #23]
 80022b0:	f7ff f862 	bl	8001378 <BSP_TurnOff_Valve>
 80022b4:	e013      	b.n	80022de <StateMachineTask+0x146>
					case 65: state = 1; BSP_TurnOff_Valve(); break;
 80022b6:	2301      	movs	r3, #1
 80022b8:	75fb      	strb	r3, [r7, #23]
 80022ba:	f7ff f85d 	bl	8001378 <BSP_TurnOff_Valve>
 80022be:	e00e      	b.n	80022de <StateMachineTask+0x146>
					case 67: state = 1; BSP_TurnOff_Valve(); break;
 80022c0:	2301      	movs	r3, #1
 80022c2:	75fb      	strb	r3, [r7, #23]
 80022c4:	f7ff f858 	bl	8001378 <BSP_TurnOff_Valve>
 80022c8:	e009      	b.n	80022de <StateMachineTask+0x146>
					case 48: state = 6; break;							 //TECLA 'B'
 80022ca:	2306      	movs	r3, #6
 80022cc:	75fb      	strb	r3, [r7, #23]
 80022ce:	e006      	b.n	80022de <StateMachineTask+0x146>
					case 35: state = 6; break;                           //TECLA 'C'
 80022d0:	2306      	movs	r3, #6
 80022d2:	75fb      	strb	r3, [r7, #23]
 80022d4:	e003      	b.n	80022de <StateMachineTask+0x146>
					case 68: state = 6; break;                           //TECLA 'D'
 80022d6:	2306      	movs	r3, #6
 80022d8:	75fb      	strb	r3, [r7, #23]
 80022da:	e000      	b.n	80022de <StateMachineTask+0x146>

					}
				}
 80022dc:	bf00      	nop
			}

			if(state == 0){
 80022de:	7dfb      	ldrb	r3, [r7, #23]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f040 808c 	bne.w	80023fe <StateMachineTask+0x266>
				xQueueReceive(Queue1Handle, &LCD_Data, 0);
 80022e6:	4b8a      	ldr	r3, [pc, #552]	; (8002510 <StateMachineTask+0x378>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f107 0110 	add.w	r1, r7, #16
 80022ee:	2200      	movs	r2, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f004 f9c3 	bl	800667c <xQueueReceive>
				BSP_LCD_Humidity(LCD_Data.humidity);
 80022f6:	7c7b      	ldrb	r3, [r7, #17]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe ff99 	bl	8001230 <BSP_LCD_Humidity>
				BSP_LCD_Temperature(LCD_Data.temperature);
 80022fe:	7c3b      	ldrb	r3, [r7, #16]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe ff81 	bl	8001208 <BSP_LCD_Temperature>
				BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 8002306:	7cbb      	ldrb	r3, [r7, #18]
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe ffa5 	bl	8001258 <BSP_LCD_SoilHumidity>

				if(xQueueReceive(Queue3Handle, &rx_key, 0) == pdTRUE){
 800230e:	4b7f      	ldr	r3, [pc, #508]	; (800250c <StateMachineTask+0x374>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f107 0114 	add.w	r1, r7, #20
 8002316:	2200      	movs	r2, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f004 f9af 	bl	800667c <xQueueReceive>
 800231e:	4603      	mov	r3, r0
 8002320:	2b01      	cmp	r3, #1
 8002322:	d15d      	bne.n	80023e0 <StateMachineTask+0x248>
					switch (rx_key) {
 8002324:	7d3b      	ldrb	r3, [r7, #20]
 8002326:	3b23      	subs	r3, #35	; 0x23
 8002328:	2b21      	cmp	r3, #33	; 0x21
 800232a:	d85a      	bhi.n	80023e2 <StateMachineTask+0x24a>
 800232c:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <StateMachineTask+0x19c>)
 800232e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002332:	bf00      	nop
 8002334:	080023d5 	.word	0x080023d5
 8002338:	080023e3 	.word	0x080023e3
 800233c:	080023e3 	.word	0x080023e3
 8002340:	080023e3 	.word	0x080023e3
 8002344:	080023e3 	.word	0x080023e3
 8002348:	080023e3 	.word	0x080023e3
 800234c:	080023e3 	.word	0x080023e3
 8002350:	080023bd 	.word	0x080023bd
 8002354:	080023e3 	.word	0x080023e3
 8002358:	080023e3 	.word	0x080023e3
 800235c:	080023e3 	.word	0x080023e3
 8002360:	080023e3 	.word	0x080023e3
 8002364:	080023e3 	.word	0x080023e3
 8002368:	080023cf 	.word	0x080023cf
 800236c:	080023e3 	.word	0x080023e3
 8002370:	080023e3 	.word	0x080023e3
 8002374:	080023e3 	.word	0x080023e3
 8002378:	080023e3 	.word	0x080023e3
 800237c:	080023e3 	.word	0x080023e3
 8002380:	080023e3 	.word	0x080023e3
 8002384:	080023e3 	.word	0x080023e3
 8002388:	080023e3 	.word	0x080023e3
 800238c:	080023e3 	.word	0x080023e3
 8002390:	080023e3 	.word	0x080023e3
 8002394:	080023e3 	.word	0x080023e3
 8002398:	080023e3 	.word	0x080023e3
 800239c:	080023e3 	.word	0x080023e3
 80023a0:	080023e3 	.word	0x080023e3
 80023a4:	080023e3 	.word	0x080023e3
 80023a8:	080023e3 	.word	0x080023e3
 80023ac:	080023c3 	.word	0x080023c3
 80023b0:	080023e3 	.word	0x080023e3
 80023b4:	080023c9 	.word	0x080023c9
 80023b8:	080023db 	.word	0x080023db

					            case 42: state = 1; break;							 //TECLA 'A'
 80023bc:	2301      	movs	r3, #1
 80023be:	75fb      	strb	r3, [r7, #23]
 80023c0:	e00f      	b.n	80023e2 <StateMachineTask+0x24a>
					            case 65: state = 1; break;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
 80023c6:	e00c      	b.n	80023e2 <StateMachineTask+0x24a>
					            case 67: state = 1; break;
 80023c8:	2301      	movs	r3, #1
 80023ca:	75fb      	strb	r3, [r7, #23]
 80023cc:	e009      	b.n	80023e2 <StateMachineTask+0x24a>
					            case 48: state = 0; break;							 //TECLA 'B'
 80023ce:	2300      	movs	r3, #0
 80023d0:	75fb      	strb	r3, [r7, #23]
 80023d2:	e006      	b.n	80023e2 <StateMachineTask+0x24a>
					            case 35: state = 0; break;                           //TECLA 'C'
 80023d4:	2300      	movs	r3, #0
 80023d6:	75fb      	strb	r3, [r7, #23]
 80023d8:	e003      	b.n	80023e2 <StateMachineTask+0x24a>
					            case 68: state = 0; break;                           //TECLA 'D'
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]
 80023de:	e000      	b.n	80023e2 <StateMachineTask+0x24a>

					        }
				}
 80023e0:	bf00      	nop
				if (irrigationHumidity < rangohmin){
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	7dba      	ldrb	r2, [r7, #22]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d903      	bls.n	80023f2 <StateMachineTask+0x25a>
					BSP_TurnOn_Valve();
 80023ea:	f7fe ffad 	bl	8001348 <BSP_TurnOn_Valve>
					state = 6;
 80023ee:	2306      	movs	r3, #6
 80023f0:	75fb      	strb	r3, [r7, #23]
				}
			 	 if (irrigationHumidity >= rangohmax){
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	7d7a      	ldrb	r2, [r7, #21]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d801      	bhi.n	80023fe <StateMachineTask+0x266>
					BSP_TurnOff_Valve();
 80023fa:	f7fe ffbd 	bl	8001378 <BSP_TurnOff_Valve>
				 }

			}
			if(state == 1){
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
 8002400:	2b01      	cmp	r3, #1
 8002402:	f040 8089 	bne.w	8002518 <StateMachineTask+0x380>
                LCD_SetCursor(1, 1);
 8002406:	2101      	movs	r1, #1
 8002408:	2001      	movs	r0, #1
 800240a:	f7ff fcd9 	bl	8001dc0 <LCD_SetCursor>
                LCD_Print("    MINIMO:     ", 1);
 800240e:	2101      	movs	r1, #1
 8002410:	4840      	ldr	r0, [pc, #256]	; (8002514 <StateMachineTask+0x37c>)
 8002412:	f7ff fdbb 	bl	8001f8c <LCD_Print>
				LCD_SetCursor(2, 1);
 8002416:	2101      	movs	r1, #1
 8002418:	2002      	movs	r0, #2
 800241a:	f7ff fcd1 	bl	8001dc0 <LCD_SetCursor>
				LCD_Print("                ", 1);
 800241e:	2101      	movs	r1, #1
 8002420:	4838      	ldr	r0, [pc, #224]	; (8002504 <StateMachineTask+0x36c>)
 8002422:	f7ff fdb3 	bl	8001f8c <LCD_Print>
        		if(xQueueReceive(Queue3Handle, &rx_key, 0) == pdTRUE) {
 8002426:	4b39      	ldr	r3, [pc, #228]	; (800250c <StateMachineTask+0x374>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f107 0114 	add.w	r1, r7, #20
 800242e:	2200      	movs	r2, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f004 f923 	bl	800667c <xQueueReceive>
 8002436:	4603      	mov	r3, r0
 8002438:	2b01      	cmp	r3, #1
 800243a:	d16d      	bne.n	8002518 <StateMachineTask+0x380>
        			switch (rx_key) {
 800243c:	7d3b      	ldrb	r3, [r7, #20]
 800243e:	3b31      	subs	r3, #49	; 0x31
 8002440:	2b11      	cmp	r3, #17
 8002442:	d859      	bhi.n	80024f8 <StateMachineTask+0x360>
 8002444:	a201      	add	r2, pc, #4	; (adr r2, 800244c <StateMachineTask+0x2b4>)
 8002446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244a:	bf00      	nop
 800244c:	08002495 	.word	0x08002495
 8002450:	080024b3 	.word	0x080024b3
 8002454:	080024d1 	.word	0x080024d1
 8002458:	0800249f 	.word	0x0800249f
 800245c:	080024bd 	.word	0x080024bd
 8002460:	080024db 	.word	0x080024db
 8002464:	080024a9 	.word	0x080024a9
 8002468:	080024c7 	.word	0x080024c7
 800246c:	080024e5 	.word	0x080024e5
 8002470:	080024f9 	.word	0x080024f9
 8002474:	080024f9 	.word	0x080024f9
 8002478:	080024f9 	.word	0x080024f9
 800247c:	080024f9 	.word	0x080024f9
 8002480:	080024f9 	.word	0x080024f9
 8002484:	080024f9 	.word	0x080024f9
 8002488:	080024f9 	.word	0x080024f9
 800248c:	080024f9 	.word	0x080024f9
 8002490:	080024ef 	.word	0x080024ef
        				case 49: state = 2; rangohmin = 10; break;
 8002494:	2302      	movs	r3, #2
 8002496:	75fb      	strb	r3, [r7, #23]
 8002498:	230a      	movs	r3, #10
 800249a:	75bb      	strb	r3, [r7, #22]
 800249c:	e03d      	b.n	800251a <StateMachineTask+0x382>
        				case 52: state = 2; rangohmin = 20; break;
 800249e:	2302      	movs	r3, #2
 80024a0:	75fb      	strb	r3, [r7, #23]
 80024a2:	2314      	movs	r3, #20
 80024a4:	75bb      	strb	r3, [r7, #22]
 80024a6:	e038      	b.n	800251a <StateMachineTask+0x382>
        				case 55: state = 2; rangohmin = 30; break;
 80024a8:	2302      	movs	r3, #2
 80024aa:	75fb      	strb	r3, [r7, #23]
 80024ac:	231e      	movs	r3, #30
 80024ae:	75bb      	strb	r3, [r7, #22]
 80024b0:	e033      	b.n	800251a <StateMachineTask+0x382>
        				case 50: state = 2; rangohmin = 40; break;
 80024b2:	2302      	movs	r3, #2
 80024b4:	75fb      	strb	r3, [r7, #23]
 80024b6:	2328      	movs	r3, #40	; 0x28
 80024b8:	75bb      	strb	r3, [r7, #22]
 80024ba:	e02e      	b.n	800251a <StateMachineTask+0x382>
        				case 53: state = 2; rangohmin = 50; break;
 80024bc:	2302      	movs	r3, #2
 80024be:	75fb      	strb	r3, [r7, #23]
 80024c0:	2332      	movs	r3, #50	; 0x32
 80024c2:	75bb      	strb	r3, [r7, #22]
 80024c4:	e029      	b.n	800251a <StateMachineTask+0x382>
        				case 56: state = 2; rangohmin = 60; break;
 80024c6:	2302      	movs	r3, #2
 80024c8:	75fb      	strb	r3, [r7, #23]
 80024ca:	233c      	movs	r3, #60	; 0x3c
 80024cc:	75bb      	strb	r3, [r7, #22]
 80024ce:	e024      	b.n	800251a <StateMachineTask+0x382>
        				case 51: state = 2; rangohmin = 70; break;
 80024d0:	2302      	movs	r3, #2
 80024d2:	75fb      	strb	r3, [r7, #23]
 80024d4:	2346      	movs	r3, #70	; 0x46
 80024d6:	75bb      	strb	r3, [r7, #22]
 80024d8:	e01f      	b.n	800251a <StateMachineTask+0x382>
        				case 54: state = 2; rangohmin = 80; break;
 80024da:	2302      	movs	r3, #2
 80024dc:	75fb      	strb	r3, [r7, #23]
 80024de:	2350      	movs	r3, #80	; 0x50
 80024e0:	75bb      	strb	r3, [r7, #22]
 80024e2:	e01a      	b.n	800251a <StateMachineTask+0x382>
        				case 57: state = 2; rangohmin = 90; break;
 80024e4:	2302      	movs	r3, #2
 80024e6:	75fb      	strb	r3, [r7, #23]
 80024e8:	235a      	movs	r3, #90	; 0x5a
 80024ea:	75bb      	strb	r3, [r7, #22]
 80024ec:	e015      	b.n	800251a <StateMachineTask+0x382>
        				case 66: state = 2; rangohmin =  0; break;
 80024ee:	2302      	movs	r3, #2
 80024f0:	75fb      	strb	r3, [r7, #23]
 80024f2:	2300      	movs	r3, #0
 80024f4:	75bb      	strb	r3, [r7, #22]
 80024f6:	e010      	b.n	800251a <StateMachineTask+0x382>
        				default: state = 1;
 80024f8:	2301      	movs	r3, #1
 80024fa:	75fb      	strb	r3, [r7, #23]
 80024fc:	e00d      	b.n	800251a <StateMachineTask+0x382>
 80024fe:	bf00      	nop
 8002500:	20000690 	.word	0x20000690
 8002504:	08008a5c 	.word	0x08008a5c
 8002508:	08008a70 	.word	0x08008a70
 800250c:	2000068c 	.word	0x2000068c
 8002510:	20000688 	.word	0x20000688
 8002514:	08008a84 	.word	0x08008a84
        			}
        		}
 8002518:	bf00      	nop
			}


			if(state == 2){
 800251a:	7dfb      	ldrb	r3, [r7, #23]
 800251c:	2b02      	cmp	r3, #2
 800251e:	f040 8089 	bne.w	8002634 <StateMachineTask+0x49c>
                LCD_SetCursor(1, 1);
 8002522:	2101      	movs	r1, #1
 8002524:	2001      	movs	r0, #1
 8002526:	f7ff fc4b 	bl	8001dc0 <LCD_SetCursor>
                LCD_Print("    MINIMO:     ", 1);
 800252a:	2101      	movs	r1, #1
 800252c:	48c4      	ldr	r0, [pc, #784]	; (8002840 <StateMachineTask+0x6a8>)
 800252e:	f7ff fd2d 	bl	8001f8c <LCD_Print>
				LCD_SetCursor(2, 1);
 8002532:	2101      	movs	r1, #1
 8002534:	2002      	movs	r0, #2
 8002536:	f7ff fc43 	bl	8001dc0 <LCD_SetCursor>
				LCD_Print("                ", 1);
 800253a:	2101      	movs	r1, #1
 800253c:	48c1      	ldr	r0, [pc, #772]	; (8002844 <StateMachineTask+0x6ac>)
 800253e:	f7ff fd25 	bl	8001f8c <LCD_Print>
        		if(xQueueReceive(Queue3Handle, &rx_key, 0) == pdTRUE) {
 8002542:	4bc1      	ldr	r3, [pc, #772]	; (8002848 <StateMachineTask+0x6b0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f107 0114 	add.w	r1, r7, #20
 800254a:	2200      	movs	r2, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f004 f895 	bl	800667c <xQueueReceive>
 8002552:	4603      	mov	r3, r0
 8002554:	2b01      	cmp	r3, #1
 8002556:	d164      	bne.n	8002622 <StateMachineTask+0x48a>
        			switch (rx_key) {
 8002558:	7d3b      	ldrb	r3, [r7, #20]
 800255a:	3b31      	subs	r3, #49	; 0x31
 800255c:	2b11      	cmp	r3, #17
 800255e:	d861      	bhi.n	8002624 <StateMachineTask+0x48c>
 8002560:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <StateMachineTask+0x3d0>)
 8002562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002566:	bf00      	nop
 8002568:	080025b1 	.word	0x080025b1
 800256c:	080025d5 	.word	0x080025d5
 8002570:	080025f9 	.word	0x080025f9
 8002574:	080025bd 	.word	0x080025bd
 8002578:	080025e1 	.word	0x080025e1
 800257c:	08002605 	.word	0x08002605
 8002580:	080025c9 	.word	0x080025c9
 8002584:	080025ed 	.word	0x080025ed
 8002588:	08002611 	.word	0x08002611
 800258c:	08002625 	.word	0x08002625
 8002590:	08002625 	.word	0x08002625
 8002594:	08002625 	.word	0x08002625
 8002598:	08002625 	.word	0x08002625
 800259c:	08002625 	.word	0x08002625
 80025a0:	08002625 	.word	0x08002625
 80025a4:	08002625 	.word	0x08002625
 80025a8:	08002625 	.word	0x08002625
 80025ac:	0800261d 	.word	0x0800261d
        				case 49: state = 3; rangohmin = rangohmin + 1; break;
 80025b0:	2303      	movs	r3, #3
 80025b2:	75fb      	strb	r3, [r7, #23]
 80025b4:	7dbb      	ldrb	r3, [r7, #22]
 80025b6:	3301      	adds	r3, #1
 80025b8:	75bb      	strb	r3, [r7, #22]
 80025ba:	e033      	b.n	8002624 <StateMachineTask+0x48c>
        				case 52: state = 3; rangohmin = rangohmin + 2; break;
 80025bc:	2303      	movs	r3, #3
 80025be:	75fb      	strb	r3, [r7, #23]
 80025c0:	7dbb      	ldrb	r3, [r7, #22]
 80025c2:	3302      	adds	r3, #2
 80025c4:	75bb      	strb	r3, [r7, #22]
 80025c6:	e02d      	b.n	8002624 <StateMachineTask+0x48c>
        				case 55: state = 3; rangohmin = rangohmin + 3; break;
 80025c8:	2303      	movs	r3, #3
 80025ca:	75fb      	strb	r3, [r7, #23]
 80025cc:	7dbb      	ldrb	r3, [r7, #22]
 80025ce:	3303      	adds	r3, #3
 80025d0:	75bb      	strb	r3, [r7, #22]
 80025d2:	e027      	b.n	8002624 <StateMachineTask+0x48c>
        				case 50: state = 3; rangohmin = rangohmin + 4; break;
 80025d4:	2303      	movs	r3, #3
 80025d6:	75fb      	strb	r3, [r7, #23]
 80025d8:	7dbb      	ldrb	r3, [r7, #22]
 80025da:	3304      	adds	r3, #4
 80025dc:	75bb      	strb	r3, [r7, #22]
 80025de:	e021      	b.n	8002624 <StateMachineTask+0x48c>
        				case 53: state = 3; rangohmin = rangohmin + 5; break;
 80025e0:	2303      	movs	r3, #3
 80025e2:	75fb      	strb	r3, [r7, #23]
 80025e4:	7dbb      	ldrb	r3, [r7, #22]
 80025e6:	3305      	adds	r3, #5
 80025e8:	75bb      	strb	r3, [r7, #22]
 80025ea:	e01b      	b.n	8002624 <StateMachineTask+0x48c>
        				case 56: state = 3; rangohmin = rangohmin + 6; break;
 80025ec:	2303      	movs	r3, #3
 80025ee:	75fb      	strb	r3, [r7, #23]
 80025f0:	7dbb      	ldrb	r3, [r7, #22]
 80025f2:	3306      	adds	r3, #6
 80025f4:	75bb      	strb	r3, [r7, #22]
 80025f6:	e015      	b.n	8002624 <StateMachineTask+0x48c>
        				case 51: state = 3; rangohmin = rangohmin + 7; break;
 80025f8:	2303      	movs	r3, #3
 80025fa:	75fb      	strb	r3, [r7, #23]
 80025fc:	7dbb      	ldrb	r3, [r7, #22]
 80025fe:	3307      	adds	r3, #7
 8002600:	75bb      	strb	r3, [r7, #22]
 8002602:	e00f      	b.n	8002624 <StateMachineTask+0x48c>
        				case 54: state = 3; rangohmin = rangohmin + 8; break;
 8002604:	2303      	movs	r3, #3
 8002606:	75fb      	strb	r3, [r7, #23]
 8002608:	7dbb      	ldrb	r3, [r7, #22]
 800260a:	3308      	adds	r3, #8
 800260c:	75bb      	strb	r3, [r7, #22]
 800260e:	e009      	b.n	8002624 <StateMachineTask+0x48c>
        				case 57: state = 3; rangohmin = rangohmin + 9; break;
 8002610:	2303      	movs	r3, #3
 8002612:	75fb      	strb	r3, [r7, #23]
 8002614:	7dbb      	ldrb	r3, [r7, #22]
 8002616:	3309      	adds	r3, #9
 8002618:	75bb      	strb	r3, [r7, #22]
 800261a:	e003      	b.n	8002624 <StateMachineTask+0x48c>
        				case 66: state = 3; break;
 800261c:	2303      	movs	r3, #3
 800261e:	75fb      	strb	r3, [r7, #23]
 8002620:	e000      	b.n	8002624 <StateMachineTask+0x48c>
        			}
        		}
 8002622:	bf00      	nop
        		if(rangohmin == 99){
 8002624:	7dbb      	ldrb	r3, [r7, #22]
 8002626:	2b63      	cmp	r3, #99	; 0x63
 8002628:	d104      	bne.n	8002634 <StateMachineTask+0x49c>
        			state = 2;
 800262a:	2302      	movs	r3, #2
 800262c:	75fb      	strb	r3, [r7, #23]
        			rangohmin = rangohmin - 9;
 800262e:	7dbb      	ldrb	r3, [r7, #22]
 8002630:	3b09      	subs	r3, #9
 8002632:	75bb      	strb	r3, [r7, #22]
        		}
			}

			if(state == 3){
 8002634:	7dfb      	ldrb	r3, [r7, #23]
 8002636:	2b03      	cmp	r3, #3
 8002638:	f040 8098 	bne.w	800276c <StateMachineTask+0x5d4>
                LCD_SetCursor(1, 1);
 800263c:	2101      	movs	r1, #1
 800263e:	2001      	movs	r0, #1
 8002640:	f7ff fbbe 	bl	8001dc0 <LCD_SetCursor>
                LCD_Print("    MINIMO:%1u   ", rangohmin);
 8002644:	7dbb      	ldrb	r3, [r7, #22]
 8002646:	4619      	mov	r1, r3
 8002648:	4880      	ldr	r0, [pc, #512]	; (800284c <StateMachineTask+0x6b4>)
 800264a:	f7ff fc9f 	bl	8001f8c <LCD_Print>
                LCD_SetCursor(2, 1);
 800264e:	2101      	movs	r1, #1
 8002650:	2002      	movs	r0, #2
 8002652:	f7ff fbb5 	bl	8001dc0 <LCD_SetCursor>
                LCD_Print("    MAXIMO:     ", 1);
 8002656:	2101      	movs	r1, #1
 8002658:	487d      	ldr	r0, [pc, #500]	; (8002850 <StateMachineTask+0x6b8>)
 800265a:	f7ff fc97 	bl	8001f8c <LCD_Print>
                if(xQueueReceive(Queue3Handle, &rx_key, 0) == pdTRUE) {
 800265e:	4b7a      	ldr	r3, [pc, #488]	; (8002848 <StateMachineTask+0x6b0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f107 0114 	add.w	r1, r7, #20
 8002666:	2200      	movs	r2, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f004 f807 	bl	800667c <xQueueReceive>
 800266e:	4603      	mov	r3, r0
 8002670:	2b01      	cmp	r3, #1
 8002672:	d17b      	bne.n	800276c <StateMachineTask+0x5d4>
    			switch (rx_key) {
 8002674:	7d3b      	ldrb	r3, [r7, #20]
 8002676:	3b31      	subs	r3, #49	; 0x31
 8002678:	2b11      	cmp	r3, #17
 800267a:	f200 808c 	bhi.w	8002796 <StateMachineTask+0x5fe>
 800267e:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <StateMachineTask+0x4ec>)
 8002680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002684:	080026dd 	.word	0x080026dd
 8002688:	0800270d 	.word	0x0800270d
 800268c:	0800273d 	.word	0x0800273d
 8002690:	080026ed 	.word	0x080026ed
 8002694:	0800271d 	.word	0x0800271d
 8002698:	0800274d 	.word	0x0800274d
 800269c:	080026fd 	.word	0x080026fd
 80026a0:	0800272d 	.word	0x0800272d
 80026a4:	0800275d 	.word	0x0800275d
 80026a8:	08002797 	.word	0x08002797
 80026ac:	08002797 	.word	0x08002797
 80026b0:	08002797 	.word	0x08002797
 80026b4:	08002797 	.word	0x08002797
 80026b8:	08002797 	.word	0x08002797
 80026bc:	08002797 	.word	0x08002797
 80026c0:	08002797 	.word	0x08002797
 80026c4:	08002797 	.word	0x08002797
 80026c8:	080026cd 	.word	0x080026cd
    				case 66:
    					if (rangohmin < 10){
 80026cc:	7dbb      	ldrb	r3, [r7, #22]
 80026ce:	2b09      	cmp	r3, #9
 80026d0:	d84e      	bhi.n	8002770 <StateMachineTask+0x5d8>
    						rangohmax = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	757b      	strb	r3, [r7, #21]
    						state = 4;
 80026d6:	2304      	movs	r3, #4
 80026d8:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 80026da:	e049      	b.n	8002770 <StateMachineTask+0x5d8>
    				case 49:
    					if (rangohmin < 20){
 80026dc:	7dbb      	ldrb	r3, [r7, #22]
 80026de:	2b13      	cmp	r3, #19
 80026e0:	d848      	bhi.n	8002774 <StateMachineTask+0x5dc>
    						rangohmax = 10;
 80026e2:	230a      	movs	r3, #10
 80026e4:	757b      	strb	r3, [r7, #21]
    						state = 4;
 80026e6:	2304      	movs	r3, #4
 80026e8:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 80026ea:	e043      	b.n	8002774 <StateMachineTask+0x5dc>
    				case 52:
    					if (rangohmin < 30){
 80026ec:	7dbb      	ldrb	r3, [r7, #22]
 80026ee:	2b1d      	cmp	r3, #29
 80026f0:	d842      	bhi.n	8002778 <StateMachineTask+0x5e0>
    						rangohmax = 20;
 80026f2:	2314      	movs	r3, #20
 80026f4:	757b      	strb	r3, [r7, #21]
							state = 4;
 80026f6:	2304      	movs	r3, #4
 80026f8:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 80026fa:	e03d      	b.n	8002778 <StateMachineTask+0x5e0>
    				case 55:
    					if (rangohmin < 40){
 80026fc:	7dbb      	ldrb	r3, [r7, #22]
 80026fe:	2b27      	cmp	r3, #39	; 0x27
 8002700:	d83c      	bhi.n	800277c <StateMachineTask+0x5e4>
    						rangohmax = 30;
 8002702:	231e      	movs	r3, #30
 8002704:	757b      	strb	r3, [r7, #21]
    						state = 4;
 8002706:	2304      	movs	r3, #4
 8002708:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 800270a:	e037      	b.n	800277c <StateMachineTask+0x5e4>
    				case 50:
    					if (rangohmin < 50){
 800270c:	7dbb      	ldrb	r3, [r7, #22]
 800270e:	2b31      	cmp	r3, #49	; 0x31
 8002710:	d836      	bhi.n	8002780 <StateMachineTask+0x5e8>
    						rangohmax = 40;
 8002712:	2328      	movs	r3, #40	; 0x28
 8002714:	757b      	strb	r3, [r7, #21]
    						state = 4;
 8002716:	2304      	movs	r3, #4
 8002718:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 800271a:	e031      	b.n	8002780 <StateMachineTask+0x5e8>
    				case 53:
    					if (rangohmin < 60){
 800271c:	7dbb      	ldrb	r3, [r7, #22]
 800271e:	2b3b      	cmp	r3, #59	; 0x3b
 8002720:	d830      	bhi.n	8002784 <StateMachineTask+0x5ec>
    						rangohmax = 50;
 8002722:	2332      	movs	r3, #50	; 0x32
 8002724:	757b      	strb	r3, [r7, #21]
    						state = 4;
 8002726:	2304      	movs	r3, #4
 8002728:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 800272a:	e02b      	b.n	8002784 <StateMachineTask+0x5ec>
    				case 56:
    					if (rangohmin < 70){
 800272c:	7dbb      	ldrb	r3, [r7, #22]
 800272e:	2b45      	cmp	r3, #69	; 0x45
 8002730:	d82a      	bhi.n	8002788 <StateMachineTask+0x5f0>
    						rangohmax = 60;
 8002732:	233c      	movs	r3, #60	; 0x3c
 8002734:	757b      	strb	r3, [r7, #21]
    						state = 4;
 8002736:	2304      	movs	r3, #4
 8002738:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 800273a:	e025      	b.n	8002788 <StateMachineTask+0x5f0>
    				case 51:
    					if (rangohmin < 80){
 800273c:	7dbb      	ldrb	r3, [r7, #22]
 800273e:	2b4f      	cmp	r3, #79	; 0x4f
 8002740:	d824      	bhi.n	800278c <StateMachineTask+0x5f4>
    						rangohmax = 70;
 8002742:	2346      	movs	r3, #70	; 0x46
 8002744:	757b      	strb	r3, [r7, #21]
    						state = 4;
 8002746:	2304      	movs	r3, #4
 8002748:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 800274a:	e01f      	b.n	800278c <StateMachineTask+0x5f4>
    				case 54:
    					if (rangohmin < 90){
 800274c:	7dbb      	ldrb	r3, [r7, #22]
 800274e:	2b59      	cmp	r3, #89	; 0x59
 8002750:	d81e      	bhi.n	8002790 <StateMachineTask+0x5f8>
    						rangohmax = 80;
 8002752:	2350      	movs	r3, #80	; 0x50
 8002754:	757b      	strb	r3, [r7, #21]
    					    state = 4;
 8002756:	2304      	movs	r3, #4
 8002758:	75fb      	strb	r3, [r7, #23]
    					 }
    				break;
 800275a:	e019      	b.n	8002790 <StateMachineTask+0x5f8>
    				case 57:
    					if (rangohmin < 100){
 800275c:	7dbb      	ldrb	r3, [r7, #22]
 800275e:	2b63      	cmp	r3, #99	; 0x63
 8002760:	d818      	bhi.n	8002794 <StateMachineTask+0x5fc>
    						rangohmax = 90;
 8002762:	235a      	movs	r3, #90	; 0x5a
 8002764:	757b      	strb	r3, [r7, #21]
    					    state = 4;
 8002766:	2304      	movs	r3, #4
 8002768:	75fb      	strb	r3, [r7, #23]
    					 }
    				break;
 800276a:	e013      	b.n	8002794 <StateMachineTask+0x5fc>
    				}
    			}
 800276c:	bf00      	nop
 800276e:	e012      	b.n	8002796 <StateMachineTask+0x5fe>
    				break;
 8002770:	bf00      	nop
 8002772:	e010      	b.n	8002796 <StateMachineTask+0x5fe>
    				break;
 8002774:	bf00      	nop
 8002776:	e00e      	b.n	8002796 <StateMachineTask+0x5fe>
    				break;
 8002778:	bf00      	nop
 800277a:	e00c      	b.n	8002796 <StateMachineTask+0x5fe>
    				break;
 800277c:	bf00      	nop
 800277e:	e00a      	b.n	8002796 <StateMachineTask+0x5fe>
    				break;
 8002780:	bf00      	nop
 8002782:	e008      	b.n	8002796 <StateMachineTask+0x5fe>
    				break;
 8002784:	bf00      	nop
 8002786:	e006      	b.n	8002796 <StateMachineTask+0x5fe>
    				break;
 8002788:	bf00      	nop
 800278a:	e004      	b.n	8002796 <StateMachineTask+0x5fe>
    				break;
 800278c:	bf00      	nop
 800278e:	e002      	b.n	8002796 <StateMachineTask+0x5fe>
    				break;
 8002790:	bf00      	nop
 8002792:	e000      	b.n	8002796 <StateMachineTask+0x5fe>
    				break;
 8002794:	bf00      	nop
			}


			if(state == 4){
 8002796:	7dfb      	ldrb	r3, [r7, #23]
 8002798:	2b04      	cmp	r3, #4
 800279a:	f040 80be 	bne.w	800291a <StateMachineTask+0x782>
                LCD_SetCursor(1, 1);
 800279e:	2101      	movs	r1, #1
 80027a0:	2001      	movs	r0, #1
 80027a2:	f7ff fb0d 	bl	8001dc0 <LCD_SetCursor>
                LCD_Print("    MINIMO:%1u   ", rangohmin);
 80027a6:	7dbb      	ldrb	r3, [r7, #22]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4828      	ldr	r0, [pc, #160]	; (800284c <StateMachineTask+0x6b4>)
 80027ac:	f7ff fbee 	bl	8001f8c <LCD_Print>
                LCD_SetCursor(2, 1);
 80027b0:	2101      	movs	r1, #1
 80027b2:	2002      	movs	r0, #2
 80027b4:	f7ff fb04 	bl	8001dc0 <LCD_SetCursor>
                LCD_Print("    MAXIMO:     ", 1);
 80027b8:	2101      	movs	r1, #1
 80027ba:	4825      	ldr	r0, [pc, #148]	; (8002850 <StateMachineTask+0x6b8>)
 80027bc:	f7ff fbe6 	bl	8001f8c <LCD_Print>
                if(xQueueReceive(Queue3Handle, &rx_key, 0) == pdTRUE) {
 80027c0:	4b21      	ldr	r3, [pc, #132]	; (8002848 <StateMachineTask+0x6b0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f107 0114 	add.w	r1, r7, #20
 80027c8:	2200      	movs	r2, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f003 ff56 	bl	800667c <xQueueReceive>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	f040 80a1 	bne.w	800291a <StateMachineTask+0x782>

    			switch (rx_key) {
 80027d8:	7d3b      	ldrb	r3, [r7, #20]
 80027da:	3b31      	subs	r3, #49	; 0x31
 80027dc:	2b11      	cmp	r3, #17
 80027de:	f200 80b1 	bhi.w	8002944 <StateMachineTask+0x7ac>
 80027e2:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <StateMachineTask+0x650>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	08002855 	.word	0x08002855
 80027ec:	08002895 	.word	0x08002895
 80027f0:	080028d7 	.word	0x080028d7
 80027f4:	08002869 	.word	0x08002869
 80027f8:	080028ab 	.word	0x080028ab
 80027fc:	080028ed 	.word	0x080028ed
 8002800:	0800287f 	.word	0x0800287f
 8002804:	080028c1 	.word	0x080028c1
 8002808:	08002903 	.word	0x08002903
 800280c:	08002945 	.word	0x08002945
 8002810:	08002945 	.word	0x08002945
 8002814:	08002945 	.word	0x08002945
 8002818:	08002945 	.word	0x08002945
 800281c:	08002945 	.word	0x08002945
 8002820:	08002945 	.word	0x08002945
 8002824:	08002945 	.word	0x08002945
 8002828:	08002945 	.word	0x08002945
 800282c:	08002831 	.word	0x08002831
					case 66:
						if (rangohmin < rangohmax){
 8002830:	7dba      	ldrb	r2, [r7, #22]
 8002832:	7d7b      	ldrb	r3, [r7, #21]
 8002834:	429a      	cmp	r2, r3
 8002836:	d272      	bcs.n	800291e <StateMachineTask+0x786>
							rangohmax = rangohmax + 0;
							state = 5;
 8002838:	2305      	movs	r3, #5
 800283a:	75fb      	strb	r3, [r7, #23]
					}
					break;
 800283c:	e06f      	b.n	800291e <StateMachineTask+0x786>
 800283e:	bf00      	nop
 8002840:	08008a84 	.word	0x08008a84
 8002844:	08008a5c 	.word	0x08008a5c
 8002848:	2000068c 	.word	0x2000068c
 800284c:	08008a98 	.word	0x08008a98
 8002850:	08008aac 	.word	0x08008aac
    				case 49:
    					if (rangohmin < rangohmax + 1){
 8002854:	7d7a      	ldrb	r2, [r7, #21]
 8002856:	7dbb      	ldrb	r3, [r7, #22]
 8002858:	429a      	cmp	r2, r3
 800285a:	d362      	bcc.n	8002922 <StateMachineTask+0x78a>
    						rangohmax = rangohmax + 1;
 800285c:	7d7b      	ldrb	r3, [r7, #21]
 800285e:	3301      	adds	r3, #1
 8002860:	757b      	strb	r3, [r7, #21]
    						state = 5;
 8002862:	2305      	movs	r3, #5
 8002864:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 8002866:	e05c      	b.n	8002922 <StateMachineTask+0x78a>
    				case 52:
    					if (rangohmin < rangohmax + 2){
 8002868:	7d7b      	ldrb	r3, [r7, #21]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	7dbb      	ldrb	r3, [r7, #22]
 800286e:	429a      	cmp	r2, r3
 8002870:	db59      	blt.n	8002926 <StateMachineTask+0x78e>
    						rangohmax = rangohmax + 2;
 8002872:	7d7b      	ldrb	r3, [r7, #21]
 8002874:	3302      	adds	r3, #2
 8002876:	757b      	strb	r3, [r7, #21]
							state = 5;
 8002878:	2305      	movs	r3, #5
 800287a:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 800287c:	e053      	b.n	8002926 <StateMachineTask+0x78e>
    				case 55:
    					if (rangohmin < rangohmax + 3){
 800287e:	7d7b      	ldrb	r3, [r7, #21]
 8002880:	1c9a      	adds	r2, r3, #2
 8002882:	7dbb      	ldrb	r3, [r7, #22]
 8002884:	429a      	cmp	r2, r3
 8002886:	db50      	blt.n	800292a <StateMachineTask+0x792>
    						rangohmax = rangohmax + 3;
 8002888:	7d7b      	ldrb	r3, [r7, #21]
 800288a:	3303      	adds	r3, #3
 800288c:	757b      	strb	r3, [r7, #21]
    						state = 5;
 800288e:	2305      	movs	r3, #5
 8002890:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 8002892:	e04a      	b.n	800292a <StateMachineTask+0x792>
    				case 50:
    					if (rangohmin < rangohmax + 4){
 8002894:	7d7b      	ldrb	r3, [r7, #21]
 8002896:	1cda      	adds	r2, r3, #3
 8002898:	7dbb      	ldrb	r3, [r7, #22]
 800289a:	429a      	cmp	r2, r3
 800289c:	db47      	blt.n	800292e <StateMachineTask+0x796>
    						rangohmax = rangohmax + 4;
 800289e:	7d7b      	ldrb	r3, [r7, #21]
 80028a0:	3304      	adds	r3, #4
 80028a2:	757b      	strb	r3, [r7, #21]
    						state = 5;
 80028a4:	2305      	movs	r3, #5
 80028a6:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 80028a8:	e041      	b.n	800292e <StateMachineTask+0x796>
    				case 53:
    					if (rangohmin < rangohmax + 5){
 80028aa:	7d7b      	ldrb	r3, [r7, #21]
 80028ac:	1d1a      	adds	r2, r3, #4
 80028ae:	7dbb      	ldrb	r3, [r7, #22]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	db3e      	blt.n	8002932 <StateMachineTask+0x79a>
    						rangohmax = rangohmax + 5;
 80028b4:	7d7b      	ldrb	r3, [r7, #21]
 80028b6:	3305      	adds	r3, #5
 80028b8:	757b      	strb	r3, [r7, #21]
    						state = 5;
 80028ba:	2305      	movs	r3, #5
 80028bc:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 80028be:	e038      	b.n	8002932 <StateMachineTask+0x79a>
    				case 56:
    					if (rangohmin < rangohmax + 6){
 80028c0:	7d7b      	ldrb	r3, [r7, #21]
 80028c2:	1d5a      	adds	r2, r3, #5
 80028c4:	7dbb      	ldrb	r3, [r7, #22]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	db35      	blt.n	8002936 <StateMachineTask+0x79e>
    						rangohmax = rangohmax + 6;
 80028ca:	7d7b      	ldrb	r3, [r7, #21]
 80028cc:	3306      	adds	r3, #6
 80028ce:	757b      	strb	r3, [r7, #21]
    						state = 5;
 80028d0:	2305      	movs	r3, #5
 80028d2:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 80028d4:	e02f      	b.n	8002936 <StateMachineTask+0x79e>
    				case 51:
    					if (rangohmin < rangohmax + 7){
 80028d6:	7d7b      	ldrb	r3, [r7, #21]
 80028d8:	1d9a      	adds	r2, r3, #6
 80028da:	7dbb      	ldrb	r3, [r7, #22]
 80028dc:	429a      	cmp	r2, r3
 80028de:	db2c      	blt.n	800293a <StateMachineTask+0x7a2>
    						rangohmax = rangohmax + 7;
 80028e0:	7d7b      	ldrb	r3, [r7, #21]
 80028e2:	3307      	adds	r3, #7
 80028e4:	757b      	strb	r3, [r7, #21]
    						state = 5;
 80028e6:	2305      	movs	r3, #5
 80028e8:	75fb      	strb	r3, [r7, #23]
    					}
    				break;
 80028ea:	e026      	b.n	800293a <StateMachineTask+0x7a2>
    				case 54:
    					if (rangohmin < rangohmax + 8){
 80028ec:	7d7b      	ldrb	r3, [r7, #21]
 80028ee:	1dda      	adds	r2, r3, #7
 80028f0:	7dbb      	ldrb	r3, [r7, #22]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	db23      	blt.n	800293e <StateMachineTask+0x7a6>
    					    rangohmax = rangohmax + 8;
 80028f6:	7d7b      	ldrb	r3, [r7, #21]
 80028f8:	3308      	adds	r3, #8
 80028fa:	757b      	strb	r3, [r7, #21]
    					    state = 5;
 80028fc:	2305      	movs	r3, #5
 80028fe:	75fb      	strb	r3, [r7, #23]
    					 }
    				break;
 8002900:	e01d      	b.n	800293e <StateMachineTask+0x7a6>
    				case 57:
    					if (rangohmin < rangohmax + 9){
 8002902:	7d7b      	ldrb	r3, [r7, #21]
 8002904:	f103 0208 	add.w	r2, r3, #8
 8002908:	7dbb      	ldrb	r3, [r7, #22]
 800290a:	429a      	cmp	r2, r3
 800290c:	db19      	blt.n	8002942 <StateMachineTask+0x7aa>
    					    rangohmax = rangohmax + 9;
 800290e:	7d7b      	ldrb	r3, [r7, #21]
 8002910:	3309      	adds	r3, #9
 8002912:	757b      	strb	r3, [r7, #21]
    					    state = 5;
 8002914:	2305      	movs	r3, #5
 8002916:	75fb      	strb	r3, [r7, #23]
    					 }
    				break;
 8002918:	e013      	b.n	8002942 <StateMachineTask+0x7aa>

    				}
    			}
 800291a:	bf00      	nop
 800291c:	e012      	b.n	8002944 <StateMachineTask+0x7ac>
					break;
 800291e:	bf00      	nop
 8002920:	e010      	b.n	8002944 <StateMachineTask+0x7ac>
    				break;
 8002922:	bf00      	nop
 8002924:	e00e      	b.n	8002944 <StateMachineTask+0x7ac>
    				break;
 8002926:	bf00      	nop
 8002928:	e00c      	b.n	8002944 <StateMachineTask+0x7ac>
    				break;
 800292a:	bf00      	nop
 800292c:	e00a      	b.n	8002944 <StateMachineTask+0x7ac>
    				break;
 800292e:	bf00      	nop
 8002930:	e008      	b.n	8002944 <StateMachineTask+0x7ac>
    				break;
 8002932:	bf00      	nop
 8002934:	e006      	b.n	8002944 <StateMachineTask+0x7ac>
    				break;
 8002936:	bf00      	nop
 8002938:	e004      	b.n	8002944 <StateMachineTask+0x7ac>
    				break;
 800293a:	bf00      	nop
 800293c:	e002      	b.n	8002944 <StateMachineTask+0x7ac>
    				break;
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <StateMachineTask+0x7ac>
    				break;
 8002942:	bf00      	nop
			}

			if(state == 5){
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	2b05      	cmp	r3, #5
 8002948:	d10e      	bne.n	8002968 <StateMachineTask+0x7d0>
				LCD_SetCursor(2, 1);
 800294a:	2101      	movs	r1, #1
 800294c:	2002      	movs	r0, #2
 800294e:	f7ff fa37 	bl	8001dc0 <LCD_SetCursor>
				LCD_Print("    MAXIMO:%1u   ", rangohmax);
 8002952:	7d7b      	ldrb	r3, [r7, #21]
 8002954:	4619      	mov	r1, r3
 8002956:	4807      	ldr	r0, [pc, #28]	; (8002974 <StateMachineTask+0x7dc>)
 8002958:	f7ff fb18 	bl	8001f8c <LCD_Print>
				HAL_Delay(1000);
 800295c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002960:	f000 faa4 	bl	8002eac <HAL_Delay>
				state = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	75fb      	strb	r3, [r7, #23]
			}
		vTaskDelay(800);
 8002968:	f44f 7048 	mov.w	r0, #800	; 0x320
 800296c:	f004 fa72 	bl	8006e54 <vTaskDelay>
		xQueueReceive(Queue5Handle, &irrigationHumidity, 0);
 8002970:	e41c      	b.n	80021ac <StateMachineTask+0x14>
 8002972:	bf00      	nop
 8002974:	08008ac0 	.word	0x08008ac0

08002978 <APP_Show_SystemIntro>:
	}
}

void APP_Show_SystemIntro(){
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
    LCD_i2cDeviceCheck();
 800297c:	f7ff f932 	bl	8001be4 <LCD_i2cDeviceCheck>
    LCD_BackLight(LCD_BL_ON);
 8002980:	2008      	movs	r0, #8
 8002982:	f7ff fb19 	bl	8001fb8 <LCD_BackLight>
    LCD_SetCursor(1,1);
 8002986:	2101      	movs	r1, #1
 8002988:	2001      	movs	r0, #1
 800298a:	f7ff fa19 	bl	8001dc0 <LCD_SetCursor>
    LCD_Clear();
 800298e:	f7ff fa03 	bl	8001d98 <LCD_Clear>
    LCD_Print("Cargando Datos",1);
 8002992:	2101      	movs	r1, #1
 8002994:	4804      	ldr	r0, [pc, #16]	; (80029a8 <APP_Show_SystemIntro+0x30>)
 8002996:	f7ff faf9 	bl	8001f8c <LCD_Print>
    BSP_Delay(2000);
 800299a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800299e:	f7fe fc25 	bl	80011ec <BSP_Delay>
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	08008ad4 	.word	0x08008ad4

080029ac <APP_SoilHumidity>:

void APP_CoverFromTemperature(int estado_cortina, int cortina_manual){
    BSP_CoverFromTemperature(estado_cortina, cortina_manual);
}

uint8_t APP_SoilHumidity(){
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
	uint8_t SoilHumidity;
	SoilHumidity = BSP_SoilHumidity();
 80029b2:	f7fe fc99 	bl	80012e8 <BSP_SoilHumidity>
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
	return SoilHumidity;
 80029ba:	79fb      	ldrb	r3, [r7, #7]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_MspInit+0x4c>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	4a0f      	ldr	r2, [pc, #60]	; (8002a10 <HAL_MspInit+0x4c>)
 80029d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d8:	6453      	str	r3, [r2, #68]	; 0x44
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <HAL_MspInit+0x4c>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_MspInit+0x4c>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <HAL_MspInit+0x4c>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_MspInit+0x4c>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800

08002a14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a2e      	ldr	r2, [pc, #184]	; (8002aec <HAL_ADC_MspInit+0xd8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d156      	bne.n	8002ae4 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <HAL_ADC_MspInit+0xdc>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	4a2c      	ldr	r2, [pc, #176]	; (8002af0 <HAL_ADC_MspInit+0xdc>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	6453      	str	r3, [r2, #68]	; 0x44
 8002a46:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <HAL_ADC_MspInit+0xdc>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <HAL_ADC_MspInit+0xdc>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <HAL_ADC_MspInit+0xdc>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <HAL_ADC_MspInit+0xdc>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8002a6e:	231a      	movs	r3, #26
 8002a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a72:	2303      	movs	r3, #3
 8002a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	4619      	mov	r1, r3
 8002a80:	481c      	ldr	r0, [pc, #112]	; (8002af4 <HAL_ADC_MspInit+0xe0>)
 8002a82:	f001 f9df 	bl	8003e44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002a86:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <HAL_ADC_MspInit+0xe4>)
 8002a88:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <HAL_ADC_MspInit+0xe8>)
 8002a8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <HAL_ADC_MspInit+0xe4>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a92:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_ADC_MspInit+0xe4>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a98:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_ADC_MspInit+0xe4>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_ADC_MspInit+0xe4>)
 8002aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aa4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_ADC_MspInit+0xe4>)
 8002aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_ADC_MspInit+0xe4>)
 8002ab0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ab4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_ADC_MspInit+0xe4>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_ADC_MspInit+0xe4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HAL_ADC_MspInit+0xe4>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ac8:	480b      	ldr	r0, [pc, #44]	; (8002af8 <HAL_ADC_MspInit+0xe4>)
 8002aca:	f000 fed1 	bl	8003870 <HAL_DMA_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002ad4:	f7fe fe64 	bl	80017a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a07      	ldr	r2, [pc, #28]	; (8002af8 <HAL_ADC_MspInit+0xe4>)
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
 8002ade:	4a06      	ldr	r2, [pc, #24]	; (8002af8 <HAL_ADC_MspInit+0xe4>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ae4:	bf00      	nop
 8002ae6:	3728      	adds	r7, #40	; 0x28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40012000 	.word	0x40012000
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020000 	.word	0x40020000
 8002af8:	2000012c 	.word	0x2000012c
 8002afc:	40026410 	.word	0x40026410

08002b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <HAL_I2C_MspInit+0x84>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d12c      	bne.n	8002b7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <HAL_I2C_MspInit+0x88>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a17      	ldr	r2, [pc, #92]	; (8002b88 <HAL_I2C_MspInit+0x88>)
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_I2C_MspInit+0x88>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002b3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b44:	2312      	movs	r3, #18
 8002b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b50:	2304      	movs	r3, #4
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4619      	mov	r1, r3
 8002b5a:	480c      	ldr	r0, [pc, #48]	; (8002b8c <HAL_I2C_MspInit+0x8c>)
 8002b5c:	f001 f972 	bl	8003e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <HAL_I2C_MspInit+0x88>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	4a07      	ldr	r2, [pc, #28]	; (8002b88 <HAL_I2C_MspInit+0x88>)
 8002b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_I2C_MspInit+0x88>)
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b7c:	bf00      	nop
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40005400 	.word	0x40005400
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40020400 	.word	0x40020400

08002b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_TIM_Base_MspInit+0x64>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <HAL_TIM_Base_MspInit+0x64>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_TIM_Base_MspInit+0x64>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002bbe:	e012      	b.n	8002be6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0c      	ldr	r2, [pc, #48]	; (8002bf8 <HAL_TIM_Base_MspInit+0x68>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d10d      	bne.n	8002be6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <HAL_TIM_Base_MspInit+0x64>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	4a08      	ldr	r2, [pc, #32]	; (8002bf4 <HAL_TIM_Base_MspInit+0x64>)
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_TIM_Base_MspInit+0x64>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40000400 	.word	0x40000400

08002bfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08c      	sub	sp, #48	; 0x30
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	2032      	movs	r0, #50	; 0x32
 8002c12:	f000 fe03 	bl	800381c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c16:	2032      	movs	r0, #50	; 0x32
 8002c18:	f000 fe1c 	bl	8003854 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <HAL_InitTick+0xa4>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	4a1e      	ldr	r2, [pc, #120]	; (8002ca0 <HAL_InitTick+0xa4>)
 8002c26:	f043 0308 	orr.w	r3, r3, #8
 8002c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <HAL_InitTick+0xa4>)
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c38:	f107 0210 	add.w	r2, r7, #16
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f002 fca8 	bl	8005598 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002c48:	f002 fc92 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <HAL_InitTick+0xa8>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0c9b      	lsrs	r3, r3, #18
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <HAL_InitTick+0xac>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <HAL_InitTick+0xb0>)
 8002c64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <HAL_InitTick+0xac>)
 8002c68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c6c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002c6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <HAL_InitTick+0xac>)
 8002c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c72:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <HAL_InitTick+0xac>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_InitTick+0xac>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002c80:	4809      	ldr	r0, [pc, #36]	; (8002ca8 <HAL_InitTick+0xac>)
 8002c82:	f002 fe05 	bl	8005890 <HAL_TIM_Base_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d104      	bne.n	8002c96 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8002c8c:	4806      	ldr	r0, [pc, #24]	; (8002ca8 <HAL_InitTick+0xac>)
 8002c8e:	f002 fe4e 	bl	800592e <HAL_TIM_Base_Start_IT>
 8002c92:	4603      	mov	r3, r0
 8002c94:	e000      	b.n	8002c98 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3730      	adds	r7, #48	; 0x30
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	431bde83 	.word	0x431bde83
 8002ca8:	20000694 	.word	0x20000694
 8002cac:	40000c00 	.word	0x40000c00

08002cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	LCD_Clear();
 8002cc4:	f7ff f868 	bl	8001d98 <LCD_Clear>
	LCD_SetCursor(1, 3);
 8002cc8:	2103      	movs	r1, #3
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f7ff f878 	bl	8001dc0 <LCD_SetCursor>
    LCD_Print("HardFault", 0);
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4802      	ldr	r0, [pc, #8]	; (8002cdc <HardFault_Handler+0x1c>)
 8002cd4:	f7ff f95a 	bl	8001f8c <LCD_Print>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <HardFault_Handler+0x18>
 8002cda:	bf00      	nop
 8002cdc:	08008ae4 	.word	0x08008ae4

08002ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <MemManage_Handler+0x4>

08002ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cea:	e7fe      	b.n	8002cea <BusFault_Handler+0x4>

08002cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <UsageFault_Handler+0x4>

08002cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <RTC_Alarm_IRQHandler+0x10>)
 8002d06:	f002 fd69 	bl	80057dc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200001e0 	.word	0x200001e0

08002d14 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002d18:	4802      	ldr	r0, [pc, #8]	; (8002d24 <TIM5_IRQHandler+0x10>)
 8002d1a:	f002 fe5f 	bl	80059dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000694 	.word	0x20000694

08002d28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d2c:	4802      	ldr	r0, [pc, #8]	; (8002d38 <DMA2_Stream0_IRQHandler+0x10>)
 8002d2e:	f000 fe4d 	bl	80039cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000012c 	.word	0x2000012c

08002d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d44:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <_sbrk+0x5c>)
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <_sbrk+0x60>)
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d50:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <_sbrk+0x64>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <_sbrk+0x64>)
 8002d5a:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <_sbrk+0x68>)
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <_sbrk+0x64>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d207      	bcs.n	8002d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d6c:	f005 f996 	bl	800809c <__errno>
 8002d70:	4603      	mov	r3, r0
 8002d72:	220c      	movs	r2, #12
 8002d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	e009      	b.n	8002d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <_sbrk+0x64>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a05      	ldr	r2, [pc, #20]	; (8002da0 <_sbrk+0x64>)
 8002d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20020000 	.word	0x20020000
 8002d9c:	00000400 	.word	0x00000400
 8002da0:	200006d4 	.word	0x200006d4
 8002da4:	20004438 	.word	0x20004438

08002da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <SystemInit+0x28>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <SystemInit+0x28>)
 8002db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <SystemInit+0x28>)
 8002dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002dd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002dda:	e003      	b.n	8002de4 <LoopCopyDataInit>

08002ddc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002dde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002de0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002de2:	3104      	adds	r1, #4

08002de4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002de4:	480b      	ldr	r0, [pc, #44]	; (8002e14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002de8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002dec:	d3f6      	bcc.n	8002ddc <CopyDataInit>
  ldr  r2, =_sbss
 8002dee:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002df0:	e002      	b.n	8002df8 <LoopFillZerobss>

08002df2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002df2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002df4:	f842 3b04 	str.w	r3, [r2], #4

08002df8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dfc:	d3f9      	bcc.n	8002df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dfe:	f7ff ffd3 	bl	8002da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e02:	f005 f951 	bl	80080a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e06:	f7ff f919 	bl	800203c <main>
  bx  lr    
 8002e0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e10:	08008b7c 	.word	0x08008b7c
  ldr  r0, =_sdata
 8002e14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e18:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002e1c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002e20:	20004438 	.word	0x20004438

08002e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e24:	e7fe      	b.n	8002e24 <ADC_IRQHandler>
	...

08002e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_Init+0x40>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <HAL_Init+0x40>)
 8002e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_Init+0x40>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <HAL_Init+0x40>)
 8002e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e44:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <HAL_Init+0x40>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a07      	ldr	r2, [pc, #28]	; (8002e68 <HAL_Init+0x40>)
 8002e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e50:	2003      	movs	r0, #3
 8002e52:	f000 fcd8 	bl	8003806 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e56:	2000      	movs	r0, #0
 8002e58:	f7ff fed0 	bl	8002bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e5c:	f7ff fdb2 	bl	80029c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023c00 	.word	0x40023c00

08002e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_IncTick+0x20>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_IncTick+0x24>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <HAL_IncTick+0x24>)
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000010 	.word	0x20000010
 8002e90:	200006d8 	.word	0x200006d8

08002e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return uwTick;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_GetTick+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	200006d8 	.word	0x200006d8

08002eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7ff ffee 	bl	8002e94 <HAL_GetTick>
 8002eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d005      	beq.n	8002ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_Delay+0x44>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ed2:	bf00      	nop
 8002ed4:	f7ff ffde 	bl	8002e94 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d8f7      	bhi.n	8002ed4 <HAL_Delay+0x28>
  {
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000010 	.word	0x20000010

08002ef4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e033      	b.n	8002f72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff fd7e 	bl	8002a14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d118      	bne.n	8002f64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f3a:	f023 0302 	bic.w	r3, r3, #2
 8002f3e:	f043 0202 	orr.w	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fab4 	bl	80034b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
 8002f62:	e001      	b.n	8002f68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_Start+0x1a>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e08a      	b.n	80030ac <HAL_ADC_Start+0x130>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d018      	beq.n	8002fde <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fbc:	4b3e      	ldr	r3, [pc, #248]	; (80030b8 <HAL_ADC_Start+0x13c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a3e      	ldr	r2, [pc, #248]	; (80030bc <HAL_ADC_Start+0x140>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	0c9a      	lsrs	r2, r3, #18
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fd0:	e002      	b.n	8002fd8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f9      	bne.n	8002fd2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d15e      	bne.n	80030aa <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003016:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302a:	d106      	bne.n	800303a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f023 0206 	bic.w	r2, r3, #6
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
 8003038:	e002      	b.n	8003040 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_ADC_Start+0x144>)
 800304a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003054:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10f      	bne.n	8003082 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d11c      	bne.n	80030aa <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	e013      	b.n	80030aa <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <HAL_ADC_Start+0x148>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d10e      	bne.n	80030aa <HAL_ADC_Start+0x12e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d107      	bne.n	80030aa <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030a8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	20000008 	.word	0x20000008
 80030bc:	431bde83 	.word	0x431bde83
 80030c0:	40012300 	.word	0x40012300
 80030c4:	40012000 	.word	0x40012000

080030c8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_ADC_Stop+0x16>
 80030da:	2302      	movs	r3, #2
 80030dc:	e021      	b.n	8003122 <HAL_ADC_Stop+0x5a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314a:	d113      	bne.n	8003174 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315a:	d10b      	bne.n	8003174 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e05c      	b.n	800322e <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003174:	f7ff fe8e 	bl	8002e94 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800317a:	e01a      	b.n	80031b2 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d016      	beq.n	80031b2 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <HAL_ADC_PollForConversion+0x6c>
 800318a:	f7ff fe83 	bl	8002e94 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d20b      	bcs.n	80031b2 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f043 0204 	orr.w	r2, r3, #4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e03d      	b.n	800322e <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d1dd      	bne.n	800317c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0212 	mvn.w	r2, #18
 80031c8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d123      	bne.n	800322c <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d11f      	bne.n	800322c <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d006      	beq.n	8003208 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003204:	2b00      	cmp	r3, #0
 8003206:	d111      	bne.n	800322c <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	f043 0201 	orr.w	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_ADC_ConfigChannel+0x1c>
 8003268:	2302      	movs	r3, #2
 800326a:	e113      	b.n	8003494 <HAL_ADC_ConfigChannel+0x244>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b09      	cmp	r3, #9
 800327a:	d925      	bls.n	80032c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68d9      	ldr	r1, [r3, #12]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	3b1e      	subs	r3, #30
 8003292:	2207      	movs	r2, #7
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43da      	mvns	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	400a      	ands	r2, r1
 80032a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68d9      	ldr	r1, [r3, #12]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	4618      	mov	r0, r3
 80032b4:	4603      	mov	r3, r0
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4403      	add	r3, r0
 80032ba:	3b1e      	subs	r3, #30
 80032bc:	409a      	lsls	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	e022      	b.n	800330e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6919      	ldr	r1, [r3, #16]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	2207      	movs	r2, #7
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	400a      	ands	r2, r1
 80032ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6919      	ldr	r1, [r3, #16]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4618      	mov	r0, r3
 80032fe:	4603      	mov	r3, r0
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4403      	add	r3, r0
 8003304:	409a      	lsls	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b06      	cmp	r3, #6
 8003314:	d824      	bhi.n	8003360 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	3b05      	subs	r3, #5
 8003328:	221f      	movs	r2, #31
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	400a      	ands	r2, r1
 8003336:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	4618      	mov	r0, r3
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	3b05      	subs	r3, #5
 8003352:	fa00 f203 	lsl.w	r2, r0, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	635a      	str	r2, [r3, #52]	; 0x34
 800335e:	e04c      	b.n	80033fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b0c      	cmp	r3, #12
 8003366:	d824      	bhi.n	80033b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	3b23      	subs	r3, #35	; 0x23
 800337a:	221f      	movs	r2, #31
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43da      	mvns	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	400a      	ands	r2, r1
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	4618      	mov	r0, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	3b23      	subs	r3, #35	; 0x23
 80033a4:	fa00 f203 	lsl.w	r2, r0, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
 80033b0:	e023      	b.n	80033fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	3b41      	subs	r3, #65	; 0x41
 80033c4:	221f      	movs	r2, #31
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	400a      	ands	r2, r1
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	4618      	mov	r0, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	3b41      	subs	r3, #65	; 0x41
 80033ee:	fa00 f203 	lsl.w	r2, r0, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033fa:	4b29      	ldr	r3, [pc, #164]	; (80034a0 <HAL_ADC_ConfigChannel+0x250>)
 80033fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a28      	ldr	r2, [pc, #160]	; (80034a4 <HAL_ADC_ConfigChannel+0x254>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d10f      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x1d8>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b12      	cmp	r3, #18
 800340e:	d10b      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <HAL_ADC_ConfigChannel+0x254>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d12b      	bne.n	800348a <HAL_ADC_ConfigChannel+0x23a>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1c      	ldr	r2, [pc, #112]	; (80034a8 <HAL_ADC_ConfigChannel+0x258>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <HAL_ADC_ConfigChannel+0x1f4>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b11      	cmp	r3, #17
 8003442:	d122      	bne.n	800348a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a11      	ldr	r2, [pc, #68]	; (80034a8 <HAL_ADC_ConfigChannel+0x258>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d111      	bne.n	800348a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003466:	4b11      	ldr	r3, [pc, #68]	; (80034ac <HAL_ADC_ConfigChannel+0x25c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <HAL_ADC_ConfigChannel+0x260>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	0c9a      	lsrs	r2, r3, #18
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800347c:	e002      	b.n	8003484 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	3b01      	subs	r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f9      	bne.n	800347e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	40012300 	.word	0x40012300
 80034a4:	40012000 	.word	0x40012000
 80034a8:	10000012 	.word	0x10000012
 80034ac:	20000008 	.word	0x20000008
 80034b0:	431bde83 	.word	0x431bde83

080034b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034bc:	4b79      	ldr	r3, [pc, #484]	; (80036a4 <ADC_Init+0x1f0>)
 80034be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	021a      	lsls	r2, r3, #8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800350c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800352e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6899      	ldr	r1, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <ADC_Init+0x1f4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d022      	beq.n	8003592 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800355a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6899      	ldr	r1, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800357c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6899      	ldr	r1, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	e00f      	b.n	80035b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0202 	bic.w	r2, r2, #2
 80035c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6899      	ldr	r1, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7e1b      	ldrb	r3, [r3, #24]
 80035cc:	005a      	lsls	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01b      	beq.n	8003618 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6859      	ldr	r1, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	3b01      	subs	r3, #1
 800360c:	035a      	lsls	r2, r3, #13
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	e007      	b.n	8003628 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003626:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	3b01      	subs	r3, #1
 8003644:	051a      	lsls	r2, r3, #20
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800365c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800366a:	025a      	lsls	r2, r3, #9
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6899      	ldr	r1, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	029a      	lsls	r2, r3, #10
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	40012300 	.word	0x40012300
 80036a8:	0f000001 	.word	0x0f000001

080036ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <__NVIC_SetPriorityGrouping+0x44>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c8:	4013      	ands	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <__NVIC_SetPriorityGrouping+0x44>)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	60d3      	str	r3, [r2, #12]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <__NVIC_GetPriorityGrouping+0x18>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	f003 0307 	and.w	r3, r3, #7
}
 8003702:	4618      	mov	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	2b00      	cmp	r3, #0
 8003720:	db0b      	blt.n	800373a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	f003 021f 	and.w	r2, r3, #31
 8003728:	4907      	ldr	r1, [pc, #28]	; (8003748 <__NVIC_EnableIRQ+0x38>)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2001      	movs	r0, #1
 8003732:	fa00 f202 	lsl.w	r2, r0, r2
 8003736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	e000e100 	.word	0xe000e100

0800374c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	6039      	str	r1, [r7, #0]
 8003756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375c:	2b00      	cmp	r3, #0
 800375e:	db0a      	blt.n	8003776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	490c      	ldr	r1, [pc, #48]	; (8003798 <__NVIC_SetPriority+0x4c>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	0112      	lsls	r2, r2, #4
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	440b      	add	r3, r1
 8003770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003774:	e00a      	b.n	800378c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	4908      	ldr	r1, [pc, #32]	; (800379c <__NVIC_SetPriority+0x50>)
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	3b04      	subs	r3, #4
 8003784:	0112      	lsls	r2, r2, #4
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	440b      	add	r3, r1
 800378a:	761a      	strb	r2, [r3, #24]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000e100 	.word	0xe000e100
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	; 0x24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f1c3 0307 	rsb	r3, r3, #7
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	bf28      	it	cs
 80037be:	2304      	movcs	r3, #4
 80037c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3304      	adds	r3, #4
 80037c6:	2b06      	cmp	r3, #6
 80037c8:	d902      	bls.n	80037d0 <NVIC_EncodePriority+0x30>
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3b03      	subs	r3, #3
 80037ce:	e000      	b.n	80037d2 <NVIC_EncodePriority+0x32>
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43da      	mvns	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	401a      	ands	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037e8:	f04f 31ff 	mov.w	r1, #4294967295
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa01 f303 	lsl.w	r3, r1, r3
 80037f2:	43d9      	mvns	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f8:	4313      	orrs	r3, r2
         );
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3724      	adds	r7, #36	; 0x24
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ff4c 	bl	80036ac <__NVIC_SetPriorityGrouping>
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800382e:	f7ff ff61 	bl	80036f4 <__NVIC_GetPriorityGrouping>
 8003832:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	6978      	ldr	r0, [r7, #20]
 800383a:	f7ff ffb1 	bl	80037a0 <NVIC_EncodePriority>
 800383e:	4602      	mov	r2, r0
 8003840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff ff80 	bl	800374c <__NVIC_SetPriority>
}
 800384c:	bf00      	nop
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff ff54 	bl	8003710 <__NVIC_EnableIRQ>
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800387c:	f7ff fb0a 	bl	8002e94 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e099      	b.n	80039c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ac:	e00f      	b.n	80038ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ae:	f7ff faf1 	bl	8002e94 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b05      	cmp	r3, #5
 80038ba:	d908      	bls.n	80038ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2203      	movs	r2, #3
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e078      	b.n	80039c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e8      	bne.n	80038ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4b38      	ldr	r3, [pc, #224]	; (80039c8 <HAL_DMA_Init+0x158>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2b04      	cmp	r3, #4
 8003926:	d107      	bne.n	8003938 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	4313      	orrs	r3, r2
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f023 0307 	bic.w	r3, r3, #7
 800394e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	2b04      	cmp	r3, #4
 8003960:	d117      	bne.n	8003992 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00e      	beq.n	8003992 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f9e9 	bl	8003d4c <DMA_CheckFifoParam>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2240      	movs	r2, #64	; 0x40
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800398e:	2301      	movs	r3, #1
 8003990:	e016      	b.n	80039c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f9a0 	bl	8003ce0 <DMA_CalcBaseAndBitshift>
 80039a0:	4603      	mov	r3, r0
 80039a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	223f      	movs	r2, #63	; 0x3f
 80039aa:	409a      	lsls	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	f010803f 	.word	0xf010803f

080039cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039d8:	4b8e      	ldr	r3, [pc, #568]	; (8003c14 <HAL_DMA_IRQHandler+0x248>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a8e      	ldr	r2, [pc, #568]	; (8003c18 <HAL_DMA_IRQHandler+0x24c>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	0a9b      	lsrs	r3, r3, #10
 80039e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	2208      	movs	r2, #8
 80039f8:	409a      	lsls	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01a      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d013      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0204 	bic.w	r2, r2, #4
 8003a1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a24:	2208      	movs	r2, #8
 8003a26:	409a      	lsls	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a30:	f043 0201 	orr.w	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d012      	beq.n	8003a6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	f043 0202 	orr.w	r2, r3, #2
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	2204      	movs	r2, #4
 8003a74:	409a      	lsls	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d012      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a90:	2204      	movs	r2, #4
 8003a92:	409a      	lsls	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	f043 0204 	orr.w	r2, r3, #4
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d043      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d03c      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d018      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d108      	bne.n	8003afc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d024      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
 8003afa:	e01f      	b.n	8003b3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01b      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
 8003b0c:	e016      	b.n	8003b3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0208 	bic.w	r2, r2, #8
 8003b2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	2220      	movs	r2, #32
 8003b42:	409a      	lsls	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 808f 	beq.w	8003c6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8087 	beq.w	8003c6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	2220      	movs	r2, #32
 8003b64:	409a      	lsls	r2, r3
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d136      	bne.n	8003be4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0216 	bic.w	r2, r2, #22
 8003b84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_DMA_IRQHandler+0x1da>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0208 	bic.w	r2, r2, #8
 8003bb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bba:	223f      	movs	r2, #63	; 0x3f
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d07e      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
        }
        return;
 8003be2:	e079      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01d      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d031      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4798      	blx	r3
 8003c10:	e02c      	b.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
 8003c12:	bf00      	nop
 8003c14:	20000008 	.word	0x20000008
 8003c18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d023      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
 8003c2c:	e01e      	b.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10f      	bne.n	8003c5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0210 	bic.w	r2, r2, #16
 8003c4a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d032      	beq.n	8003cda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d022      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2205      	movs	r2, #5
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d307      	bcc.n	8003cb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f2      	bne.n	8003c98 <HAL_DMA_IRQHandler+0x2cc>
 8003cb2:	e000      	b.n	8003cb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cb4:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
 8003cd6:	e000      	b.n	8003cda <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cd8:	bf00      	nop
    }
  }
}
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	3b10      	subs	r3, #16
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <DMA_CalcBaseAndBitshift+0x64>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cfa:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <DMA_CalcBaseAndBitshift+0x68>)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d909      	bls.n	8003d22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d20:	e007      	b.n	8003d32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	aaaaaaab 	.word	0xaaaaaaab
 8003d48:	08008b30 	.word	0x08008b30

08003d4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d11f      	bne.n	8003da6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d856      	bhi.n	8003e1a <DMA_CheckFifoParam+0xce>
 8003d6c:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <DMA_CheckFifoParam+0x28>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	08003d97 	.word	0x08003d97
 8003d7c:	08003d85 	.word	0x08003d85
 8003d80:	08003e1b 	.word	0x08003e1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d046      	beq.n	8003e1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d94:	e043      	b.n	8003e1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d9e:	d140      	bne.n	8003e22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da4:	e03d      	b.n	8003e22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dae:	d121      	bne.n	8003df4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d837      	bhi.n	8003e26 <DMA_CheckFifoParam+0xda>
 8003db6:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <DMA_CheckFifoParam+0x70>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003dd3 	.word	0x08003dd3
 8003dc4:	08003dcd 	.word	0x08003dcd
 8003dc8:	08003de5 	.word	0x08003de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd0:	e030      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d025      	beq.n	8003e2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de2:	e022      	b.n	8003e2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dec:	d11f      	bne.n	8003e2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003df2:	e01c      	b.n	8003e2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d903      	bls.n	8003e02 <DMA_CheckFifoParam+0xb6>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d003      	beq.n	8003e08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e00:	e018      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      break;
 8003e06:	e015      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00e      	beq.n	8003e32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      break;
 8003e18:	e00b      	b.n	8003e32 <DMA_CheckFifoParam+0xe6>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e00a      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e008      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e006      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e26:	bf00      	nop
 8003e28:	e004      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e32:	bf00      	nop
    }
  } 
  
  return status; 
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop

08003e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b089      	sub	sp, #36	; 0x24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	e159      	b.n	8004114 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e60:	2201      	movs	r2, #1
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	f040 8148 	bne.w	800410e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d00b      	beq.n	8003e9e <HAL_GPIO_Init+0x5a>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d007      	beq.n	8003e9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e92:	2b11      	cmp	r3, #17
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b12      	cmp	r3, #18
 8003e9c:	d130      	bne.n	8003f00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 0201 	and.w	r2, r3, #1
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d003      	beq.n	8003f40 <HAL_GPIO_Init+0xfc>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b12      	cmp	r3, #18
 8003f3e:	d123      	bne.n	8003f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	08da      	lsrs	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3208      	adds	r2, #8
 8003f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	220f      	movs	r2, #15
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	08da      	lsrs	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3208      	adds	r2, #8
 8003f82:	69b9      	ldr	r1, [r7, #24]
 8003f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	2203      	movs	r2, #3
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 0203 	and.w	r2, r3, #3
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a2 	beq.w	800410e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	4b57      	ldr	r3, [pc, #348]	; (800412c <HAL_GPIO_Init+0x2e8>)
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	4a56      	ldr	r2, [pc, #344]	; (800412c <HAL_GPIO_Init+0x2e8>)
 8003fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fda:	4b54      	ldr	r3, [pc, #336]	; (800412c <HAL_GPIO_Init+0x2e8>)
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fe6:	4a52      	ldr	r2, [pc, #328]	; (8004130 <HAL_GPIO_Init+0x2ec>)
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	3302      	adds	r3, #2
 8003fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	220f      	movs	r2, #15
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4013      	ands	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a49      	ldr	r2, [pc, #292]	; (8004134 <HAL_GPIO_Init+0x2f0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d019      	beq.n	8004046 <HAL_GPIO_Init+0x202>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a48      	ldr	r2, [pc, #288]	; (8004138 <HAL_GPIO_Init+0x2f4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_GPIO_Init+0x1fe>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a47      	ldr	r2, [pc, #284]	; (800413c <HAL_GPIO_Init+0x2f8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00d      	beq.n	800403e <HAL_GPIO_Init+0x1fa>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a46      	ldr	r2, [pc, #280]	; (8004140 <HAL_GPIO_Init+0x2fc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d007      	beq.n	800403a <HAL_GPIO_Init+0x1f6>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a45      	ldr	r2, [pc, #276]	; (8004144 <HAL_GPIO_Init+0x300>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <HAL_GPIO_Init+0x1f2>
 8004032:	2304      	movs	r3, #4
 8004034:	e008      	b.n	8004048 <HAL_GPIO_Init+0x204>
 8004036:	2307      	movs	r3, #7
 8004038:	e006      	b.n	8004048 <HAL_GPIO_Init+0x204>
 800403a:	2303      	movs	r3, #3
 800403c:	e004      	b.n	8004048 <HAL_GPIO_Init+0x204>
 800403e:	2302      	movs	r3, #2
 8004040:	e002      	b.n	8004048 <HAL_GPIO_Init+0x204>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_GPIO_Init+0x204>
 8004046:	2300      	movs	r3, #0
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	f002 0203 	and.w	r2, r2, #3
 800404e:	0092      	lsls	r2, r2, #2
 8004050:	4093      	lsls	r3, r2
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004058:	4935      	ldr	r1, [pc, #212]	; (8004130 <HAL_GPIO_Init+0x2ec>)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	3302      	adds	r3, #2
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004066:	4b38      	ldr	r3, [pc, #224]	; (8004148 <HAL_GPIO_Init+0x304>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	43db      	mvns	r3, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4013      	ands	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800408a:	4a2f      	ldr	r2, [pc, #188]	; (8004148 <HAL_GPIO_Init+0x304>)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004090:	4b2d      	ldr	r3, [pc, #180]	; (8004148 <HAL_GPIO_Init+0x304>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040b4:	4a24      	ldr	r2, [pc, #144]	; (8004148 <HAL_GPIO_Init+0x304>)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ba:	4b23      	ldr	r3, [pc, #140]	; (8004148 <HAL_GPIO_Init+0x304>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4013      	ands	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040de:	4a1a      	ldr	r2, [pc, #104]	; (8004148 <HAL_GPIO_Init+0x304>)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040e4:	4b18      	ldr	r3, [pc, #96]	; (8004148 <HAL_GPIO_Init+0x304>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004108:	4a0f      	ldr	r2, [pc, #60]	; (8004148 <HAL_GPIO_Init+0x304>)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3301      	adds	r3, #1
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b0f      	cmp	r3, #15
 8004118:	f67f aea2 	bls.w	8003e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	3724      	adds	r7, #36	; 0x24
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800
 8004130:	40013800 	.word	0x40013800
 8004134:	40020000 	.word	0x40020000
 8004138:	40020400 	.word	0x40020400
 800413c:	40020800 	.word	0x40020800
 8004140:	40020c00 	.word	0x40020c00
 8004144:	40021000 	.word	0x40021000
 8004148:	40013c00 	.word	0x40013c00

0800414c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
 8004168:	e001      	b.n	800416e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
 8004188:	4613      	mov	r3, r2
 800418a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800418c:	787b      	ldrb	r3, [r7, #1]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004198:	e003      	b.n	80041a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800419a:	887b      	ldrh	r3, [r7, #2]
 800419c:	041a      	lsls	r2, r3, #16
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	619a      	str	r2, [r3, #24]
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e12b      	b.n	800441a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fe fc92 	bl	8002b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2224      	movs	r2, #36	; 0x24
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0201 	bic.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004202:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004212:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004214:	f001 f9ac 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 8004218:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4a81      	ldr	r2, [pc, #516]	; (8004424 <HAL_I2C_Init+0x274>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d807      	bhi.n	8004234 <HAL_I2C_Init+0x84>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4a80      	ldr	r2, [pc, #512]	; (8004428 <HAL_I2C_Init+0x278>)
 8004228:	4293      	cmp	r3, r2
 800422a:	bf94      	ite	ls
 800422c:	2301      	movls	r3, #1
 800422e:	2300      	movhi	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	e006      	b.n	8004242 <HAL_I2C_Init+0x92>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4a7d      	ldr	r2, [pc, #500]	; (800442c <HAL_I2C_Init+0x27c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	bf94      	ite	ls
 800423c:	2301      	movls	r3, #1
 800423e:	2300      	movhi	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0e7      	b.n	800441a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a78      	ldr	r2, [pc, #480]	; (8004430 <HAL_I2C_Init+0x280>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	0c9b      	lsrs	r3, r3, #18
 8004254:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4a6a      	ldr	r2, [pc, #424]	; (8004424 <HAL_I2C_Init+0x274>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d802      	bhi.n	8004284 <HAL_I2C_Init+0xd4>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	3301      	adds	r3, #1
 8004282:	e009      	b.n	8004298 <HAL_I2C_Init+0xe8>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800428a:	fb02 f303 	mul.w	r3, r2, r3
 800428e:	4a69      	ldr	r2, [pc, #420]	; (8004434 <HAL_I2C_Init+0x284>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	099b      	lsrs	r3, r3, #6
 8004296:	3301      	adds	r3, #1
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	430b      	orrs	r3, r1
 800429e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	495c      	ldr	r1, [pc, #368]	; (8004424 <HAL_I2C_Init+0x274>)
 80042b4:	428b      	cmp	r3, r1
 80042b6:	d819      	bhi.n	80042ec <HAL_I2C_Init+0x13c>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1e59      	subs	r1, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042c6:	1c59      	adds	r1, r3, #1
 80042c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042cc:	400b      	ands	r3, r1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <HAL_I2C_Init+0x138>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1e59      	subs	r1, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80042e0:	3301      	adds	r3, #1
 80042e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e6:	e051      	b.n	800438c <HAL_I2C_Init+0x1dc>
 80042e8:	2304      	movs	r3, #4
 80042ea:	e04f      	b.n	800438c <HAL_I2C_Init+0x1dc>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d111      	bne.n	8004318 <HAL_I2C_Init+0x168>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1e58      	subs	r0, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	440b      	add	r3, r1
 8004302:	fbb0 f3f3 	udiv	r3, r0, r3
 8004306:	3301      	adds	r3, #1
 8004308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e012      	b.n	800433e <HAL_I2C_Init+0x18e>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	1e58      	subs	r0, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6859      	ldr	r1, [r3, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	0099      	lsls	r1, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	fbb0 f3f3 	udiv	r3, r0, r3
 800432e:	3301      	adds	r3, #1
 8004330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_Init+0x196>
 8004342:	2301      	movs	r3, #1
 8004344:	e022      	b.n	800438c <HAL_I2C_Init+0x1dc>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10e      	bne.n	800436c <HAL_I2C_Init+0x1bc>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1e58      	subs	r0, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6859      	ldr	r1, [r3, #4]
 8004356:	460b      	mov	r3, r1
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	440b      	add	r3, r1
 800435c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004360:	3301      	adds	r3, #1
 8004362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436a:	e00f      	b.n	800438c <HAL_I2C_Init+0x1dc>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	1e58      	subs	r0, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	0099      	lsls	r1, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004382:	3301      	adds	r3, #1
 8004384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	6809      	ldr	r1, [r1, #0]
 8004390:	4313      	orrs	r3, r2
 8004392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69da      	ldr	r2, [r3, #28]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6911      	ldr	r1, [r2, #16]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68d2      	ldr	r2, [r2, #12]
 80043c6:	4311      	orrs	r1, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	000186a0 	.word	0x000186a0
 8004428:	001e847f 	.word	0x001e847f
 800442c:	003d08ff 	.word	0x003d08ff
 8004430:	431bde83 	.word	0x431bde83
 8004434:	10624dd3 	.word	0x10624dd3

08004438 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	461a      	mov	r2, r3
 8004444:	460b      	mov	r3, r1
 8004446:	817b      	strh	r3, [r7, #10]
 8004448:	4613      	mov	r3, r2
 800444a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800444c:	f7fe fd22 	bl	8002e94 <HAL_GetTick>
 8004450:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b20      	cmp	r3, #32
 800445c:	f040 80e0 	bne.w	8004620 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2319      	movs	r3, #25
 8004466:	2201      	movs	r2, #1
 8004468:	4970      	ldr	r1, [pc, #448]	; (800462c <HAL_I2C_Master_Transmit+0x1f4>)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fa92 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004476:	2302      	movs	r3, #2
 8004478:	e0d3      	b.n	8004622 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_I2C_Master_Transmit+0x50>
 8004484:	2302      	movs	r3, #2
 8004486:	e0cc      	b.n	8004622 <HAL_I2C_Master_Transmit+0x1ea>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d007      	beq.n	80044ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0201 	orr.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2221      	movs	r2, #33	; 0x21
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2210      	movs	r2, #16
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	893a      	ldrh	r2, [r7, #8]
 80044de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4a50      	ldr	r2, [pc, #320]	; (8004630 <HAL_I2C_Master_Transmit+0x1f8>)
 80044ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044f0:	8979      	ldrh	r1, [r7, #10]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	6a3a      	ldr	r2, [r7, #32]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f9ca 	bl	8004890 <I2C_MasterRequestWrite>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e08d      	b.n	8004622 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800451c:	e066      	b.n	80045ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	6a39      	ldr	r1, [r7, #32]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fb0c 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	2b04      	cmp	r3, #4
 8004534:	d107      	bne.n	8004546 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004544:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e06b      	b.n	8004622 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	781a      	ldrb	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b04      	cmp	r3, #4
 8004586:	d11b      	bne.n	80045c0 <HAL_I2C_Master_Transmit+0x188>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458c:	2b00      	cmp	r3, #0
 800458e:	d017      	beq.n	80045c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	6a39      	ldr	r1, [r7, #32]
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 fafc 	bl	8004bc2 <I2C_WaitOnBTFFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00d      	beq.n	80045ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d107      	bne.n	80045e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e01a      	b.n	8004622 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d194      	bne.n	800451e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	e000      	b.n	8004622 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004620:	2302      	movs	r3, #2
  }
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	00100002 	.word	0x00100002
 8004630:	ffff0000 	.word	0xffff0000

08004634 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	607a      	str	r2, [r7, #4]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	460b      	mov	r3, r1
 8004642:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004644:	f7fe fc26 	bl	8002e94 <HAL_GetTick>
 8004648:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800464a:	2301      	movs	r3, #1
 800464c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b20      	cmp	r3, #32
 8004658:	f040 8111 	bne.w	800487e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2319      	movs	r3, #25
 8004662:	2201      	movs	r2, #1
 8004664:	4988      	ldr	r1, [pc, #544]	; (8004888 <HAL_I2C_IsDeviceReady+0x254>)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f994 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004672:	2302      	movs	r3, #2
 8004674:	e104      	b.n	8004880 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_I2C_IsDeviceReady+0x50>
 8004680:	2302      	movs	r3, #2
 8004682:	e0fd      	b.n	8004880 <HAL_I2C_IsDeviceReady+0x24c>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d007      	beq.n	80046aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0201 	orr.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2224      	movs	r2, #36	; 0x24
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4a70      	ldr	r2, [pc, #448]	; (800488c <HAL_I2C_IsDeviceReady+0x258>)
 80046cc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f952 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00d      	beq.n	8004712 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004704:	d103      	bne.n	800470e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e0b6      	b.n	8004880 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004712:	897b      	ldrh	r3, [r7, #10]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004720:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004722:	f7fe fbb7 	bl	8002e94 <HAL_GetTick>
 8004726:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b02      	cmp	r3, #2
 8004734:	bf0c      	ite	eq
 8004736:	2301      	moveq	r3, #1
 8004738:	2300      	movne	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474c:	bf0c      	ite	eq
 800474e:	2301      	moveq	r3, #1
 8004750:	2300      	movne	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004756:	e025      	b.n	80047a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004758:	f7fe fb9c 	bl	8002e94 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d302      	bcc.n	800476e <HAL_I2C_IsDeviceReady+0x13a>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	22a0      	movs	r2, #160	; 0xa0
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b02      	cmp	r3, #2
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2ba0      	cmp	r3, #160	; 0xa0
 80047ae:	d005      	beq.n	80047bc <HAL_I2C_IsDeviceReady+0x188>
 80047b0:	7dfb      	ldrb	r3, [r7, #23]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <HAL_I2C_IsDeviceReady+0x188>
 80047b6:	7dbb      	ldrb	r3, [r7, #22]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0cd      	beq.n	8004758 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d129      	bne.n	8004826 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	2319      	movs	r3, #25
 80047fe:	2201      	movs	r2, #1
 8004800:	4921      	ldr	r1, [pc, #132]	; (8004888 <HAL_I2C_IsDeviceReady+0x254>)
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f8c6 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e036      	b.n	8004880 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e02c      	b.n	8004880 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004834:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800483e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	2319      	movs	r3, #25
 8004846:	2201      	movs	r2, #1
 8004848:	490f      	ldr	r1, [pc, #60]	; (8004888 <HAL_I2C_IsDeviceReady+0x254>)
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f8a2 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e012      	b.n	8004880 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	3301      	adds	r3, #1
 800485e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	f4ff af32 	bcc.w	80046ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800487e:	2302      	movs	r3, #2
  }
}
 8004880:	4618      	mov	r0, r3
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	00100002 	.word	0x00100002
 800488c:	ffff0000 	.word	0xffff0000

08004890 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	460b      	mov	r3, r1
 800489e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d006      	beq.n	80048ba <I2C_MasterRequestWrite+0x2a>
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d003      	beq.n	80048ba <I2C_MasterRequestWrite+0x2a>
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b8:	d108      	bne.n	80048cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e00b      	b.n	80048e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	2b12      	cmp	r3, #18
 80048d2:	d107      	bne.n	80048e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f84f 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00d      	beq.n	8004918 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490a:	d103      	bne.n	8004914 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004912:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e035      	b.n	8004984 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004920:	d108      	bne.n	8004934 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004922:	897b      	ldrh	r3, [r7, #10]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004930:	611a      	str	r2, [r3, #16]
 8004932:	e01b      	b.n	800496c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004934:	897b      	ldrh	r3, [r7, #10]
 8004936:	11db      	asrs	r3, r3, #7
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f003 0306 	and.w	r3, r3, #6
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f063 030f 	orn	r3, r3, #15
 8004944:	b2da      	uxtb	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	490e      	ldr	r1, [pc, #56]	; (800498c <I2C_MasterRequestWrite+0xfc>)
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f875 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e010      	b.n	8004984 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004962:	897b      	ldrh	r3, [r7, #10]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4907      	ldr	r1, [pc, #28]	; (8004990 <I2C_MasterRequestWrite+0x100>)
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f865 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	00010008 	.word	0x00010008
 8004990:	00010002 	.word	0x00010002

08004994 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	4613      	mov	r3, r2
 80049a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049a4:	e025      	b.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d021      	beq.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ae:	f7fe fa71 	bl	8002e94 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d302      	bcc.n	80049c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d116      	bne.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0220 	orr.w	r2, r3, #32
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e023      	b.n	8004a3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d10d      	bne.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0x84>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	43da      	mvns	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	e00c      	b.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4013      	ands	r3, r2
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d0b6      	beq.n	80049a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a50:	e051      	b.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a60:	d123      	bne.n	8004aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f043 0204 	orr.w	r2, r3, #4
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e046      	b.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d021      	beq.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7fe f9ef 	bl	8002e94 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d302      	bcc.n	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d116      	bne.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e020      	b.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10c      	bne.n	8004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	43da      	mvns	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	e00b      	b.n	8004b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	43da      	mvns	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4013      	ands	r3, r2
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d18d      	bne.n	8004a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b4c:	e02d      	b.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f878 	bl	8004c44 <I2C_IsAcknowledgeFailed>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e02d      	b.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d021      	beq.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b66:	f7fe f995 	bl	8002e94 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d302      	bcc.n	8004b7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d116      	bne.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f043 0220 	orr.w	r2, r3, #32
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e007      	b.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb4:	2b80      	cmp	r3, #128	; 0x80
 8004bb6:	d1ca      	bne.n	8004b4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bce:	e02d      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f837 	bl	8004c44 <I2C_IsAcknowledgeFailed>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e02d      	b.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d021      	beq.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be8:	f7fe f954 	bl	8002e94 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f043 0220 	orr.w	r2, r3, #32
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e007      	b.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d1ca      	bne.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5a:	d11b      	bne.n	8004c94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	f043 0204 	orr.w	r2, r3, #4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e25e      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d075      	beq.n	8004dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cc2:	4b88      	ldr	r3, [pc, #544]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d00c      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cce:	4b85      	ldr	r3, [pc, #532]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d112      	bne.n	8004d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cda:	4b82      	ldr	r3, [pc, #520]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ce6:	d10b      	bne.n	8004d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce8:	4b7e      	ldr	r3, [pc, #504]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d05b      	beq.n	8004dac <HAL_RCC_OscConfig+0x108>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d157      	bne.n	8004dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e239      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d08:	d106      	bne.n	8004d18 <HAL_RCC_OscConfig+0x74>
 8004d0a:	4b76      	ldr	r3, [pc, #472]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a75      	ldr	r2, [pc, #468]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e01d      	b.n	8004d54 <HAL_RCC_OscConfig+0xb0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCC_OscConfig+0x98>
 8004d22:	4b70      	ldr	r3, [pc, #448]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a6f      	ldr	r2, [pc, #444]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	4b6d      	ldr	r3, [pc, #436]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a6c      	ldr	r2, [pc, #432]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e00b      	b.n	8004d54 <HAL_RCC_OscConfig+0xb0>
 8004d3c:	4b69      	ldr	r3, [pc, #420]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a68      	ldr	r2, [pc, #416]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	4b66      	ldr	r3, [pc, #408]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a65      	ldr	r2, [pc, #404]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d013      	beq.n	8004d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fe f89a 	bl	8002e94 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d64:	f7fe f896 	bl	8002e94 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	; 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e1fe      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d76:	4b5b      	ldr	r3, [pc, #364]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0xc0>
 8004d82:	e014      	b.n	8004dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7fe f886 	bl	8002e94 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d8c:	f7fe f882 	bl	8002e94 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	; 0x64
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e1ea      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9e:	4b51      	ldr	r3, [pc, #324]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0xe8>
 8004daa:	e000      	b.n	8004dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d063      	beq.n	8004e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dba:	4b4a      	ldr	r3, [pc, #296]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dc6:	4b47      	ldr	r3, [pc, #284]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d11c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dd2:	4b44      	ldr	r3, [pc, #272]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d116      	bne.n	8004e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dde:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_RCC_OscConfig+0x152>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d001      	beq.n	8004df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e1be      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df6:	4b3b      	ldr	r3, [pc, #236]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4937      	ldr	r1, [pc, #220]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0a:	e03a      	b.n	8004e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d020      	beq.n	8004e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e14:	4b34      	ldr	r3, [pc, #208]	; (8004ee8 <HAL_RCC_OscConfig+0x244>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1a:	f7fe f83b 	bl	8002e94 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e22:	f7fe f837 	bl	8002e94 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e19f      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e34:	4b2b      	ldr	r3, [pc, #172]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e40:	4b28      	ldr	r3, [pc, #160]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4925      	ldr	r1, [pc, #148]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	600b      	str	r3, [r1, #0]
 8004e54:	e015      	b.n	8004e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e56:	4b24      	ldr	r3, [pc, #144]	; (8004ee8 <HAL_RCC_OscConfig+0x244>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fe f81a 	bl	8002e94 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e64:	f7fe f816 	bl	8002e94 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e17e      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e76:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d036      	beq.n	8004efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d016      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <HAL_RCC_OscConfig+0x248>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9c:	f7fd fffa 	bl	8002e94 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea4:	f7fd fff6 	bl	8002e94 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e15e      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x200>
 8004ec2:	e01b      	b.n	8004efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec4:	4b09      	ldr	r3, [pc, #36]	; (8004eec <HAL_RCC_OscConfig+0x248>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eca:	f7fd ffe3 	bl	8002e94 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed0:	e00e      	b.n	8004ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ed2:	f7fd ffdf 	bl	8002e94 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d907      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e147      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	42470000 	.word	0x42470000
 8004eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef0:	4b88      	ldr	r3, [pc, #544]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1ea      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8097 	beq.w	8005038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f0e:	4b81      	ldr	r3, [pc, #516]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10f      	bne.n	8004f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	4b7d      	ldr	r3, [pc, #500]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	4a7c      	ldr	r2, [pc, #496]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f28:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2a:	4b7a      	ldr	r3, [pc, #488]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f32:	60bb      	str	r3, [r7, #8]
 8004f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f36:	2301      	movs	r3, #1
 8004f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3a:	4b77      	ldr	r3, [pc, #476]	; (8005118 <HAL_RCC_OscConfig+0x474>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d118      	bne.n	8004f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f46:	4b74      	ldr	r3, [pc, #464]	; (8005118 <HAL_RCC_OscConfig+0x474>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a73      	ldr	r2, [pc, #460]	; (8005118 <HAL_RCC_OscConfig+0x474>)
 8004f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f52:	f7fd ff9f 	bl	8002e94 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5a:	f7fd ff9b 	bl	8002e94 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e103      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6c:	4b6a      	ldr	r3, [pc, #424]	; (8005118 <HAL_RCC_OscConfig+0x474>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d106      	bne.n	8004f8e <HAL_RCC_OscConfig+0x2ea>
 8004f80:	4b64      	ldr	r3, [pc, #400]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	4a63      	ldr	r2, [pc, #396]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8c:	e01c      	b.n	8004fc8 <HAL_RCC_OscConfig+0x324>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d10c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x30c>
 8004f96:	4b5f      	ldr	r3, [pc, #380]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	4a5e      	ldr	r2, [pc, #376]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	f043 0304 	orr.w	r3, r3, #4
 8004fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa2:	4b5c      	ldr	r3, [pc, #368]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	4a5b      	ldr	r2, [pc, #364]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	6713      	str	r3, [r2, #112]	; 0x70
 8004fae:	e00b      	b.n	8004fc8 <HAL_RCC_OscConfig+0x324>
 8004fb0:	4b58      	ldr	r3, [pc, #352]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb4:	4a57      	ldr	r2, [pc, #348]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	6713      	str	r3, [r2, #112]	; 0x70
 8004fbc:	4b55      	ldr	r3, [pc, #340]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc0:	4a54      	ldr	r2, [pc, #336]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fc2:	f023 0304 	bic.w	r3, r3, #4
 8004fc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d015      	beq.n	8004ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fd ff60 	bl	8002e94 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd8:	f7fd ff5c 	bl	8002e94 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e0c2      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fee:	4b49      	ldr	r3, [pc, #292]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0ee      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x334>
 8004ffa:	e014      	b.n	8005026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffc:	f7fd ff4a 	bl	8002e94 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005002:	e00a      	b.n	800501a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005004:	f7fd ff46 	bl	8002e94 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005012:	4293      	cmp	r3, r2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e0ac      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501a:	4b3e      	ldr	r3, [pc, #248]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1ee      	bne.n	8005004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005026:	7dfb      	ldrb	r3, [r7, #23]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d105      	bne.n	8005038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502c:	4b39      	ldr	r3, [pc, #228]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 800502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005030:	4a38      	ldr	r2, [pc, #224]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8005032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005036:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8098 	beq.w	8005172 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005042:	4b34      	ldr	r3, [pc, #208]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b08      	cmp	r3, #8
 800504c:	d05c      	beq.n	8005108 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d141      	bne.n	80050da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005056:	4b31      	ldr	r3, [pc, #196]	; (800511c <HAL_RCC_OscConfig+0x478>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fd ff1a 	bl	8002e94 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005064:	f7fd ff16 	bl	8002e94 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e07e      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005076:	4b27      	ldr	r3, [pc, #156]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69da      	ldr	r2, [r3, #28]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	019b      	lsls	r3, r3, #6
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	3b01      	subs	r3, #1
 800509c:	041b      	lsls	r3, r3, #16
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	061b      	lsls	r3, r3, #24
 80050a6:	491b      	ldr	r1, [pc, #108]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <HAL_RCC_OscConfig+0x478>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b2:	f7fd feef 	bl	8002e94 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ba:	f7fd feeb 	bl	8002e94 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e053      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x416>
 80050d8:	e04b      	b.n	8005172 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050da:	4b10      	ldr	r3, [pc, #64]	; (800511c <HAL_RCC_OscConfig+0x478>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e0:	f7fd fed8 	bl	8002e94 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050e8:	f7fd fed4 	bl	8002e94 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e03c      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x444>
 8005106:	e034      	b.n	8005172 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d107      	bne.n	8005120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e02f      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
 8005114:	40023800 	.word	0x40023800
 8005118:	40007000 	.word	0x40007000
 800511c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005120:	4b16      	ldr	r3, [pc, #88]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	429a      	cmp	r2, r3
 8005132:	d11c      	bne.n	800516e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800513e:	429a      	cmp	r2, r3
 8005140:	d115      	bne.n	800516e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005148:	4013      	ands	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800514e:	4293      	cmp	r3, r2
 8005150:	d10d      	bne.n	800516e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800515c:	429a      	cmp	r2, r3
 800515e:	d106      	bne.n	800516e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800516a:	429a      	cmp	r2, r3
 800516c:	d001      	beq.n	8005172 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40023800 	.word	0x40023800

08005180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e0cc      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005194:	4b68      	ldr	r3, [pc, #416]	; (8005338 <HAL_RCC_ClockConfig+0x1b8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d90c      	bls.n	80051bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a2:	4b65      	ldr	r3, [pc, #404]	; (8005338 <HAL_RCC_ClockConfig+0x1b8>)
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051aa:	4b63      	ldr	r3, [pc, #396]	; (8005338 <HAL_RCC_ClockConfig+0x1b8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d001      	beq.n	80051bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0b8      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d020      	beq.n	800520a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d4:	4b59      	ldr	r3, [pc, #356]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	4a58      	ldr	r2, [pc, #352]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051ec:	4b53      	ldr	r3, [pc, #332]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4a52      	ldr	r2, [pc, #328]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f8:	4b50      	ldr	r3, [pc, #320]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	494d      	ldr	r1, [pc, #308]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	4313      	orrs	r3, r2
 8005208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d044      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d107      	bne.n	800522e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521e:	4b47      	ldr	r3, [pc, #284]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d119      	bne.n	800525e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e07f      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d003      	beq.n	800523e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800523a:	2b03      	cmp	r3, #3
 800523c:	d107      	bne.n	800524e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523e:	4b3f      	ldr	r3, [pc, #252]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e06f      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524e:	4b3b      	ldr	r3, [pc, #236]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e067      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525e:	4b37      	ldr	r3, [pc, #220]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f023 0203 	bic.w	r2, r3, #3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	4934      	ldr	r1, [pc, #208]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 800526c:	4313      	orrs	r3, r2
 800526e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005270:	f7fd fe10 	bl	8002e94 <HAL_GetTick>
 8005274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005276:	e00a      	b.n	800528e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005278:	f7fd fe0c 	bl	8002e94 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f241 3288 	movw	r2, #5000	; 0x1388
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e04f      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528e:	4b2b      	ldr	r3, [pc, #172]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 020c 	and.w	r2, r3, #12
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	429a      	cmp	r2, r3
 800529e:	d1eb      	bne.n	8005278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052a0:	4b25      	ldr	r3, [pc, #148]	; (8005338 <HAL_RCC_ClockConfig+0x1b8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d20c      	bcs.n	80052c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ae:	4b22      	ldr	r3, [pc, #136]	; (8005338 <HAL_RCC_ClockConfig+0x1b8>)
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b6:	4b20      	ldr	r3, [pc, #128]	; (8005338 <HAL_RCC_ClockConfig+0x1b8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d001      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e032      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d4:	4b19      	ldr	r3, [pc, #100]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4916      	ldr	r1, [pc, #88]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d009      	beq.n	8005306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052f2:	4b12      	ldr	r3, [pc, #72]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	490e      	ldr	r1, [pc, #56]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	4313      	orrs	r3, r2
 8005304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005306:	f000 f821 	bl	800534c <HAL_RCC_GetSysClockFreq>
 800530a:	4602      	mov	r2, r0
 800530c:	4b0b      	ldr	r3, [pc, #44]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	490a      	ldr	r1, [pc, #40]	; (8005340 <HAL_RCC_ClockConfig+0x1c0>)
 8005318:	5ccb      	ldrb	r3, [r1, r3]
 800531a:	fa22 f303 	lsr.w	r3, r2, r3
 800531e:	4a09      	ldr	r2, [pc, #36]	; (8005344 <HAL_RCC_ClockConfig+0x1c4>)
 8005320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005322:	4b09      	ldr	r3, [pc, #36]	; (8005348 <HAL_RCC_ClockConfig+0x1c8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f7fd fc68 	bl	8002bfc <HAL_InitTick>

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40023c00 	.word	0x40023c00
 800533c:	40023800 	.word	0x40023800
 8005340:	08008b18 	.word	0x08008b18
 8005344:	20000008 	.word	0x20000008
 8005348:	2000000c 	.word	0x2000000c

0800534c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800534c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005350:	b094      	sub	sp, #80	; 0x50
 8005352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	647b      	str	r3, [r7, #68]	; 0x44
 8005358:	2300      	movs	r3, #0
 800535a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800535c:	2300      	movs	r3, #0
 800535e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005364:	4b79      	ldr	r3, [pc, #484]	; (800554c <HAL_RCC_GetSysClockFreq+0x200>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 030c 	and.w	r3, r3, #12
 800536c:	2b08      	cmp	r3, #8
 800536e:	d00d      	beq.n	800538c <HAL_RCC_GetSysClockFreq+0x40>
 8005370:	2b08      	cmp	r3, #8
 8005372:	f200 80e1 	bhi.w	8005538 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_RCC_GetSysClockFreq+0x34>
 800537a:	2b04      	cmp	r3, #4
 800537c:	d003      	beq.n	8005386 <HAL_RCC_GetSysClockFreq+0x3a>
 800537e:	e0db      	b.n	8005538 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005380:	4b73      	ldr	r3, [pc, #460]	; (8005550 <HAL_RCC_GetSysClockFreq+0x204>)
 8005382:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005384:	e0db      	b.n	800553e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005386:	4b73      	ldr	r3, [pc, #460]	; (8005554 <HAL_RCC_GetSysClockFreq+0x208>)
 8005388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800538a:	e0d8      	b.n	800553e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800538c:	4b6f      	ldr	r3, [pc, #444]	; (800554c <HAL_RCC_GetSysClockFreq+0x200>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005394:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005396:	4b6d      	ldr	r3, [pc, #436]	; (800554c <HAL_RCC_GetSysClockFreq+0x200>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d063      	beq.n	800546a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a2:	4b6a      	ldr	r3, [pc, #424]	; (800554c <HAL_RCC_GetSysClockFreq+0x200>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	099b      	lsrs	r3, r3, #6
 80053a8:	2200      	movs	r2, #0
 80053aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80053ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b4:	633b      	str	r3, [r7, #48]	; 0x30
 80053b6:	2300      	movs	r3, #0
 80053b8:	637b      	str	r3, [r7, #52]	; 0x34
 80053ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80053be:	4622      	mov	r2, r4
 80053c0:	462b      	mov	r3, r5
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f04f 0100 	mov.w	r1, #0
 80053ca:	0159      	lsls	r1, r3, #5
 80053cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053d0:	0150      	lsls	r0, r2, #5
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4621      	mov	r1, r4
 80053d8:	1a51      	subs	r1, r2, r1
 80053da:	6139      	str	r1, [r7, #16]
 80053dc:	4629      	mov	r1, r5
 80053de:	eb63 0301 	sbc.w	r3, r3, r1
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053f0:	4659      	mov	r1, fp
 80053f2:	018b      	lsls	r3, r1, #6
 80053f4:	4651      	mov	r1, sl
 80053f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053fa:	4651      	mov	r1, sl
 80053fc:	018a      	lsls	r2, r1, #6
 80053fe:	4651      	mov	r1, sl
 8005400:	ebb2 0801 	subs.w	r8, r2, r1
 8005404:	4659      	mov	r1, fp
 8005406:	eb63 0901 	sbc.w	r9, r3, r1
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800541a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800541e:	4690      	mov	r8, r2
 8005420:	4699      	mov	r9, r3
 8005422:	4623      	mov	r3, r4
 8005424:	eb18 0303 	adds.w	r3, r8, r3
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	462b      	mov	r3, r5
 800542c:	eb49 0303 	adc.w	r3, r9, r3
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800543e:	4629      	mov	r1, r5
 8005440:	024b      	lsls	r3, r1, #9
 8005442:	4621      	mov	r1, r4
 8005444:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005448:	4621      	mov	r1, r4
 800544a:	024a      	lsls	r2, r1, #9
 800544c:	4610      	mov	r0, r2
 800544e:	4619      	mov	r1, r3
 8005450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005452:	2200      	movs	r2, #0
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
 8005456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800545c:	f7fb fb06 	bl	8000a6c <__aeabi_uldivmod>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4613      	mov	r3, r2
 8005466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005468:	e058      	b.n	800551c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800546a:	4b38      	ldr	r3, [pc, #224]	; (800554c <HAL_RCC_GetSysClockFreq+0x200>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	099b      	lsrs	r3, r3, #6
 8005470:	2200      	movs	r2, #0
 8005472:	4618      	mov	r0, r3
 8005474:	4611      	mov	r1, r2
 8005476:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	2300      	movs	r3, #0
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
 8005480:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005484:	4642      	mov	r2, r8
 8005486:	464b      	mov	r3, r9
 8005488:	f04f 0000 	mov.w	r0, #0
 800548c:	f04f 0100 	mov.w	r1, #0
 8005490:	0159      	lsls	r1, r3, #5
 8005492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005496:	0150      	lsls	r0, r2, #5
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4641      	mov	r1, r8
 800549e:	ebb2 0a01 	subs.w	sl, r2, r1
 80054a2:	4649      	mov	r1, r9
 80054a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054bc:	ebb2 040a 	subs.w	r4, r2, sl
 80054c0:	eb63 050b 	sbc.w	r5, r3, fp
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	00eb      	lsls	r3, r5, #3
 80054ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054d2:	00e2      	lsls	r2, r4, #3
 80054d4:	4614      	mov	r4, r2
 80054d6:	461d      	mov	r5, r3
 80054d8:	4643      	mov	r3, r8
 80054da:	18e3      	adds	r3, r4, r3
 80054dc:	603b      	str	r3, [r7, #0]
 80054de:	464b      	mov	r3, r9
 80054e0:	eb45 0303 	adc.w	r3, r5, r3
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054f2:	4629      	mov	r1, r5
 80054f4:	028b      	lsls	r3, r1, #10
 80054f6:	4621      	mov	r1, r4
 80054f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054fc:	4621      	mov	r1, r4
 80054fe:	028a      	lsls	r2, r1, #10
 8005500:	4610      	mov	r0, r2
 8005502:	4619      	mov	r1, r3
 8005504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005506:	2200      	movs	r2, #0
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	61fa      	str	r2, [r7, #28]
 800550c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005510:	f7fb faac 	bl	8000a6c <__aeabi_uldivmod>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4613      	mov	r3, r2
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800551c:	4b0b      	ldr	r3, [pc, #44]	; (800554c <HAL_RCC_GetSysClockFreq+0x200>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	0c1b      	lsrs	r3, r3, #16
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	3301      	adds	r3, #1
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800552c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800552e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005530:	fbb2 f3f3 	udiv	r3, r2, r3
 8005534:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005536:	e002      	b.n	800553e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005538:	4b05      	ldr	r3, [pc, #20]	; (8005550 <HAL_RCC_GetSysClockFreq+0x204>)
 800553a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800553c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800553e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005540:	4618      	mov	r0, r3
 8005542:	3750      	adds	r7, #80	; 0x50
 8005544:	46bd      	mov	sp, r7
 8005546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800554a:	bf00      	nop
 800554c:	40023800 	.word	0x40023800
 8005550:	00f42400 	.word	0x00f42400
 8005554:	007a1200 	.word	0x007a1200

08005558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800555c:	4b03      	ldr	r3, [pc, #12]	; (800556c <HAL_RCC_GetHCLKFreq+0x14>)
 800555e:	681b      	ldr	r3, [r3, #0]
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20000008 	.word	0x20000008

08005570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005574:	f7ff fff0 	bl	8005558 <HAL_RCC_GetHCLKFreq>
 8005578:	4602      	mov	r2, r0
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	0a9b      	lsrs	r3, r3, #10
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	4903      	ldr	r1, [pc, #12]	; (8005594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005586:	5ccb      	ldrb	r3, [r1, r3]
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800558c:	4618      	mov	r0, r3
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40023800 	.word	0x40023800
 8005594:	08008b28 	.word	0x08008b28

08005598 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	220f      	movs	r2, #15
 80055a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055a8:	4b12      	ldr	r3, [pc, #72]	; (80055f4 <HAL_RCC_GetClockConfig+0x5c>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0203 	and.w	r2, r3, #3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055b4:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <HAL_RCC_GetClockConfig+0x5c>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <HAL_RCC_GetClockConfig+0x5c>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80055cc:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <HAL_RCC_GetClockConfig+0x5c>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	08db      	lsrs	r3, r3, #3
 80055d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055da:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <HAL_RCC_GetClockConfig+0x60>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 020f 	and.w	r2, r3, #15
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	601a      	str	r2, [r3, #0]
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40023800 	.word	0x40023800
 80055f8:	40023c00 	.word	0x40023c00

080055fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d105      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005620:	2b00      	cmp	r3, #0
 8005622:	d038      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005624:	4b68      	ldr	r3, [pc, #416]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800562a:	f7fd fc33 	bl	8002e94 <HAL_GetTick>
 800562e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005630:	e008      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005632:	f7fd fc2f 	bl	8002e94 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e0bd      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005644:	4b61      	ldr	r3, [pc, #388]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f0      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	019b      	lsls	r3, r3, #6
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	071b      	lsls	r3, r3, #28
 8005662:	495a      	ldr	r1, [pc, #360]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800566a:	4b57      	ldr	r3, [pc, #348]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800566c:	2201      	movs	r2, #1
 800566e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005670:	f7fd fc10 	bl	8002e94 <HAL_GetTick>
 8005674:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005676:	e008      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005678:	f7fd fc0c 	bl	8002e94 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e09a      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800568a:	4b50      	ldr	r3, [pc, #320]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8083 	beq.w	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	4b48      	ldr	r3, [pc, #288]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	4a47      	ldr	r2, [pc, #284]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b2:	6413      	str	r3, [r2, #64]	; 0x40
 80056b4:	4b45      	ldr	r3, [pc, #276]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056c0:	4b43      	ldr	r3, [pc, #268]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a42      	ldr	r2, [pc, #264]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ca:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056cc:	f7fd fbe2 	bl	8002e94 <HAL_GetTick>
 80056d0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056d4:	f7fd fbde 	bl	8002e94 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e06c      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056e6:	4b3a      	ldr	r3, [pc, #232]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f0      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056f2:	4b36      	ldr	r3, [pc, #216]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d02f      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	429a      	cmp	r2, r3
 800570e:	d028      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005710:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005718:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800571a:	4b2e      	ldr	r3, [pc, #184]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800571c:	2201      	movs	r2, #1
 800571e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005720:	4b2c      	ldr	r3, [pc, #176]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005726:	4a29      	ldr	r2, [pc, #164]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800572c:	4b27      	ldr	r3, [pc, #156]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800572e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d114      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005738:	f7fd fbac 	bl	8002e94 <HAL_GetTick>
 800573c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573e:	e00a      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005740:	f7fd fba8 	bl	8002e94 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	f241 3288 	movw	r2, #5000	; 0x1388
 800574e:	4293      	cmp	r3, r2
 8005750:	d901      	bls.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e034      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005756:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0ee      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800576a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800576e:	d10d      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005770:	4b16      	ldr	r3, [pc, #88]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005784:	4911      	ldr	r1, [pc, #68]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005786:	4313      	orrs	r3, r2
 8005788:	608b      	str	r3, [r1, #8]
 800578a:	e005      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	4a0e      	ldr	r2, [pc, #56]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005792:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005796:	6093      	str	r3, [r2, #8]
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a4:	4909      	ldr	r1, [pc, #36]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	7d1a      	ldrb	r2, [r3, #20]
 80057ba:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80057bc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	42470068 	.word	0x42470068
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40007000 	.word	0x40007000
 80057d4:	42470e40 	.word	0x42470e40
 80057d8:	424711e0 	.word	0x424711e0

080057dc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d012      	beq.n	8005818 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f831 	bl	8005868 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	b2da      	uxtb	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005816:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d012      	beq.n	800584c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00b      	beq.n	800584c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f821 	bl	800587c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f462 7220 	orn	r2, r2, #640	; 0x280
 800584a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800584c:	4b05      	ldr	r3, [pc, #20]	; (8005864 <HAL_RTC_AlarmIRQHandler+0x88>)
 800584e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005852:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	775a      	strb	r2, [r3, #29]
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40013c00 	.word	0x40013c00

08005868 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e01d      	b.n	80058de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fd f96a 	bl	8002b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f000 fa78 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b06      	cmp	r3, #6
 8005906:	d007      	beq.n	8005918 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b085      	sub	sp, #20
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0201 	orr.w	r2, r2, #1
 8005944:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b06      	cmp	r3, #6
 8005956:	d007      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2201      	movs	r2, #1
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fb34 	bl	8005ff8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a10      	ldr	r2, [pc, #64]	; (80059d8 <HAL_TIM_PWM_Start+0x60>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d107      	bne.n	80059aa <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b06      	cmp	r3, #6
 80059ba:	d007      	beq.n	80059cc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40010000 	.word	0x40010000

080059dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d122      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d11b      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0202 	mvn.w	r2, #2
 8005a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f9b2 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005a24:	e005      	b.n	8005a32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f9a4 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f9b5 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d122      	bne.n	8005a8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d11b      	bne.n	8005a8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0204 	mvn.w	r2, #4
 8005a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2202      	movs	r2, #2
 8005a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f988 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005a78:	e005      	b.n	8005a86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f97a 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f98b 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d122      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b08      	cmp	r3, #8
 8005aa6:	d11b      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0208 	mvn.w	r2, #8
 8005ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2204      	movs	r2, #4
 8005ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f95e 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005acc:	e005      	b.n	8005ada <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f950 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f961 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	2b10      	cmp	r3, #16
 8005aec:	d122      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b10      	cmp	r3, #16
 8005afa:	d11b      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0210 	mvn.w	r2, #16
 8005b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2208      	movs	r2, #8
 8005b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f934 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f926 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f937 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d10e      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d107      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0201 	mvn.w	r2, #1
 8005b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fc fac4 	bl	80020e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6a:	2b80      	cmp	r3, #128	; 0x80
 8005b6c:	d10e      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b78:	2b80      	cmp	r3, #128	; 0x80
 8005b7a:	d107      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fad4 	bl	8006134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b96:	2b40      	cmp	r3, #64	; 0x40
 8005b98:	d10e      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba4:	2b40      	cmp	r3, #64	; 0x40
 8005ba6:	d107      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f8fc 	bl	8005db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b20      	cmp	r3, #32
 8005bc4:	d10e      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d107      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0220 	mvn.w	r2, #32
 8005bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fa9e 	bl	8006120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005be4:	bf00      	nop
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_TIM_ConfigClockSource+0x18>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e0b3      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x180>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3c:	d03e      	beq.n	8005cbc <HAL_TIM_ConfigClockSource+0xd0>
 8005c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c42:	f200 8087 	bhi.w	8005d54 <HAL_TIM_ConfigClockSource+0x168>
 8005c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4a:	f000 8085 	beq.w	8005d58 <HAL_TIM_ConfigClockSource+0x16c>
 8005c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c52:	d87f      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x168>
 8005c54:	2b70      	cmp	r3, #112	; 0x70
 8005c56:	d01a      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0xa2>
 8005c58:	2b70      	cmp	r3, #112	; 0x70
 8005c5a:	d87b      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x168>
 8005c5c:	2b60      	cmp	r3, #96	; 0x60
 8005c5e:	d050      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x116>
 8005c60:	2b60      	cmp	r3, #96	; 0x60
 8005c62:	d877      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x168>
 8005c64:	2b50      	cmp	r3, #80	; 0x50
 8005c66:	d03c      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0xf6>
 8005c68:	2b50      	cmp	r3, #80	; 0x50
 8005c6a:	d873      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x168>
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d058      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x136>
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	d86f      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x168>
 8005c74:	2b30      	cmp	r3, #48	; 0x30
 8005c76:	d064      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x156>
 8005c78:	2b30      	cmp	r3, #48	; 0x30
 8005c7a:	d86b      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x168>
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	d060      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x156>
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d867      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x168>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d05c      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x156>
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d05a      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c8c:	e062      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6899      	ldr	r1, [r3, #8]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f000 f98b 	bl	8005fb8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cb0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	609a      	str	r2, [r3, #8]
      break;
 8005cba:	e04e      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	6899      	ldr	r1, [r3, #8]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f000 f974 	bl	8005fb8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cde:	609a      	str	r2, [r3, #8]
      break;
 8005ce0:	e03b      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	6859      	ldr	r1, [r3, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f000 f8e8 	bl	8005ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2150      	movs	r1, #80	; 0x50
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f941 	bl	8005f82 <TIM_ITRx_SetConfig>
      break;
 8005d00:	e02b      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6859      	ldr	r1, [r3, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f000 f907 	bl	8005f22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2160      	movs	r1, #96	; 0x60
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 f931 	bl	8005f82 <TIM_ITRx_SetConfig>
      break;
 8005d20:	e01b      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f000 f8c8 	bl	8005ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2140      	movs	r1, #64	; 0x40
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f921 	bl	8005f82 <TIM_ITRx_SetConfig>
      break;
 8005d40:	e00b      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f000 f918 	bl	8005f82 <TIM_ITRx_SetConfig>
      break;
 8005d52:	e002      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d54:	bf00      	nop
 8005d56:	e000      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a34      	ldr	r2, [pc, #208]	; (8005ea8 <TIM_Base_SetConfig+0xe4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00f      	beq.n	8005dfc <TIM_Base_SetConfig+0x38>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d00b      	beq.n	8005dfc <TIM_Base_SetConfig+0x38>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a31      	ldr	r2, [pc, #196]	; (8005eac <TIM_Base_SetConfig+0xe8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d007      	beq.n	8005dfc <TIM_Base_SetConfig+0x38>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a30      	ldr	r2, [pc, #192]	; (8005eb0 <TIM_Base_SetConfig+0xec>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_Base_SetConfig+0x38>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a2f      	ldr	r2, [pc, #188]	; (8005eb4 <TIM_Base_SetConfig+0xf0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d108      	bne.n	8005e0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a25      	ldr	r2, [pc, #148]	; (8005ea8 <TIM_Base_SetConfig+0xe4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d01b      	beq.n	8005e4e <TIM_Base_SetConfig+0x8a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1c:	d017      	beq.n	8005e4e <TIM_Base_SetConfig+0x8a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a22      	ldr	r2, [pc, #136]	; (8005eac <TIM_Base_SetConfig+0xe8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d013      	beq.n	8005e4e <TIM_Base_SetConfig+0x8a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a21      	ldr	r2, [pc, #132]	; (8005eb0 <TIM_Base_SetConfig+0xec>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00f      	beq.n	8005e4e <TIM_Base_SetConfig+0x8a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a20      	ldr	r2, [pc, #128]	; (8005eb4 <TIM_Base_SetConfig+0xf0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00b      	beq.n	8005e4e <TIM_Base_SetConfig+0x8a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a1f      	ldr	r2, [pc, #124]	; (8005eb8 <TIM_Base_SetConfig+0xf4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d007      	beq.n	8005e4e <TIM_Base_SetConfig+0x8a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a1e      	ldr	r2, [pc, #120]	; (8005ebc <TIM_Base_SetConfig+0xf8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d003      	beq.n	8005e4e <TIM_Base_SetConfig+0x8a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a1d      	ldr	r2, [pc, #116]	; (8005ec0 <TIM_Base_SetConfig+0xfc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d108      	bne.n	8005e60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a08      	ldr	r2, [pc, #32]	; (8005ea8 <TIM_Base_SetConfig+0xe4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d103      	bne.n	8005e94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	615a      	str	r2, [r3, #20]
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40010000 	.word	0x40010000
 8005eac:	40000400 	.word	0x40000400
 8005eb0:	40000800 	.word	0x40000800
 8005eb4:	40000c00 	.word	0x40000c00
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800

08005ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f023 0201 	bic.w	r2, r3, #1
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f023 030a 	bic.w	r3, r3, #10
 8005f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	621a      	str	r2, [r3, #32]
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b087      	sub	sp, #28
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	f023 0210 	bic.w	r2, r3, #16
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	031b      	lsls	r3, r3, #12
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	621a      	str	r2, [r3, #32]
}
 8005f76:	bf00      	nop
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f043 0307 	orr.w	r3, r3, #7
 8005fa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	609a      	str	r2, [r3, #8]
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	021a      	lsls	r2, r3, #8
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	609a      	str	r2, [r3, #8]
}
 8005fec:	bf00      	nop
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f003 031f 	and.w	r3, r3, #31
 800600a:	2201      	movs	r2, #1
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a1a      	ldr	r2, [r3, #32]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	43db      	mvns	r3, r3
 800601a:	401a      	ands	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a1a      	ldr	r2, [r3, #32]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	fa01 f303 	lsl.w	r3, r1, r3
 8006030:	431a      	orrs	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	621a      	str	r2, [r3, #32]
}
 8006036:	bf00      	nop
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
	...

08006044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006058:	2302      	movs	r3, #2
 800605a:	e050      	b.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1c      	ldr	r2, [pc, #112]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d018      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a8:	d013      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a18      	ldr	r2, [pc, #96]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00e      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a16      	ldr	r2, [pc, #88]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d009      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a15      	ldr	r2, [pc, #84]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d004      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a13      	ldr	r2, [pc, #76]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d10c      	bne.n	80060ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40010000 	.word	0x40010000
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	40014000 	.word	0x40014000

08006120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f103 0208 	add.w	r2, r3, #8
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f04f 32ff 	mov.w	r2, #4294967295
 8006160:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f103 0208 	add.w	r2, r3, #8
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f103 0208 	add.w	r2, r3, #8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061ea:	b480      	push	{r7}
 80061ec:	b085      	sub	sp, #20
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d103      	bne.n	800620a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	e00c      	b.n	8006224 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3308      	adds	r3, #8
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	e002      	b.n	8006218 <vListInsert+0x2e>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	429a      	cmp	r2, r3
 8006222:	d2f6      	bcs.n	8006212 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	601a      	str	r2, [r3, #0]
}
 8006250:	bf00      	nop
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6892      	ldr	r2, [r2, #8]
 8006272:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6852      	ldr	r2, [r2, #4]
 800627c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d103      	bne.n	8006290 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	1e5a      	subs	r2, r3, #1
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80062da:	f001 fc23 	bl	8007b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e6:	68f9      	ldr	r1, [r7, #12]
 80062e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062ea:	fb01 f303 	mul.w	r3, r1, r3
 80062ee:	441a      	add	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	3b01      	subs	r3, #1
 800630c:	68f9      	ldr	r1, [r7, #12]
 800630e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006310:	fb01 f303 	mul.w	r3, r1, r3
 8006314:	441a      	add	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	22ff      	movs	r2, #255	; 0xff
 800631e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	22ff      	movs	r2, #255	; 0xff
 8006326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d114      	bne.n	800635a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d01a      	beq.n	800636e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3310      	adds	r3, #16
 800633c:	4618      	mov	r0, r3
 800633e:	f000 ffff 	bl	8007340 <xTaskRemoveFromEventList>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d012      	beq.n	800636e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006348:	4b0c      	ldr	r3, [pc, #48]	; (800637c <xQueueGenericReset+0xcc>)
 800634a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	e009      	b.n	800636e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3310      	adds	r3, #16
 800635e:	4618      	mov	r0, r3
 8006360:	f7ff fef2 	bl	8006148 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3324      	adds	r3, #36	; 0x24
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff feed 	bl	8006148 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800636e:	f001 fc09 	bl	8007b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006372:	2301      	movs	r3, #1
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	e000ed04 	.word	0xe000ed04

08006380 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	; 0x28
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	4613      	mov	r3, r2
 800638c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <xQueueGenericCreate+0x2a>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	613b      	str	r3, [r7, #16]
}
 80063a6:	bf00      	nop
 80063a8:	e7fe      	b.n	80063a8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61fb      	str	r3, [r7, #28]
 80063b4:	e004      	b.n	80063c0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	fb02 f303 	mul.w	r3, r2, r3
 80063be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	334c      	adds	r3, #76	; 0x4c
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 fc8f 	bl	8007ce8 <pvPortMalloc>
 80063ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d011      	beq.n	80063f6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	334c      	adds	r3, #76	; 0x4c
 80063da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063e4:	79fa      	ldrb	r2, [r7, #7]
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	4613      	mov	r3, r2
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	68b9      	ldr	r1, [r7, #8]
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 f805 	bl	8006400 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063f6:	69bb      	ldr	r3, [r7, #24]
	}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3720      	adds	r7, #32
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d103      	bne.n	800641c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e002      	b.n	8006422 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800642e:	2101      	movs	r1, #1
 8006430:	69b8      	ldr	r0, [r7, #24]
 8006432:	f7ff ff3d 	bl	80062b0 <xQueueGenericReset>
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	2200      	movs	r2, #0
 800643a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800643c:	bf00      	nop
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08e      	sub	sp, #56	; 0x38
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006452:	2300      	movs	r3, #0
 8006454:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <xQueueGenericSend+0x32>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d103      	bne.n	8006484 <xQueueGenericSend+0x40>
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <xQueueGenericSend+0x44>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <xQueueGenericSend+0x46>
 8006488:	2300      	movs	r3, #0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <xQueueGenericSend+0x60>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	623b      	str	r3, [r7, #32]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d103      	bne.n	80064b2 <xQueueGenericSend+0x6e>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <xQueueGenericSend+0x72>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <xQueueGenericSend+0x74>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	61fb      	str	r3, [r7, #28]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064d2:	f001 f8f1 	bl	80076b8 <xTaskGetSchedulerState>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <xQueueGenericSend+0x9e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <xQueueGenericSend+0xa2>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <xQueueGenericSend+0xa4>
 80064e6:	2300      	movs	r3, #0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10a      	bne.n	8006502 <xQueueGenericSend+0xbe>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	61bb      	str	r3, [r7, #24]
}
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006502:	f001 fb0f 	bl	8007b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650e:	429a      	cmp	r2, r3
 8006510:	d302      	bcc.n	8006518 <xQueueGenericSend+0xd4>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d146      	bne.n	80065a6 <xQueueGenericSend+0x162>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006524:	f000 f98a 	bl	800683c <prvCopyDataToQueue>
 8006528:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652e:	2b00      	cmp	r3, #0
 8006530:	d015      	beq.n	800655e <xQueueGenericSend+0x11a>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b02      	cmp	r3, #2
 8006536:	d102      	bne.n	800653e <xQueueGenericSend+0xfa>
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d12f      	bne.n	800659e <xQueueGenericSend+0x15a>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006542:	f000 fa99 	bl	8006a78 <prvNotifyQueueSetContainer>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d028      	beq.n	800659e <xQueueGenericSend+0x15a>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 800654c:	4b4a      	ldr	r3, [pc, #296]	; (8006678 <xQueueGenericSend+0x234>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	e01f      	b.n	800659e <xQueueGenericSend+0x15a>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	2b00      	cmp	r3, #0
 8006564:	d010      	beq.n	8006588 <xQueueGenericSend+0x144>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	3324      	adds	r3, #36	; 0x24
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fee8 	bl	8007340 <xTaskRemoveFromEventList>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d013      	beq.n	800659e <xQueueGenericSend+0x15a>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8006576:	4b40      	ldr	r3, [pc, #256]	; (8006678 <xQueueGenericSend+0x234>)
 8006578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	e00a      	b.n	800659e <xQueueGenericSend+0x15a>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <xQueueGenericSend+0x15a>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 800658e:	4b3a      	ldr	r3, [pc, #232]	; (8006678 <xQueueGenericSend+0x234>)
 8006590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800659e:	f001 faf1 	bl	8007b84 <vPortExitCritical>
				return pdPASS;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e063      	b.n	800666e <xQueueGenericSend+0x22a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <xQueueGenericSend+0x170>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065ac:	f001 faea 	bl	8007b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e05c      	b.n	800666e <xQueueGenericSend+0x22a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <xQueueGenericSend+0x184>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065ba:	f107 0310 	add.w	r3, r7, #16
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 ff20 	bl	8007404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065c8:	f001 fadc 	bl	8007b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065cc:	f000 fcd6 	bl	8006f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065d0:	f001 faa8 	bl	8007b24 <vPortEnterCritical>
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065da:	b25b      	sxtb	r3, r3
 80065dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e0:	d103      	bne.n	80065ea <xQueueGenericSend+0x1a6>
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f0:	b25b      	sxtb	r3, r3
 80065f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f6:	d103      	bne.n	8006600 <xQueueGenericSend+0x1bc>
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006600:	f001 fac0 	bl	8007b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006604:	1d3a      	adds	r2, r7, #4
 8006606:	f107 0310 	add.w	r3, r7, #16
 800660a:	4611      	mov	r1, r2
 800660c:	4618      	mov	r0, r3
 800660e:	f000 ff0f 	bl	8007430 <xTaskCheckForTimeOut>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d124      	bne.n	8006662 <xQueueGenericSend+0x21e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800661a:	f000 fa15 	bl	8006a48 <prvIsQueueFull>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d018      	beq.n	8006656 <xQueueGenericSend+0x212>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	3310      	adds	r3, #16
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	4611      	mov	r1, r2
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fe63 	bl	80072f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006634:	f000 f992 	bl	800695c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006638:	f000 fcae 	bl	8006f98 <xTaskResumeAll>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	f47f af5f 	bne.w	8006502 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006644:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <xQueueGenericSend+0x234>)
 8006646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	e755      	b.n	8006502 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006658:	f000 f980 	bl	800695c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800665c:	f000 fc9c 	bl	8006f98 <xTaskResumeAll>
 8006660:	e74f      	b.n	8006502 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006664:	f000 f97a 	bl	800695c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006668:	f000 fc96 	bl	8006f98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800666c:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800666e:	4618      	mov	r0, r3
 8006670:	3738      	adds	r7, #56	; 0x38
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	e000ed04 	.word	0xe000ed04

0800667c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08c      	sub	sp, #48	; 0x30
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006688:	2300      	movs	r3, #0
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10a      	bne.n	80066ac <xQueueReceive+0x30>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	623b      	str	r3, [r7, #32]
}
 80066a8:	bf00      	nop
 80066aa:	e7fe      	b.n	80066aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d103      	bne.n	80066ba <xQueueReceive+0x3e>
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <xQueueReceive+0x42>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <xQueueReceive+0x44>
 80066be:	2300      	movs	r3, #0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <xQueueReceive+0x5e>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	61fb      	str	r3, [r7, #28]
}
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066da:	f000 ffed 	bl	80076b8 <xTaskGetSchedulerState>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d102      	bne.n	80066ea <xQueueReceive+0x6e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <xQueueReceive+0x72>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <xQueueReceive+0x74>
 80066ee:	2300      	movs	r3, #0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <xQueueReceive+0x8e>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	61bb      	str	r3, [r7, #24]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800670a:	f001 fa0b 	bl	8007b24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	2b00      	cmp	r3, #0
 8006718:	d01f      	beq.n	800675a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800671a:	68b9      	ldr	r1, [r7, #8]
 800671c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800671e:	f000 f8f7 	bl	8006910 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	1e5a      	subs	r2, r3, #1
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00f      	beq.n	8006752 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	3310      	adds	r3, #16
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fe02 	bl	8007340 <xTaskRemoveFromEventList>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d007      	beq.n	8006752 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006742:	4b3d      	ldr	r3, [pc, #244]	; (8006838 <xQueueReceive+0x1bc>)
 8006744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006752:	f001 fa17 	bl	8007b84 <vPortExitCritical>
				return pdPASS;
 8006756:	2301      	movs	r3, #1
 8006758:	e069      	b.n	800682e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d103      	bne.n	8006768 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006760:	f001 fa10 	bl	8007b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006764:	2300      	movs	r3, #0
 8006766:	e062      	b.n	800682e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800676e:	f107 0310 	add.w	r3, r7, #16
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fe46 	bl	8007404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006778:	2301      	movs	r3, #1
 800677a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800677c:	f001 fa02 	bl	8007b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006780:	f000 fbfc 	bl	8006f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006784:	f001 f9ce 	bl	8007b24 <vPortEnterCritical>
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800678e:	b25b      	sxtb	r3, r3
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006794:	d103      	bne.n	800679e <xQueueReceive+0x122>
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067a4:	b25b      	sxtb	r3, r3
 80067a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067aa:	d103      	bne.n	80067b4 <xQueueReceive+0x138>
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067b4:	f001 f9e6 	bl	8007b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067b8:	1d3a      	adds	r2, r7, #4
 80067ba:	f107 0310 	add.w	r3, r7, #16
 80067be:	4611      	mov	r1, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fe35 	bl	8007430 <xTaskCheckForTimeOut>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d123      	bne.n	8006814 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ce:	f000 f925 	bl	8006a1c <prvIsQueueEmpty>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d017      	beq.n	8006808 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	3324      	adds	r3, #36	; 0x24
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	4611      	mov	r1, r2
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fd89 	bl	80072f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e8:	f000 f8b8 	bl	800695c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067ec:	f000 fbd4 	bl	8006f98 <xTaskResumeAll>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d189      	bne.n	800670a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80067f6:	4b10      	ldr	r3, [pc, #64]	; (8006838 <xQueueReceive+0x1bc>)
 80067f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	e780      	b.n	800670a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800680a:	f000 f8a7 	bl	800695c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800680e:	f000 fbc3 	bl	8006f98 <xTaskResumeAll>
 8006812:	e77a      	b.n	800670a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006816:	f000 f8a1 	bl	800695c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800681a:	f000 fbbd 	bl	8006f98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800681e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006820:	f000 f8fc 	bl	8006a1c <prvIsQueueEmpty>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	f43f af6f 	beq.w	800670a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800682c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800682e:	4618      	mov	r0, r3
 8006830:	3730      	adds	r7, #48	; 0x30
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	e000ed04 	.word	0xe000ed04

0800683c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006848:	2300      	movs	r3, #0
 800684a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10d      	bne.n	8006876 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d14d      	bne.n	80068fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	4618      	mov	r0, r3
 8006868:	f000 ff44 	bl	80076f4 <xTaskPriorityDisinherit>
 800686c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	609a      	str	r2, [r3, #8]
 8006874:	e043      	b.n	80068fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d119      	bne.n	80068b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6858      	ldr	r0, [r3, #4]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006884:	461a      	mov	r2, r3
 8006886:	68b9      	ldr	r1, [r7, #8]
 8006888:	f001 fc32 	bl	80080f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	441a      	add	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d32b      	bcc.n	80068fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	605a      	str	r2, [r3, #4]
 80068ae:	e026      	b.n	80068fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	68d8      	ldr	r0, [r3, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	461a      	mov	r2, r3
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	f001 fc18 	bl	80080f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	425b      	negs	r3, r3
 80068ca:	441a      	add	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d207      	bcs.n	80068ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	425b      	negs	r3, r3
 80068e6:	441a      	add	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d105      	bne.n	80068fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006906:	697b      	ldr	r3, [r7, #20]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	d018      	beq.n	8006954 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	441a      	add	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68da      	ldr	r2, [r3, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	429a      	cmp	r2, r3
 800693a:	d303      	bcc.n	8006944 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68d9      	ldr	r1, [r3, #12]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	461a      	mov	r2, r3
 800694e:	6838      	ldr	r0, [r7, #0]
 8006950:	f001 fbce 	bl	80080f0 <memcpy>
	}
}
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006964:	f001 f8de 	bl	8007b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800696e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006970:	e01f      	b.n	80069b2 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006976:	2b00      	cmp	r3, #0
 8006978:	d009      	beq.n	800698e <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800697a:	2100      	movs	r1, #0
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f87b 	bl	8006a78 <prvNotifyQueueSetContainer>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d010      	beq.n	80069aa <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8006988:	f000 fdb4 	bl	80074f4 <vTaskMissedYield>
 800698c:	e00d      	b.n	80069aa <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	2b00      	cmp	r3, #0
 8006994:	d012      	beq.n	80069bc <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3324      	adds	r3, #36	; 0x24
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fcd0 	bl	8007340 <xTaskRemoveFromEventList>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80069a6:	f000 fda5 	bl	80074f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	dcdb      	bgt.n	8006972 <prvUnlockQueue+0x16>
 80069ba:	e000      	b.n	80069be <prvUnlockQueue+0x62>
						break;
 80069bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	22ff      	movs	r2, #255	; 0xff
 80069c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069c6:	f001 f8dd 	bl	8007b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069ca:	f001 f8ab 	bl	8007b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069d6:	e011      	b.n	80069fc <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d012      	beq.n	8006a06 <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3310      	adds	r3, #16
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fcab 	bl	8007340 <xTaskRemoveFromEventList>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 80069f0:	f000 fd80 	bl	80074f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	dce9      	bgt.n	80069d8 <prvUnlockQueue+0x7c>
 8006a04:	e000      	b.n	8006a08 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 8006a06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	22ff      	movs	r2, #255	; 0xff
 8006a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a10:	f001 f8b8 	bl	8007b84 <vPortExitCritical>
}
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a24:	f001 f87e 	bl	8007b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a30:	2301      	movs	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	e001      	b.n	8006a3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a3a:	f001 f8a3 	bl	8007b84 <vPortExitCritical>

	return xReturn;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a50:	f001 f868 	bl	8007b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d102      	bne.n	8006a66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a60:	2301      	movs	r3, #1
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	e001      	b.n	8006a6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a6a:	f001 f88b 	bl	8007b84 <vPortExitCritical>

	return xReturn;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a86:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <prvNotifyQueueSetContainer+0x30>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	613b      	str	r3, [r7, #16]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <prvNotifyQueueSetContainer+0x2e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d30a      	bcc.n	8006aca <prvNotifyQueueSetContainer+0x52>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	60fb      	str	r3, [r7, #12]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <prvNotifyQueueSetContainer+0x50>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d225      	bcs.n	8006b22 <prvNotifyQueueSetContainer+0xaa>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006adc:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8006ade:	1d3b      	adds	r3, r7, #4
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	69b8      	ldr	r0, [r7, #24]
 8006ae6:	f7ff fea9 	bl	800683c <prvCopyDataToQueue>
 8006aea:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8006aec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d10e      	bne.n	8006b14 <prvNotifyQueueSetContainer+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d011      	beq.n	8006b22 <prvNotifyQueueSetContainer+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	3324      	adds	r3, #36	; 0x24
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fc1c 	bl	8007340 <xTaskRemoveFromEventList>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d009      	beq.n	8006b22 <prvNotifyQueueSetContainer+0xaa>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	e006      	b.n	8006b22 <prvNotifyQueueSetContainer+0xaa>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	3301      	adds	r3, #1
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	b25a      	sxtb	r2, r3
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b22:	69fb      	ldr	r3, [r7, #28]
	}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3720      	adds	r7, #32
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08e      	sub	sp, #56	; 0x38
 8006b30:	af04      	add	r7, sp, #16
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10a      	bne.n	8006b56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	623b      	str	r3, [r7, #32]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <xTaskCreateStatic+0x46>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	61fb      	str	r3, [r7, #28]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b72:	2354      	movs	r3, #84	; 0x54
 8006b74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b54      	cmp	r3, #84	; 0x54
 8006b7a:	d00a      	beq.n	8006b92 <xTaskCreateStatic+0x66>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	61bb      	str	r3, [r7, #24]
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d01e      	beq.n	8006bd8 <xTaskCreateStatic+0xac>
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01b      	beq.n	8006bd8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ba8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	2202      	movs	r2, #2
 8006bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	9303      	str	r3, [sp, #12]
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	9302      	str	r3, [sp, #8]
 8006bba:	f107 0314 	add.w	r3, r7, #20
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 f850 	bl	8006c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bd2:	f000 f8d5 	bl	8006d80 <prvAddNewTaskToReadyList>
 8006bd6:	e001      	b.n	8006bdc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bdc:	697b      	ldr	r3, [r7, #20]
	}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3728      	adds	r7, #40	; 0x28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b08c      	sub	sp, #48	; 0x30
 8006bea:	af04      	add	r7, sp, #16
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bf6:	88fb      	ldrh	r3, [r7, #6]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 f874 	bl	8007ce8 <pvPortMalloc>
 8006c00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00e      	beq.n	8006c26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c08:	2054      	movs	r0, #84	; 0x54
 8006c0a:	f001 f86d 	bl	8007ce8 <pvPortMalloc>
 8006c0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c1c:	e005      	b.n	8006c2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c1e:	6978      	ldr	r0, [r7, #20]
 8006c20:	f001 f926 	bl	8007e70 <vPortFree>
 8006c24:	e001      	b.n	8006c2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d017      	beq.n	8006c60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c38:	88fa      	ldrh	r2, [r7, #6]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	9303      	str	r3, [sp, #12]
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	9302      	str	r3, [sp, #8]
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68b9      	ldr	r1, [r7, #8]
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 f80e 	bl	8006c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c54:	69f8      	ldr	r0, [r7, #28]
 8006c56:	f000 f893 	bl	8006d80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	61bb      	str	r3, [r7, #24]
 8006c5e:	e002      	b.n	8006c66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c60:	f04f 33ff 	mov.w	r3, #4294967295
 8006c64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c66:	69bb      	ldr	r3, [r7, #24]
	}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3720      	adds	r7, #32
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
 8006c7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	f023 0307 	bic.w	r3, r3, #7
 8006c96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	617b      	str	r3, [r7, #20]
}
 8006cb4:	bf00      	nop
 8006cb6:	e7fe      	b.n	8006cb6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d01f      	beq.n	8006cfe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	61fb      	str	r3, [r7, #28]
 8006cc2:	e012      	b.n	8006cea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	7819      	ldrb	r1, [r3, #0]
 8006ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3334      	adds	r3, #52	; 0x34
 8006cd4:	460a      	mov	r2, r1
 8006cd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d006      	beq.n	8006cf2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	2b0f      	cmp	r3, #15
 8006cee:	d9e9      	bls.n	8006cc4 <prvInitialiseNewTask+0x54>
 8006cf0:	e000      	b.n	8006cf4 <prvInitialiseNewTask+0x84>
			{
				break;
 8006cf2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cfc:	e003      	b.n	8006d06 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d08:	2b06      	cmp	r3, #6
 8006d0a:	d901      	bls.n	8006d10 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d0c:	2306      	movs	r3, #6
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d1a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	2200      	movs	r2, #0
 8006d20:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	3304      	adds	r3, #4
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff fa2e 	bl	8006188 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	3318      	adds	r3, #24
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fa29 	bl	8006188 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	f1c3 0207 	rsb	r2, r3, #7
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	2200      	movs	r2, #0
 8006d50:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	68f9      	ldr	r1, [r7, #12]
 8006d5e:	69b8      	ldr	r0, [r7, #24]
 8006d60:	f000 fdb4 	bl	80078cc <pxPortInitialiseStack>
 8006d64:	4602      	mov	r2, r0
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d76:	bf00      	nop
 8006d78:	3720      	adds	r7, #32
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d88:	f000 fecc 	bl	8007b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d8c:	4b2a      	ldr	r3, [pc, #168]	; (8006e38 <prvAddNewTaskToReadyList+0xb8>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3301      	adds	r3, #1
 8006d92:	4a29      	ldr	r2, [pc, #164]	; (8006e38 <prvAddNewTaskToReadyList+0xb8>)
 8006d94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d96:	4b29      	ldr	r3, [pc, #164]	; (8006e3c <prvAddNewTaskToReadyList+0xbc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d9e:	4a27      	ldr	r2, [pc, #156]	; (8006e3c <prvAddNewTaskToReadyList+0xbc>)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006da4:	4b24      	ldr	r3, [pc, #144]	; (8006e38 <prvAddNewTaskToReadyList+0xb8>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d110      	bne.n	8006dce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006dac:	f000 fbc6 	bl	800753c <prvInitialiseTaskLists>
 8006db0:	e00d      	b.n	8006dce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006db2:	4b23      	ldr	r3, [pc, #140]	; (8006e40 <prvAddNewTaskToReadyList+0xc0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d109      	bne.n	8006dce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dba:	4b20      	ldr	r3, [pc, #128]	; (8006e3c <prvAddNewTaskToReadyList+0xbc>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d802      	bhi.n	8006dce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dc8:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <prvAddNewTaskToReadyList+0xbc>)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dce:	4b1d      	ldr	r3, [pc, #116]	; (8006e44 <prvAddNewTaskToReadyList+0xc4>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	4a1b      	ldr	r2, [pc, #108]	; (8006e44 <prvAddNewTaskToReadyList+0xc4>)
 8006dd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	2201      	movs	r2, #1
 8006dde:	409a      	lsls	r2, r3
 8006de0:	4b19      	ldr	r3, [pc, #100]	; (8006e48 <prvAddNewTaskToReadyList+0xc8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	4a18      	ldr	r2, [pc, #96]	; (8006e48 <prvAddNewTaskToReadyList+0xc8>)
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dee:	4613      	mov	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <prvAddNewTaskToReadyList+0xcc>)
 8006df8:	441a      	add	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4610      	mov	r0, r2
 8006e02:	f7ff f9ce 	bl	80061a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e06:	f000 febd 	bl	8007b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <prvAddNewTaskToReadyList+0xc0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e12:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <prvAddNewTaskToReadyList+0xbc>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d207      	bcs.n	8006e30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e20:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <prvAddNewTaskToReadyList+0xd0>)
 8006e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	200007dc 	.word	0x200007dc
 8006e3c:	200006dc 	.word	0x200006dc
 8006e40:	200007e8 	.word	0x200007e8
 8006e44:	200007f8 	.word	0x200007f8
 8006e48:	200007e4 	.word	0x200007e4
 8006e4c:	200006e0 	.word	0x200006e0
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d017      	beq.n	8006e96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e66:	4b13      	ldr	r3, [pc, #76]	; (8006eb4 <vTaskDelay+0x60>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <vTaskDelay+0x30>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	60bb      	str	r3, [r7, #8]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e84:	f000 f87a 	bl	8006f7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e88:	2100      	movs	r1, #0
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fcb8 	bl	8007800 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e90:	f000 f882 	bl	8006f98 <xTaskResumeAll>
 8006e94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d107      	bne.n	8006eac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <vTaskDelay+0x64>)
 8006e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eac:	bf00      	nop
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20000804 	.word	0x20000804
 8006eb8:	e000ed04 	.word	0xe000ed04

08006ebc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	; 0x28
 8006ec0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006eca:	463a      	mov	r2, r7
 8006ecc:	1d39      	adds	r1, r7, #4
 8006ece:	f107 0308 	add.w	r3, r7, #8
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fa fc6c 	bl	80017b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	9202      	str	r2, [sp, #8]
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	460a      	mov	r2, r1
 8006eea:	491e      	ldr	r1, [pc, #120]	; (8006f64 <vTaskStartScheduler+0xa8>)
 8006eec:	481e      	ldr	r0, [pc, #120]	; (8006f68 <vTaskStartScheduler+0xac>)
 8006eee:	f7ff fe1d 	bl	8006b2c <xTaskCreateStatic>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	4a1d      	ldr	r2, [pc, #116]	; (8006f6c <vTaskStartScheduler+0xb0>)
 8006ef6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ef8:	4b1c      	ldr	r3, [pc, #112]	; (8006f6c <vTaskStartScheduler+0xb0>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f00:	2301      	movs	r3, #1
 8006f02:	617b      	str	r3, [r7, #20]
 8006f04:	e001      	b.n	8006f0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d116      	bne.n	8006f3e <vTaskStartScheduler+0x82>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	613b      	str	r3, [r7, #16]
}
 8006f22:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f24:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <vTaskStartScheduler+0xb4>)
 8006f26:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f2c:	4b11      	ldr	r3, [pc, #68]	; (8006f74 <vTaskStartScheduler+0xb8>)
 8006f2e:	2201      	movs	r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f32:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <vTaskStartScheduler+0xbc>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f38:	f000 fd52 	bl	80079e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f3c:	e00e      	b.n	8006f5c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f44:	d10a      	bne.n	8006f5c <vTaskStartScheduler+0xa0>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	60fb      	str	r3, [r7, #12]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <vTaskStartScheduler+0x9e>
}
 8006f5c:	bf00      	nop
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	08008af0 	.word	0x08008af0
 8006f68:	0800750d 	.word	0x0800750d
 8006f6c:	20000800 	.word	0x20000800
 8006f70:	200007fc 	.word	0x200007fc
 8006f74:	200007e8 	.word	0x200007e8
 8006f78:	200007e0 	.word	0x200007e0

08006f7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f80:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <vTaskSuspendAll+0x18>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3301      	adds	r3, #1
 8006f86:	4a03      	ldr	r2, [pc, #12]	; (8006f94 <vTaskSuspendAll+0x18>)
 8006f88:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006f8a:	bf00      	nop
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	20000804 	.word	0x20000804

08006f98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fa6:	4b41      	ldr	r3, [pc, #260]	; (80070ac <xTaskResumeAll+0x114>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10a      	bne.n	8006fc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	603b      	str	r3, [r7, #0]
}
 8006fc0:	bf00      	nop
 8006fc2:	e7fe      	b.n	8006fc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fc4:	f000 fdae 	bl	8007b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fc8:	4b38      	ldr	r3, [pc, #224]	; (80070ac <xTaskResumeAll+0x114>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	4a37      	ldr	r2, [pc, #220]	; (80070ac <xTaskResumeAll+0x114>)
 8006fd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fd2:	4b36      	ldr	r3, [pc, #216]	; (80070ac <xTaskResumeAll+0x114>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d161      	bne.n	800709e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fda:	4b35      	ldr	r3, [pc, #212]	; (80070b0 <xTaskResumeAll+0x118>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d05d      	beq.n	800709e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fe2:	e02e      	b.n	8007042 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe4:	4b33      	ldr	r3, [pc, #204]	; (80070b4 <xTaskResumeAll+0x11c>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3318      	adds	r3, #24
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7ff f933 	bl	800625c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff f92e 	bl	800625c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	2201      	movs	r2, #1
 8007006:	409a      	lsls	r2, r3
 8007008:	4b2b      	ldr	r3, [pc, #172]	; (80070b8 <xTaskResumeAll+0x120>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4313      	orrs	r3, r2
 800700e:	4a2a      	ldr	r2, [pc, #168]	; (80070b8 <xTaskResumeAll+0x120>)
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007016:	4613      	mov	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4a27      	ldr	r2, [pc, #156]	; (80070bc <xTaskResumeAll+0x124>)
 8007020:	441a      	add	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3304      	adds	r3, #4
 8007026:	4619      	mov	r1, r3
 8007028:	4610      	mov	r0, r2
 800702a:	f7ff f8ba 	bl	80061a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007032:	4b23      	ldr	r3, [pc, #140]	; (80070c0 <xTaskResumeAll+0x128>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	429a      	cmp	r2, r3
 800703a:	d302      	bcc.n	8007042 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800703c:	4b21      	ldr	r3, [pc, #132]	; (80070c4 <xTaskResumeAll+0x12c>)
 800703e:	2201      	movs	r2, #1
 8007040:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007042:	4b1c      	ldr	r3, [pc, #112]	; (80070b4 <xTaskResumeAll+0x11c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1cc      	bne.n	8006fe4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007050:	f000 fb12 	bl	8007678 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007054:	4b1c      	ldr	r3, [pc, #112]	; (80070c8 <xTaskResumeAll+0x130>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d010      	beq.n	8007082 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007060:	f000 f836 	bl	80070d0 <xTaskIncrementTick>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800706a:	4b16      	ldr	r3, [pc, #88]	; (80070c4 <xTaskResumeAll+0x12c>)
 800706c:	2201      	movs	r2, #1
 800706e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3b01      	subs	r3, #1
 8007074:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1f1      	bne.n	8007060 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800707c:	4b12      	ldr	r3, [pc, #72]	; (80070c8 <xTaskResumeAll+0x130>)
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007082:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <xTaskResumeAll+0x12c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d009      	beq.n	800709e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800708a:	2301      	movs	r3, #1
 800708c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800708e:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <xTaskResumeAll+0x134>)
 8007090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800709e:	f000 fd71 	bl	8007b84 <vPortExitCritical>

	return xAlreadyYielded;
 80070a2:	68bb      	ldr	r3, [r7, #8]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20000804 	.word	0x20000804
 80070b0:	200007dc 	.word	0x200007dc
 80070b4:	2000079c 	.word	0x2000079c
 80070b8:	200007e4 	.word	0x200007e4
 80070bc:	200006e0 	.word	0x200006e0
 80070c0:	200006dc 	.word	0x200006dc
 80070c4:	200007f0 	.word	0x200007f0
 80070c8:	200007ec 	.word	0x200007ec
 80070cc:	e000ed04 	.word	0xe000ed04

080070d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070d6:	2300      	movs	r3, #0
 80070d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070da:	4b4e      	ldr	r3, [pc, #312]	; (8007214 <xTaskIncrementTick+0x144>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f040 8088 	bne.w	80071f4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070e4:	4b4c      	ldr	r3, [pc, #304]	; (8007218 <xTaskIncrementTick+0x148>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3301      	adds	r3, #1
 80070ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070ec:	4a4a      	ldr	r2, [pc, #296]	; (8007218 <xTaskIncrementTick+0x148>)
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d120      	bne.n	800713a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80070f8:	4b48      	ldr	r3, [pc, #288]	; (800721c <xTaskIncrementTick+0x14c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <xTaskIncrementTick+0x48>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	603b      	str	r3, [r7, #0]
}
 8007114:	bf00      	nop
 8007116:	e7fe      	b.n	8007116 <xTaskIncrementTick+0x46>
 8007118:	4b40      	ldr	r3, [pc, #256]	; (800721c <xTaskIncrementTick+0x14c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	4b40      	ldr	r3, [pc, #256]	; (8007220 <xTaskIncrementTick+0x150>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a3e      	ldr	r2, [pc, #248]	; (800721c <xTaskIncrementTick+0x14c>)
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	4a3e      	ldr	r2, [pc, #248]	; (8007220 <xTaskIncrementTick+0x150>)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	4b3d      	ldr	r3, [pc, #244]	; (8007224 <xTaskIncrementTick+0x154>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	4a3c      	ldr	r2, [pc, #240]	; (8007224 <xTaskIncrementTick+0x154>)
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	f000 fa9f 	bl	8007678 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800713a:	4b3b      	ldr	r3, [pc, #236]	; (8007228 <xTaskIncrementTick+0x158>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	429a      	cmp	r2, r3
 8007142:	d348      	bcc.n	80071d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007144:	4b35      	ldr	r3, [pc, #212]	; (800721c <xTaskIncrementTick+0x14c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d104      	bne.n	8007158 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800714e:	4b36      	ldr	r3, [pc, #216]	; (8007228 <xTaskIncrementTick+0x158>)
 8007150:	f04f 32ff 	mov.w	r2, #4294967295
 8007154:	601a      	str	r2, [r3, #0]
					break;
 8007156:	e03e      	b.n	80071d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007158:	4b30      	ldr	r3, [pc, #192]	; (800721c <xTaskIncrementTick+0x14c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	429a      	cmp	r2, r3
 800716e:	d203      	bcs.n	8007178 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007170:	4a2d      	ldr	r2, [pc, #180]	; (8007228 <xTaskIncrementTick+0x158>)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007176:	e02e      	b.n	80071d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	3304      	adds	r3, #4
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff f86d 	bl	800625c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	3318      	adds	r3, #24
 800718e:	4618      	mov	r0, r3
 8007190:	f7ff f864 	bl	800625c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	2201      	movs	r2, #1
 800719a:	409a      	lsls	r2, r3
 800719c:	4b23      	ldr	r3, [pc, #140]	; (800722c <xTaskIncrementTick+0x15c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	4a22      	ldr	r2, [pc, #136]	; (800722c <xTaskIncrementTick+0x15c>)
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4a1f      	ldr	r2, [pc, #124]	; (8007230 <xTaskIncrementTick+0x160>)
 80071b4:	441a      	add	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	3304      	adds	r3, #4
 80071ba:	4619      	mov	r1, r3
 80071bc:	4610      	mov	r0, r2
 80071be:	f7fe fff0 	bl	80061a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c6:	4b1b      	ldr	r3, [pc, #108]	; (8007234 <xTaskIncrementTick+0x164>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d3b9      	bcc.n	8007144 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071d0:	2301      	movs	r3, #1
 80071d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071d4:	e7b6      	b.n	8007144 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071d6:	4b17      	ldr	r3, [pc, #92]	; (8007234 <xTaskIncrementTick+0x164>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071dc:	4914      	ldr	r1, [pc, #80]	; (8007230 <xTaskIncrementTick+0x160>)
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	440b      	add	r3, r1
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d907      	bls.n	80071fe <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80071ee:	2301      	movs	r3, #1
 80071f0:	617b      	str	r3, [r7, #20]
 80071f2:	e004      	b.n	80071fe <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80071f4:	4b10      	ldr	r3, [pc, #64]	; (8007238 <xTaskIncrementTick+0x168>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3301      	adds	r3, #1
 80071fa:	4a0f      	ldr	r2, [pc, #60]	; (8007238 <xTaskIncrementTick+0x168>)
 80071fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80071fe:	4b0f      	ldr	r3, [pc, #60]	; (800723c <xTaskIncrementTick+0x16c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007206:	2301      	movs	r3, #1
 8007208:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800720a:	697b      	ldr	r3, [r7, #20]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20000804 	.word	0x20000804
 8007218:	200007e0 	.word	0x200007e0
 800721c:	20000794 	.word	0x20000794
 8007220:	20000798 	.word	0x20000798
 8007224:	200007f4 	.word	0x200007f4
 8007228:	200007fc 	.word	0x200007fc
 800722c:	200007e4 	.word	0x200007e4
 8007230:	200006e0 	.word	0x200006e0
 8007234:	200006dc 	.word	0x200006dc
 8007238:	200007ec 	.word	0x200007ec
 800723c:	200007f0 	.word	0x200007f0

08007240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007240:	b480      	push	{r7}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007246:	4b27      	ldr	r3, [pc, #156]	; (80072e4 <vTaskSwitchContext+0xa4>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800724e:	4b26      	ldr	r3, [pc, #152]	; (80072e8 <vTaskSwitchContext+0xa8>)
 8007250:	2201      	movs	r2, #1
 8007252:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007254:	e03f      	b.n	80072d6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007256:	4b24      	ldr	r3, [pc, #144]	; (80072e8 <vTaskSwitchContext+0xa8>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800725c:	4b23      	ldr	r3, [pc, #140]	; (80072ec <vTaskSwitchContext+0xac>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	fab3 f383 	clz	r3, r3
 8007268:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800726a:	7afb      	ldrb	r3, [r7, #11]
 800726c:	f1c3 031f 	rsb	r3, r3, #31
 8007270:	617b      	str	r3, [r7, #20]
 8007272:	491f      	ldr	r1, [pc, #124]	; (80072f0 <vTaskSwitchContext+0xb0>)
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	4613      	mov	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	440b      	add	r3, r1
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10a      	bne.n	800729c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	607b      	str	r3, [r7, #4]
}
 8007298:	bf00      	nop
 800729a:	e7fe      	b.n	800729a <vTaskSwitchContext+0x5a>
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4a12      	ldr	r2, [pc, #72]	; (80072f0 <vTaskSwitchContext+0xb0>)
 80072a8:	4413      	add	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	605a      	str	r2, [r3, #4]
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	3308      	adds	r3, #8
 80072be:	429a      	cmp	r2, r3
 80072c0:	d104      	bne.n	80072cc <vTaskSwitchContext+0x8c>
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	605a      	str	r2, [r3, #4]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	4a08      	ldr	r2, [pc, #32]	; (80072f4 <vTaskSwitchContext+0xb4>)
 80072d4:	6013      	str	r3, [r2, #0]
}
 80072d6:	bf00      	nop
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	20000804 	.word	0x20000804
 80072e8:	200007f0 	.word	0x200007f0
 80072ec:	200007e4 	.word	0x200007e4
 80072f0:	200006e0 	.word	0x200006e0
 80072f4:	200006dc 	.word	0x200006dc

080072f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10a      	bne.n	800731e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60fb      	str	r3, [r7, #12]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800731e:	4b07      	ldr	r3, [pc, #28]	; (800733c <vTaskPlaceOnEventList+0x44>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3318      	adds	r3, #24
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7fe ff5f 	bl	80061ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800732c:	2101      	movs	r1, #1
 800732e:	6838      	ldr	r0, [r7, #0]
 8007330:	f000 fa66 	bl	8007800 <prvAddCurrentTaskToDelayedList>
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	200006dc 	.word	0x200006dc

08007340 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10a      	bne.n	800736c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	60fb      	str	r3, [r7, #12]
}
 8007368:	bf00      	nop
 800736a:	e7fe      	b.n	800736a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	3318      	adds	r3, #24
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe ff73 	bl	800625c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007376:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <xTaskRemoveFromEventList+0xac>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d11c      	bne.n	80073b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	3304      	adds	r3, #4
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe ff6a 	bl	800625c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	2201      	movs	r2, #1
 800738e:	409a      	lsls	r2, r3
 8007390:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <xTaskRemoveFromEventList+0xb0>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4313      	orrs	r3, r2
 8007396:	4a16      	ldr	r2, [pc, #88]	; (80073f0 <xTaskRemoveFromEventList+0xb0>)
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4a13      	ldr	r2, [pc, #76]	; (80073f4 <xTaskRemoveFromEventList+0xb4>)
 80073a8:	441a      	add	r2, r3
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4619      	mov	r1, r3
 80073b0:	4610      	mov	r0, r2
 80073b2:	f7fe fef6 	bl	80061a2 <vListInsertEnd>
 80073b6:	e005      	b.n	80073c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	3318      	adds	r3, #24
 80073bc:	4619      	mov	r1, r3
 80073be:	480e      	ldr	r0, [pc, #56]	; (80073f8 <xTaskRemoveFromEventList+0xb8>)
 80073c0:	f7fe feef 	bl	80061a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c8:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <xTaskRemoveFromEventList+0xbc>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d905      	bls.n	80073de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073d2:	2301      	movs	r3, #1
 80073d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073d6:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <xTaskRemoveFromEventList+0xc0>)
 80073d8:	2201      	movs	r2, #1
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e001      	b.n	80073e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073e2:	697b      	ldr	r3, [r7, #20]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20000804 	.word	0x20000804
 80073f0:	200007e4 	.word	0x200007e4
 80073f4:	200006e0 	.word	0x200006e0
 80073f8:	2000079c 	.word	0x2000079c
 80073fc:	200006dc 	.word	0x200006dc
 8007400:	200007f0 	.word	0x200007f0

08007404 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800740c:	4b06      	ldr	r3, [pc, #24]	; (8007428 <vTaskInternalSetTimeOutState+0x24>)
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007414:	4b05      	ldr	r3, [pc, #20]	; (800742c <vTaskInternalSetTimeOutState+0x28>)
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	605a      	str	r2, [r3, #4]
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	200007f4 	.word	0x200007f4
 800742c:	200007e0 	.word	0x200007e0

08007430 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b088      	sub	sp, #32
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10a      	bne.n	8007456 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	613b      	str	r3, [r7, #16]
}
 8007452:	bf00      	nop
 8007454:	e7fe      	b.n	8007454 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	60fb      	str	r3, [r7, #12]
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007472:	f000 fb57 	bl	8007b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007476:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <xTaskCheckForTimeOut+0xbc>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748e:	d102      	bne.n	8007496 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007490:	2300      	movs	r3, #0
 8007492:	61fb      	str	r3, [r7, #28]
 8007494:	e023      	b.n	80074de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	4b15      	ldr	r3, [pc, #84]	; (80074f0 <xTaskCheckForTimeOut+0xc0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d007      	beq.n	80074b2 <xTaskCheckForTimeOut+0x82>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d302      	bcc.n	80074b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074ac:	2301      	movs	r3, #1
 80074ae:	61fb      	str	r3, [r7, #28]
 80074b0:	e015      	b.n	80074de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d20b      	bcs.n	80074d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	1ad2      	subs	r2, r2, r3
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff ff9b 	bl	8007404 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	e004      	b.n	80074de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074da:	2301      	movs	r3, #1
 80074dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074de:	f000 fb51 	bl	8007b84 <vPortExitCritical>

	return xReturn;
 80074e2:	69fb      	ldr	r3, [r7, #28]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	200007e0 	.word	0x200007e0
 80074f0:	200007f4 	.word	0x200007f4

080074f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074f8:	4b03      	ldr	r3, [pc, #12]	; (8007508 <vTaskMissedYield+0x14>)
 80074fa:	2201      	movs	r2, #1
 80074fc:	601a      	str	r2, [r3, #0]
}
 80074fe:	bf00      	nop
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	200007f0 	.word	0x200007f0

0800750c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007514:	f000 f852 	bl	80075bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007518:	4b06      	ldr	r3, [pc, #24]	; (8007534 <prvIdleTask+0x28>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d9f9      	bls.n	8007514 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007520:	4b05      	ldr	r3, [pc, #20]	; (8007538 <prvIdleTask+0x2c>)
 8007522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007530:	e7f0      	b.n	8007514 <prvIdleTask+0x8>
 8007532:	bf00      	nop
 8007534:	200006e0 	.word	0x200006e0
 8007538:	e000ed04 	.word	0xe000ed04

0800753c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007542:	2300      	movs	r3, #0
 8007544:	607b      	str	r3, [r7, #4]
 8007546:	e00c      	b.n	8007562 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4a12      	ldr	r2, [pc, #72]	; (800759c <prvInitialiseTaskLists+0x60>)
 8007554:	4413      	add	r3, r2
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fdf6 	bl	8006148 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3301      	adds	r3, #1
 8007560:	607b      	str	r3, [r7, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b06      	cmp	r3, #6
 8007566:	d9ef      	bls.n	8007548 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007568:	480d      	ldr	r0, [pc, #52]	; (80075a0 <prvInitialiseTaskLists+0x64>)
 800756a:	f7fe fded 	bl	8006148 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800756e:	480d      	ldr	r0, [pc, #52]	; (80075a4 <prvInitialiseTaskLists+0x68>)
 8007570:	f7fe fdea 	bl	8006148 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007574:	480c      	ldr	r0, [pc, #48]	; (80075a8 <prvInitialiseTaskLists+0x6c>)
 8007576:	f7fe fde7 	bl	8006148 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800757a:	480c      	ldr	r0, [pc, #48]	; (80075ac <prvInitialiseTaskLists+0x70>)
 800757c:	f7fe fde4 	bl	8006148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007580:	480b      	ldr	r0, [pc, #44]	; (80075b0 <prvInitialiseTaskLists+0x74>)
 8007582:	f7fe fde1 	bl	8006148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007586:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <prvInitialiseTaskLists+0x78>)
 8007588:	4a05      	ldr	r2, [pc, #20]	; (80075a0 <prvInitialiseTaskLists+0x64>)
 800758a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800758c:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <prvInitialiseTaskLists+0x7c>)
 800758e:	4a05      	ldr	r2, [pc, #20]	; (80075a4 <prvInitialiseTaskLists+0x68>)
 8007590:	601a      	str	r2, [r3, #0]
}
 8007592:	bf00      	nop
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	200006e0 	.word	0x200006e0
 80075a0:	2000076c 	.word	0x2000076c
 80075a4:	20000780 	.word	0x20000780
 80075a8:	2000079c 	.word	0x2000079c
 80075ac:	200007b0 	.word	0x200007b0
 80075b0:	200007c8 	.word	0x200007c8
 80075b4:	20000794 	.word	0x20000794
 80075b8:	20000798 	.word	0x20000798

080075bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075c2:	e019      	b.n	80075f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075c4:	f000 faae 	bl	8007b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c8:	4b10      	ldr	r3, [pc, #64]	; (800760c <prvCheckTasksWaitingTermination+0x50>)
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3304      	adds	r3, #4
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fe41 	bl	800625c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075da:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <prvCheckTasksWaitingTermination+0x54>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3b01      	subs	r3, #1
 80075e0:	4a0b      	ldr	r2, [pc, #44]	; (8007610 <prvCheckTasksWaitingTermination+0x54>)
 80075e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075e4:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <prvCheckTasksWaitingTermination+0x58>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	4a0a      	ldr	r2, [pc, #40]	; (8007614 <prvCheckTasksWaitingTermination+0x58>)
 80075ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075ee:	f000 fac9 	bl	8007b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f810 	bl	8007618 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075f8:	4b06      	ldr	r3, [pc, #24]	; (8007614 <prvCheckTasksWaitingTermination+0x58>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e1      	bne.n	80075c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	200007b0 	.word	0x200007b0
 8007610:	200007dc 	.word	0x200007dc
 8007614:	200007c4 	.word	0x200007c4

08007618 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007626:	2b00      	cmp	r3, #0
 8007628:	d108      	bne.n	800763c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	4618      	mov	r0, r3
 8007630:	f000 fc1e 	bl	8007e70 <vPortFree>
				vPortFree( pxTCB );
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fc1b 	bl	8007e70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800763a:	e018      	b.n	800766e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007642:	2b01      	cmp	r3, #1
 8007644:	d103      	bne.n	800764e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fc12 	bl	8007e70 <vPortFree>
	}
 800764c:	e00f      	b.n	800766e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007654:	2b02      	cmp	r3, #2
 8007656:	d00a      	beq.n	800766e <prvDeleteTCB+0x56>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	60fb      	str	r3, [r7, #12]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <prvDeleteTCB+0x54>
	}
 800766e:	bf00      	nop
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800767e:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <prvResetNextTaskUnblockTime+0x38>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007688:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <prvResetNextTaskUnblockTime+0x3c>)
 800768a:	f04f 32ff 	mov.w	r2, #4294967295
 800768e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007690:	e008      	b.n	80076a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007692:	4b07      	ldr	r3, [pc, #28]	; (80076b0 <prvResetNextTaskUnblockTime+0x38>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	4a04      	ldr	r2, [pc, #16]	; (80076b4 <prvResetNextTaskUnblockTime+0x3c>)
 80076a2:	6013      	str	r3, [r2, #0]
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	20000794 	.word	0x20000794
 80076b4:	200007fc 	.word	0x200007fc

080076b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076be:	4b0b      	ldr	r3, [pc, #44]	; (80076ec <xTaskGetSchedulerState+0x34>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076c6:	2301      	movs	r3, #1
 80076c8:	607b      	str	r3, [r7, #4]
 80076ca:	e008      	b.n	80076de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076cc:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <xTaskGetSchedulerState+0x38>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076d4:	2302      	movs	r3, #2
 80076d6:	607b      	str	r3, [r7, #4]
 80076d8:	e001      	b.n	80076de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076da:	2300      	movs	r3, #0
 80076dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076de:	687b      	ldr	r3, [r7, #4]
	}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	200007e8 	.word	0x200007e8
 80076f0:	20000804 	.word	0x20000804

080076f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007700:	2300      	movs	r3, #0
 8007702:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d06e      	beq.n	80077e8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800770a:	4b3a      	ldr	r3, [pc, #232]	; (80077f4 <xTaskPriorityDisinherit+0x100>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	429a      	cmp	r2, r3
 8007712:	d00a      	beq.n	800772a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	60fb      	str	r3, [r7, #12]
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	60bb      	str	r3, [r7, #8]
}
 8007744:	bf00      	nop
 8007746:	e7fe      	b.n	8007746 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800774c:	1e5a      	subs	r2, r3, #1
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775a:	429a      	cmp	r2, r3
 800775c:	d044      	beq.n	80077e8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007762:	2b00      	cmp	r3, #0
 8007764:	d140      	bne.n	80077e8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	3304      	adds	r3, #4
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe fd76 	bl	800625c <uxListRemove>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d115      	bne.n	80077a2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777a:	491f      	ldr	r1, [pc, #124]	; (80077f8 <xTaskPriorityDisinherit+0x104>)
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <xTaskPriorityDisinherit+0xae>
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	2201      	movs	r2, #1
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	43da      	mvns	r2, r3
 8007798:	4b18      	ldr	r3, [pc, #96]	; (80077fc <xTaskPriorityDisinherit+0x108>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4013      	ands	r3, r2
 800779e:	4a17      	ldr	r2, [pc, #92]	; (80077fc <xTaskPriorityDisinherit+0x108>)
 80077a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	f1c3 0207 	rsb	r2, r3, #7
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ba:	2201      	movs	r2, #1
 80077bc:	409a      	lsls	r2, r3
 80077be:	4b0f      	ldr	r3, [pc, #60]	; (80077fc <xTaskPriorityDisinherit+0x108>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	4a0d      	ldr	r2, [pc, #52]	; (80077fc <xTaskPriorityDisinherit+0x108>)
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4a08      	ldr	r2, [pc, #32]	; (80077f8 <xTaskPriorityDisinherit+0x104>)
 80077d6:	441a      	add	r2, r3
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	3304      	adds	r3, #4
 80077dc:	4619      	mov	r1, r3
 80077de:	4610      	mov	r0, r2
 80077e0:	f7fe fcdf 	bl	80061a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077e8:	697b      	ldr	r3, [r7, #20]
	}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	200006dc 	.word	0x200006dc
 80077f8:	200006e0 	.word	0x200006e0
 80077fc:	200007e4 	.word	0x200007e4

08007800 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800780a:	4b29      	ldr	r3, [pc, #164]	; (80078b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007810:	4b28      	ldr	r3, [pc, #160]	; (80078b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3304      	adds	r3, #4
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fd20 	bl	800625c <uxListRemove>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007822:	4b24      	ldr	r3, [pc, #144]	; (80078b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007828:	2201      	movs	r2, #1
 800782a:	fa02 f303 	lsl.w	r3, r2, r3
 800782e:	43da      	mvns	r2, r3
 8007830:	4b21      	ldr	r3, [pc, #132]	; (80078b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4013      	ands	r3, r2
 8007836:	4a20      	ldr	r2, [pc, #128]	; (80078b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007838:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007840:	d10a      	bne.n	8007858 <prvAddCurrentTaskToDelayedList+0x58>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d007      	beq.n	8007858 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007848:	4b1a      	ldr	r3, [pc, #104]	; (80078b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3304      	adds	r3, #4
 800784e:	4619      	mov	r1, r3
 8007850:	481a      	ldr	r0, [pc, #104]	; (80078bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007852:	f7fe fca6 	bl	80061a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007856:	e026      	b.n	80078a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4413      	add	r3, r2
 800785e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007860:	4b14      	ldr	r3, [pc, #80]	; (80078b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	429a      	cmp	r2, r3
 800786e:	d209      	bcs.n	8007884 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007870:	4b13      	ldr	r3, [pc, #76]	; (80078c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3304      	adds	r3, #4
 800787a:	4619      	mov	r1, r3
 800787c:	4610      	mov	r0, r2
 800787e:	f7fe fcb4 	bl	80061ea <vListInsert>
}
 8007882:	e010      	b.n	80078a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007884:	4b0f      	ldr	r3, [pc, #60]	; (80078c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	4b0a      	ldr	r3, [pc, #40]	; (80078b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3304      	adds	r3, #4
 800788e:	4619      	mov	r1, r3
 8007890:	4610      	mov	r0, r2
 8007892:	f7fe fcaa 	bl	80061ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007896:	4b0c      	ldr	r3, [pc, #48]	; (80078c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	429a      	cmp	r2, r3
 800789e:	d202      	bcs.n	80078a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80078a0:	4a09      	ldr	r2, [pc, #36]	; (80078c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	6013      	str	r3, [r2, #0]
}
 80078a6:	bf00      	nop
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	200007e0 	.word	0x200007e0
 80078b4:	200006dc 	.word	0x200006dc
 80078b8:	200007e4 	.word	0x200007e4
 80078bc:	200007c8 	.word	0x200007c8
 80078c0:	20000798 	.word	0x20000798
 80078c4:	20000794 	.word	0x20000794
 80078c8:	200007fc 	.word	0x200007fc

080078cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3b04      	subs	r3, #4
 80078dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3b04      	subs	r3, #4
 80078ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f023 0201 	bic.w	r2, r3, #1
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3b04      	subs	r3, #4
 80078fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078fc:	4a0c      	ldr	r2, [pc, #48]	; (8007930 <pxPortInitialiseStack+0x64>)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3b14      	subs	r3, #20
 8007906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3b04      	subs	r3, #4
 8007912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f06f 0202 	mvn.w	r2, #2
 800791a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3b20      	subs	r3, #32
 8007920:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007922:	68fb      	ldr	r3, [r7, #12]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	08007935 	.word	0x08007935

08007934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800793a:	2300      	movs	r3, #0
 800793c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800793e:	4b12      	ldr	r3, [pc, #72]	; (8007988 <prvTaskExitError+0x54>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007946:	d00a      	beq.n	800795e <prvTaskExitError+0x2a>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	60fb      	str	r3, [r7, #12]
}
 800795a:	bf00      	nop
 800795c:	e7fe      	b.n	800795c <prvTaskExitError+0x28>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	60bb      	str	r3, [r7, #8]
}
 8007970:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007972:	bf00      	nop
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0fc      	beq.n	8007974 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800797a:	bf00      	nop
 800797c:	bf00      	nop
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	20000014 	.word	0x20000014
 800798c:	00000000 	.word	0x00000000

08007990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007990:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <pxCurrentTCBConst2>)
 8007992:	6819      	ldr	r1, [r3, #0]
 8007994:	6808      	ldr	r0, [r1, #0]
 8007996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799a:	f380 8809 	msr	PSP, r0
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f04f 0000 	mov.w	r0, #0
 80079a6:	f380 8811 	msr	BASEPRI, r0
 80079aa:	4770      	bx	lr
 80079ac:	f3af 8000 	nop.w

080079b0 <pxCurrentTCBConst2>:
 80079b0:	200006dc 	.word	0x200006dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop

080079b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079b8:	4808      	ldr	r0, [pc, #32]	; (80079dc <prvPortStartFirstTask+0x24>)
 80079ba:	6800      	ldr	r0, [r0, #0]
 80079bc:	6800      	ldr	r0, [r0, #0]
 80079be:	f380 8808 	msr	MSP, r0
 80079c2:	f04f 0000 	mov.w	r0, #0
 80079c6:	f380 8814 	msr	CONTROL, r0
 80079ca:	b662      	cpsie	i
 80079cc:	b661      	cpsie	f
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	df00      	svc	0
 80079d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079da:	bf00      	nop
 80079dc:	e000ed08 	.word	0xe000ed08

080079e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079e6:	4b46      	ldr	r3, [pc, #280]	; (8007b00 <xPortStartScheduler+0x120>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a46      	ldr	r2, [pc, #280]	; (8007b04 <xPortStartScheduler+0x124>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d10a      	bne.n	8007a06 <xPortStartScheduler+0x26>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	613b      	str	r3, [r7, #16]
}
 8007a02:	bf00      	nop
 8007a04:	e7fe      	b.n	8007a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a06:	4b3e      	ldr	r3, [pc, #248]	; (8007b00 <xPortStartScheduler+0x120>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a3f      	ldr	r2, [pc, #252]	; (8007b08 <xPortStartScheduler+0x128>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d10a      	bne.n	8007a26 <xPortStartScheduler+0x46>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	60fb      	str	r3, [r7, #12]
}
 8007a22:	bf00      	nop
 8007a24:	e7fe      	b.n	8007a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a26:	4b39      	ldr	r3, [pc, #228]	; (8007b0c <xPortStartScheduler+0x12c>)
 8007a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	22ff      	movs	r2, #255	; 0xff
 8007a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	4b31      	ldr	r3, [pc, #196]	; (8007b10 <xPortStartScheduler+0x130>)
 8007a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a4e:	4b31      	ldr	r3, [pc, #196]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a50:	2207      	movs	r2, #7
 8007a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a54:	e009      	b.n	8007a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a56:	4b2f      	ldr	r3, [pc, #188]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	4a2d      	ldr	r2, [pc, #180]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a6a:	78fb      	ldrb	r3, [r7, #3]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	d0ef      	beq.n	8007a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a76:	4b27      	ldr	r3, [pc, #156]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f1c3 0307 	rsb	r3, r3, #7
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d00a      	beq.n	8007a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	60bb      	str	r3, [r7, #8]
}
 8007a94:	bf00      	nop
 8007a96:	e7fe      	b.n	8007a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a98:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <xPortStartScheduler+0x134>)
 8007aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007aa2:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <xPortStartScheduler+0x134>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aaa:	4a1a      	ldr	r2, [pc, #104]	; (8007b14 <xPortStartScheduler+0x134>)
 8007aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ab6:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <xPortStartScheduler+0x138>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a17      	ldr	r2, [pc, #92]	; (8007b18 <xPortStartScheduler+0x138>)
 8007abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ac2:	4b15      	ldr	r3, [pc, #84]	; (8007b18 <xPortStartScheduler+0x138>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a14      	ldr	r2, [pc, #80]	; (8007b18 <xPortStartScheduler+0x138>)
 8007ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ace:	f000 f8dd 	bl	8007c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ad2:	4b12      	ldr	r3, [pc, #72]	; (8007b1c <xPortStartScheduler+0x13c>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ad8:	f000 f8fc 	bl	8007cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007adc:	4b10      	ldr	r3, [pc, #64]	; (8007b20 <xPortStartScheduler+0x140>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a0f      	ldr	r2, [pc, #60]	; (8007b20 <xPortStartScheduler+0x140>)
 8007ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ae8:	f7ff ff66 	bl	80079b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007aec:	f7ff fba8 	bl	8007240 <vTaskSwitchContext>
	prvTaskExitError();
 8007af0:	f7ff ff20 	bl	8007934 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	e000ed00 	.word	0xe000ed00
 8007b04:	410fc271 	.word	0x410fc271
 8007b08:	410fc270 	.word	0x410fc270
 8007b0c:	e000e400 	.word	0xe000e400
 8007b10:	20000808 	.word	0x20000808
 8007b14:	2000080c 	.word	0x2000080c
 8007b18:	e000ed20 	.word	0xe000ed20
 8007b1c:	20000014 	.word	0x20000014
 8007b20:	e000ef34 	.word	0xe000ef34

08007b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	607b      	str	r3, [r7, #4]
}
 8007b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b3e:	4b0f      	ldr	r3, [pc, #60]	; (8007b7c <vPortEnterCritical+0x58>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	4a0d      	ldr	r2, [pc, #52]	; (8007b7c <vPortEnterCritical+0x58>)
 8007b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b48:	4b0c      	ldr	r3, [pc, #48]	; (8007b7c <vPortEnterCritical+0x58>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d10f      	bne.n	8007b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b50:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <vPortEnterCritical+0x5c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	603b      	str	r3, [r7, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <vPortEnterCritical+0x4a>
	}
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	20000014 	.word	0x20000014
 8007b80:	e000ed04 	.word	0xe000ed04

08007b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b8a:	4b12      	ldr	r3, [pc, #72]	; (8007bd4 <vPortExitCritical+0x50>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10a      	bne.n	8007ba8 <vPortExitCritical+0x24>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	607b      	str	r3, [r7, #4]
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <vPortExitCritical+0x50>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <vPortExitCritical+0x50>)
 8007bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bb2:	4b08      	ldr	r3, [pc, #32]	; (8007bd4 <vPortExitCritical+0x50>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d105      	bne.n	8007bc6 <vPortExitCritical+0x42>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	20000014 	.word	0x20000014
	...

08007be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007be0:	f3ef 8009 	mrs	r0, PSP
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	4b15      	ldr	r3, [pc, #84]	; (8007c40 <pxCurrentTCBConst>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	f01e 0f10 	tst.w	lr, #16
 8007bf0:	bf08      	it	eq
 8007bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfa:	6010      	str	r0, [r2, #0]
 8007bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c04:	f380 8811 	msr	BASEPRI, r0
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f7ff fb16 	bl	8007240 <vTaskSwitchContext>
 8007c14:	f04f 0000 	mov.w	r0, #0
 8007c18:	f380 8811 	msr	BASEPRI, r0
 8007c1c:	bc09      	pop	{r0, r3}
 8007c1e:	6819      	ldr	r1, [r3, #0]
 8007c20:	6808      	ldr	r0, [r1, #0]
 8007c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c26:	f01e 0f10 	tst.w	lr, #16
 8007c2a:	bf08      	it	eq
 8007c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c30:	f380 8809 	msr	PSP, r0
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	f3af 8000 	nop.w

08007c40 <pxCurrentTCBConst>:
 8007c40:	200006dc 	.word	0x200006dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop

08007c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	607b      	str	r3, [r7, #4]
}
 8007c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c62:	f7ff fa35 	bl	80070d0 <xTaskIncrementTick>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c6c:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <SysTick_Handler+0x40>)
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	2300      	movs	r3, #0
 8007c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	f383 8811 	msr	BASEPRI, r3
}
 8007c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c90:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <vPortSetupTimerInterrupt+0x34>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c96:	4b0b      	ldr	r3, [pc, #44]	; (8007cc4 <vPortSetupTimerInterrupt+0x38>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c9c:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <vPortSetupTimerInterrupt+0x3c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a0a      	ldr	r2, [pc, #40]	; (8007ccc <vPortSetupTimerInterrupt+0x40>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	099b      	lsrs	r3, r3, #6
 8007ca8:	4a09      	ldr	r2, [pc, #36]	; (8007cd0 <vPortSetupTimerInterrupt+0x44>)
 8007caa:	3b01      	subs	r3, #1
 8007cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cae:	4b04      	ldr	r3, [pc, #16]	; (8007cc0 <vPortSetupTimerInterrupt+0x34>)
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	601a      	str	r2, [r3, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	e000e010 	.word	0xe000e010
 8007cc4:	e000e018 	.word	0xe000e018
 8007cc8:	20000008 	.word	0x20000008
 8007ccc:	10624dd3 	.word	0x10624dd3
 8007cd0:	e000e014 	.word	0xe000e014

08007cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ce4 <vPortEnableVFP+0x10>
 8007cd8:	6801      	ldr	r1, [r0, #0]
 8007cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cde:	6001      	str	r1, [r0, #0]
 8007ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ce2:	bf00      	nop
 8007ce4:	e000ed88 	.word	0xe000ed88

08007ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08a      	sub	sp, #40	; 0x28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cf4:	f7ff f942 	bl	8006f7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cf8:	4b58      	ldr	r3, [pc, #352]	; (8007e5c <pvPortMalloc+0x174>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d00:	f000 f910 	bl	8007f24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d04:	4b56      	ldr	r3, [pc, #344]	; (8007e60 <pvPortMalloc+0x178>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 808e 	bne.w	8007e2e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01d      	beq.n	8007d54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d18:	2208      	movs	r2, #8
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d014      	beq.n	8007d54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f023 0307 	bic.w	r3, r3, #7
 8007d30:	3308      	adds	r3, #8
 8007d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <pvPortMalloc+0x6c>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	617b      	str	r3, [r7, #20]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d069      	beq.n	8007e2e <pvPortMalloc+0x146>
 8007d5a:	4b42      	ldr	r3, [pc, #264]	; (8007e64 <pvPortMalloc+0x17c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d864      	bhi.n	8007e2e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d64:	4b40      	ldr	r3, [pc, #256]	; (8007e68 <pvPortMalloc+0x180>)
 8007d66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d68:	4b3f      	ldr	r3, [pc, #252]	; (8007e68 <pvPortMalloc+0x180>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d6e:	e004      	b.n	8007d7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d903      	bls.n	8007d8c <pvPortMalloc+0xa4>
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1f1      	bne.n	8007d70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d8c:	4b33      	ldr	r3, [pc, #204]	; (8007e5c <pvPortMalloc+0x174>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d04b      	beq.n	8007e2e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2208      	movs	r2, #8
 8007d9c:	4413      	add	r3, r2
 8007d9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	2308      	movs	r3, #8
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d91f      	bls.n	8007df8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <pvPortMalloc+0xf8>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	613b      	str	r3, [r7, #16]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	1ad2      	subs	r2, r2, r3
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007df2:	69b8      	ldr	r0, [r7, #24]
 8007df4:	f000 f8f8 	bl	8007fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007df8:	4b1a      	ldr	r3, [pc, #104]	; (8007e64 <pvPortMalloc+0x17c>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	4a18      	ldr	r2, [pc, #96]	; (8007e64 <pvPortMalloc+0x17c>)
 8007e04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e06:	4b17      	ldr	r3, [pc, #92]	; (8007e64 <pvPortMalloc+0x17c>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b18      	ldr	r3, [pc, #96]	; (8007e6c <pvPortMalloc+0x184>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d203      	bcs.n	8007e1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e12:	4b14      	ldr	r3, [pc, #80]	; (8007e64 <pvPortMalloc+0x17c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a15      	ldr	r2, [pc, #84]	; (8007e6c <pvPortMalloc+0x184>)
 8007e18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <pvPortMalloc+0x178>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	431a      	orrs	r2, r3
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e2e:	f7ff f8b3 	bl	8006f98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	f003 0307 	and.w	r3, r3, #7
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00a      	beq.n	8007e52 <pvPortMalloc+0x16a>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	60fb      	str	r3, [r7, #12]
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <pvPortMalloc+0x168>
	return pvReturn;
 8007e52:	69fb      	ldr	r3, [r7, #28]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3728      	adds	r7, #40	; 0x28
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20004418 	.word	0x20004418
 8007e60:	20004424 	.word	0x20004424
 8007e64:	2000441c 	.word	0x2000441c
 8007e68:	20004410 	.word	0x20004410
 8007e6c:	20004420 	.word	0x20004420

08007e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d048      	beq.n	8007f14 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e82:	2308      	movs	r3, #8
 8007e84:	425b      	negs	r3, r3
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	4413      	add	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	4b21      	ldr	r3, [pc, #132]	; (8007f1c <vPortFree+0xac>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4013      	ands	r3, r2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10a      	bne.n	8007eb4 <vPortFree+0x44>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	60fb      	str	r3, [r7, #12]
}
 8007eb0:	bf00      	nop
 8007eb2:	e7fe      	b.n	8007eb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <vPortFree+0x62>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	60bb      	str	r3, [r7, #8]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	4b11      	ldr	r3, [pc, #68]	; (8007f1c <vPortFree+0xac>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4013      	ands	r3, r2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d019      	beq.n	8007f14 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d115      	bne.n	8007f14 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <vPortFree+0xac>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	43db      	mvns	r3, r3
 8007ef2:	401a      	ands	r2, r3
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ef8:	f7ff f840 	bl	8006f7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <vPortFree+0xb0>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4413      	add	r3, r2
 8007f06:	4a06      	ldr	r2, [pc, #24]	; (8007f20 <vPortFree+0xb0>)
 8007f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f0a:	6938      	ldr	r0, [r7, #16]
 8007f0c:	f000 f86c 	bl	8007fe8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f10:	f7ff f842 	bl	8006f98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f14:	bf00      	nop
 8007f16:	3718      	adds	r7, #24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20004424 	.word	0x20004424
 8007f20:	2000441c 	.word	0x2000441c

08007f24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f30:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <prvHeapInit+0xac>)
 8007f32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00c      	beq.n	8007f58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3307      	adds	r3, #7
 8007f42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0307 	bic.w	r3, r3, #7
 8007f4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	4a1f      	ldr	r2, [pc, #124]	; (8007fd0 <prvHeapInit+0xac>)
 8007f54:	4413      	add	r3, r2
 8007f56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f5c:	4a1d      	ldr	r2, [pc, #116]	; (8007fd4 <prvHeapInit+0xb0>)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f62:	4b1c      	ldr	r3, [pc, #112]	; (8007fd4 <prvHeapInit+0xb0>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f70:	2208      	movs	r2, #8
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0307 	bic.w	r3, r3, #7
 8007f7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a15      	ldr	r2, [pc, #84]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f86:	4b14      	ldr	r3, [pc, #80]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f8e:	4b12      	ldr	r3, [pc, #72]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fa4:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <prvHeapInit+0xb4>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	4a0a      	ldr	r2, [pc, #40]	; (8007fdc <prvHeapInit+0xb8>)
 8007fb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	4a09      	ldr	r2, [pc, #36]	; (8007fe0 <prvHeapInit+0xbc>)
 8007fba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fbc:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <prvHeapInit+0xc0>)
 8007fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fc2:	601a      	str	r2, [r3, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20000810 	.word	0x20000810
 8007fd4:	20004410 	.word	0x20004410
 8007fd8:	20004418 	.word	0x20004418
 8007fdc:	20004420 	.word	0x20004420
 8007fe0:	2000441c 	.word	0x2000441c
 8007fe4:	20004424 	.word	0x20004424

08007fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ff0:	4b28      	ldr	r3, [pc, #160]	; (8008094 <prvInsertBlockIntoFreeList+0xac>)
 8007ff2:	60fb      	str	r3, [r7, #12]
 8007ff4:	e002      	b.n	8007ffc <prvInsertBlockIntoFreeList+0x14>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d8f7      	bhi.n	8007ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	4413      	add	r3, r2
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	429a      	cmp	r2, r3
 8008016:	d108      	bne.n	800802a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	441a      	add	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	441a      	add	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	429a      	cmp	r2, r3
 800803c:	d118      	bne.n	8008070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4b15      	ldr	r3, [pc, #84]	; (8008098 <prvInsertBlockIntoFreeList+0xb0>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	429a      	cmp	r2, r3
 8008048:	d00d      	beq.n	8008066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	441a      	add	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	e008      	b.n	8008078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008066:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <prvInsertBlockIntoFreeList+0xb0>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	e003      	b.n	8008078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	429a      	cmp	r2, r3
 800807e:	d002      	beq.n	8008086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20004410 	.word	0x20004410
 8008098:	20004418 	.word	0x20004418

0800809c <__errno>:
 800809c:	4b01      	ldr	r3, [pc, #4]	; (80080a4 <__errno+0x8>)
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20000018 	.word	0x20000018

080080a8 <__libc_init_array>:
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	4d0d      	ldr	r5, [pc, #52]	; (80080e0 <__libc_init_array+0x38>)
 80080ac:	4c0d      	ldr	r4, [pc, #52]	; (80080e4 <__libc_init_array+0x3c>)
 80080ae:	1b64      	subs	r4, r4, r5
 80080b0:	10a4      	asrs	r4, r4, #2
 80080b2:	2600      	movs	r6, #0
 80080b4:	42a6      	cmp	r6, r4
 80080b6:	d109      	bne.n	80080cc <__libc_init_array+0x24>
 80080b8:	4d0b      	ldr	r5, [pc, #44]	; (80080e8 <__libc_init_array+0x40>)
 80080ba:	4c0c      	ldr	r4, [pc, #48]	; (80080ec <__libc_init_array+0x44>)
 80080bc:	f000 fc8e 	bl	80089dc <_init>
 80080c0:	1b64      	subs	r4, r4, r5
 80080c2:	10a4      	asrs	r4, r4, #2
 80080c4:	2600      	movs	r6, #0
 80080c6:	42a6      	cmp	r6, r4
 80080c8:	d105      	bne.n	80080d6 <__libc_init_array+0x2e>
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d0:	4798      	blx	r3
 80080d2:	3601      	adds	r6, #1
 80080d4:	e7ee      	b.n	80080b4 <__libc_init_array+0xc>
 80080d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080da:	4798      	blx	r3
 80080dc:	3601      	adds	r6, #1
 80080de:	e7f2      	b.n	80080c6 <__libc_init_array+0x1e>
 80080e0:	08008b74 	.word	0x08008b74
 80080e4:	08008b74 	.word	0x08008b74
 80080e8:	08008b74 	.word	0x08008b74
 80080ec:	08008b78 	.word	0x08008b78

080080f0 <memcpy>:
 80080f0:	440a      	add	r2, r1
 80080f2:	4291      	cmp	r1, r2
 80080f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080f8:	d100      	bne.n	80080fc <memcpy+0xc>
 80080fa:	4770      	bx	lr
 80080fc:	b510      	push	{r4, lr}
 80080fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008106:	4291      	cmp	r1, r2
 8008108:	d1f9      	bne.n	80080fe <memcpy+0xe>
 800810a:	bd10      	pop	{r4, pc}

0800810c <memset>:
 800810c:	4402      	add	r2, r0
 800810e:	4603      	mov	r3, r0
 8008110:	4293      	cmp	r3, r2
 8008112:	d100      	bne.n	8008116 <memset+0xa>
 8008114:	4770      	bx	lr
 8008116:	f803 1b01 	strb.w	r1, [r3], #1
 800811a:	e7f9      	b.n	8008110 <memset+0x4>

0800811c <siprintf>:
 800811c:	b40e      	push	{r1, r2, r3}
 800811e:	b500      	push	{lr}
 8008120:	b09c      	sub	sp, #112	; 0x70
 8008122:	ab1d      	add	r3, sp, #116	; 0x74
 8008124:	9002      	str	r0, [sp, #8]
 8008126:	9006      	str	r0, [sp, #24]
 8008128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800812c:	4809      	ldr	r0, [pc, #36]	; (8008154 <siprintf+0x38>)
 800812e:	9107      	str	r1, [sp, #28]
 8008130:	9104      	str	r1, [sp, #16]
 8008132:	4909      	ldr	r1, [pc, #36]	; (8008158 <siprintf+0x3c>)
 8008134:	f853 2b04 	ldr.w	r2, [r3], #4
 8008138:	9105      	str	r1, [sp, #20]
 800813a:	6800      	ldr	r0, [r0, #0]
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	a902      	add	r1, sp, #8
 8008140:	f000 f868 	bl	8008214 <_svfiprintf_r>
 8008144:	9b02      	ldr	r3, [sp, #8]
 8008146:	2200      	movs	r2, #0
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	b01c      	add	sp, #112	; 0x70
 800814c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008150:	b003      	add	sp, #12
 8008152:	4770      	bx	lr
 8008154:	20000018 	.word	0x20000018
 8008158:	ffff0208 	.word	0xffff0208

0800815c <__ssputs_r>:
 800815c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008160:	688e      	ldr	r6, [r1, #8]
 8008162:	429e      	cmp	r6, r3
 8008164:	4682      	mov	sl, r0
 8008166:	460c      	mov	r4, r1
 8008168:	4690      	mov	r8, r2
 800816a:	461f      	mov	r7, r3
 800816c:	d838      	bhi.n	80081e0 <__ssputs_r+0x84>
 800816e:	898a      	ldrh	r2, [r1, #12]
 8008170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008174:	d032      	beq.n	80081dc <__ssputs_r+0x80>
 8008176:	6825      	ldr	r5, [r4, #0]
 8008178:	6909      	ldr	r1, [r1, #16]
 800817a:	eba5 0901 	sub.w	r9, r5, r1
 800817e:	6965      	ldr	r5, [r4, #20]
 8008180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008188:	3301      	adds	r3, #1
 800818a:	444b      	add	r3, r9
 800818c:	106d      	asrs	r5, r5, #1
 800818e:	429d      	cmp	r5, r3
 8008190:	bf38      	it	cc
 8008192:	461d      	movcc	r5, r3
 8008194:	0553      	lsls	r3, r2, #21
 8008196:	d531      	bpl.n	80081fc <__ssputs_r+0xa0>
 8008198:	4629      	mov	r1, r5
 800819a:	f000 fb55 	bl	8008848 <_malloc_r>
 800819e:	4606      	mov	r6, r0
 80081a0:	b950      	cbnz	r0, 80081b8 <__ssputs_r+0x5c>
 80081a2:	230c      	movs	r3, #12
 80081a4:	f8ca 3000 	str.w	r3, [sl]
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ae:	81a3      	strh	r3, [r4, #12]
 80081b0:	f04f 30ff 	mov.w	r0, #4294967295
 80081b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b8:	6921      	ldr	r1, [r4, #16]
 80081ba:	464a      	mov	r2, r9
 80081bc:	f7ff ff98 	bl	80080f0 <memcpy>
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ca:	81a3      	strh	r3, [r4, #12]
 80081cc:	6126      	str	r6, [r4, #16]
 80081ce:	6165      	str	r5, [r4, #20]
 80081d0:	444e      	add	r6, r9
 80081d2:	eba5 0509 	sub.w	r5, r5, r9
 80081d6:	6026      	str	r6, [r4, #0]
 80081d8:	60a5      	str	r5, [r4, #8]
 80081da:	463e      	mov	r6, r7
 80081dc:	42be      	cmp	r6, r7
 80081de:	d900      	bls.n	80081e2 <__ssputs_r+0x86>
 80081e0:	463e      	mov	r6, r7
 80081e2:	6820      	ldr	r0, [r4, #0]
 80081e4:	4632      	mov	r2, r6
 80081e6:	4641      	mov	r1, r8
 80081e8:	f000 faa8 	bl	800873c <memmove>
 80081ec:	68a3      	ldr	r3, [r4, #8]
 80081ee:	1b9b      	subs	r3, r3, r6
 80081f0:	60a3      	str	r3, [r4, #8]
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	4433      	add	r3, r6
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	2000      	movs	r0, #0
 80081fa:	e7db      	b.n	80081b4 <__ssputs_r+0x58>
 80081fc:	462a      	mov	r2, r5
 80081fe:	f000 fb97 	bl	8008930 <_realloc_r>
 8008202:	4606      	mov	r6, r0
 8008204:	2800      	cmp	r0, #0
 8008206:	d1e1      	bne.n	80081cc <__ssputs_r+0x70>
 8008208:	6921      	ldr	r1, [r4, #16]
 800820a:	4650      	mov	r0, sl
 800820c:	f000 fab0 	bl	8008770 <_free_r>
 8008210:	e7c7      	b.n	80081a2 <__ssputs_r+0x46>
	...

08008214 <_svfiprintf_r>:
 8008214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008218:	4698      	mov	r8, r3
 800821a:	898b      	ldrh	r3, [r1, #12]
 800821c:	061b      	lsls	r3, r3, #24
 800821e:	b09d      	sub	sp, #116	; 0x74
 8008220:	4607      	mov	r7, r0
 8008222:	460d      	mov	r5, r1
 8008224:	4614      	mov	r4, r2
 8008226:	d50e      	bpl.n	8008246 <_svfiprintf_r+0x32>
 8008228:	690b      	ldr	r3, [r1, #16]
 800822a:	b963      	cbnz	r3, 8008246 <_svfiprintf_r+0x32>
 800822c:	2140      	movs	r1, #64	; 0x40
 800822e:	f000 fb0b 	bl	8008848 <_malloc_r>
 8008232:	6028      	str	r0, [r5, #0]
 8008234:	6128      	str	r0, [r5, #16]
 8008236:	b920      	cbnz	r0, 8008242 <_svfiprintf_r+0x2e>
 8008238:	230c      	movs	r3, #12
 800823a:	603b      	str	r3, [r7, #0]
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	e0d1      	b.n	80083e6 <_svfiprintf_r+0x1d2>
 8008242:	2340      	movs	r3, #64	; 0x40
 8008244:	616b      	str	r3, [r5, #20]
 8008246:	2300      	movs	r3, #0
 8008248:	9309      	str	r3, [sp, #36]	; 0x24
 800824a:	2320      	movs	r3, #32
 800824c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008250:	f8cd 800c 	str.w	r8, [sp, #12]
 8008254:	2330      	movs	r3, #48	; 0x30
 8008256:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008400 <_svfiprintf_r+0x1ec>
 800825a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800825e:	f04f 0901 	mov.w	r9, #1
 8008262:	4623      	mov	r3, r4
 8008264:	469a      	mov	sl, r3
 8008266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800826a:	b10a      	cbz	r2, 8008270 <_svfiprintf_r+0x5c>
 800826c:	2a25      	cmp	r2, #37	; 0x25
 800826e:	d1f9      	bne.n	8008264 <_svfiprintf_r+0x50>
 8008270:	ebba 0b04 	subs.w	fp, sl, r4
 8008274:	d00b      	beq.n	800828e <_svfiprintf_r+0x7a>
 8008276:	465b      	mov	r3, fp
 8008278:	4622      	mov	r2, r4
 800827a:	4629      	mov	r1, r5
 800827c:	4638      	mov	r0, r7
 800827e:	f7ff ff6d 	bl	800815c <__ssputs_r>
 8008282:	3001      	adds	r0, #1
 8008284:	f000 80aa 	beq.w	80083dc <_svfiprintf_r+0x1c8>
 8008288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800828a:	445a      	add	r2, fp
 800828c:	9209      	str	r2, [sp, #36]	; 0x24
 800828e:	f89a 3000 	ldrb.w	r3, [sl]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 80a2 	beq.w	80083dc <_svfiprintf_r+0x1c8>
 8008298:	2300      	movs	r3, #0
 800829a:	f04f 32ff 	mov.w	r2, #4294967295
 800829e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082a2:	f10a 0a01 	add.w	sl, sl, #1
 80082a6:	9304      	str	r3, [sp, #16]
 80082a8:	9307      	str	r3, [sp, #28]
 80082aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082ae:	931a      	str	r3, [sp, #104]	; 0x68
 80082b0:	4654      	mov	r4, sl
 80082b2:	2205      	movs	r2, #5
 80082b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b8:	4851      	ldr	r0, [pc, #324]	; (8008400 <_svfiprintf_r+0x1ec>)
 80082ba:	f7f7 ff99 	bl	80001f0 <memchr>
 80082be:	9a04      	ldr	r2, [sp, #16]
 80082c0:	b9d8      	cbnz	r0, 80082fa <_svfiprintf_r+0xe6>
 80082c2:	06d0      	lsls	r0, r2, #27
 80082c4:	bf44      	itt	mi
 80082c6:	2320      	movmi	r3, #32
 80082c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082cc:	0711      	lsls	r1, r2, #28
 80082ce:	bf44      	itt	mi
 80082d0:	232b      	movmi	r3, #43	; 0x2b
 80082d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082d6:	f89a 3000 	ldrb.w	r3, [sl]
 80082da:	2b2a      	cmp	r3, #42	; 0x2a
 80082dc:	d015      	beq.n	800830a <_svfiprintf_r+0xf6>
 80082de:	9a07      	ldr	r2, [sp, #28]
 80082e0:	4654      	mov	r4, sl
 80082e2:	2000      	movs	r0, #0
 80082e4:	f04f 0c0a 	mov.w	ip, #10
 80082e8:	4621      	mov	r1, r4
 80082ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ee:	3b30      	subs	r3, #48	; 0x30
 80082f0:	2b09      	cmp	r3, #9
 80082f2:	d94e      	bls.n	8008392 <_svfiprintf_r+0x17e>
 80082f4:	b1b0      	cbz	r0, 8008324 <_svfiprintf_r+0x110>
 80082f6:	9207      	str	r2, [sp, #28]
 80082f8:	e014      	b.n	8008324 <_svfiprintf_r+0x110>
 80082fa:	eba0 0308 	sub.w	r3, r0, r8
 80082fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008302:	4313      	orrs	r3, r2
 8008304:	9304      	str	r3, [sp, #16]
 8008306:	46a2      	mov	sl, r4
 8008308:	e7d2      	b.n	80082b0 <_svfiprintf_r+0x9c>
 800830a:	9b03      	ldr	r3, [sp, #12]
 800830c:	1d19      	adds	r1, r3, #4
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	9103      	str	r1, [sp, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	bfbb      	ittet	lt
 8008316:	425b      	neglt	r3, r3
 8008318:	f042 0202 	orrlt.w	r2, r2, #2
 800831c:	9307      	strge	r3, [sp, #28]
 800831e:	9307      	strlt	r3, [sp, #28]
 8008320:	bfb8      	it	lt
 8008322:	9204      	strlt	r2, [sp, #16]
 8008324:	7823      	ldrb	r3, [r4, #0]
 8008326:	2b2e      	cmp	r3, #46	; 0x2e
 8008328:	d10c      	bne.n	8008344 <_svfiprintf_r+0x130>
 800832a:	7863      	ldrb	r3, [r4, #1]
 800832c:	2b2a      	cmp	r3, #42	; 0x2a
 800832e:	d135      	bne.n	800839c <_svfiprintf_r+0x188>
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	1d1a      	adds	r2, r3, #4
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	9203      	str	r2, [sp, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	bfb8      	it	lt
 800833c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008340:	3402      	adds	r4, #2
 8008342:	9305      	str	r3, [sp, #20]
 8008344:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008410 <_svfiprintf_r+0x1fc>
 8008348:	7821      	ldrb	r1, [r4, #0]
 800834a:	2203      	movs	r2, #3
 800834c:	4650      	mov	r0, sl
 800834e:	f7f7 ff4f 	bl	80001f0 <memchr>
 8008352:	b140      	cbz	r0, 8008366 <_svfiprintf_r+0x152>
 8008354:	2340      	movs	r3, #64	; 0x40
 8008356:	eba0 000a 	sub.w	r0, r0, sl
 800835a:	fa03 f000 	lsl.w	r0, r3, r0
 800835e:	9b04      	ldr	r3, [sp, #16]
 8008360:	4303      	orrs	r3, r0
 8008362:	3401      	adds	r4, #1
 8008364:	9304      	str	r3, [sp, #16]
 8008366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836a:	4826      	ldr	r0, [pc, #152]	; (8008404 <_svfiprintf_r+0x1f0>)
 800836c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008370:	2206      	movs	r2, #6
 8008372:	f7f7 ff3d 	bl	80001f0 <memchr>
 8008376:	2800      	cmp	r0, #0
 8008378:	d038      	beq.n	80083ec <_svfiprintf_r+0x1d8>
 800837a:	4b23      	ldr	r3, [pc, #140]	; (8008408 <_svfiprintf_r+0x1f4>)
 800837c:	bb1b      	cbnz	r3, 80083c6 <_svfiprintf_r+0x1b2>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	3307      	adds	r3, #7
 8008382:	f023 0307 	bic.w	r3, r3, #7
 8008386:	3308      	adds	r3, #8
 8008388:	9303      	str	r3, [sp, #12]
 800838a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800838c:	4433      	add	r3, r6
 800838e:	9309      	str	r3, [sp, #36]	; 0x24
 8008390:	e767      	b.n	8008262 <_svfiprintf_r+0x4e>
 8008392:	fb0c 3202 	mla	r2, ip, r2, r3
 8008396:	460c      	mov	r4, r1
 8008398:	2001      	movs	r0, #1
 800839a:	e7a5      	b.n	80082e8 <_svfiprintf_r+0xd4>
 800839c:	2300      	movs	r3, #0
 800839e:	3401      	adds	r4, #1
 80083a0:	9305      	str	r3, [sp, #20]
 80083a2:	4619      	mov	r1, r3
 80083a4:	f04f 0c0a 	mov.w	ip, #10
 80083a8:	4620      	mov	r0, r4
 80083aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083ae:	3a30      	subs	r2, #48	; 0x30
 80083b0:	2a09      	cmp	r2, #9
 80083b2:	d903      	bls.n	80083bc <_svfiprintf_r+0x1a8>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0c5      	beq.n	8008344 <_svfiprintf_r+0x130>
 80083b8:	9105      	str	r1, [sp, #20]
 80083ba:	e7c3      	b.n	8008344 <_svfiprintf_r+0x130>
 80083bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80083c0:	4604      	mov	r4, r0
 80083c2:	2301      	movs	r3, #1
 80083c4:	e7f0      	b.n	80083a8 <_svfiprintf_r+0x194>
 80083c6:	ab03      	add	r3, sp, #12
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	462a      	mov	r2, r5
 80083cc:	4b0f      	ldr	r3, [pc, #60]	; (800840c <_svfiprintf_r+0x1f8>)
 80083ce:	a904      	add	r1, sp, #16
 80083d0:	4638      	mov	r0, r7
 80083d2:	f3af 8000 	nop.w
 80083d6:	1c42      	adds	r2, r0, #1
 80083d8:	4606      	mov	r6, r0
 80083da:	d1d6      	bne.n	800838a <_svfiprintf_r+0x176>
 80083dc:	89ab      	ldrh	r3, [r5, #12]
 80083de:	065b      	lsls	r3, r3, #25
 80083e0:	f53f af2c 	bmi.w	800823c <_svfiprintf_r+0x28>
 80083e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083e6:	b01d      	add	sp, #116	; 0x74
 80083e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ec:	ab03      	add	r3, sp, #12
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	462a      	mov	r2, r5
 80083f2:	4b06      	ldr	r3, [pc, #24]	; (800840c <_svfiprintf_r+0x1f8>)
 80083f4:	a904      	add	r1, sp, #16
 80083f6:	4638      	mov	r0, r7
 80083f8:	f000 f87a 	bl	80084f0 <_printf_i>
 80083fc:	e7eb      	b.n	80083d6 <_svfiprintf_r+0x1c2>
 80083fe:	bf00      	nop
 8008400:	08008b38 	.word	0x08008b38
 8008404:	08008b42 	.word	0x08008b42
 8008408:	00000000 	.word	0x00000000
 800840c:	0800815d 	.word	0x0800815d
 8008410:	08008b3e 	.word	0x08008b3e

08008414 <_printf_common>:
 8008414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008418:	4616      	mov	r6, r2
 800841a:	4699      	mov	r9, r3
 800841c:	688a      	ldr	r2, [r1, #8]
 800841e:	690b      	ldr	r3, [r1, #16]
 8008420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008424:	4293      	cmp	r3, r2
 8008426:	bfb8      	it	lt
 8008428:	4613      	movlt	r3, r2
 800842a:	6033      	str	r3, [r6, #0]
 800842c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008430:	4607      	mov	r7, r0
 8008432:	460c      	mov	r4, r1
 8008434:	b10a      	cbz	r2, 800843a <_printf_common+0x26>
 8008436:	3301      	adds	r3, #1
 8008438:	6033      	str	r3, [r6, #0]
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	0699      	lsls	r1, r3, #26
 800843e:	bf42      	ittt	mi
 8008440:	6833      	ldrmi	r3, [r6, #0]
 8008442:	3302      	addmi	r3, #2
 8008444:	6033      	strmi	r3, [r6, #0]
 8008446:	6825      	ldr	r5, [r4, #0]
 8008448:	f015 0506 	ands.w	r5, r5, #6
 800844c:	d106      	bne.n	800845c <_printf_common+0x48>
 800844e:	f104 0a19 	add.w	sl, r4, #25
 8008452:	68e3      	ldr	r3, [r4, #12]
 8008454:	6832      	ldr	r2, [r6, #0]
 8008456:	1a9b      	subs	r3, r3, r2
 8008458:	42ab      	cmp	r3, r5
 800845a:	dc26      	bgt.n	80084aa <_printf_common+0x96>
 800845c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008460:	1e13      	subs	r3, r2, #0
 8008462:	6822      	ldr	r2, [r4, #0]
 8008464:	bf18      	it	ne
 8008466:	2301      	movne	r3, #1
 8008468:	0692      	lsls	r2, r2, #26
 800846a:	d42b      	bmi.n	80084c4 <_printf_common+0xb0>
 800846c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008470:	4649      	mov	r1, r9
 8008472:	4638      	mov	r0, r7
 8008474:	47c0      	blx	r8
 8008476:	3001      	adds	r0, #1
 8008478:	d01e      	beq.n	80084b8 <_printf_common+0xa4>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	68e5      	ldr	r5, [r4, #12]
 800847e:	6832      	ldr	r2, [r6, #0]
 8008480:	f003 0306 	and.w	r3, r3, #6
 8008484:	2b04      	cmp	r3, #4
 8008486:	bf08      	it	eq
 8008488:	1aad      	subeq	r5, r5, r2
 800848a:	68a3      	ldr	r3, [r4, #8]
 800848c:	6922      	ldr	r2, [r4, #16]
 800848e:	bf0c      	ite	eq
 8008490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008494:	2500      	movne	r5, #0
 8008496:	4293      	cmp	r3, r2
 8008498:	bfc4      	itt	gt
 800849a:	1a9b      	subgt	r3, r3, r2
 800849c:	18ed      	addgt	r5, r5, r3
 800849e:	2600      	movs	r6, #0
 80084a0:	341a      	adds	r4, #26
 80084a2:	42b5      	cmp	r5, r6
 80084a4:	d11a      	bne.n	80084dc <_printf_common+0xc8>
 80084a6:	2000      	movs	r0, #0
 80084a8:	e008      	b.n	80084bc <_printf_common+0xa8>
 80084aa:	2301      	movs	r3, #1
 80084ac:	4652      	mov	r2, sl
 80084ae:	4649      	mov	r1, r9
 80084b0:	4638      	mov	r0, r7
 80084b2:	47c0      	blx	r8
 80084b4:	3001      	adds	r0, #1
 80084b6:	d103      	bne.n	80084c0 <_printf_common+0xac>
 80084b8:	f04f 30ff 	mov.w	r0, #4294967295
 80084bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c0:	3501      	adds	r5, #1
 80084c2:	e7c6      	b.n	8008452 <_printf_common+0x3e>
 80084c4:	18e1      	adds	r1, r4, r3
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	2030      	movs	r0, #48	; 0x30
 80084ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084ce:	4422      	add	r2, r4
 80084d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084d8:	3302      	adds	r3, #2
 80084da:	e7c7      	b.n	800846c <_printf_common+0x58>
 80084dc:	2301      	movs	r3, #1
 80084de:	4622      	mov	r2, r4
 80084e0:	4649      	mov	r1, r9
 80084e2:	4638      	mov	r0, r7
 80084e4:	47c0      	blx	r8
 80084e6:	3001      	adds	r0, #1
 80084e8:	d0e6      	beq.n	80084b8 <_printf_common+0xa4>
 80084ea:	3601      	adds	r6, #1
 80084ec:	e7d9      	b.n	80084a2 <_printf_common+0x8e>
	...

080084f0 <_printf_i>:
 80084f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084f4:	7e0f      	ldrb	r7, [r1, #24]
 80084f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084f8:	2f78      	cmp	r7, #120	; 0x78
 80084fa:	4691      	mov	r9, r2
 80084fc:	4680      	mov	r8, r0
 80084fe:	460c      	mov	r4, r1
 8008500:	469a      	mov	sl, r3
 8008502:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008506:	d807      	bhi.n	8008518 <_printf_i+0x28>
 8008508:	2f62      	cmp	r7, #98	; 0x62
 800850a:	d80a      	bhi.n	8008522 <_printf_i+0x32>
 800850c:	2f00      	cmp	r7, #0
 800850e:	f000 80d8 	beq.w	80086c2 <_printf_i+0x1d2>
 8008512:	2f58      	cmp	r7, #88	; 0x58
 8008514:	f000 80a3 	beq.w	800865e <_printf_i+0x16e>
 8008518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800851c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008520:	e03a      	b.n	8008598 <_printf_i+0xa8>
 8008522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008526:	2b15      	cmp	r3, #21
 8008528:	d8f6      	bhi.n	8008518 <_printf_i+0x28>
 800852a:	a101      	add	r1, pc, #4	; (adr r1, 8008530 <_printf_i+0x40>)
 800852c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008530:	08008589 	.word	0x08008589
 8008534:	0800859d 	.word	0x0800859d
 8008538:	08008519 	.word	0x08008519
 800853c:	08008519 	.word	0x08008519
 8008540:	08008519 	.word	0x08008519
 8008544:	08008519 	.word	0x08008519
 8008548:	0800859d 	.word	0x0800859d
 800854c:	08008519 	.word	0x08008519
 8008550:	08008519 	.word	0x08008519
 8008554:	08008519 	.word	0x08008519
 8008558:	08008519 	.word	0x08008519
 800855c:	080086a9 	.word	0x080086a9
 8008560:	080085cd 	.word	0x080085cd
 8008564:	0800868b 	.word	0x0800868b
 8008568:	08008519 	.word	0x08008519
 800856c:	08008519 	.word	0x08008519
 8008570:	080086cb 	.word	0x080086cb
 8008574:	08008519 	.word	0x08008519
 8008578:	080085cd 	.word	0x080085cd
 800857c:	08008519 	.word	0x08008519
 8008580:	08008519 	.word	0x08008519
 8008584:	08008693 	.word	0x08008693
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	1d1a      	adds	r2, r3, #4
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	602a      	str	r2, [r5, #0]
 8008590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008598:	2301      	movs	r3, #1
 800859a:	e0a3      	b.n	80086e4 <_printf_i+0x1f4>
 800859c:	6820      	ldr	r0, [r4, #0]
 800859e:	6829      	ldr	r1, [r5, #0]
 80085a0:	0606      	lsls	r6, r0, #24
 80085a2:	f101 0304 	add.w	r3, r1, #4
 80085a6:	d50a      	bpl.n	80085be <_printf_i+0xce>
 80085a8:	680e      	ldr	r6, [r1, #0]
 80085aa:	602b      	str	r3, [r5, #0]
 80085ac:	2e00      	cmp	r6, #0
 80085ae:	da03      	bge.n	80085b8 <_printf_i+0xc8>
 80085b0:	232d      	movs	r3, #45	; 0x2d
 80085b2:	4276      	negs	r6, r6
 80085b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085b8:	485e      	ldr	r0, [pc, #376]	; (8008734 <_printf_i+0x244>)
 80085ba:	230a      	movs	r3, #10
 80085bc:	e019      	b.n	80085f2 <_printf_i+0x102>
 80085be:	680e      	ldr	r6, [r1, #0]
 80085c0:	602b      	str	r3, [r5, #0]
 80085c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80085c6:	bf18      	it	ne
 80085c8:	b236      	sxthne	r6, r6
 80085ca:	e7ef      	b.n	80085ac <_printf_i+0xbc>
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	6820      	ldr	r0, [r4, #0]
 80085d0:	1d19      	adds	r1, r3, #4
 80085d2:	6029      	str	r1, [r5, #0]
 80085d4:	0601      	lsls	r1, r0, #24
 80085d6:	d501      	bpl.n	80085dc <_printf_i+0xec>
 80085d8:	681e      	ldr	r6, [r3, #0]
 80085da:	e002      	b.n	80085e2 <_printf_i+0xf2>
 80085dc:	0646      	lsls	r6, r0, #25
 80085de:	d5fb      	bpl.n	80085d8 <_printf_i+0xe8>
 80085e0:	881e      	ldrh	r6, [r3, #0]
 80085e2:	4854      	ldr	r0, [pc, #336]	; (8008734 <_printf_i+0x244>)
 80085e4:	2f6f      	cmp	r7, #111	; 0x6f
 80085e6:	bf0c      	ite	eq
 80085e8:	2308      	moveq	r3, #8
 80085ea:	230a      	movne	r3, #10
 80085ec:	2100      	movs	r1, #0
 80085ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085f2:	6865      	ldr	r5, [r4, #4]
 80085f4:	60a5      	str	r5, [r4, #8]
 80085f6:	2d00      	cmp	r5, #0
 80085f8:	bfa2      	ittt	ge
 80085fa:	6821      	ldrge	r1, [r4, #0]
 80085fc:	f021 0104 	bicge.w	r1, r1, #4
 8008600:	6021      	strge	r1, [r4, #0]
 8008602:	b90e      	cbnz	r6, 8008608 <_printf_i+0x118>
 8008604:	2d00      	cmp	r5, #0
 8008606:	d04d      	beq.n	80086a4 <_printf_i+0x1b4>
 8008608:	4615      	mov	r5, r2
 800860a:	fbb6 f1f3 	udiv	r1, r6, r3
 800860e:	fb03 6711 	mls	r7, r3, r1, r6
 8008612:	5dc7      	ldrb	r7, [r0, r7]
 8008614:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008618:	4637      	mov	r7, r6
 800861a:	42bb      	cmp	r3, r7
 800861c:	460e      	mov	r6, r1
 800861e:	d9f4      	bls.n	800860a <_printf_i+0x11a>
 8008620:	2b08      	cmp	r3, #8
 8008622:	d10b      	bne.n	800863c <_printf_i+0x14c>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	07de      	lsls	r6, r3, #31
 8008628:	d508      	bpl.n	800863c <_printf_i+0x14c>
 800862a:	6923      	ldr	r3, [r4, #16]
 800862c:	6861      	ldr	r1, [r4, #4]
 800862e:	4299      	cmp	r1, r3
 8008630:	bfde      	ittt	le
 8008632:	2330      	movle	r3, #48	; 0x30
 8008634:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008638:	f105 35ff 	addle.w	r5, r5, #4294967295
 800863c:	1b52      	subs	r2, r2, r5
 800863e:	6122      	str	r2, [r4, #16]
 8008640:	f8cd a000 	str.w	sl, [sp]
 8008644:	464b      	mov	r3, r9
 8008646:	aa03      	add	r2, sp, #12
 8008648:	4621      	mov	r1, r4
 800864a:	4640      	mov	r0, r8
 800864c:	f7ff fee2 	bl	8008414 <_printf_common>
 8008650:	3001      	adds	r0, #1
 8008652:	d14c      	bne.n	80086ee <_printf_i+0x1fe>
 8008654:	f04f 30ff 	mov.w	r0, #4294967295
 8008658:	b004      	add	sp, #16
 800865a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800865e:	4835      	ldr	r0, [pc, #212]	; (8008734 <_printf_i+0x244>)
 8008660:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008664:	6829      	ldr	r1, [r5, #0]
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	f851 6b04 	ldr.w	r6, [r1], #4
 800866c:	6029      	str	r1, [r5, #0]
 800866e:	061d      	lsls	r5, r3, #24
 8008670:	d514      	bpl.n	800869c <_printf_i+0x1ac>
 8008672:	07df      	lsls	r7, r3, #31
 8008674:	bf44      	itt	mi
 8008676:	f043 0320 	orrmi.w	r3, r3, #32
 800867a:	6023      	strmi	r3, [r4, #0]
 800867c:	b91e      	cbnz	r6, 8008686 <_printf_i+0x196>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	f023 0320 	bic.w	r3, r3, #32
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	2310      	movs	r3, #16
 8008688:	e7b0      	b.n	80085ec <_printf_i+0xfc>
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	f043 0320 	orr.w	r3, r3, #32
 8008690:	6023      	str	r3, [r4, #0]
 8008692:	2378      	movs	r3, #120	; 0x78
 8008694:	4828      	ldr	r0, [pc, #160]	; (8008738 <_printf_i+0x248>)
 8008696:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800869a:	e7e3      	b.n	8008664 <_printf_i+0x174>
 800869c:	0659      	lsls	r1, r3, #25
 800869e:	bf48      	it	mi
 80086a0:	b2b6      	uxthmi	r6, r6
 80086a2:	e7e6      	b.n	8008672 <_printf_i+0x182>
 80086a4:	4615      	mov	r5, r2
 80086a6:	e7bb      	b.n	8008620 <_printf_i+0x130>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	6826      	ldr	r6, [r4, #0]
 80086ac:	6961      	ldr	r1, [r4, #20]
 80086ae:	1d18      	adds	r0, r3, #4
 80086b0:	6028      	str	r0, [r5, #0]
 80086b2:	0635      	lsls	r5, r6, #24
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	d501      	bpl.n	80086bc <_printf_i+0x1cc>
 80086b8:	6019      	str	r1, [r3, #0]
 80086ba:	e002      	b.n	80086c2 <_printf_i+0x1d2>
 80086bc:	0670      	lsls	r0, r6, #25
 80086be:	d5fb      	bpl.n	80086b8 <_printf_i+0x1c8>
 80086c0:	8019      	strh	r1, [r3, #0]
 80086c2:	2300      	movs	r3, #0
 80086c4:	6123      	str	r3, [r4, #16]
 80086c6:	4615      	mov	r5, r2
 80086c8:	e7ba      	b.n	8008640 <_printf_i+0x150>
 80086ca:	682b      	ldr	r3, [r5, #0]
 80086cc:	1d1a      	adds	r2, r3, #4
 80086ce:	602a      	str	r2, [r5, #0]
 80086d0:	681d      	ldr	r5, [r3, #0]
 80086d2:	6862      	ldr	r2, [r4, #4]
 80086d4:	2100      	movs	r1, #0
 80086d6:	4628      	mov	r0, r5
 80086d8:	f7f7 fd8a 	bl	80001f0 <memchr>
 80086dc:	b108      	cbz	r0, 80086e2 <_printf_i+0x1f2>
 80086de:	1b40      	subs	r0, r0, r5
 80086e0:	6060      	str	r0, [r4, #4]
 80086e2:	6863      	ldr	r3, [r4, #4]
 80086e4:	6123      	str	r3, [r4, #16]
 80086e6:	2300      	movs	r3, #0
 80086e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ec:	e7a8      	b.n	8008640 <_printf_i+0x150>
 80086ee:	6923      	ldr	r3, [r4, #16]
 80086f0:	462a      	mov	r2, r5
 80086f2:	4649      	mov	r1, r9
 80086f4:	4640      	mov	r0, r8
 80086f6:	47d0      	blx	sl
 80086f8:	3001      	adds	r0, #1
 80086fa:	d0ab      	beq.n	8008654 <_printf_i+0x164>
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	079b      	lsls	r3, r3, #30
 8008700:	d413      	bmi.n	800872a <_printf_i+0x23a>
 8008702:	68e0      	ldr	r0, [r4, #12]
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	4298      	cmp	r0, r3
 8008708:	bfb8      	it	lt
 800870a:	4618      	movlt	r0, r3
 800870c:	e7a4      	b.n	8008658 <_printf_i+0x168>
 800870e:	2301      	movs	r3, #1
 8008710:	4632      	mov	r2, r6
 8008712:	4649      	mov	r1, r9
 8008714:	4640      	mov	r0, r8
 8008716:	47d0      	blx	sl
 8008718:	3001      	adds	r0, #1
 800871a:	d09b      	beq.n	8008654 <_printf_i+0x164>
 800871c:	3501      	adds	r5, #1
 800871e:	68e3      	ldr	r3, [r4, #12]
 8008720:	9903      	ldr	r1, [sp, #12]
 8008722:	1a5b      	subs	r3, r3, r1
 8008724:	42ab      	cmp	r3, r5
 8008726:	dcf2      	bgt.n	800870e <_printf_i+0x21e>
 8008728:	e7eb      	b.n	8008702 <_printf_i+0x212>
 800872a:	2500      	movs	r5, #0
 800872c:	f104 0619 	add.w	r6, r4, #25
 8008730:	e7f5      	b.n	800871e <_printf_i+0x22e>
 8008732:	bf00      	nop
 8008734:	08008b49 	.word	0x08008b49
 8008738:	08008b5a 	.word	0x08008b5a

0800873c <memmove>:
 800873c:	4288      	cmp	r0, r1
 800873e:	b510      	push	{r4, lr}
 8008740:	eb01 0402 	add.w	r4, r1, r2
 8008744:	d902      	bls.n	800874c <memmove+0x10>
 8008746:	4284      	cmp	r4, r0
 8008748:	4623      	mov	r3, r4
 800874a:	d807      	bhi.n	800875c <memmove+0x20>
 800874c:	1e43      	subs	r3, r0, #1
 800874e:	42a1      	cmp	r1, r4
 8008750:	d008      	beq.n	8008764 <memmove+0x28>
 8008752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800875a:	e7f8      	b.n	800874e <memmove+0x12>
 800875c:	4402      	add	r2, r0
 800875e:	4601      	mov	r1, r0
 8008760:	428a      	cmp	r2, r1
 8008762:	d100      	bne.n	8008766 <memmove+0x2a>
 8008764:	bd10      	pop	{r4, pc}
 8008766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800876a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800876e:	e7f7      	b.n	8008760 <memmove+0x24>

08008770 <_free_r>:
 8008770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008772:	2900      	cmp	r1, #0
 8008774:	d044      	beq.n	8008800 <_free_r+0x90>
 8008776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800877a:	9001      	str	r0, [sp, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	f1a1 0404 	sub.w	r4, r1, #4
 8008782:	bfb8      	it	lt
 8008784:	18e4      	addlt	r4, r4, r3
 8008786:	f000 f913 	bl	80089b0 <__malloc_lock>
 800878a:	4a1e      	ldr	r2, [pc, #120]	; (8008804 <_free_r+0x94>)
 800878c:	9801      	ldr	r0, [sp, #4]
 800878e:	6813      	ldr	r3, [r2, #0]
 8008790:	b933      	cbnz	r3, 80087a0 <_free_r+0x30>
 8008792:	6063      	str	r3, [r4, #4]
 8008794:	6014      	str	r4, [r2, #0]
 8008796:	b003      	add	sp, #12
 8008798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800879c:	f000 b90e 	b.w	80089bc <__malloc_unlock>
 80087a0:	42a3      	cmp	r3, r4
 80087a2:	d908      	bls.n	80087b6 <_free_r+0x46>
 80087a4:	6825      	ldr	r5, [r4, #0]
 80087a6:	1961      	adds	r1, r4, r5
 80087a8:	428b      	cmp	r3, r1
 80087aa:	bf01      	itttt	eq
 80087ac:	6819      	ldreq	r1, [r3, #0]
 80087ae:	685b      	ldreq	r3, [r3, #4]
 80087b0:	1949      	addeq	r1, r1, r5
 80087b2:	6021      	streq	r1, [r4, #0]
 80087b4:	e7ed      	b.n	8008792 <_free_r+0x22>
 80087b6:	461a      	mov	r2, r3
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	b10b      	cbz	r3, 80087c0 <_free_r+0x50>
 80087bc:	42a3      	cmp	r3, r4
 80087be:	d9fa      	bls.n	80087b6 <_free_r+0x46>
 80087c0:	6811      	ldr	r1, [r2, #0]
 80087c2:	1855      	adds	r5, r2, r1
 80087c4:	42a5      	cmp	r5, r4
 80087c6:	d10b      	bne.n	80087e0 <_free_r+0x70>
 80087c8:	6824      	ldr	r4, [r4, #0]
 80087ca:	4421      	add	r1, r4
 80087cc:	1854      	adds	r4, r2, r1
 80087ce:	42a3      	cmp	r3, r4
 80087d0:	6011      	str	r1, [r2, #0]
 80087d2:	d1e0      	bne.n	8008796 <_free_r+0x26>
 80087d4:	681c      	ldr	r4, [r3, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	6053      	str	r3, [r2, #4]
 80087da:	4421      	add	r1, r4
 80087dc:	6011      	str	r1, [r2, #0]
 80087de:	e7da      	b.n	8008796 <_free_r+0x26>
 80087e0:	d902      	bls.n	80087e8 <_free_r+0x78>
 80087e2:	230c      	movs	r3, #12
 80087e4:	6003      	str	r3, [r0, #0]
 80087e6:	e7d6      	b.n	8008796 <_free_r+0x26>
 80087e8:	6825      	ldr	r5, [r4, #0]
 80087ea:	1961      	adds	r1, r4, r5
 80087ec:	428b      	cmp	r3, r1
 80087ee:	bf04      	itt	eq
 80087f0:	6819      	ldreq	r1, [r3, #0]
 80087f2:	685b      	ldreq	r3, [r3, #4]
 80087f4:	6063      	str	r3, [r4, #4]
 80087f6:	bf04      	itt	eq
 80087f8:	1949      	addeq	r1, r1, r5
 80087fa:	6021      	streq	r1, [r4, #0]
 80087fc:	6054      	str	r4, [r2, #4]
 80087fe:	e7ca      	b.n	8008796 <_free_r+0x26>
 8008800:	b003      	add	sp, #12
 8008802:	bd30      	pop	{r4, r5, pc}
 8008804:	20004428 	.word	0x20004428

08008808 <sbrk_aligned>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	4e0e      	ldr	r6, [pc, #56]	; (8008844 <sbrk_aligned+0x3c>)
 800880c:	460c      	mov	r4, r1
 800880e:	6831      	ldr	r1, [r6, #0]
 8008810:	4605      	mov	r5, r0
 8008812:	b911      	cbnz	r1, 800881a <sbrk_aligned+0x12>
 8008814:	f000 f8bc 	bl	8008990 <_sbrk_r>
 8008818:	6030      	str	r0, [r6, #0]
 800881a:	4621      	mov	r1, r4
 800881c:	4628      	mov	r0, r5
 800881e:	f000 f8b7 	bl	8008990 <_sbrk_r>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d00a      	beq.n	800883c <sbrk_aligned+0x34>
 8008826:	1cc4      	adds	r4, r0, #3
 8008828:	f024 0403 	bic.w	r4, r4, #3
 800882c:	42a0      	cmp	r0, r4
 800882e:	d007      	beq.n	8008840 <sbrk_aligned+0x38>
 8008830:	1a21      	subs	r1, r4, r0
 8008832:	4628      	mov	r0, r5
 8008834:	f000 f8ac 	bl	8008990 <_sbrk_r>
 8008838:	3001      	adds	r0, #1
 800883a:	d101      	bne.n	8008840 <sbrk_aligned+0x38>
 800883c:	f04f 34ff 	mov.w	r4, #4294967295
 8008840:	4620      	mov	r0, r4
 8008842:	bd70      	pop	{r4, r5, r6, pc}
 8008844:	2000442c 	.word	0x2000442c

08008848 <_malloc_r>:
 8008848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800884c:	1ccd      	adds	r5, r1, #3
 800884e:	f025 0503 	bic.w	r5, r5, #3
 8008852:	3508      	adds	r5, #8
 8008854:	2d0c      	cmp	r5, #12
 8008856:	bf38      	it	cc
 8008858:	250c      	movcc	r5, #12
 800885a:	2d00      	cmp	r5, #0
 800885c:	4607      	mov	r7, r0
 800885e:	db01      	blt.n	8008864 <_malloc_r+0x1c>
 8008860:	42a9      	cmp	r1, r5
 8008862:	d905      	bls.n	8008870 <_malloc_r+0x28>
 8008864:	230c      	movs	r3, #12
 8008866:	603b      	str	r3, [r7, #0]
 8008868:	2600      	movs	r6, #0
 800886a:	4630      	mov	r0, r6
 800886c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008870:	4e2e      	ldr	r6, [pc, #184]	; (800892c <_malloc_r+0xe4>)
 8008872:	f000 f89d 	bl	80089b0 <__malloc_lock>
 8008876:	6833      	ldr	r3, [r6, #0]
 8008878:	461c      	mov	r4, r3
 800887a:	bb34      	cbnz	r4, 80088ca <_malloc_r+0x82>
 800887c:	4629      	mov	r1, r5
 800887e:	4638      	mov	r0, r7
 8008880:	f7ff ffc2 	bl	8008808 <sbrk_aligned>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	4604      	mov	r4, r0
 8008888:	d14d      	bne.n	8008926 <_malloc_r+0xde>
 800888a:	6834      	ldr	r4, [r6, #0]
 800888c:	4626      	mov	r6, r4
 800888e:	2e00      	cmp	r6, #0
 8008890:	d140      	bne.n	8008914 <_malloc_r+0xcc>
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	4631      	mov	r1, r6
 8008896:	4638      	mov	r0, r7
 8008898:	eb04 0803 	add.w	r8, r4, r3
 800889c:	f000 f878 	bl	8008990 <_sbrk_r>
 80088a0:	4580      	cmp	r8, r0
 80088a2:	d13a      	bne.n	800891a <_malloc_r+0xd2>
 80088a4:	6821      	ldr	r1, [r4, #0]
 80088a6:	3503      	adds	r5, #3
 80088a8:	1a6d      	subs	r5, r5, r1
 80088aa:	f025 0503 	bic.w	r5, r5, #3
 80088ae:	3508      	adds	r5, #8
 80088b0:	2d0c      	cmp	r5, #12
 80088b2:	bf38      	it	cc
 80088b4:	250c      	movcc	r5, #12
 80088b6:	4629      	mov	r1, r5
 80088b8:	4638      	mov	r0, r7
 80088ba:	f7ff ffa5 	bl	8008808 <sbrk_aligned>
 80088be:	3001      	adds	r0, #1
 80088c0:	d02b      	beq.n	800891a <_malloc_r+0xd2>
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	442b      	add	r3, r5
 80088c6:	6023      	str	r3, [r4, #0]
 80088c8:	e00e      	b.n	80088e8 <_malloc_r+0xa0>
 80088ca:	6822      	ldr	r2, [r4, #0]
 80088cc:	1b52      	subs	r2, r2, r5
 80088ce:	d41e      	bmi.n	800890e <_malloc_r+0xc6>
 80088d0:	2a0b      	cmp	r2, #11
 80088d2:	d916      	bls.n	8008902 <_malloc_r+0xba>
 80088d4:	1961      	adds	r1, r4, r5
 80088d6:	42a3      	cmp	r3, r4
 80088d8:	6025      	str	r5, [r4, #0]
 80088da:	bf18      	it	ne
 80088dc:	6059      	strne	r1, [r3, #4]
 80088de:	6863      	ldr	r3, [r4, #4]
 80088e0:	bf08      	it	eq
 80088e2:	6031      	streq	r1, [r6, #0]
 80088e4:	5162      	str	r2, [r4, r5]
 80088e6:	604b      	str	r3, [r1, #4]
 80088e8:	4638      	mov	r0, r7
 80088ea:	f104 060b 	add.w	r6, r4, #11
 80088ee:	f000 f865 	bl	80089bc <__malloc_unlock>
 80088f2:	f026 0607 	bic.w	r6, r6, #7
 80088f6:	1d23      	adds	r3, r4, #4
 80088f8:	1af2      	subs	r2, r6, r3
 80088fa:	d0b6      	beq.n	800886a <_malloc_r+0x22>
 80088fc:	1b9b      	subs	r3, r3, r6
 80088fe:	50a3      	str	r3, [r4, r2]
 8008900:	e7b3      	b.n	800886a <_malloc_r+0x22>
 8008902:	6862      	ldr	r2, [r4, #4]
 8008904:	42a3      	cmp	r3, r4
 8008906:	bf0c      	ite	eq
 8008908:	6032      	streq	r2, [r6, #0]
 800890a:	605a      	strne	r2, [r3, #4]
 800890c:	e7ec      	b.n	80088e8 <_malloc_r+0xa0>
 800890e:	4623      	mov	r3, r4
 8008910:	6864      	ldr	r4, [r4, #4]
 8008912:	e7b2      	b.n	800887a <_malloc_r+0x32>
 8008914:	4634      	mov	r4, r6
 8008916:	6876      	ldr	r6, [r6, #4]
 8008918:	e7b9      	b.n	800888e <_malloc_r+0x46>
 800891a:	230c      	movs	r3, #12
 800891c:	603b      	str	r3, [r7, #0]
 800891e:	4638      	mov	r0, r7
 8008920:	f000 f84c 	bl	80089bc <__malloc_unlock>
 8008924:	e7a1      	b.n	800886a <_malloc_r+0x22>
 8008926:	6025      	str	r5, [r4, #0]
 8008928:	e7de      	b.n	80088e8 <_malloc_r+0xa0>
 800892a:	bf00      	nop
 800892c:	20004428 	.word	0x20004428

08008930 <_realloc_r>:
 8008930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008934:	4680      	mov	r8, r0
 8008936:	4614      	mov	r4, r2
 8008938:	460e      	mov	r6, r1
 800893a:	b921      	cbnz	r1, 8008946 <_realloc_r+0x16>
 800893c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008940:	4611      	mov	r1, r2
 8008942:	f7ff bf81 	b.w	8008848 <_malloc_r>
 8008946:	b92a      	cbnz	r2, 8008954 <_realloc_r+0x24>
 8008948:	f7ff ff12 	bl	8008770 <_free_r>
 800894c:	4625      	mov	r5, r4
 800894e:	4628      	mov	r0, r5
 8008950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008954:	f000 f838 	bl	80089c8 <_malloc_usable_size_r>
 8008958:	4284      	cmp	r4, r0
 800895a:	4607      	mov	r7, r0
 800895c:	d802      	bhi.n	8008964 <_realloc_r+0x34>
 800895e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008962:	d812      	bhi.n	800898a <_realloc_r+0x5a>
 8008964:	4621      	mov	r1, r4
 8008966:	4640      	mov	r0, r8
 8008968:	f7ff ff6e 	bl	8008848 <_malloc_r>
 800896c:	4605      	mov	r5, r0
 800896e:	2800      	cmp	r0, #0
 8008970:	d0ed      	beq.n	800894e <_realloc_r+0x1e>
 8008972:	42bc      	cmp	r4, r7
 8008974:	4622      	mov	r2, r4
 8008976:	4631      	mov	r1, r6
 8008978:	bf28      	it	cs
 800897a:	463a      	movcs	r2, r7
 800897c:	f7ff fbb8 	bl	80080f0 <memcpy>
 8008980:	4631      	mov	r1, r6
 8008982:	4640      	mov	r0, r8
 8008984:	f7ff fef4 	bl	8008770 <_free_r>
 8008988:	e7e1      	b.n	800894e <_realloc_r+0x1e>
 800898a:	4635      	mov	r5, r6
 800898c:	e7df      	b.n	800894e <_realloc_r+0x1e>
	...

08008990 <_sbrk_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d06      	ldr	r5, [pc, #24]	; (80089ac <_sbrk_r+0x1c>)
 8008994:	2300      	movs	r3, #0
 8008996:	4604      	mov	r4, r0
 8008998:	4608      	mov	r0, r1
 800899a:	602b      	str	r3, [r5, #0]
 800899c:	f7fa f9ce 	bl	8002d3c <_sbrk>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_sbrk_r+0x1a>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_sbrk_r+0x1a>
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	20004430 	.word	0x20004430

080089b0 <__malloc_lock>:
 80089b0:	4801      	ldr	r0, [pc, #4]	; (80089b8 <__malloc_lock+0x8>)
 80089b2:	f000 b811 	b.w	80089d8 <__retarget_lock_acquire_recursive>
 80089b6:	bf00      	nop
 80089b8:	20004434 	.word	0x20004434

080089bc <__malloc_unlock>:
 80089bc:	4801      	ldr	r0, [pc, #4]	; (80089c4 <__malloc_unlock+0x8>)
 80089be:	f000 b80c 	b.w	80089da <__retarget_lock_release_recursive>
 80089c2:	bf00      	nop
 80089c4:	20004434 	.word	0x20004434

080089c8 <_malloc_usable_size_r>:
 80089c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089cc:	1f18      	subs	r0, r3, #4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bfbc      	itt	lt
 80089d2:	580b      	ldrlt	r3, [r1, r0]
 80089d4:	18c0      	addlt	r0, r0, r3
 80089d6:	4770      	bx	lr

080089d8 <__retarget_lock_acquire_recursive>:
 80089d8:	4770      	bx	lr

080089da <__retarget_lock_release_recursive>:
 80089da:	4770      	bx	lr

080089dc <_init>:
 80089dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089de:	bf00      	nop
 80089e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e2:	bc08      	pop	{r3}
 80089e4:	469e      	mov	lr, r3
 80089e6:	4770      	bx	lr

080089e8 <_fini>:
 80089e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ea:	bf00      	nop
 80089ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ee:	bc08      	pop	{r3}
 80089f0:	469e      	mov	lr, r3
 80089f2:	4770      	bx	lr

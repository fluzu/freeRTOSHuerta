
freeRTOSHuerta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08008df4  08008df4  00018df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd0  08008fd0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd0  08008fd0  00018fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fd8  08008fd8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fd8  08008fd8  00018fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fdc  08008fdc  00018fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004408  2000008c  0800906c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004494  0800906c  00024494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e28  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c99  00000000  00000000  00037ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  0003bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001500  00000000  00000000  0003d230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a512  00000000  00000000  0003e730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a14a  00000000  00000000  00058c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ff9d  00000000  00000000  00072d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112d29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b4  00000000  00000000  00112d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ddc 	.word	0x08008ddc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08008ddc 	.word	0x08008ddc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b974 	b.w	8000dcc <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <delay>:
uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

__STATIC_INLINE void delay(volatile uint16_t microseconds) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
    delay_us(microseconds);
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f9aa 	bl	8001138 <delay_us>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f003 f95a 	bl	80040d4 <HAL_GPIO_Init>
}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f003 f93c 	bl	80040d4 <HAL_GPIO_Init>
}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <DHT_Start>:

/**
 * Iniciamos el proceso de lectura del sensor DHT22
 **/
void DHT_Start (void) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
    /********  Tbe  ********/
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000e68:	2101      	movs	r1, #1
 8000e6a:	480a      	ldr	r0, [pc, #40]	; (8000e94 <DHT_Start+0x30>)
 8000e6c:	f7ff ffbe 	bl	8000dec <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000e70:	2200      	movs	r2, #0
 8000e72:	2101      	movs	r1, #1
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <DHT_Start+0x30>)
 8000e76:	f003 fac9 	bl	800440c <HAL_GPIO_WritePin>
	delay (1200);  // >1ms delay
 8000e7a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000e7e:	f7ff ffa7 	bl	8000dd0 <delay>

    /********  Tgo  ********/
    Set_Pin_Input(DHT_PORT, DHT_PIN);
 8000e82:	2101      	movs	r1, #1
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <DHT_Start+0x30>)
 8000e86:	f7ff ffcf 	bl	8000e28 <Set_Pin_Input>
    delay (30);   // wait for 30us
 8000e8a:	201e      	movs	r0, #30
 8000e8c:	f7ff ffa0 	bl	8000dd0 <delay>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40020000 	.word	0x40020000

08000e98 <DHT_Check_Response>:


/**
 * Esperamos la respuesta inicial del sensor DHT22
 **/
uint8_t DHT_Check_Response (void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <DHT_Check_Response+0x50>)
 8000ea6:	f003 fa99 	bl	80043dc <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10e      	bne.n	8000ece <DHT_Check_Response+0x36>
	{
		delay (80);
 8000eb0:	2050      	movs	r0, #80	; 0x50
 8000eb2:	f7ff ff8d 	bl	8000dd0 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <DHT_Check_Response+0x50>)
 8000eba:	f003 fa8f 	bl	80043dc <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <DHT_Check_Response+0x32>
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	e001      	b.n	8000ece <DHT_Check_Response+0x36>
		else Response = -1;
 8000eca:	23ff      	movs	r3, #255	; 0xff
 8000ecc:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000ece:	bf00      	nop
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <DHT_Check_Response+0x50>)
 8000ed4:	f003 fa82 	bl	80043dc <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f8      	bne.n	8000ed0 <DHT_Check_Response+0x38>

	return Response;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40020000 	.word	0x40020000

08000eec <DHT_Read>:


/**
 * Leemos la respuesta del sensor DHT22
 **/
uint8_t DHT_Read (void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	71bb      	strb	r3, [r7, #6]
 8000ef6:	e037      	b.n	8000f68 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000ef8:	bf00      	nop
 8000efa:	2101      	movs	r1, #1
 8000efc:	481e      	ldr	r0, [pc, #120]	; (8000f78 <DHT_Read+0x8c>)
 8000efe:	f003 fa6d 	bl	80043dc <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f8      	beq.n	8000efa <DHT_Read+0xe>
		delay (35);   // wait for 40 us
 8000f08:	2023      	movs	r0, #35	; 0x23
 8000f0a:	f7ff ff61 	bl	8000dd0 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4819      	ldr	r0, [pc, #100]	; (8000f78 <DHT_Read+0x8c>)
 8000f12:	f003 fa63 	bl	80043dc <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10e      	bne.n	8000f3a <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2201      	movs	r2, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	b25a      	sxtb	r2, r3
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	4013      	ands	r3, r2
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	e00b      	b.n	8000f52 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	f1c3 0307 	rsb	r3, r3, #7
 8000f40:	2201      	movs	r2, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	b25a      	sxtb	r2, r3
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000f52:	bf00      	nop
 8000f54:	2101      	movs	r1, #1
 8000f56:	4808      	ldr	r0, [pc, #32]	; (8000f78 <DHT_Read+0x8c>)
 8000f58:	f003 fa40 	bl	80043dc <HAL_GPIO_ReadPin>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f8      	bne.n	8000f54 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	3301      	adds	r3, #1
 8000f66:	71bb      	strb	r3, [r7, #6]
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	d9c4      	bls.n	8000ef8 <DHT_Read+0xc>
	}
	return i;
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40020000 	.word	0x40020000

08000f7c <DHT_GetData>:

/**
 * Iniciamos la toma de datos y la almacenamos en nuestra estructura basica
 **/
void
DHT_GetData (DHT_DataTypeDef *DHT_Data) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000f84:	f7ff ff6e 	bl	8000e64 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000f88:	f7ff ff86 	bl	8000e98 <DHT_Check_Response>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b32      	ldr	r3, [pc, #200]	; (800105c <DHT_GetData+0xe0>)
 8000f92:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000f94:	f7ff ffaa 	bl	8000eec <DHT_Read>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <DHT_GetData+0xe4>)
 8000f9e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000fa0:	f7ff ffa4 	bl	8000eec <DHT_Read>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <DHT_GetData+0xe8>)
 8000faa:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000fac:	f7ff ff9e 	bl	8000eec <DHT_Read>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <DHT_GetData+0xec>)
 8000fb6:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000fb8:	f7ff ff98 	bl	8000eec <DHT_Read>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <DHT_GetData+0xf0>)
 8000fc2:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000fc4:	f7ff ff92 	bl	8000eec <DHT_Read>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <DHT_GetData+0xf4>)
 8000fce:	801a      	strh	r2, [r3, #0]

	if (SUM == (uint8_t)(Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2)){
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <DHT_GetData+0xe4>)
 8000fd2:	781a      	ldrb	r2, [r3, #0]
 8000fd4:	4b23      	ldr	r3, [pc, #140]	; (8001064 <DHT_GetData+0xe8>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4413      	add	r3, r2
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <DHT_GetData+0xec>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <DHT_GetData+0xf0>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	4b20      	ldr	r3, [pc, #128]	; (8001070 <DHT_GetData+0xf4>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d12d      	bne.n	8001052 <DHT_GetData+0xd6>
        DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2) / 10.0;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <DHT_GetData+0xec>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <DHT_GetData+0xf0>)
 8000ffe:	7812      	ldrb	r2, [r2, #0]
 8001000:	4313      	orrs	r3, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fa96 	bl	8000534 <__aeabi_i2d>
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <DHT_GetData+0xf8>)
 800100e:	f7ff fc25 	bl	800085c <__aeabi_ddiv>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f7ff fd07 	bl	8000a2c <__aeabi_d2f>
 800101e:	4602      	mov	r2, r0
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	601a      	str	r2, [r3, #0]
        DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2) / 10.0;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <DHT_GetData+0xe4>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <DHT_GetData+0xe8>)
 800102c:	7812      	ldrb	r2, [r2, #0]
 800102e:	4313      	orrs	r3, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa7f 	bl	8000534 <__aeabi_i2d>
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <DHT_GetData+0xf8>)
 800103c:	f7ff fc0e 	bl	800085c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fcf0 	bl	8000a2c <__aeabi_d2f>
 800104c:	4602      	mov	r2, r0
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	605a      	str	r2, [r3, #4]
	}
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200000ae 	.word	0x200000ae
 8001060:	200000a8 	.word	0x200000a8
 8001064:	200000a9 	.word	0x200000a9
 8001068:	200000aa 	.word	0x200000aa
 800106c:	200000ab 	.word	0x200000ab
 8001070:	200000ac 	.word	0x200000ac
 8001074:	40240000 	.word	0x40240000

08001078 <TimerDelay_Init>:
volatile static uint32_t gu32_ticks = 0;

void Error_Handler();

void TimerDelay_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
	gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 800107e:	f004 fbb3 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8001082:	4603      	mov	r3, r0
 8001084:	4a28      	ldr	r2, [pc, #160]	; (8001128 <TimerDelay_Init+0xb0>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	0c9b      	lsrs	r3, r3, #18
 800108c:	4a27      	ldr	r2, [pc, #156]	; (800112c <TimerDelay_Init+0xb4>)
 800108e:	6013      	str	r3, [r2, #0]
	HTIMx.Instance = TIMER;
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <TimerDelay_Init+0xb8>)
 8001092:	4a28      	ldr	r2, [pc, #160]	; (8001134 <TimerDelay_Init+0xbc>)
 8001094:	601a      	str	r2, [r3, #0]

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]


    HTIMx.Init.Prescaler = gu32_ticks-1;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <TimerDelay_Init+0xb4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <TimerDelay_Init+0xb8>)
 80010b4:	6053      	str	r3, [r2, #4]
    HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <TimerDelay_Init+0xb8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
    HTIMx.Init.Period = 65535;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <TimerDelay_Init+0xb8>)
 80010be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c2:	60da      	str	r2, [r3, #12]
    HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <TimerDelay_Init+0xb8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
    HTIMx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <TimerDelay_Init+0xb8>)
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&HTIMx) != HAL_OK)
 80010d0:	4817      	ldr	r0, [pc, #92]	; (8001130 <TimerDelay_Init+0xb8>)
 80010d2:	f005 f8c5 	bl	8006260 <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <TimerDelay_Init+0x68>
    {
      Error_Handler();
 80010dc:	f001 f854 	bl	8002188 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&HTIMx, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4619      	mov	r1, r3
 80010ec:	4810      	ldr	r0, [pc, #64]	; (8001130 <TimerDelay_Init+0xb8>)
 80010ee:	f005 fb5f 	bl	80067b0 <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <TimerDelay_Init+0x84>
    {
      Error_Handler();
 80010f8:	f001 f846 	bl	8002188 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&HTIMx, &sMasterConfig) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <TimerDelay_Init+0xb8>)
 800110a:	f005 ff09 	bl	8006f20 <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <TimerDelay_Init+0xa0>
    {
      Error_Handler();
 8001114:	f001 f838 	bl	8002188 <Error_Handler>
    }

    HAL_TIM_Base_Start(&HTIMx);
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <TimerDelay_Init+0xb8>)
 800111a:	f005 f8cc 	bl	80062b6 <HAL_TIM_Base_Start>

}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	431bde83 	.word	0x431bde83
 800112c:	200000f0 	.word	0x200000f0
 8001130:	200000b0 	.word	0x200000b0
 8001134:	40000400 	.word	0x40000400

08001138 <delay_us>:

void delay_us(volatile uint16_t au16_us)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
	HTIMx.Instance->CNT = 0;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <delay_us+0x30>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
	while (HTIMx.Instance->CNT < au16_us);
 800114a:	bf00      	nop
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <delay_us+0x30>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	88fa      	ldrh	r2, [r7, #6]
 8001154:	b292      	uxth	r2, r2
 8001156:	4293      	cmp	r3, r2
 8001158:	d3f8      	bcc.n	800114c <delay_us+0x14>
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	200000b0 	.word	0x200000b0

0800116c <delay_ms>:

void delay_ms(volatile uint16_t au16_ms)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
	while(au16_ms > 0)
 8001176:	e00f      	b.n	8001198 <delay_ms+0x2c>
	{
		HTIMx.Instance->CNT = 0;
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <delay_ms+0x44>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	; 0x24
		au16_ms--;
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	b29b      	uxth	r3, r3
 8001184:	3b01      	subs	r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	80fb      	strh	r3, [r7, #6]
		while (HTIMx.Instance->CNT < 1000);
 800118a:	bf00      	nop
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <delay_ms+0x44>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001196:	d3f9      	bcc.n	800118c <delay_ms+0x20>
	while(au16_ms > 0)
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	b29b      	uxth	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1eb      	bne.n	8001178 <delay_ms+0xc>
	}
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200000b0 	.word	0x200000b0

080011b4 <BSP_Init>:
static void MX_TIM3_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
static void MX_RTC_Init(void);

void BSP_Init() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
    HAL_Init();
 80011b8:	f001 ff7e 	bl	80030b8 <HAL_Init>
    SystemClock_Config();
 80011bc:	f000 fc70 	bl	8001aa0 <SystemClock_Config>
    MX_GPIO_Init();
 80011c0:	f000 fee2 	bl	8001f88 <MX_GPIO_Init>
    MX_DMA_Init();
 80011c4:	f000 fec0 	bl	8001f48 <MX_DMA_Init>
    MX_I2C1_Init();
 80011c8:	f000 fd40 	bl	8001c4c <MX_I2C1_Init>
    MX_TIM3_Init();
 80011cc:	f000 fe6e 	bl	8001eac <MX_TIM3_Init>
    MX_ADC1_Init();
 80011d0:	f000 fcea 	bl	8001ba8 <MX_ADC1_Init>
    MX_TIM2_Init();
 80011d4:	f000 fdf4 	bl	8001dc0 <MX_TIM2_Init>
    MX_RTC_Init();
 80011d8:	f000 fd66 	bl	8001ca8 <MX_RTC_Init>
    TimerDelay_Init();
 80011dc:	f7ff ff4c 	bl	8001078 <TimerDelay_Init>
    LCD_Init();
 80011e0:	f001 fc00 	bl	80029e4 <LCD_Init>
    keypad_init();
 80011e4:	f000 fff2 	bl	80021cc <keypad_init>
    //BSP_Output_Init();

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Init PWM
 80011e8:	2100      	movs	r1, #0
 80011ea:	4808      	ldr	r0, [pc, #32]	; (800120c <BSP_Init+0x58>)
 80011ec:	f005 f8e0 	bl	80063b0 <HAL_TIM_PWM_Start>

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); //  ENA1
 80011f0:	2200      	movs	r2, #0
 80011f2:	2110      	movs	r1, #16
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <BSP_Init+0x5c>)
 80011f6:	f003 f909 	bl	800440c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); //  ENA2
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <BSP_Init+0x60>)
 8001202:	f003 f903 	bl	800440c <HAL_GPIO_WritePin>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000021c 	.word	0x2000021c
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40020800 	.word	0x40020800

08001218 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){  //Duda si anda este callback
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    static uint32_t App_1000msTimeout = 1000;
    static uint32_t App_100msTimeout = 100;
    static uint32_t App_10msTimeout = 10;
    static uint32_t App_10sTimeout = 10000;

    if(htim->Instance == TIM5){
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a25      	ldr	r2, [pc, #148]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d10c      	bne.n	8001244 <HAL_TIM_PeriodElapsedCallback+0x2c>
    	HAL_IncTick();
 800122a:	f001 ff67 	bl	80030fc <HAL_IncTick>
        if(App_100msTimeout){
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <HAL_TIM_PeriodElapsedCallback+0x2c>
            App_100msTimeout--;
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3b01      	subs	r3, #1
 800123c:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800123e:	6013      	str	r3, [r2, #0]
            APP_Timer100ms();
 8001240:	f001 fc3f 	bl	8002ac2 <APP_Timer100ms>

            //codigo
        }
    }
    if(App_10msTimeout){
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00d      	beq.n	8001268 <HAL_TIM_PeriodElapsedCallback+0x50>
        App_10msTimeout--;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3b01      	subs	r3, #1
 8001252:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001254:	6013      	str	r3, [r2, #0]
        if(App_10msTimeout == 0){
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d104      	bne.n	8001268 <HAL_TIM_PeriodElapsedCallback+0x50>
            App_10msTimeout = 10;
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001260:	220a      	movs	r2, #10
 8001262:	601a      	str	r2, [r3, #0]
            APP_Timer10ms();
 8001264:	f001 fc26 	bl	8002ab4 <APP_Timer10ms>
        }
    }
    if(App_1000msTimeout){
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00e      	beq.n	800128e <HAL_TIM_PeriodElapsedCallback+0x76>
        App_1000msTimeout--;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3b01      	subs	r3, #1
 8001276:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001278:	6013      	str	r3, [r2, #0]
        if(App_1000msTimeout == 0){
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d105      	bne.n	800128e <HAL_TIM_PeriodElapsedCallback+0x76>
            App_1000msTimeout = 1000;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001288:	601a      	str	r2, [r3, #0]
            APP_Timer1000ms();
 800128a:	f001 fc21 	bl	8002ad0 <APP_Timer1000ms>
        }
    }
    if(App_10sTimeout){
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00e      	beq.n	80012b4 <HAL_TIM_PeriodElapsedCallback+0x9c>
        App_10sTimeout--;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3b01      	subs	r3, #1
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800129e:	6013      	str	r3, [r2, #0]
        if(App_10sTimeout == 0){
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <HAL_TIM_PeriodElapsedCallback+0x9c>
            App_10sTimeout = 10000;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80012aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80012ae:	601a      	str	r2, [r3, #0]
            APP_Timer10s();
 80012b0:	f001 fc15 	bl	8002ade <APP_Timer10s>
        }
    }
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40000c00 	.word	0x40000c00
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000004 	.word	0x20000004
 80012c8:	20000008 	.word	0x20000008
 80012cc:	2000000c 	.word	0x2000000c

080012d0 <BSP_Delay>:

void BSP_Delay(uint16_t Delay){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
    delay_ms(Delay);
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff45 	bl	800116c <delay_ms>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <BSP_LCD_Temperature>:

void BSP_LCD_Temperature(float temperatura) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	ed87 0a01 	vstr	s0, [r7, #4]
    LCD_SetCursor(1, 4);
 80012f6:	2104      	movs	r1, #4
 80012f8:	2001      	movs	r0, #1
 80012fa:	f001 fa55 	bl	80027a8 <LCD_SetCursor>
    LCD_Print("Grados:%0.0fC", temperatura);
 80012fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8001302:	4803      	ldr	r0, [pc, #12]	; (8001310 <BSP_LCD_Temperature+0x24>)
 8001304:	f001 fb36 	bl	8002974 <LCD_Print>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	08008df4 	.word	0x08008df4

08001314 <BSP_LCD_Humidity>:

void BSP_LCD_Humidity(float humedad) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	ed87 0a01 	vstr	s0, [r7, #4]
    LCD_SetCursor(2, 1);
 800131e:	2101      	movs	r1, #1
 8001320:	2002      	movs	r0, #2
 8001322:	f001 fa41 	bl	80027a8 <LCD_SetCursor>
    LCD_Print("HA:%0.0f%%", humedad);
 8001326:	ed97 0a01 	vldr	s0, [r7, #4]
 800132a:	4803      	ldr	r0, [pc, #12]	; (8001338 <BSP_LCD_Humidity+0x24>)
 800132c:	f001 fb22 	bl	8002974 <LCD_Print>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	08008e04 	.word	0x08008e04

0800133c <BSP_Get_percentageHS>:

uint32_t BSP_Get_percentageHS(uint32_t value){
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    int hummin = 4095;                      //REVISAR TIPO DE DATO
 8001344:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001348:	617b      	str	r3, [r7, #20]
    int hummax = 2300;                      //REVISAR Maximo y Minimo en especial maximo
 800134a:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800134e:	613b      	str	r3, [r7, #16]
//#define humminp = 0
    int hummaxp = 100;
 8001350:	2364      	movs	r3, #100	; 0x64
 8001352:	60fb      	str	r3, [r7, #12]
    if (value > hummin)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	d901      	bls.n	8001360 <BSP_Get_percentageHS+0x24>
        value = hummin;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	607b      	str	r3, [r7, #4]
    if (value <= hummax)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	d802      	bhi.n	800136e <BSP_Get_percentageHS+0x32>
        value = hummax + 1;
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	3301      	adds	r3, #1
 800136c:	607b      	str	r3, [r7, #4]
    value = value - hummax;
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	607b      	str	r3, [r7, #4]
    return 100 - ((value * hummaxp) / (hummin - hummax));
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	6979      	ldr	r1, [r7, #20]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	1a8a      	subs	r2, r1, r2
 8001384:	fbb3 f3f2 	udiv	r3, r3, r2
 8001388:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
}
 800138c:	4618      	mov	r0, r3
 800138e:	371c      	adds	r7, #28
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <BSP_Detect_Movement>:

void BSP_Detect_Movement(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
    if ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2))) {  //si el pin esta en alto
 800139c:	2104      	movs	r1, #4
 800139e:	4812      	ldr	r0, [pc, #72]	; (80013e8 <BSP_Detect_Movement+0x50>)
 80013a0:	f003 f81c 	bl	80043dc <HAL_GPIO_ReadPin>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d01c      	beq.n	80013e4 <BSP_Detect_Movement+0x4c>
        //buzzer_on();  //suena el buzzer
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); //Encender led verde
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b0:	480e      	ldr	r0, [pc, #56]	; (80013ec <BSP_Detect_Movement+0x54>)
 80013b2:	f003 f82b 	bl	800440c <HAL_GPIO_WritePin>
        LCD_Clear();
 80013b6:	f001 f9e3 	bl	8002780 <LCD_Clear>
        LCD_SetCursor(2, 4);
 80013ba:	2104      	movs	r1, #4
 80013bc:	2002      	movs	r0, #2
 80013be:	f001 f9f3 	bl	80027a8 <LCD_SetCursor>
        LCD_Print("Movimiento", 1);   // Durante toda la espera con cortina cerrada?
 80013c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80013c6:	480a      	ldr	r0, [pc, #40]	; (80013f0 <BSP_Detect_Movement+0x58>)
 80013c8:	f001 fad4 	bl	8002974 <LCD_Print>
        HAL_Delay(1000);
 80013cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d0:	f001 feb4 	bl	800313c <HAL_Delay>
        LCD_Clear();
 80013d4:	f001 f9d4 	bl	8002780 <LCD_Clear>
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);     //  ENA
//        }
//        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2));   //espera hasta que el pir se apague

        //buzzer_off(); //se apaga el buffer
        HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET); //se apaga el led verde
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013de:	4803      	ldr	r0, [pc, #12]	; (80013ec <BSP_Detect_Movement+0x54>)
 80013e0:	f003 f814 	bl	800440c <HAL_GPIO_WritePin>
    }
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	08008e10 	.word	0x08008e10

080013f4 <BSP_CoverFromTemperature>:

void BSP_CoverFromTemperature(int estado_cortina, int cortina_manual){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
    if(DHT22.Temperature < 6) {           //se puede optimizar preguntando con dos condiciones?
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <BSP_CoverFromTemperature+0xe4>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	d52f      	bpl.n	8001472 <BSP_CoverFromTemperature+0x7e>
        if (estado_cortina == 0 && cortina_manual == 0)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d15b      	bne.n	80014d0 <BSP_CoverFromTemperature+0xdc>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d158      	bne.n	80014d0 <BSP_CoverFromTemperature+0xdc>
        {        //flag para ver si la cortina esta abierta o cerrada  REVISAR cortina manual
            LCD_Clear();
 800141e:	f001 f9af 	bl	8002780 <LCD_Clear>
            LCD_SetCursor(2, 1);
 8001422:	2101      	movs	r1, #1
 8001424:	2002      	movs	r0, #2
 8001426:	f001 f9bf 	bl	80027a8 <LCD_SetCursor>
            LCD_Print("CERRANDO CORTINA", 1);
 800142a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800142e:	482b      	ldr	r0, [pc, #172]	; (80014dc <BSP_CoverFromTemperature+0xe8>)
 8001430:	f001 faa0 	bl	8002974 <LCD_Print>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET); //  ENA
 8001434:	2201      	movs	r2, #1
 8001436:	2110      	movs	r1, #16
 8001438:	4829      	ldr	r0, [pc, #164]	; (80014e0 <BSP_CoverFromTemperature+0xec>)
 800143a:	f002 ffe7 	bl	800440c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); //  IN1
 800143e:	2201      	movs	r2, #1
 8001440:	2108      	movs	r1, #8
 8001442:	4827      	ldr	r0, [pc, #156]	; (80014e0 <BSP_CoverFromTemperature+0xec>)
 8001444:	f002 ffe2 	bl	800440c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //  IN2
 8001448:	2200      	movs	r2, #0
 800144a:	2104      	movs	r1, #4
 800144c:	4824      	ldr	r0, [pc, #144]	; (80014e0 <BSP_CoverFromTemperature+0xec>)
 800144e:	f002 ffdd 	bl	800440c <HAL_GPIO_WritePin>
            while ( !HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5));   //espera hasta que la cortina toque fin de carrera                                              //VER CUANTO TIEMPO DEMORA EN CERRAR CORTINA
 8001452:	bf00      	nop
 8001454:	2120      	movs	r1, #32
 8001456:	4823      	ldr	r0, [pc, #140]	; (80014e4 <BSP_CoverFromTemperature+0xf0>)
 8001458:	f002 ffc0 	bl	80043dc <HAL_GPIO_ReadPin>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f8      	beq.n	8001454 <BSP_CoverFromTemperature+0x60>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); //  ENA
 8001462:	2200      	movs	r2, #0
 8001464:	2110      	movs	r1, #16
 8001466:	481e      	ldr	r0, [pc, #120]	; (80014e0 <BSP_CoverFromTemperature+0xec>)
 8001468:	f002 ffd0 	bl	800440c <HAL_GPIO_WritePin>
            estado_cortina = 1;                                                  //cambio de estado
 800146c:	2301      	movs	r3, #1
 800146e:	607b      	str	r3, [r7, #4]
            while (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3));   //espera hasta que la cortina toque fin de carrera                                                  //VER CUANTO TIEMPO DEMORA EN ABRIR CORTINA
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);     //  ENA
            estado_cortina = 0;                                                    //cambio de estado
        }
    }
}
 8001470:	e02e      	b.n	80014d0 <BSP_CoverFromTemperature+0xdc>
        if (estado_cortina == 1 && cortina_manual == 0) {
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d12b      	bne.n	80014d0 <BSP_CoverFromTemperature+0xdc>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d128      	bne.n	80014d0 <BSP_CoverFromTemperature+0xdc>
            LCD_Clear();
 800147e:	f001 f97f 	bl	8002780 <LCD_Clear>
            LCD_SetCursor(2, 1);
 8001482:	2101      	movs	r1, #1
 8001484:	2002      	movs	r0, #2
 8001486:	f001 f98f 	bl	80027a8 <LCD_SetCursor>
            LCD_Print("ABRIENDO CORTINA", 1);
 800148a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800148e:	4816      	ldr	r0, [pc, #88]	; (80014e8 <BSP_CoverFromTemperature+0xf4>)
 8001490:	f001 fa70 	bl	8002974 <LCD_Print>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);       //  ENA
 8001494:	2201      	movs	r2, #1
 8001496:	2110      	movs	r1, #16
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <BSP_CoverFromTemperature+0xec>)
 800149a:	f002 ffb7 	bl	800440c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);     //  IN1
 800149e:	2200      	movs	r2, #0
 80014a0:	2108      	movs	r1, #8
 80014a2:	480f      	ldr	r0, [pc, #60]	; (80014e0 <BSP_CoverFromTemperature+0xec>)
 80014a4:	f002 ffb2 	bl	800440c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);       //  IN2
 80014a8:	2201      	movs	r2, #1
 80014aa:	2104      	movs	r1, #4
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <BSP_CoverFromTemperature+0xec>)
 80014ae:	f002 ffad 	bl	800440c <HAL_GPIO_WritePin>
            while (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3));   //espera hasta que la cortina toque fin de carrera                                                  //VER CUANTO TIEMPO DEMORA EN ABRIR CORTINA
 80014b2:	bf00      	nop
 80014b4:	2108      	movs	r1, #8
 80014b6:	480b      	ldr	r0, [pc, #44]	; (80014e4 <BSP_CoverFromTemperature+0xf0>)
 80014b8:	f002 ff90 	bl	80043dc <HAL_GPIO_ReadPin>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f8      	beq.n	80014b4 <BSP_CoverFromTemperature+0xc0>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);     //  ENA
 80014c2:	2200      	movs	r2, #0
 80014c4:	2110      	movs	r1, #16
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <BSP_CoverFromTemperature+0xec>)
 80014c8:	f002 ffa0 	bl	800440c <HAL_GPIO_WritePin>
            estado_cortina = 0;                                                    //cambio de estado
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000029c 	.word	0x2000029c
 80014dc:	08008e1c 	.word	0x08008e1c
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40021000 	.word	0x40021000
 80014e8:	08008e30 	.word	0x08008e30

080014ec <BSP_Show_SoilHumidity>:

void BSP_Show_SoilHumidity(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 80014f0:	4817      	ldr	r0, [pc, #92]	; (8001550 <BSP_Show_SoilHumidity+0x64>)
 80014f2:	f001 fe8b 	bl	800320c <HAL_ADC_Start>
    if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK){     //incilur esta parte en el solenoide para hecr while?
 80014f6:	2105      	movs	r1, #5
 80014f8:	4815      	ldr	r0, [pc, #84]	; (8001550 <BSP_Show_SoilHumidity+0x64>)
 80014fa:	f001 ff60 	bl	80033be <HAL_ADC_PollForConversion>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d110      	bne.n	8001526 <BSP_Show_SoilHumidity+0x3a>
        value_adc[0] = HAL_ADC_GetValue(&hadc1);
 8001504:	4812      	ldr	r0, [pc, #72]	; (8001550 <BSP_Show_SoilHumidity+0x64>)
 8001506:	f001 ffde 	bl	80034c6 <HAL_ADC_GetValue>
 800150a:	4603      	mov	r3, r0
 800150c:	4a11      	ldr	r2, [pc, #68]	; (8001554 <BSP_Show_SoilHumidity+0x68>)
 800150e:	6013      	str	r3, [r2, #0]
        value_adc[0] = BSP_Get_percentageHS(value_adc[0]);
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <BSP_Show_SoilHumidity+0x68>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff11 	bl	800133c <BSP_Get_percentageHS>
 800151a:	4603      	mov	r3, r0
 800151c:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <BSP_Show_SoilHumidity+0x68>)
 800151e:	6013      	str	r3, [r2, #0]
        HAL_ADC_Stop(&hadc1);
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <BSP_Show_SoilHumidity+0x64>)
 8001522:	f001 ff19 	bl	8003358 <HAL_ADC_Stop>
    }
    LCD_SetCursor(2, 10);
 8001526:	210a      	movs	r1, #10
 8001528:	2002      	movs	r0, #2
 800152a:	f001 f93d 	bl	80027a8 <LCD_SetCursor>
    LCD_Print("HS:%0.0f%%", value_adc[0]);  //REVISAR
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <BSP_Show_SoilHumidity+0x68>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	ee07 3a90 	vmov	s15, r3
 8001536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800153a:	eeb0 0a67 	vmov.f32	s0, s15
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <BSP_Show_SoilHumidity+0x6c>)
 8001540:	f001 fa18 	bl	8002974 <LCD_Print>

    HAL_Delay(3000);
 8001544:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001548:	f001 fdf8 	bl	800313c <HAL_Delay>
    //LCD_Clear();
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000100 	.word	0x20000100
 8001554:	200000f4 	.word	0x200000f4
 8001558:	08008e44 	.word	0x08008e44

0800155c <BSP_Irrigation>:

void BSP_Irrigation(int rangohmin, int rangohmax){
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]


                //REVISAR RANGO INICIAL DE HUMEDAD
    LCD_Clear();
 8001566:	f001 f90b 	bl	8002780 <LCD_Clear>
    do {                                  //ver caso si se quiere regar durante movimiento
        HAL_ADC_Start(&hadc1);
 800156a:	482a      	ldr	r0, [pc, #168]	; (8001614 <BSP_Irrigation+0xb8>)
 800156c:	f001 fe4e 	bl	800320c <HAL_ADC_Start>
        if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK){
 8001570:	2105      	movs	r1, #5
 8001572:	4828      	ldr	r0, [pc, #160]	; (8001614 <BSP_Irrigation+0xb8>)
 8001574:	f001 ff23 	bl	80033be <HAL_ADC_PollForConversion>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d110      	bne.n	80015a0 <BSP_Irrigation+0x44>
            value_adc[0] = HAL_ADC_GetValue(&hadc1);
 800157e:	4825      	ldr	r0, [pc, #148]	; (8001614 <BSP_Irrigation+0xb8>)
 8001580:	f001 ffa1 	bl	80034c6 <HAL_ADC_GetValue>
 8001584:	4603      	mov	r3, r0
 8001586:	4a24      	ldr	r2, [pc, #144]	; (8001618 <BSP_Irrigation+0xbc>)
 8001588:	6013      	str	r3, [r2, #0]
            value_adc[0] = BSP_Get_percentageHS(value_adc[0]);
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <BSP_Irrigation+0xbc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fed4 	bl	800133c <BSP_Get_percentageHS>
 8001594:	4603      	mov	r3, r0
 8001596:	4a20      	ldr	r2, [pc, #128]	; (8001618 <BSP_Irrigation+0xbc>)
 8001598:	6013      	str	r3, [r2, #0]
            HAL_ADC_Stop(&hadc1);
 800159a:	481e      	ldr	r0, [pc, #120]	; (8001614 <BSP_Irrigation+0xb8>)
 800159c:	f001 fedc 	bl	8003358 <HAL_ADC_Stop>
        }
        if (value_adc[0] < rangohmax && value_adc[0] > rangohmin) {//revisar hacer con while
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <BSP_Irrigation+0xbc>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d21f      	bcs.n	80015ea <BSP_Irrigation+0x8e>
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <BSP_Irrigation+0xbc>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d91a      	bls.n	80015ea <BSP_Irrigation+0x8e>
            LCD_SetCursor(2, 5);
 80015b4:	2105      	movs	r1, #5
 80015b6:	2002      	movs	r0, #2
 80015b8:	f001 f8f6 	bl	80027a8 <LCD_SetCursor>
            LCD_Print("REGANDO", 1);
 80015bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80015c0:	4816      	ldr	r0, [pc, #88]	; (800161c <BSP_Irrigation+0xc0>)
 80015c2:	f001 f9d7 	bl	8002974 <LCD_Print>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);   //  ENA
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015cc:	4814      	ldr	r0, [pc, #80]	; (8001620 <BSP_Irrigation+0xc4>)
 80015ce:	f002 ff1d 	bl	800440c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);   //  IN1
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d8:	4811      	ldr	r0, [pc, #68]	; (8001620 <BSP_Irrigation+0xc4>)
 80015da:	f002 ff17 	bl	800440c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); //  IN2
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e4:	480e      	ldr	r0, [pc, #56]	; (8001620 <BSP_Irrigation+0xc4>)
 80015e6:	f002 ff11 	bl	800440c <HAL_GPIO_WritePin>

        }
    }
    while (value_adc[0] <= rangohmax && value_adc[0] >= rangohmin);
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <BSP_Irrigation+0xbc>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d804      	bhi.n	80015fe <BSP_Irrigation+0xa2>
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <BSP_Irrigation+0xbc>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d2b5      	bcs.n	800156a <BSP_Irrigation+0xe>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); //  ENA
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001604:	4806      	ldr	r0, [pc, #24]	; (8001620 <BSP_Irrigation+0xc4>)
 8001606:	f002 ff01 	bl	800440c <HAL_GPIO_WritePin>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000100 	.word	0x20000100
 8001618:	200000f4 	.word	0x200000f4
 800161c:	08008e50 	.word	0x08008e50
 8001620:	40020800 	.word	0x40020800

08001624 <BSP_Keypad>:

void BSP_Keypad(int rangohmin, int rangohmax, int estado_cortina, int cortina_manual){
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
    int tecla;
    tecla = keypad_read();
 8001632:	f000 fe7b 	bl	800232c <keypad_read>
 8001636:	4603      	mov	r3, r0
 8001638:	617b      	str	r3, [r7, #20]
    LCD_Clear();
 800163a:	f001 f8a1 	bl	8002780 <LCD_Clear>
    if (tecla != 0){
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 821d 	beq.w	8001a80 <BSP_Keypad+0x45c>
        switch (tecla) {
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3b30      	subs	r3, #48	; 0x30
 800164a:	2b14      	cmp	r3, #20
 800164c:	f200 821b 	bhi.w	8001a86 <BSP_Keypad+0x462>
 8001650:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <BSP_Keypad+0x34>)
 8001652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001656:	bf00      	nop
 8001658:	08001a65 	.word	0x08001a65
 800165c:	08001835 	.word	0x08001835
 8001660:	08001851 	.word	0x08001851
 8001664:	0800186d 	.word	0x0800186d
 8001668:	08001889 	.word	0x08001889
 800166c:	080018a5 	.word	0x080018a5
 8001670:	080018c1 	.word	0x080018c1
 8001674:	080018dd 	.word	0x080018dd
 8001678:	080018f9 	.word	0x080018f9
 800167c:	08001915 	.word	0x08001915
 8001680:	08001a87 	.word	0x08001a87
 8001684:	08001a87 	.word	0x08001a87
 8001688:	08001a87 	.word	0x08001a87
 800168c:	08001a87 	.word	0x08001a87
 8001690:	08001a87 	.word	0x08001a87
 8001694:	08001a87 	.word	0x08001a87
 8001698:	08001a87 	.word	0x08001a87
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	08001a85 	.word	0x08001a85
 80016a4:	08001931 	.word	0x08001931
 80016a8:	08001955 	.word	0x08001955
            case 65:
                LCD_Clear();
 80016ac:	f001 f868 	bl	8002780 <LCD_Clear>
                LCD_SetCursor(1, 5);
 80016b0:	2105      	movs	r1, #5
 80016b2:	2001      	movs	r0, #1
 80016b4:	f001 f878 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("MINIMO:", 1);
 80016b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80016bc:	48bf      	ldr	r0, [pc, #764]	; (80019bc <BSP_Keypad+0x398>)
 80016be:	f001 f959 	bl	8002974 <LCD_Print>
                HAL_Delay(2000);
 80016c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016c6:	f001 fd39 	bl	800313c <HAL_Delay>
                do {                                         //REVISAR
                    tecla = keypad_read();                  //DUDA NECESARIO PRESIONADO EN EL MOMENTO JUSTO?
 80016ca:	f000 fe2f 	bl	800232c <keypad_read>
 80016ce:	4603      	mov	r3, r0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3b30      	subs	r3, #48	; 0x30
 80016d6:	2b09      	cmp	r3, #9
 80016d8:	d834      	bhi.n	8001744 <BSP_Keypad+0x120>
 80016da:	a201      	add	r2, pc, #4	; (adr r2, 80016e0 <BSP_Keypad+0xbc>)
 80016dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e0:	0800173f 	.word	0x0800173f
 80016e4:	08001709 	.word	0x08001709
 80016e8:	0800170f 	.word	0x0800170f
 80016ec:	08001715 	.word	0x08001715
 80016f0:	0800171b 	.word	0x0800171b
 80016f4:	08001721 	.word	0x08001721
 80016f8:	08001727 	.word	0x08001727
 80016fc:	0800172d 	.word	0x0800172d
 8001700:	08001733 	.word	0x08001733
 8001704:	08001739 	.word	0x08001739
                    switch (tecla) {
                        case 49: rangohmin = 10; break;
 8001708:	230a      	movs	r3, #10
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e01c      	b.n	8001748 <BSP_Keypad+0x124>
                        case 50: rangohmin = 20; break;
 800170e:	2314      	movs	r3, #20
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	e019      	b.n	8001748 <BSP_Keypad+0x124>
                        case 51: rangohmin = 30; break;
 8001714:	231e      	movs	r3, #30
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e016      	b.n	8001748 <BSP_Keypad+0x124>
                        case 52: rangohmin = 40; break;
 800171a:	2328      	movs	r3, #40	; 0x28
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e013      	b.n	8001748 <BSP_Keypad+0x124>
                        case 53: rangohmin = 50; break;
 8001720:	2332      	movs	r3, #50	; 0x32
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	e010      	b.n	8001748 <BSP_Keypad+0x124>
                        case 54: rangohmin = 60; break;
 8001726:	233c      	movs	r3, #60	; 0x3c
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	e00d      	b.n	8001748 <BSP_Keypad+0x124>
                        case 55: rangohmin = 70; break;
 800172c:	2346      	movs	r3, #70	; 0x46
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e00a      	b.n	8001748 <BSP_Keypad+0x124>
                        case 56: rangohmin = 80; break;
 8001732:	2350      	movs	r3, #80	; 0x50
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e007      	b.n	8001748 <BSP_Keypad+0x124>
                        case 57: rangohmin = 90; break;
 8001738:	235a      	movs	r3, #90	; 0x5a
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e004      	b.n	8001748 <BSP_Keypad+0x124>
                        case 48: rangohmin =  0; break;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	e001      	b.n	8001748 <BSP_Keypad+0x124>
                        default: rangohmin = 100;              //FALTA CASO 100
 8001744:	2364      	movs	r3, #100	; 0x64
 8001746:	60fb      	str	r3, [r7, #12]
                    }
                } while (tecla == 0 || rangohmin == 100);             //VER MAS CASOS // oscioso dos veces 100 porciento
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0bd      	beq.n	80016ca <BSP_Keypad+0xa6>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b64      	cmp	r3, #100	; 0x64
 8001752:	d0ba      	beq.n	80016ca <BSP_Keypad+0xa6>
                LCD_SetCursor(1, 5);
 8001754:	2105      	movs	r1, #5
 8001756:	2001      	movs	r0, #1
 8001758:	f001 f826 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("MINIMO:%0.0f", rangohmin);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001766:	eeb0 0a67 	vmov.f32	s0, s15
 800176a:	4895      	ldr	r0, [pc, #596]	; (80019c0 <BSP_Keypad+0x39c>)
 800176c:	f001 f902 	bl	8002974 <LCD_Print>
                LCD_SetCursor(2, 5);
 8001770:	2105      	movs	r1, #5
 8001772:	2002      	movs	r0, #2
 8001774:	f001 f818 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("MAXIMO:", 1);
 8001778:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800177c:	4891      	ldr	r0, [pc, #580]	; (80019c4 <BSP_Keypad+0x3a0>)
 800177e:	f001 f8f9 	bl	8002974 <LCD_Print>
                do {
                    tecla = keypad_read();                  //DUDA NECESARIO PRESIONADO EN EL MOMENTO JUSTO?
 8001782:	f000 fdd3 	bl	800232c <keypad_read>
 8001786:	4603      	mov	r3, r0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3b30      	subs	r3, #48	; 0x30
 800178e:	2b09      	cmp	r3, #9
 8001790:	d834      	bhi.n	80017fc <BSP_Keypad+0x1d8>
 8001792:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <BSP_Keypad+0x174>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	080017f7 	.word	0x080017f7
 800179c:	080017c1 	.word	0x080017c1
 80017a0:	080017c7 	.word	0x080017c7
 80017a4:	080017cd 	.word	0x080017cd
 80017a8:	080017d3 	.word	0x080017d3
 80017ac:	080017d9 	.word	0x080017d9
 80017b0:	080017df 	.word	0x080017df
 80017b4:	080017e5 	.word	0x080017e5
 80017b8:	080017eb 	.word	0x080017eb
 80017bc:	080017f1 	.word	0x080017f1
                    switch (tecla) {                         //REVISAR
                        case 49: rangohmax = 10; break;
 80017c0:	230a      	movs	r3, #10
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	e01c      	b.n	8001800 <BSP_Keypad+0x1dc>
                        case 50: rangohmax = 20; break;
 80017c6:	2314      	movs	r3, #20
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	e019      	b.n	8001800 <BSP_Keypad+0x1dc>
                        case 51: rangohmax = 30; break;
 80017cc:	231e      	movs	r3, #30
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	e016      	b.n	8001800 <BSP_Keypad+0x1dc>
                        case 52: rangohmax = 40; break;
 80017d2:	2328      	movs	r3, #40	; 0x28
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	e013      	b.n	8001800 <BSP_Keypad+0x1dc>
                        case 53: rangohmax = 50; break;         //FALTA DEFAULT??
 80017d8:	2332      	movs	r3, #50	; 0x32
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	e010      	b.n	8001800 <BSP_Keypad+0x1dc>
                        case 54: rangohmax = 60; break;
 80017de:	233c      	movs	r3, #60	; 0x3c
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	e00d      	b.n	8001800 <BSP_Keypad+0x1dc>
                        case 55: rangohmax = 70; break;
 80017e4:	2346      	movs	r3, #70	; 0x46
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	e00a      	b.n	8001800 <BSP_Keypad+0x1dc>
                        case 56: rangohmax = 80; break;
 80017ea:	2350      	movs	r3, #80	; 0x50
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	e007      	b.n	8001800 <BSP_Keypad+0x1dc>
                        case 57: rangohmax = 90; break;
 80017f0:	235a      	movs	r3, #90	; 0x5a
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	e004      	b.n	8001800 <BSP_Keypad+0x1dc>
                        case 48: rangohmax =  0; break;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	e001      	b.n	8001800 <BSP_Keypad+0x1dc>
                        default: rangohmax = 100;               //FALTA CASO 100
 80017fc:	2364      	movs	r3, #100	; 0x64
 80017fe:	60bb      	str	r3, [r7, #8]
                    }                                           //FALTA CASO ERROR QUE SEA MENOR AL MÍNIMO
                } while (tecla == 0 || rangohmax <= rangohmin);   //REVISAR NO HACE EFECTO
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0bd      	beq.n	8001782 <BSP_Keypad+0x15e>
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	429a      	cmp	r2, r3
 800180c:	ddb9      	ble.n	8001782 <BSP_Keypad+0x15e>
                LCD_SetCursor(2, 5);
 800180e:	2105      	movs	r1, #5
 8001810:	2002      	movs	r0, #2
 8001812:	f000 ffc9 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("MAXIMO:%0.0f", rangohmax);
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001820:	eeb0 0a67 	vmov.f32	s0, s15
 8001824:	4868      	ldr	r0, [pc, #416]	; (80019c8 <BSP_Keypad+0x3a4>)
 8001826:	f001 f8a5 	bl	8002974 <LCD_Print>
                HAL_Delay(4000);
 800182a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800182e:	f001 fc85 	bl	800313c <HAL_Delay>
                break;
 8001832:	e128      	b.n	8001a86 <BSP_Keypad+0x462>
            case 49:
                LCD_SetCursor(2, 1);
 8001834:	2101      	movs	r1, #1
 8001836:	2002      	movs	r0, #2
 8001838:	f000 ffb6 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("Ingreso 1", 1);
 800183c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001840:	4862      	ldr	r0, [pc, #392]	; (80019cc <BSP_Keypad+0x3a8>)
 8001842:	f001 f897 	bl	8002974 <LCD_Print>
                HAL_Delay(2000);
 8001846:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800184a:	f001 fc77 	bl	800313c <HAL_Delay>
                break;
 800184e:	e11a      	b.n	8001a86 <BSP_Keypad+0x462>
            case 50:
                LCD_SetCursor(2, 1);
 8001850:	2101      	movs	r1, #1
 8001852:	2002      	movs	r0, #2
 8001854:	f000 ffa8 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("Ingreso 2", 1);
 8001858:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800185c:	485c      	ldr	r0, [pc, #368]	; (80019d0 <BSP_Keypad+0x3ac>)
 800185e:	f001 f889 	bl	8002974 <LCD_Print>
                HAL_Delay(2000);
 8001862:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001866:	f001 fc69 	bl	800313c <HAL_Delay>
                break;
 800186a:	e10c      	b.n	8001a86 <BSP_Keypad+0x462>
            case 51:
                LCD_SetCursor(2, 1);
 800186c:	2101      	movs	r1, #1
 800186e:	2002      	movs	r0, #2
 8001870:	f000 ff9a 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("Ingreso 3", 1);
 8001874:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001878:	4856      	ldr	r0, [pc, #344]	; (80019d4 <BSP_Keypad+0x3b0>)
 800187a:	f001 f87b 	bl	8002974 <LCD_Print>
                HAL_Delay(2000);
 800187e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001882:	f001 fc5b 	bl	800313c <HAL_Delay>
                break;
 8001886:	e0fe      	b.n	8001a86 <BSP_Keypad+0x462>
            case 52:
                LCD_SetCursor(2, 1);
 8001888:	2101      	movs	r1, #1
 800188a:	2002      	movs	r0, #2
 800188c:	f000 ff8c 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("Ingreso 4", 1);
 8001890:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001894:	4850      	ldr	r0, [pc, #320]	; (80019d8 <BSP_Keypad+0x3b4>)
 8001896:	f001 f86d 	bl	8002974 <LCD_Print>
                HAL_Delay(2000);
 800189a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800189e:	f001 fc4d 	bl	800313c <HAL_Delay>
                break;
 80018a2:	e0f0      	b.n	8001a86 <BSP_Keypad+0x462>
            case 53:
                LCD_SetCursor(2, 1);
 80018a4:	2101      	movs	r1, #1
 80018a6:	2002      	movs	r0, #2
 80018a8:	f000 ff7e 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("Ingreso 5", 1);
 80018ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018b0:	484a      	ldr	r0, [pc, #296]	; (80019dc <BSP_Keypad+0x3b8>)
 80018b2:	f001 f85f 	bl	8002974 <LCD_Print>
                HAL_Delay(2000);
 80018b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018ba:	f001 fc3f 	bl	800313c <HAL_Delay>
                break;
 80018be:	e0e2      	b.n	8001a86 <BSP_Keypad+0x462>
            case 54:
                LCD_SetCursor(2, 1);
 80018c0:	2101      	movs	r1, #1
 80018c2:	2002      	movs	r0, #2
 80018c4:	f000 ff70 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("Ingreso 6", 1);
 80018c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018cc:	4844      	ldr	r0, [pc, #272]	; (80019e0 <BSP_Keypad+0x3bc>)
 80018ce:	f001 f851 	bl	8002974 <LCD_Print>
                HAL_Delay(2000);
 80018d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018d6:	f001 fc31 	bl	800313c <HAL_Delay>
                break;
 80018da:	e0d4      	b.n	8001a86 <BSP_Keypad+0x462>
//                if (AMoPM == 2){

//                }
                break;
            case 55:
                LCD_SetCursor(2, 1);
 80018dc:	2101      	movs	r1, #1
 80018de:	2002      	movs	r0, #2
 80018e0:	f000 ff62 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("Ingreso 7", 1);
 80018e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018e8:	483e      	ldr	r0, [pc, #248]	; (80019e4 <BSP_Keypad+0x3c0>)
 80018ea:	f001 f843 	bl	8002974 <LCD_Print>
                HAL_Delay(2000);
 80018ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018f2:	f001 fc23 	bl	800313c <HAL_Delay>
                break;
 80018f6:	e0c6      	b.n	8001a86 <BSP_Keypad+0x462>
            case 56:
                LCD_SetCursor(2, 1);
 80018f8:	2101      	movs	r1, #1
 80018fa:	2002      	movs	r0, #2
 80018fc:	f000 ff54 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("Ingreso 8", 1);
 8001900:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001904:	4838      	ldr	r0, [pc, #224]	; (80019e8 <BSP_Keypad+0x3c4>)
 8001906:	f001 f835 	bl	8002974 <LCD_Print>
                HAL_Delay(2000);
 800190a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800190e:	f001 fc15 	bl	800313c <HAL_Delay>
                break;
 8001912:	e0b8      	b.n	8001a86 <BSP_Keypad+0x462>
            case 57:
                LCD_SetCursor(2, 1);
 8001914:	2101      	movs	r1, #1
 8001916:	2002      	movs	r0, #2
 8001918:	f000 ff46 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("Ingreso 9", 1);
 800191c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001920:	4832      	ldr	r0, [pc, #200]	; (80019ec <BSP_Keypad+0x3c8>)
 8001922:	f001 f827 	bl	8002974 <LCD_Print>
                HAL_Delay(2000);
 8001926:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800192a:	f001 fc07 	bl	800313c <HAL_Delay>
                break;
 800192e:	e0aa      	b.n	8001a86 <BSP_Keypad+0x462>
            case 67:                                             //TECLA 'C'
                LCD_SetCursor(2, 5);
 8001930:	2105      	movs	r1, #5
 8001932:	2002      	movs	r0, #2
 8001934:	f000 ff38 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("PESTICIDA", 1);
 8001938:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800193c:	482c      	ldr	r0, [pc, #176]	; (80019f0 <BSP_Keypad+0x3cc>)
 800193e:	f001 f819 	bl	8002974 <LCD_Print>
                htim2.Instance->CCR1 = 75; //ANGULO 90 GRADOS
 8001942:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <BSP_Keypad+0x3d0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	224b      	movs	r2, #75	; 0x4b
 8001948:	635a      	str	r2, [r3, #52]	; 0x34
                HAL_Delay(4000);
 800194a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800194e:	f001 fbf5 	bl	800313c <HAL_Delay>
                break;
 8001952:	e098      	b.n	8001a86 <BSP_Keypad+0x462>
            case 68:                                             //TECLA 'D'
                if(estado_cortina == 0) {       //flag para ver si la cortina esta abierta o cerrada
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d154      	bne.n	8001a04 <BSP_Keypad+0x3e0>
                    LCD_SetCursor(2, 1);
 800195a:	2101      	movs	r1, #1
 800195c:	2002      	movs	r0, #2
 800195e:	f000 ff23 	bl	80027a8 <LCD_SetCursor>
                    LCD_Print("CERRANDO CORTINA", 1);
 8001962:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001966:	4824      	ldr	r0, [pc, #144]	; (80019f8 <BSP_Keypad+0x3d4>)
 8001968:	f001 f804 	bl	8002974 <LCD_Print>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET); //  ENA
 800196c:	2201      	movs	r2, #1
 800196e:	2110      	movs	r1, #16
 8001970:	4822      	ldr	r0, [pc, #136]	; (80019fc <BSP_Keypad+0x3d8>)
 8001972:	f002 fd4b 	bl	800440c <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); //  IN1
 8001976:	2201      	movs	r2, #1
 8001978:	2108      	movs	r1, #8
 800197a:	4820      	ldr	r0, [pc, #128]	; (80019fc <BSP_Keypad+0x3d8>)
 800197c:	f002 fd46 	bl	800440c <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //  IN2
 8001980:	2200      	movs	r2, #0
 8001982:	2104      	movs	r1, #4
 8001984:	481d      	ldr	r0, [pc, #116]	; (80019fc <BSP_Keypad+0x3d8>)
 8001986:	f002 fd41 	bl	800440c <HAL_GPIO_WritePin>
                    while (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5));   //espera hasta que la cortina toque fin de carrera con pull up
 800198a:	bf00      	nop
 800198c:	2120      	movs	r1, #32
 800198e:	481c      	ldr	r0, [pc, #112]	; (8001a00 <BSP_Keypad+0x3dc>)
 8001990:	f002 fd24 	bl	80043dc <HAL_GPIO_ReadPin>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f8      	beq.n	800198c <BSP_Keypad+0x368>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); //  ENA
 800199a:	2200      	movs	r2, #0
 800199c:	2110      	movs	r1, #16
 800199e:	4817      	ldr	r0, [pc, #92]	; (80019fc <BSP_Keypad+0x3d8>)
 80019a0:	f002 fd34 	bl	800440c <HAL_GPIO_WritePin>
                    estado_cortina = 1;                                                  //cambio de estado
 80019a4:	2301      	movs	r3, #1
 80019a6:	607b      	str	r3, [r7, #4]
                    if (cortina_manual == 0)   //revisar
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <BSP_Keypad+0x390>
                        cortina_manual = 1;        //bandera para saber si se quiere de manera manual la cortina abierta
 80019ae:	2301      	movs	r3, #1
 80019b0:	603b      	str	r3, [r7, #0]
                    if (cortina_manual == 0)   //revisar
                        cortina_manual = 1;
                    else
                        cortina_manual = 0;    //bandera para saber si se quiere de manera manual la cortina abierta
                }
                break;
 80019b2:	e068      	b.n	8001a86 <BSP_Keypad+0x462>
                        cortina_manual = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	603b      	str	r3, [r7, #0]
                break;
 80019b8:	e065      	b.n	8001a86 <BSP_Keypad+0x462>
 80019ba:	bf00      	nop
 80019bc:	08008e58 	.word	0x08008e58
 80019c0:	08008e60 	.word	0x08008e60
 80019c4:	08008e70 	.word	0x08008e70
 80019c8:	08008e78 	.word	0x08008e78
 80019cc:	08008e88 	.word	0x08008e88
 80019d0:	08008e94 	.word	0x08008e94
 80019d4:	08008ea0 	.word	0x08008ea0
 80019d8:	08008eac 	.word	0x08008eac
 80019dc:	08008eb8 	.word	0x08008eb8
 80019e0:	08008ec4 	.word	0x08008ec4
 80019e4:	08008ed0 	.word	0x08008ed0
 80019e8:	08008edc 	.word	0x08008edc
 80019ec:	08008ee8 	.word	0x08008ee8
 80019f0:	08008ef4 	.word	0x08008ef4
 80019f4:	2000021c 	.word	0x2000021c
 80019f8:	08008e1c 	.word	0x08008e1c
 80019fc:	40020c00 	.word	0x40020c00
 8001a00:	40021000 	.word	0x40021000
                    LCD_SetCursor(2, 1);
 8001a04:	2101      	movs	r1, #1
 8001a06:	2002      	movs	r0, #2
 8001a08:	f000 fece 	bl	80027a8 <LCD_SetCursor>
                    LCD_Print("ABRIENDO CORTINA", 1);
 8001a0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001a10:	481f      	ldr	r0, [pc, #124]	; (8001a90 <BSP_Keypad+0x46c>)
 8001a12:	f000 ffaf 	bl	8002974 <LCD_Print>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET); //  ENA
 8001a16:	2201      	movs	r2, #1
 8001a18:	2110      	movs	r1, #16
 8001a1a:	481e      	ldr	r0, [pc, #120]	; (8001a94 <BSP_Keypad+0x470>)
 8001a1c:	f002 fcf6 	bl	800440c <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); //  IN1
 8001a20:	2200      	movs	r2, #0
 8001a22:	2108      	movs	r1, #8
 8001a24:	481b      	ldr	r0, [pc, #108]	; (8001a94 <BSP_Keypad+0x470>)
 8001a26:	f002 fcf1 	bl	800440c <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //  IN2
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	4819      	ldr	r0, [pc, #100]	; (8001a94 <BSP_Keypad+0x470>)
 8001a30:	f002 fcec 	bl	800440c <HAL_GPIO_WritePin>
                    while (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3));   //espera hasta que la cortina toque fin de carrera con pull up
 8001a34:	bf00      	nop
 8001a36:	2108      	movs	r1, #8
 8001a38:	4817      	ldr	r0, [pc, #92]	; (8001a98 <BSP_Keypad+0x474>)
 8001a3a:	f002 fccf 	bl	80043dc <HAL_GPIO_ReadPin>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f8      	beq.n	8001a36 <BSP_Keypad+0x412>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); //  ENA
 8001a44:	2200      	movs	r2, #0
 8001a46:	2110      	movs	r1, #16
 8001a48:	4812      	ldr	r0, [pc, #72]	; (8001a94 <BSP_Keypad+0x470>)
 8001a4a:	f002 fcdf 	bl	800440c <HAL_GPIO_WritePin>
                    estado_cortina = 0;                                           //cambio de estado
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
                    if (cortina_manual == 0)   //revisar
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <BSP_Keypad+0x43a>
                        cortina_manual = 1;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	603b      	str	r3, [r7, #0]
                break;
 8001a5c:	e013      	b.n	8001a86 <BSP_Keypad+0x462>
                        cortina_manual = 0;    //bandera para saber si se quiere de manera manual la cortina abierta
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
                break;
 8001a62:	e010      	b.n	8001a86 <BSP_Keypad+0x462>
            case 48:
                LCD_SetCursor(2, 1);
 8001a64:	2101      	movs	r1, #1
 8001a66:	2002      	movs	r0, #2
 8001a68:	f000 fe9e 	bl	80027a8 <LCD_SetCursor>
                LCD_Print("Ingreso 0", 1);
 8001a6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001a70:	480a      	ldr	r0, [pc, #40]	; (8001a9c <BSP_Keypad+0x478>)
 8001a72:	f000 ff7f 	bl	8002974 <LCD_Print>
                HAL_Delay(2000);
 8001a76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a7a:	f001 fb5f 	bl	800313c <HAL_Delay>
                break;
 8001a7e:	e002      	b.n	8001a86 <BSP_Keypad+0x462>
        }
    }
 8001a80:	bf00      	nop
 8001a82:	e000      	b.n	8001a86 <BSP_Keypad+0x462>
                break;
 8001a84:	bf00      	nop
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08008e30 	.word	0x08008e30
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	08008f00 	.word	0x08008f00

08001aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b09a      	sub	sp, #104	; 0x68
 8001aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aaa:	2230      	movs	r2, #48	; 0x30
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f006 fd2c 	bl	800850c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
 8001ad4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <SystemClock_Config+0x100>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <SystemClock_Config+0x100>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <SystemClock_Config+0x100>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <SystemClock_Config+0x104>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2a      	ldr	r2, [pc, #168]	; (8001ba4 <SystemClock_Config+0x104>)
 8001afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <SystemClock_Config+0x104>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001b0e:	230a      	movs	r3, #10
 8001b10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b12:	2301      	movs	r3, #1
 8001b14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b16:	2310      	movs	r3, #16
 8001b18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b22:	2300      	movs	r3, #0
 8001b24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b26:	2308      	movs	r3, #8
 8001b28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001b2a:	2364      	movs	r3, #100	; 0x64
 8001b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001b32:	2308      	movs	r3, #8
 8001b34:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 f9fa 	bl	8004f34 <HAL_RCC_OscConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001b46:	f000 fb1f 	bl	8002188 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4a:	230f      	movs	r3, #15
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b66:	2103      	movs	r1, #3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fc51 	bl	8005410 <HAL_RCC_ClockConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001b74:	f000 fb08 	bl	8002188 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b80:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fe80 	bl	800588c <HAL_RCCEx_PeriphCLKConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001b92:	f000 faf9 	bl	8002188 <Error_Handler>
  }
}
 8001b96:	bf00      	nop
 8001b98:	3768      	adds	r7, #104	; 0x68
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40007000 	.word	0x40007000

08001ba8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001bbc:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <MX_ADC1_Init+0x9c>)
 8001bbe:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001be8:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <MX_ADC1_Init+0xa0>)
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001c08:	f001 fabc 	bl	8003184 <HAL_ADC_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_ADC1_Init+0x6e>
    {
        Error_Handler();
 8001c12:	f000 fab9 	bl	8002188 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_1;
 8001c16:	2301      	movs	r3, #1
 8001c18:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c22:	463b      	mov	r3, r7
 8001c24:	4619      	mov	r1, r3
 8001c26:	4806      	ldr	r0, [pc, #24]	; (8001c40 <MX_ADC1_Init+0x98>)
 8001c28:	f001 fc5a 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_ADC1_Init+0x8e>
    {
        Error_Handler();
 8001c32:	f000 faa9 	bl	8002188 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000100 	.word	0x20000100
 8001c44:	40012000 	.word	0x40012000
 8001c48:	0f000001 	.word	0x0f000001

08001c4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <MX_I2C1_Init+0x54>)
 8001c54:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c58:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <MX_I2C1_Init+0x58>)
 8001c5a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c6e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c8a:	f002 fbd9 	bl	8004440 <HAL_I2C_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8001c94:	f000 fa78 	bl	8002188 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200001a8 	.word	0x200001a8
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	000186a0 	.word	0x000186a0

08001ca8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b090      	sub	sp, #64	; 0x40
 8001cac:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN RTC_Init 0 */

    /* USER CODE END RTC_Init 0 */

    RTC_TimeTypeDef sTime = {0};
 8001cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    RTC_AlarmTypeDef sAlarm = {0};
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2228      	movs	r2, #40	; 0x28
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f006 fc1f 	bl	800850c <memset>
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
    */
    hrtc.Instance = RTC;
 8001cce:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cd0:	4a3a      	ldr	r2, [pc, #232]	; (8001dbc <MX_RTC_Init+0x114>)
 8001cd2:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cd4:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8001cda:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cdc:	227f      	movs	r2, #127	; 0x7f
 8001cde:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8001ce0:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <MX_RTC_Init+0x110>)
 8001ce2:	22ff      	movs	r2, #255	; 0xff
 8001ce4:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ce6:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <MX_RTC_Init+0x110>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cec:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cf2:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cf8:	482f      	ldr	r0, [pc, #188]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cfa:	f003 feb7 	bl	8005a6c <HAL_RTC_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_RTC_Init+0x60>
    {
        Error_Handler();
 8001d04:	f000 fa40 	bl	8002188 <Error_Handler>

    /* USER CODE END Check_RTC_BKUP */

    /** Initialize RTC and set the Time and Date
    */
    sTime.Hours = 23;
 8001d08:	2317      	movs	r3, #23
 8001d0a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    sTime.Minutes = 59;
 8001d0e:	233b      	movs	r3, #59	; 0x3b
 8001d10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    sTime.Seconds = 45;
 8001d14:	232d      	movs	r3, #45	; 0x2d
 8001d16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d26:	2200      	movs	r2, #0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4823      	ldr	r0, [pc, #140]	; (8001db8 <MX_RTC_Init+0x110>)
 8001d2c:	f003 ff2f 	bl	8005b8e <HAL_RTC_SetTime>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_RTC_Init+0x92>
    {
        Error_Handler();
 8001d36:	f000 fa27 	bl	8002188 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    sDate.Month = RTC_MONTH_OCTOBER;
 8001d40:	2310      	movs	r3, #16
 8001d42:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    sDate.Date = 28;
 8001d46:	231c      	movs	r3, #28
 8001d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    sDate.Year = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d56:	2200      	movs	r2, #0
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4817      	ldr	r0, [pc, #92]	; (8001db8 <MX_RTC_Init+0x110>)
 8001d5c:	f003 ffd4 	bl	8005d08 <HAL_RTC_SetDate>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_RTC_Init+0xc2>
    {
        Error_Handler();
 8001d66:	f000 fa0f 	bl	8002188 <Error_Handler>
    }
    /** Enable the Alarm A
    */
    sAlarm.AlarmTime.Hours = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	703b      	strb	r3, [r7, #0]
    sAlarm.AlarmTime.Minutes = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	707b      	strb	r3, [r7, #1]
    sAlarm.AlarmTime.Seconds = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	70bb      	strb	r3, [r7, #2]
    sAlarm.AlarmTime.SubSeconds = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
    sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
    sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
    sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmDateWeekDay = 1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f887 3020 	strb.w	r3, [r7, #32]
    sAlarm.Alarm = RTC_ALARM_A;
 8001d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_RTC_Init+0x110>)
 8001da2:	f004 f859 	bl	8005e58 <HAL_RTC_SetAlarm_IT>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_RTC_Init+0x108>
    {
        Error_Handler();
 8001dac:	f000 f9ec 	bl	8002188 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	3740      	adds	r7, #64	; 0x40
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200001fc 	.word	0x200001fc
 8001dbc:	40002800 	.word	0x40002800

08001dc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08e      	sub	sp, #56	; 0x38
 8001dc4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	f107 0320 	add.w	r3, r7, #32
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
 8001dec:	615a      	str	r2, [r3, #20]
 8001dee:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df6:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 1000-1;
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001dfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dfe:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 1000-1;
 8001e06:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e0c:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e1a:	4823      	ldr	r0, [pc, #140]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e1c:	f004 fa20 	bl	8006260 <HAL_TIM_Base_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM2_Init+0x6a>
    {
        Error_Handler();
 8001e26:	f000 f9af 	bl	8002188 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e34:	4619      	mov	r1, r3
 8001e36:	481c      	ldr	r0, [pc, #112]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e38:	f004 fcba 	bl	80067b0 <HAL_TIM_ConfigClockSource>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM2_Init+0x86>
    {
        Error_Handler();
 8001e42:	f000 f9a1 	bl	8002188 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e46:	4818      	ldr	r0, [pc, #96]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e48:	f004 fa7d 	bl	8006346 <HAL_TIM_PWM_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM2_Init+0x96>
    {
        Error_Handler();
 8001e52:	f000 f999 	bl	8002188 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e5e:	f107 0320 	add.w	r3, r7, #32
 8001e62:	4619      	mov	r1, r3
 8001e64:	4810      	ldr	r0, [pc, #64]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e66:	f005 f85b 	bl	8006f20 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM2_Init+0xb4>
    {
        Error_Handler();
 8001e70:	f000 f98a 	bl	8002188 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e74:	2360      	movs	r3, #96	; 0x60
 8001e76:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e8c:	f004 fbca 	bl	8006624 <HAL_TIM_PWM_ConfigChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM2_Init+0xda>
    {
        Error_Handler();
 8001e96:	f000 f977 	bl	8002188 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 8001e9a:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e9c:	f000 ffcc 	bl	8002e38 <HAL_TIM_MspPostInit>

}
 8001ea0:	bf00      	nop
 8001ea2:	3738      	adds	r7, #56	; 0x38
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	2000021c 	.word	0x2000021c

08001eac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <MX_TIM3_Init+0x98>)
 8001ecc:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee0:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001eee:	4814      	ldr	r0, [pc, #80]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ef0:	f004 f9b6 	bl	8006260 <HAL_TIM_Base_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM3_Init+0x52>
    {
        Error_Handler();
 8001efa:	f000 f945 	bl	8002188 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f02:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	4619      	mov	r1, r3
 8001f0a:	480d      	ldr	r0, [pc, #52]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001f0c:	f004 fc50 	bl	80067b0 <HAL_TIM_ConfigClockSource>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM3_Init+0x6e>
    {
        Error_Handler();
 8001f16:	f000 f937 	bl	8002188 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f22:	463b      	mov	r3, r7
 8001f24:	4619      	mov	r1, r3
 8001f26:	4806      	ldr	r0, [pc, #24]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001f28:	f004 fffa 	bl	8006f20 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM3_Init+0x8a>
    {
        Error_Handler();
 8001f32:	f000 f929 	bl	8002188 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000025c 	.word	0x2000025c
 8001f44:	40000400 	.word	0x40000400

08001f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_DMA_Init+0x3c>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <MX_DMA_Init+0x3c>)
 8001f58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_DMA_Init+0x3c>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2038      	movs	r0, #56	; 0x38
 8001f70:	f001 fd9c 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f74:	2038      	movs	r0, #56	; 0x38
 8001f76:	f001 fdb5 	bl	8003ae4 <HAL_NVIC_EnableIRQ>

}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800

08001f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	4b73      	ldr	r3, [pc, #460]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a72      	ldr	r2, [pc, #456]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8001fa8:	f043 0310 	orr.w	r3, r3, #16
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b70      	ldr	r3, [pc, #448]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	4b6c      	ldr	r3, [pc, #432]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a6b      	ldr	r2, [pc, #428]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8001fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b69      	ldr	r3, [pc, #420]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	4b65      	ldr	r3, [pc, #404]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a64      	ldr	r2, [pc, #400]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b62      	ldr	r3, [pc, #392]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b5e      	ldr	r3, [pc, #376]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a5d      	ldr	r2, [pc, #372]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b5b      	ldr	r3, [pc, #364]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	4b57      	ldr	r3, [pc, #348]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a56      	ldr	r2, [pc, #344]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b54      	ldr	r3, [pc, #336]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b50      	ldr	r3, [pc, #320]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a4f      	ldr	r2, [pc, #316]	; (8002170 <MX_GPIO_Init+0x1e8>)
 8002034:	f043 0308 	orr.w	r3, r3, #8
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <MX_GPIO_Init+0x1e8>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8002046:	2200      	movs	r2, #0
 8002048:	f641 4108 	movw	r1, #7176	; 0x1c08
 800204c:	4849      	ldr	r0, [pc, #292]	; (8002174 <MX_GPIO_Init+0x1ec>)
 800204e:	f002 f9dd 	bl	800440c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8002058:	4847      	ldr	r0, [pc, #284]	; (8002178 <MX_GPIO_Init+0x1f0>)
 800205a:	f002 f9d7 	bl	800440c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800205e:	2200      	movs	r2, #0
 8002060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002064:	4845      	ldr	r0, [pc, #276]	; (800217c <MX_GPIO_Init+0x1f4>)
 8002066:	f002 f9d1 	bl	800440c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, LD4_Pin|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	f241 011c 	movw	r1, #4124	; 0x101c
 8002070:	4843      	ldr	r0, [pc, #268]	; (8002180 <MX_GPIO_Init+0x1f8>)
 8002072:	f002 f9cb 	bl	800440c <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PE3 PE5 */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002076:	2328      	movs	r3, #40	; 0x28
 8002078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	4619      	mov	r1, r3
 8002088:	483b      	ldr	r0, [pc, #236]	; (8002178 <MX_GPIO_Init+0x1f0>)
 800208a:	f002 f823 	bl	80040d4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC3 PC10 PC11 PC12 */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800208e:	f641 4308 	movw	r3, #7176	; 0x1c08
 8002092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002094:	2301      	movs	r3, #1
 8002096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	4619      	mov	r1, r3
 80020a6:	4833      	ldr	r0, [pc, #204]	; (8002174 <MX_GPIO_Init+0x1ec>)
 80020a8:	f002 f814 	bl	80040d4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA0 PA2 */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80020ac:	2305      	movs	r3, #5
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	4619      	mov	r1, r3
 80020be:	4831      	ldr	r0, [pc, #196]	; (8002184 <MX_GPIO_Init+0x1fc>)
 80020c0:	f002 f808 	bl	80040d4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PC4 */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020c4:	2310      	movs	r3, #16
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020cc:	2301      	movs	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	4619      	mov	r1, r3
 80020d6:	4827      	ldr	r0, [pc, #156]	; (8002174 <MX_GPIO_Init+0x1ec>)
 80020d8:	f001 fffc 	bl	80040d4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB0 PB2 */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80020dc:	2305      	movs	r3, #5
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	4619      	mov	r1, r3
 80020ee:	4823      	ldr	r0, [pc, #140]	; (800217c <MX_GPIO_Init+0x1f4>)
 80020f0:	f001 fff0 	bl	80040d4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PE8 */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020fe:	2301      	movs	r3, #1
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	4619      	mov	r1, r3
 8002108:	481b      	ldr	r0, [pc, #108]	; (8002178 <MX_GPIO_Init+0x1f0>)
 800210a:	f001 ffe3 	bl	80040d4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PE10 PE12 PE14 */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 800210e:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8002112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002114:	2301      	movs	r3, #1
 8002116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002120:	f107 031c 	add.w	r3, r7, #28
 8002124:	4619      	mov	r1, r3
 8002126:	4814      	ldr	r0, [pc, #80]	; (8002178 <MX_GPIO_Init+0x1f0>)
 8002128:	f001 ffd4 	bl	80040d4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB10 */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800212c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002132:	2301      	movs	r3, #1
 8002134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213e:	f107 031c 	add.w	r3, r7, #28
 8002142:	4619      	mov	r1, r3
 8002144:	480d      	ldr	r0, [pc, #52]	; (800217c <MX_GPIO_Init+0x1f4>)
 8002146:	f001 ffc5 	bl	80040d4 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD4_Pin PD2 PD3 PD4 */
    GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800214a:	f241 031c 	movw	r3, #4124	; 0x101c
 800214e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002150:	2301      	movs	r3, #1
 8002152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2300      	movs	r3, #0
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	4619      	mov	r1, r3
 8002162:	4807      	ldr	r0, [pc, #28]	; (8002180 <MX_GPIO_Init+0x1f8>)
 8002164:	f001 ffb6 	bl	80040d4 <HAL_GPIO_Init>

}
 8002168:	bf00      	nop
 800216a:	3730      	adds	r7, #48	; 0x30
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800
 8002174:	40020800 	.word	0x40020800
 8002178:	40021000 	.word	0x40021000
 800217c:	40020400 	.word	0x40020400
 8002180:	40020c00 	.word	0x40020c00
 8002184:	40020000 	.word	0x40020000

08002188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80021a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <vApplicationGetIdleTaskMemory+0x30>)
 80021ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	200002a4 	.word	0x200002a4
 80021c8:	200002f8 	.word	0x200002f8

080021cc <keypad_init>:
#include "stm32f4xx_hal.h"
#include "keypad.h"

void keypad_init(void){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	4b51      	ldr	r3, [pc, #324]	; (800231c <keypad_init+0x150>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a50      	ldr	r2, [pc, #320]	; (800231c <keypad_init+0x150>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b4e      	ldr	r3, [pc, #312]	; (800231c <keypad_init+0x150>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	4b4a      	ldr	r3, [pc, #296]	; (800231c <keypad_init+0x150>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a49      	ldr	r2, [pc, #292]	; (800231c <keypad_init+0x150>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <keypad_init+0x150>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
	
	
  GPIO_InitStruct.Pin 	= ROW1_PIN;
 800220a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800220e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8002210:	2301      	movs	r3, #1
 8002212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW1_PORT, &GPIO_InitStruct);
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	4619      	mov	r1, r3
 8002222:	483f      	ldr	r0, [pc, #252]	; (8002320 <keypad_init+0x154>)
 8002224:	f001 ff56 	bl	80040d4 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW2_PIN;
 8002228:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800222c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 800222e:	2301      	movs	r3, #1
 8002230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW2_PORT, &GPIO_InitStruct);
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	4619      	mov	r1, r3
 8002240:	4838      	ldr	r0, [pc, #224]	; (8002324 <keypad_init+0x158>)
 8002242:	f001 ff47 	bl	80040d4 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW3_PIN;
 8002246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW3_PORT, &GPIO_InitStruct);
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	4619      	mov	r1, r3
 800225e:	4831      	ldr	r0, [pc, #196]	; (8002324 <keypad_init+0x158>)
 8002260:	f001 ff38 	bl	80040d4 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW4_PIN;
 8002264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002268:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW4_PORT, &GPIO_InitStruct);
 8002276:	f107 030c 	add.w	r3, r7, #12
 800227a:	4619      	mov	r1, r3
 800227c:	4829      	ldr	r0, [pc, #164]	; (8002324 <keypad_init+0x158>)
 800227e:	f001 ff29 	bl	80040d4 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002288:	4825      	ldr	r0, [pc, #148]	; (8002320 <keypad_init+0x154>)
 800228a:	f002 f8bf 	bl	800440c <HAL_GPIO_WritePin>
	
  HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002294:	4823      	ldr	r0, [pc, #140]	; (8002324 <keypad_init+0x158>)
 8002296:	f002 f8b9 	bl	800440c <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a0:	4820      	ldr	r0, [pc, #128]	; (8002324 <keypad_init+0x158>)
 80022a2:	f002 f8b3 	bl	800440c <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022ac:	481d      	ldr	r0, [pc, #116]	; (8002324 <keypad_init+0x158>)
 80022ae:	f002 f8ad 	bl	800440c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 	= COL1_PIN;
 80022b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 80022b8:	2300      	movs	r3, #0
 80022ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 80022bc:	2301      	movs	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL1_PORT, &GPIO_InitStruct);
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	4619      	mov	r1, r3
 80022c6:	4817      	ldr	r0, [pc, #92]	; (8002324 <keypad_init+0x158>)
 80022c8:	f001 ff04 	bl	80040d4 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL2_PIN;
 80022cc:	2304      	movs	r3, #4
 80022ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 80022d4:	2301      	movs	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL2_PORT, &GPIO_InitStruct);
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	4619      	mov	r1, r3
 80022de:	4810      	ldr	r0, [pc, #64]	; (8002320 <keypad_init+0x154>)
 80022e0:	f001 fef8 	bl	80040d4 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL3_PIN;
 80022e4:	2301      	movs	r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 80022ec:	2301      	movs	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL3_PORT, &GPIO_InitStruct);
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	4619      	mov	r1, r3
 80022f6:	480a      	ldr	r0, [pc, #40]	; (8002320 <keypad_init+0x154>)
 80022f8:	f001 feec 	bl	80040d4 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL4_PIN;
 80022fc:	2310      	movs	r3, #16
 80022fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8002304:	2301      	movs	r3, #1
 8002306:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL4_PORT, &GPIO_InitStruct);
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	4619      	mov	r1, r3
 800230e:	4806      	ldr	r0, [pc, #24]	; (8002328 <keypad_init+0x15c>)
 8002310:	f001 fee0 	bl	80040d4 <HAL_GPIO_Init>
		
}
 8002314:	bf00      	nop
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40023800 	.word	0x40023800
 8002320:	40020400 	.word	0x40020400
 8002324:	40021000 	.word	0x40021000
 8002328:	40020800 	.word	0x40020800

0800232c <keypad_read>:

char keypad_read(void){
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
	char letras[4][4]={	{'1','2','3','A'},
 8002332:	4b9a      	ldr	r3, [pc, #616]	; (800259c <keypad_read+0x270>)
 8002334:	463c      	mov	r4, r7
 8002336:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002338:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                      {'4','5','6','B'},
                      {'7','8','9','C'},
                      {'*','0','#','D'}};
	int  i=0;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
	char valor=0;
 8002340:	2300      	movs	r3, #0
 8002342:	74fb      	strb	r3, [r7, #19]


	for(i=0;i<4;i++){
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	e11e      	b.n	8002588 <keypad_read+0x25c>
		if(i==0){
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d143      	bne.n	80023d8 <keypad_read+0xac>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_SET);
 8002350:	2201      	movs	r2, #1
 8002352:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002356:	4892      	ldr	r0, [pc, #584]	; (80025a0 <keypad_read+0x274>)
 8002358:	f002 f858 	bl	800440c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 800235c:	2201      	movs	r2, #1
 800235e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002362:	488f      	ldr	r0, [pc, #572]	; (80025a0 <keypad_read+0x274>)
 8002364:	f002 f852 	bl	800440c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8002368:	2201      	movs	r2, #1
 800236a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800236e:	488c      	ldr	r0, [pc, #560]	; (80025a0 <keypad_read+0x274>)
 8002370:	f002 f84c 	bl	800440c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_RESET);
 8002374:	2200      	movs	r2, #0
 8002376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800237a:	488a      	ldr	r0, [pc, #552]	; (80025a4 <keypad_read+0x278>)
 800237c:	f002 f846 	bl	800440c <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 8002380:	200a      	movs	r0, #10
 8002382:	f000 fedb 	bl	800313c <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[0][0];}	//1
 8002386:	e001      	b.n	800238c <keypad_read+0x60>
 8002388:	783b      	ldrb	r3, [r7, #0]
 800238a:	74fb      	strb	r3, [r7, #19]
 800238c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002390:	4883      	ldr	r0, [pc, #524]	; (80025a0 <keypad_read+0x274>)
 8002392:	f002 f823 	bl	80043dc <HAL_GPIO_ReadPin>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f5      	beq.n	8002388 <keypad_read+0x5c>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[0][1];}	//2
 800239c:	e001      	b.n	80023a2 <keypad_read+0x76>
 800239e:	787b      	ldrb	r3, [r7, #1]
 80023a0:	74fb      	strb	r3, [r7, #19]
 80023a2:	2104      	movs	r1, #4
 80023a4:	487f      	ldr	r0, [pc, #508]	; (80025a4 <keypad_read+0x278>)
 80023a6:	f002 f819 	bl	80043dc <HAL_GPIO_ReadPin>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f6      	beq.n	800239e <keypad_read+0x72>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[0][2];}	//3
 80023b0:	e001      	b.n	80023b6 <keypad_read+0x8a>
 80023b2:	78bb      	ldrb	r3, [r7, #2]
 80023b4:	74fb      	strb	r3, [r7, #19]
 80023b6:	2101      	movs	r1, #1
 80023b8:	487a      	ldr	r0, [pc, #488]	; (80025a4 <keypad_read+0x278>)
 80023ba:	f002 f80f 	bl	80043dc <HAL_GPIO_ReadPin>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f6      	beq.n	80023b2 <keypad_read+0x86>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[0][3];}	//A
 80023c4:	e001      	b.n	80023ca <keypad_read+0x9e>
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	74fb      	strb	r3, [r7, #19]
 80023ca:	2110      	movs	r1, #16
 80023cc:	4876      	ldr	r0, [pc, #472]	; (80025a8 <keypad_read+0x27c>)
 80023ce:	f002 f805 	bl	80043dc <HAL_GPIO_ReadPin>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f6      	beq.n	80023c6 <keypad_read+0x9a>
		}

		if(i==1){
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d143      	bne.n	8002466 <keypad_read+0x13a>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 80023de:	2201      	movs	r2, #1
 80023e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023e4:	486f      	ldr	r0, [pc, #444]	; (80025a4 <keypad_read+0x278>)
 80023e6:	f002 f811 	bl	800440c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f0:	486b      	ldr	r0, [pc, #428]	; (80025a0 <keypad_read+0x274>)
 80023f2:	f002 f80b 	bl	800440c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 80023f6:	2201      	movs	r2, #1
 80023f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023fc:	4868      	ldr	r0, [pc, #416]	; (80025a0 <keypad_read+0x274>)
 80023fe:	f002 f805 	bl	800440c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002408:	4865      	ldr	r0, [pc, #404]	; (80025a0 <keypad_read+0x274>)
 800240a:	f001 ffff 	bl	800440c <HAL_GPIO_WritePin>

			HAL_Delay(10);
 800240e:	200a      	movs	r0, #10
 8002410:	f000 fe94 	bl	800313c <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[1][0];}	//4
 8002414:	e001      	b.n	800241a <keypad_read+0xee>
 8002416:	793b      	ldrb	r3, [r7, #4]
 8002418:	74fb      	strb	r3, [r7, #19]
 800241a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800241e:	4860      	ldr	r0, [pc, #384]	; (80025a0 <keypad_read+0x274>)
 8002420:	f001 ffdc 	bl	80043dc <HAL_GPIO_ReadPin>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f5      	beq.n	8002416 <keypad_read+0xea>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[1][1];}	//5
 800242a:	e001      	b.n	8002430 <keypad_read+0x104>
 800242c:	797b      	ldrb	r3, [r7, #5]
 800242e:	74fb      	strb	r3, [r7, #19]
 8002430:	2104      	movs	r1, #4
 8002432:	485c      	ldr	r0, [pc, #368]	; (80025a4 <keypad_read+0x278>)
 8002434:	f001 ffd2 	bl	80043dc <HAL_GPIO_ReadPin>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f6      	beq.n	800242c <keypad_read+0x100>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[1][2];}	//6
 800243e:	e001      	b.n	8002444 <keypad_read+0x118>
 8002440:	79bb      	ldrb	r3, [r7, #6]
 8002442:	74fb      	strb	r3, [r7, #19]
 8002444:	2101      	movs	r1, #1
 8002446:	4857      	ldr	r0, [pc, #348]	; (80025a4 <keypad_read+0x278>)
 8002448:	f001 ffc8 	bl	80043dc <HAL_GPIO_ReadPin>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f6      	beq.n	8002440 <keypad_read+0x114>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[1][3];}	//B
 8002452:	e001      	b.n	8002458 <keypad_read+0x12c>
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	74fb      	strb	r3, [r7, #19]
 8002458:	2110      	movs	r1, #16
 800245a:	4853      	ldr	r0, [pc, #332]	; (80025a8 <keypad_read+0x27c>)
 800245c:	f001 ffbe 	bl	80043dc <HAL_GPIO_ReadPin>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f6      	beq.n	8002454 <keypad_read+0x128>
		}

		if(i==2){
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d143      	bne.n	80024f4 <keypad_read+0x1c8>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 800246c:	2201      	movs	r2, #1
 800246e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002472:	484c      	ldr	r0, [pc, #304]	; (80025a4 <keypad_read+0x278>)
 8002474:	f001 ffca 	bl	800440c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 8002478:	2201      	movs	r2, #1
 800247a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800247e:	4848      	ldr	r0, [pc, #288]	; (80025a0 <keypad_read+0x274>)
 8002480:	f001 ffc4 	bl	800440c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8002484:	2201      	movs	r2, #1
 8002486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800248a:	4845      	ldr	r0, [pc, #276]	; (80025a0 <keypad_read+0x274>)
 800248c:	f001 ffbe 	bl	800440c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_RESET);
 8002490:	2200      	movs	r2, #0
 8002492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002496:	4842      	ldr	r0, [pc, #264]	; (80025a0 <keypad_read+0x274>)
 8002498:	f001 ffb8 	bl	800440c <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 800249c:	200a      	movs	r0, #10
 800249e:	f000 fe4d 	bl	800313c <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[2][0];}	//7
 80024a2:	e001      	b.n	80024a8 <keypad_read+0x17c>
 80024a4:	7a3b      	ldrb	r3, [r7, #8]
 80024a6:	74fb      	strb	r3, [r7, #19]
 80024a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ac:	483c      	ldr	r0, [pc, #240]	; (80025a0 <keypad_read+0x274>)
 80024ae:	f001 ff95 	bl	80043dc <HAL_GPIO_ReadPin>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f5      	beq.n	80024a4 <keypad_read+0x178>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[2][1];}	//8
 80024b8:	e001      	b.n	80024be <keypad_read+0x192>
 80024ba:	7a7b      	ldrb	r3, [r7, #9]
 80024bc:	74fb      	strb	r3, [r7, #19]
 80024be:	2104      	movs	r1, #4
 80024c0:	4838      	ldr	r0, [pc, #224]	; (80025a4 <keypad_read+0x278>)
 80024c2:	f001 ff8b 	bl	80043dc <HAL_GPIO_ReadPin>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f6      	beq.n	80024ba <keypad_read+0x18e>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[2][2];}	//9
 80024cc:	e001      	b.n	80024d2 <keypad_read+0x1a6>
 80024ce:	7abb      	ldrb	r3, [r7, #10]
 80024d0:	74fb      	strb	r3, [r7, #19]
 80024d2:	2101      	movs	r1, #1
 80024d4:	4833      	ldr	r0, [pc, #204]	; (80025a4 <keypad_read+0x278>)
 80024d6:	f001 ff81 	bl	80043dc <HAL_GPIO_ReadPin>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f6      	beq.n	80024ce <keypad_read+0x1a2>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[2][3];}	//C
 80024e0:	e001      	b.n	80024e6 <keypad_read+0x1ba>
 80024e2:	7afb      	ldrb	r3, [r7, #11]
 80024e4:	74fb      	strb	r3, [r7, #19]
 80024e6:	2110      	movs	r1, #16
 80024e8:	482f      	ldr	r0, [pc, #188]	; (80025a8 <keypad_read+0x27c>)
 80024ea:	f001 ff77 	bl	80043dc <HAL_GPIO_ReadPin>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f6      	beq.n	80024e2 <keypad_read+0x1b6>
		}

		if(i==3){
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d143      	bne.n	8002582 <keypad_read+0x256>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 80024fa:	2201      	movs	r2, #1
 80024fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002500:	4828      	ldr	r0, [pc, #160]	; (80025a4 <keypad_read+0x278>)
 8002502:	f001 ff83 	bl	800440c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 8002506:	2201      	movs	r2, #1
 8002508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800250c:	4824      	ldr	r0, [pc, #144]	; (80025a0 <keypad_read+0x274>)
 800250e:	f001 ff7d 	bl	800440c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_SET);
 8002512:	2201      	movs	r2, #1
 8002514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002518:	4821      	ldr	r0, [pc, #132]	; (80025a0 <keypad_read+0x274>)
 800251a:	f001 ff77 	bl	800440c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_RESET);
 800251e:	2200      	movs	r2, #0
 8002520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002524:	481e      	ldr	r0, [pc, #120]	; (80025a0 <keypad_read+0x274>)
 8002526:	f001 ff71 	bl	800440c <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 800252a:	200a      	movs	r0, #10
 800252c:	f000 fe06 	bl	800313c <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[3][0];}	//*
 8002530:	e001      	b.n	8002536 <keypad_read+0x20a>
 8002532:	7b3b      	ldrb	r3, [r7, #12]
 8002534:	74fb      	strb	r3, [r7, #19]
 8002536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800253a:	4819      	ldr	r0, [pc, #100]	; (80025a0 <keypad_read+0x274>)
 800253c:	f001 ff4e 	bl	80043dc <HAL_GPIO_ReadPin>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f5      	beq.n	8002532 <keypad_read+0x206>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[3][1];}	//0
 8002546:	e001      	b.n	800254c <keypad_read+0x220>
 8002548:	7b7b      	ldrb	r3, [r7, #13]
 800254a:	74fb      	strb	r3, [r7, #19]
 800254c:	2104      	movs	r1, #4
 800254e:	4815      	ldr	r0, [pc, #84]	; (80025a4 <keypad_read+0x278>)
 8002550:	f001 ff44 	bl	80043dc <HAL_GPIO_ReadPin>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f6      	beq.n	8002548 <keypad_read+0x21c>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[3][2];}	//+
 800255a:	e001      	b.n	8002560 <keypad_read+0x234>
 800255c:	7bbb      	ldrb	r3, [r7, #14]
 800255e:	74fb      	strb	r3, [r7, #19]
 8002560:	2101      	movs	r1, #1
 8002562:	4810      	ldr	r0, [pc, #64]	; (80025a4 <keypad_read+0x278>)
 8002564:	f001 ff3a 	bl	80043dc <HAL_GPIO_ReadPin>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f6      	beq.n	800255c <keypad_read+0x230>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[3][3];}	//D
 800256e:	e001      	b.n	8002574 <keypad_read+0x248>
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	74fb      	strb	r3, [r7, #19]
 8002574:	2110      	movs	r1, #16
 8002576:	480c      	ldr	r0, [pc, #48]	; (80025a8 <keypad_read+0x27c>)
 8002578:	f001 ff30 	bl	80043dc <HAL_GPIO_ReadPin>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f6      	beq.n	8002570 <keypad_read+0x244>
	for(i=0;i<4;i++){
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3301      	adds	r3, #1
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2b03      	cmp	r3, #3
 800258c:	f77f aedd 	ble.w	800234a <keypad_read+0x1e>
		}
	}
	
	return valor;
 8002590:	7cfb      	ldrb	r3, [r7, #19]
}
 8002592:	4618      	mov	r0, r3
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd90      	pop	{r4, r7, pc}
 800259a:	bf00      	nop
 800259c:	08008f0c 	.word	0x08008f0c
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40020800 	.word	0x40020800

080025ac <hi2cx_define>:
*/
I2C_HandleTypeDef hi2cx;
extern I2C_HandleTypeDef hi2c1; //* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type(i2c1,i2c2...) you use, default is hi2c1.
                                //That I2C_HandleTypeDef hi2c1 comes from main.c*.
static void hi2cx_define(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
	hi2cx = hi2c1;	//* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type you use, default is hi2c1.
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <hi2cx_define+0x18>)
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <hi2cx_define+0x1c>)
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	2354      	movs	r3, #84	; 0x54
 80025ba:	461a      	mov	r2, r3
 80025bc:	f005 ff98 	bl	80084f0 <memcpy>
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	200004f8 	.word	0x200004f8
 80025c8:	200001a8 	.word	0x200001a8

080025cc <LCD_i2cDeviceCheck>:
/**
*@brief: Lcd i2c device check.
*@retval: none
*/
void LCD_i2cDeviceCheck(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
	/* Checks if target device is ready for communication. */
	/* 3 is number of trials, 1000ms is timeout */
	HAL_Delay(50);
 80025d0:	2032      	movs	r0, #50	; 0x32
 80025d2:	f000 fdb3 	bl	800313c <HAL_Delay>
	hi2cx_define();
 80025d6:	f7ff ffe9 	bl	80025ac <hi2cx_define>
	while (HAL_I2C_IsDeviceReady(&hi2cx, i2cDeviceAddr, 3, 1000) != HAL_OK) 
 80025da:	bf00      	nop
 80025dc:	4b07      	ldr	r3, [pc, #28]	; (80025fc <LCD_i2cDeviceCheck+0x30>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b299      	uxth	r1, r3
 80025e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e6:	2203      	movs	r2, #3
 80025e8:	4805      	ldr	r0, [pc, #20]	; (8002600 <LCD_i2cDeviceCheck+0x34>)
 80025ea:	f002 f96b 	bl	80048c4 <HAL_I2C_IsDeviceReady>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f3      	bne.n	80025dc <LCD_i2cDeviceCheck+0x10>
	{	
		
	}
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000010 	.word	0x20000010
 8002600:	200004f8 	.word	0x200004f8

08002604 <LCD_Set_Command>:
/**
*@brief: Send commands to lcd.
*@retval: none
*/
void LCD_Set_Command(uint8_t cmd)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af02      	add	r7, sp, #8
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
	data_M = cmd & Mask_Data;        //Most significant bit
 800260e:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <LCD_Set_Command+0x9c>)
 8002610:	781a      	ldrb	r2, [r3, #0]
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	4013      	ands	r3, r2
 8002616:	b2da      	uxtb	r2, r3
 8002618:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <LCD_Set_Command+0xa0>)
 800261a:	701a      	strb	r2, [r3, #0]
	data_L = (cmd << 4) & Mask_Data; //Least significant bit
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	b25a      	sxtb	r2, r3
 8002622:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <LCD_Set_Command+0x9c>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b25b      	sxtb	r3, r3
 8002628:	4013      	ands	r3, r2
 800262a:	b25b      	sxtb	r3, r3
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <LCD_Set_Command+0xa4>)
 8002630:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 8002632:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <LCD_Set_Command+0xa0>)
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <LCD_Set_Command+0xa8>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <LCD_Set_Command+0xa0>)
 8002640:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <LCD_Set_Command+0xa4>)
 8002644:	781a      	ldrb	r2, [r3, #0]
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <LCD_Set_Command+0xa8>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <LCD_Set_Command+0xa4>)
 8002650:	701a      	strb	r2, [r3, #0]
	
	data[0] = data_M | LCD_E;  //Enable E pin, RS=0
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <LCD_Set_Command+0xa0>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	b2da      	uxtb	r2, r3
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <LCD_Set_Command+0xac>)
 800265e:	701a      	strb	r2, [r3, #0]
	data[1] = data_M;          //Disable E pin, RS=0
 8002660:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <LCD_Set_Command+0xa0>)
 8002662:	781a      	ldrb	r2, [r3, #0]
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <LCD_Set_Command+0xac>)
 8002666:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E;
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <LCD_Set_Command+0xa4>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <LCD_Set_Command+0xac>)
 8002674:	709a      	strb	r2, [r3, #2]
  data[3] = data_L;
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <LCD_Set_Command+0xa4>)
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <LCD_Set_Command+0xac>)
 800267c:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();	
 800267e:	f7ff ff95 	bl	80025ac <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <LCD_Set_Command+0xb0>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b299      	uxth	r1, r3
 8002688:	23c8      	movs	r3, #200	; 0xc8
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2304      	movs	r3, #4
 800268e:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <LCD_Set_Command+0xac>)
 8002690:	4809      	ldr	r0, [pc, #36]	; (80026b8 <LCD_Set_Command+0xb4>)
 8002692:	f002 f819 	bl	80046c8 <HAL_I2C_Master_Transmit>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000011 	.word	0x20000011
 80026a4:	20000550 	.word	0x20000550
 80026a8:	20000551 	.word	0x20000551
 80026ac:	20000552 	.word	0x20000552
 80026b0:	2000054c 	.word	0x2000054c
 80026b4:	20000010 	.word	0x20000010
 80026b8:	200004f8 	.word	0x200004f8

080026bc <LCD_Write_Data>:
/**
*@brief: Write data to lcd.
*@retval: none
*/
void LCD_Write_Data(uint8_t datax)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
	data_M = datax & Mask_Data;        //Most significant bit
 80026c6:	4b27      	ldr	r3, [pc, #156]	; (8002764 <LCD_Write_Data+0xa8>)
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	4013      	ands	r3, r2
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b25      	ldr	r3, [pc, #148]	; (8002768 <LCD_Write_Data+0xac>)
 80026d2:	701a      	strb	r2, [r3, #0]
	data_L = (datax << 4) & Mask_Data; //Least significant bit
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	b25a      	sxtb	r2, r3
 80026da:	4b22      	ldr	r3, [pc, #136]	; (8002764 <LCD_Write_Data+0xa8>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b25b      	sxtb	r3, r3
 80026e0:	4013      	ands	r3, r2
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4b21      	ldr	r3, [pc, #132]	; (800276c <LCD_Write_Data+0xb0>)
 80026e8:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 80026ea:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <LCD_Write_Data+0xac>)
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <LCD_Write_Data+0xb4>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <LCD_Write_Data+0xac>)
 80026f8:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <LCD_Write_Data+0xb0>)
 80026fc:	781a      	ldrb	r2, [r3, #0]
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <LCD_Write_Data+0xb4>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4b19      	ldr	r3, [pc, #100]	; (800276c <LCD_Write_Data+0xb0>)
 8002708:	701a      	strb	r2, [r3, #0]
	 	
	data[0] = data_M | LCD_E|LCD_RS;  //Enable E pin, RS=1
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <LCD_Write_Data+0xac>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	f043 0305 	orr.w	r3, r3, #5
 8002712:	b2da      	uxtb	r2, r3
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <LCD_Write_Data+0xb8>)
 8002716:	701a      	strb	r2, [r3, #0]
	data[1] = data_M | LCD_RS;        //Disable E pin, RS=1
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <LCD_Write_Data+0xac>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <LCD_Write_Data+0xb8>)
 8002724:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E|LCD_RS;
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <LCD_Write_Data+0xb0>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	f043 0305 	orr.w	r3, r3, #5
 800272e:	b2da      	uxtb	r2, r3
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <LCD_Write_Data+0xb8>)
 8002732:	709a      	strb	r2, [r3, #2]
  data[3] = data_L | LCD_RS;  
 8002734:	4b0d      	ldr	r3, [pc, #52]	; (800276c <LCD_Write_Data+0xb0>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <LCD_Write_Data+0xb8>)
 8002740:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();
 8002742:	f7ff ff33 	bl	80025ac <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <LCD_Write_Data+0xbc>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b299      	uxth	r1, r3
 800274c:	23c8      	movs	r3, #200	; 0xc8
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2304      	movs	r3, #4
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <LCD_Write_Data+0xb8>)
 8002754:	4809      	ldr	r0, [pc, #36]	; (800277c <LCD_Write_Data+0xc0>)
 8002756:	f001 ffb7 	bl	80046c8 <HAL_I2C_Master_Transmit>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000011 	.word	0x20000011
 8002768:	20000550 	.word	0x20000550
 800276c:	20000551 	.word	0x20000551
 8002770:	20000552 	.word	0x20000552
 8002774:	2000054c 	.word	0x2000054c
 8002778:	20000010 	.word	0x20000010
 800277c:	200004f8 	.word	0x200004f8

08002780 <LCD_Clear>:
/**
*@brief: Clear lcd display.
*@retval: none
*/
void LCD_Clear(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 8002784:	2001      	movs	r0, #1
 8002786:	f7ff ff3d 	bl	8002604 <LCD_Set_Command>
	HAL_Delay(10);
 800278a:	200a      	movs	r0, #10
 800278c:	f000 fcd6 	bl	800313c <HAL_Delay>
	str_len = 0;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <LCD_Clear+0x20>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
	line_pos = 1;
 8002796:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <LCD_Clear+0x24>)
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000553 	.word	0x20000553
 80027a4:	20000012 	.word	0x20000012

080027a8 <LCD_SetCursor>:
*@brief: Set lcd cursor position.
*@param: line_x: line no, chr_x: character no.
*@retval: none
*/
void LCD_SetCursor(int line_x, int chr_x)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  line_pos = line_x; //hold line position.	
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <LCD_SetCursor+0x58>)
 80027b8:	701a      	strb	r2, [r3, #0]
	
	if(((line_x >=1 && line_x <= line_MAX) && (chr_x >=1 && chr_x <= chr_MAX)))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	dd1b      	ble.n	80027f8 <LCD_SetCursor+0x50>
 80027c0:	2302      	movs	r3, #2
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4293      	cmp	r3, r2
 80027c8:	dc16      	bgt.n	80027f8 <LCD_SetCursor+0x50>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	dd13      	ble.n	80027f8 <LCD_SetCursor+0x50>
 80027d0:	2310      	movs	r3, #16
 80027d2:	461a      	mov	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4293      	cmp	r3, r2
 80027d8:	dc0e      	bgt.n	80027f8 <LCD_SetCursor+0x50>
	{		
		LCD_Set_Command(LCD_SET_DDRAMADDR | Cursor_Data[line_x - 1][chr_x - 1]);		
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	1e5a      	subs	r2, r3, #1
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	4908      	ldr	r1, [pc, #32]	; (8002804 <LCD_SetCursor+0x5c>)
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	440a      	add	r2, r1
 80027e8:	4413      	add	r3, r2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ff06 	bl	8002604 <LCD_Set_Command>
	}
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000012 	.word	0x20000012
 8002804:	08008f5c 	.word	0x08008f5c

08002808 <LCD_Send_String>:
*@brief: Send string data to lcd.
*@param: str[]: string array, mode: str slide/noslide.
*@retval: none
*/
void LCD_Send_String(char str[], uint8_t mode)
{	 
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
	static char *buffer[100];
	static uint8_t i[4] = {chr_MAX,chr_MAX,chr_MAX,chr_MAX}; //i follows the ch position while sliding.
  static uint8_t c[4] = {0, 0, 0, 0}; //c follows the each ch of the str buffer while sliding.
  static uint8_t ch_len = 0; //follow the string lenght.
  str_len = 0;
 8002814:	4b51      	ldr	r3, [pc, #324]	; (800295c <LCD_Send_String+0x154>)
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
	

	switch(mode)
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01e      	beq.n	800285e <LCD_Send_String+0x56>
 8002820:	2b01      	cmp	r3, #1
 8002822:	d021      	beq.n	8002868 <LCD_Send_String+0x60>
					}												
			}
		 			
			break;	 
	}	
}
 8002824:	e096      	b.n	8002954 <LCD_Send_String+0x14c>
				LCD_Write_Data (*str++);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff44 	bl	80026bc <LCD_Write_Data>
				str_len++;
 8002834:	4b49      	ldr	r3, [pc, #292]	; (800295c <LCD_Send_String+0x154>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b47      	ldr	r3, [pc, #284]	; (800295c <LCD_Send_String+0x154>)
 800283e:	701a      	strb	r2, [r3, #0]
				if(str_len == chr_MAX)
 8002840:	4b46      	ldr	r3, [pc, #280]	; (800295c <LCD_Send_String+0x154>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2210      	movs	r2, #16
 8002846:	4293      	cmp	r3, r2
 8002848:	d109      	bne.n	800285e <LCD_Send_String+0x56>
					LCD_SetCursor(line_pos + 1, 1);
 800284a:	4b45      	ldr	r3, [pc, #276]	; (8002960 <LCD_Send_String+0x158>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	3301      	adds	r3, #1
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ffa8 	bl	80027a8 <LCD_SetCursor>
					str_len = 0;
 8002858:	4b40      	ldr	r3, [pc, #256]	; (800295c <LCD_Send_String+0x154>)
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
			while (*str) 
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1df      	bne.n	8002826 <LCD_Send_String+0x1e>
			break;
 8002866:	e075      	b.n	8002954 <LCD_Send_String+0x14c>
		  for(int a = 0; a < BFR_MAX; a++)
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	e009      	b.n	8002882 <LCD_Send_String+0x7a>
		  buffer[a]=str++;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	493b      	ldr	r1, [pc, #236]	; (8002964 <LCD_Send_String+0x15c>)
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		  for(int a = 0; a < BFR_MAX; a++)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3301      	adds	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	2364      	movs	r3, #100	; 0x64
 8002884:	461a      	mov	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4293      	cmp	r3, r2
 800288a:	dbf0      	blt.n	800286e <LCD_Send_String+0x66>
			ch_len = strlen(*buffer);
 800288c:	4b35      	ldr	r3, [pc, #212]	; (8002964 <LCD_Send_String+0x15c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7fd fca5 	bl	80001e0 <strlen>
 8002896:	4603      	mov	r3, r0
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b33      	ldr	r3, [pc, #204]	; (8002968 <LCD_Send_String+0x160>)
 800289c:	701a      	strb	r2, [r3, #0]
			LCD_SetCursor(line_pos, i[line_pos - 1]);	
 800289e:	4b30      	ldr	r3, [pc, #192]	; (8002960 <LCD_Send_String+0x158>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	4b2e      	ldr	r3, [pc, #184]	; (8002960 <LCD_Send_String+0x158>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	4a30      	ldr	r2, [pc, #192]	; (800296c <LCD_Send_String+0x164>)
 80028ac:	5cd3      	ldrb	r3, [r2, r3]
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7ff ff7a 	bl	80027a8 <LCD_SetCursor>
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 80028b4:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <LCD_Send_String+0x158>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	4a2d      	ldr	r2, [pc, #180]	; (8002970 <LCD_Send_String+0x168>)
 80028bc:	5cd3      	ldrb	r3, [r2, r3]
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	e00a      	b.n	80028d8 <LCD_Send_String+0xd0>
			LCD_Write_Data (*buffer[k]);
 80028c2:	4a28      	ldr	r2, [pc, #160]	; (8002964 <LCD_Send_String+0x15c>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fef5 	bl	80026bc <LCD_Write_Data>
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3301      	adds	r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <LCD_Send_String+0x160>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4293      	cmp	r3, r2
 80028e2:	dbee      	blt.n	80028c2 <LCD_Send_String+0xba>
			i[line_pos - 1]--;
 80028e4:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <LCD_Send_String+0x158>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	4a20      	ldr	r2, [pc, #128]	; (800296c <LCD_Send_String+0x164>)
 80028ec:	5cd2      	ldrb	r2, [r2, r3]
 80028ee:	3a01      	subs	r2, #1
 80028f0:	b2d1      	uxtb	r1, r2
 80028f2:	4a1e      	ldr	r2, [pc, #120]	; (800296c <LCD_Send_String+0x164>)
 80028f4:	54d1      	strb	r1, [r2, r3]
			if(i[line_pos -1] == 0)
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <LCD_Send_String+0x158>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	4a1b      	ldr	r2, [pc, #108]	; (800296c <LCD_Send_String+0x164>)
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d126      	bne.n	8002952 <LCD_Send_String+0x14a>
				i[line_pos - 1] = 1;
 8002904:	4b16      	ldr	r3, [pc, #88]	; (8002960 <LCD_Send_String+0x158>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	3b01      	subs	r3, #1
 800290a:	4a18      	ldr	r2, [pc, #96]	; (800296c <LCD_Send_String+0x164>)
 800290c:	2101      	movs	r1, #1
 800290e:	54d1      	strb	r1, [r2, r3]
				c[line_pos - 1]++;
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <LCD_Send_String+0x158>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	3b01      	subs	r3, #1
 8002916:	4a16      	ldr	r2, [pc, #88]	; (8002970 <LCD_Send_String+0x168>)
 8002918:	5cd2      	ldrb	r2, [r2, r3]
 800291a:	3201      	adds	r2, #1
 800291c:	b2d1      	uxtb	r1, r2
 800291e:	4a14      	ldr	r2, [pc, #80]	; (8002970 <LCD_Send_String+0x168>)
 8002920:	54d1      	strb	r1, [r2, r3]
        if(c[line_pos - 1] == ch_len)
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <LCD_Send_String+0x158>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	3b01      	subs	r3, #1
 8002928:	4a11      	ldr	r2, [pc, #68]	; (8002970 <LCD_Send_String+0x168>)
 800292a:	5cd2      	ldrb	r2, [r2, r3]
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <LCD_Send_String+0x160>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d10e      	bne.n	8002952 <LCD_Send_String+0x14a>
						i[line_pos - 1] = chr_MAX;
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <LCD_Send_String+0x158>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	3b01      	subs	r3, #1
 800293a:	2110      	movs	r1, #16
 800293c:	4a0b      	ldr	r2, [pc, #44]	; (800296c <LCD_Send_String+0x164>)
 800293e:	54d1      	strb	r1, [r2, r3]
						c[line_pos - 1] = 0;
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <LCD_Send_String+0x158>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	3b01      	subs	r3, #1
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <LCD_Send_String+0x168>)
 8002948:	2100      	movs	r1, #0
 800294a:	54d1      	strb	r1, [r2, r3]
						ch_len = 0;						
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <LCD_Send_String+0x160>)
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
			break;	 
 8002952:	bf00      	nop
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000553 	.word	0x20000553
 8002960:	20000012 	.word	0x20000012
 8002964:	20000554 	.word	0x20000554
 8002968:	200006e4 	.word	0x200006e4
 800296c:	20000014 	.word	0x20000014
 8002970:	200006e8 	.word	0x200006e8

08002974 <LCD_Print>:
*@brief: Print value, ch to lcd.
*@param: *ch: "string + %f", value: float data variable
*@retval: none
*/
void LCD_Print(char const *ch, float value)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b09c      	sub	sp, #112	; 0x70
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	ed87 0a00 	vstr	s0, [r7]
	char data_ch[100]; //default data size:100.
	
	sprintf(data_ch, ch, value);
 8002980:	6838      	ldr	r0, [r7, #0]
 8002982:	f7fd fde9 	bl	8000558 <__aeabi_f2d>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	f107 000c 	add.w	r0, r7, #12
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	f005 fdc4 	bl	800851c <siprintf>
	LCD_Send_String(data_ch, STR_NOSLIDE);	
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ff34 	bl	8002808 <LCD_Send_String>
}
 80029a0:	bf00      	nop
 80029a2:	3770      	adds	r7, #112	; 0x70
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <LCD_BackLight>:
*@brief: Backlight control
*@param: light_state: BL on/off
*@retval: none
*/
void LCD_BackLight(uint8_t light_state)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
	if(light_state == LCD_BL_ON)
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d106      	bne.n	80029c6 <LCD_BackLight+0x1e>
	{
    data_BL = LCD_BL_ON;		
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <LCD_BackLight+0x38>)
 80029ba:	2208      	movs	r2, #8
 80029bc:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20); //Empty character
 80029be:	2020      	movs	r0, #32
 80029c0:	f7ff fe7c 	bl	80026bc <LCD_Write_Data>
	else if (light_state == LCD_BL_OFF)
	{
		data_BL = LCD_BL_OFF;
		LCD_Write_Data(0x20);
	}
}
 80029c4:	e008      	b.n	80029d8 <LCD_BackLight+0x30>
	else if (light_state == LCD_BL_OFF)
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <LCD_BackLight+0x30>
		data_BL = LCD_BL_OFF;
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <LCD_BackLight+0x38>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20);
 80029d2:	2020      	movs	r0, #32
 80029d4:	f7ff fe72 	bl	80026bc <LCD_Write_Data>
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000552 	.word	0x20000552

080029e4 <LCD_Init>:
/**
*@brief: Lcd initiliazing settings.
*@retval: none
*/
void LCD_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7ff fe0b 	bl	8002604 <LCD_Set_Command>
	HAL_Delay(1000);
 80029ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029f2:	f000 fba3 	bl	800313c <HAL_Delay>
	LCD_Set_Command(LCD_RETURN_HOME);
 80029f6:	2002      	movs	r0, #2
 80029f8:	f7ff fe04 	bl	8002604 <LCD_Set_Command>
	HAL_Delay(5);
 80029fc:	2005      	movs	r0, #5
 80029fe:	f000 fb9d 	bl	800313c <HAL_Delay>
	LCD_Set_Command(LCD_FUNCTION_SET|MODE_4B|MODE_2L|MODE_5X8_DOTS);
 8002a02:	2028      	movs	r0, #40	; 0x28
 8002a04:	f7ff fdfe 	bl	8002604 <LCD_Set_Command>
	HAL_Delay(5);
 8002a08:	2005      	movs	r0, #5
 8002a0a:	f000 fb97 	bl	800313c <HAL_Delay>
	LCD_Set_Command(LCD_DISPLAY_CONTROL|DISPLAY_ON|CURSOR_OFF|BLINK_OFF);
 8002a0e:	200c      	movs	r0, #12
 8002a10:	f7ff fdf8 	bl	8002604 <LCD_Set_Command>
	HAL_Delay(5);
 8002a14:	2005      	movs	r0, #5
 8002a16:	f000 fb91 	bl	800313c <HAL_Delay>
	LCD_Set_Command(LCD_SET_DDRAMADDR);
 8002a1a:	2080      	movs	r0, #128	; 0x80
 8002a1c:	f7ff fdf2 	bl	8002604 <LCD_Set_Command>
	HAL_Delay(500);
 8002a20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a24:	f000 fb8a 	bl	800313c <HAL_Delay>
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a2c:	b5b0      	push	{r4, r5, r7, lr}
 8002a2e:	b08c      	sub	sp, #48	; 0x30
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    BSP_Init();
 8002a32:	f7fe fbbf 	bl	80011b4 <BSP_Init>
    APP_Show_SystemIntro();
 8002a36:	f000 f859 	bl	8002aec <APP_Show_SystemIntro>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  int estado_cortina = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int cortina_manual = 0;        //bandera si se presiona de manera manual la cortina
 8002a3e:	2300      	movs	r3, #0
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
  int rangohmin = 50;
 8002a42:	2332      	movs	r3, #50	; 0x32
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  int rangohmax = 60;            //REVISAR RANGO INICIAL DE HUMEDAD
 8002a46:	233c      	movs	r3, #60	; 0x3c
 8002a48:	623b      	str	r3, [r7, #32]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002a4a:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <main+0x70>)
 8002a4c:	1d3c      	adds	r4, r7, #4
 8002a4e:	461d      	mov	r5, r3
 8002a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 fafe 	bl	8007062 <osThreadCreate>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <main+0x74>)
 8002a6a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002a6c:	f004 faf2 	bl	8007054 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */
      //htim2.Instance->CCR1 = 50; //ANGULO 45 GRADOS REVISAR SI NO ROME SERVO ESTANDO EN BUCLE
///Teclado
      APP_Keypad(rangohmin, rangohmax, estado_cortina, cortina_manual);
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a74:	6a39      	ldr	r1, [r7, #32]
 8002a76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a78:	f000 f854 	bl	8002b24 <APP_Keypad>
///DHT22
      APP_Show_DHT22();
 8002a7c:	f000 f864 	bl	8002b48 <APP_Show_DHT22>
///Sensor humedad de suelo
      APP_Show_SoilHumidity();
 8002a80:	f000 f88f 	bl	8002ba2 <APP_Show_SoilHumidity>
      ///Sensor movimiento
      APP_Show_Movement();
 8002a84:	f000 f87a 	bl	8002b7c <APP_Show_Movement>
///Cerrar o abrir cortina por temperatura
      APP_CoverFromTemperature(estado_cortina, cortina_manual);
 8002a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a8c:	f000 f87c 	bl	8002b88 <APP_CoverFromTemperature>
///Valvula solenoide riego
      APP_Irrigation(rangohmin, rangohmax);
 8002a90:	6a39      	ldr	r1, [r7, #32]
 8002a92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a94:	f000 f88b 	bl	8002bae <APP_Irrigation>
      APP_Keypad(rangohmin, rangohmax, estado_cortina, cortina_manual);
 8002a98:	e7ea      	b.n	8002a70 <main+0x44>
 8002a9a:	bf00      	nop
 8002a9c:	08008f28 	.word	0x08008f28
 8002aa0:	200006ec 	.word	0x200006ec

08002aa4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002aac:	2001      	movs	r0, #1
 8002aae:	f004 fb24 	bl	80070fa <osDelay>
 8002ab2:	e7fb      	b.n	8002aac <StartDefaultTask+0x8>

08002ab4 <APP_Timer10ms>:
}




void APP_Timer10ms(){
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0

}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <APP_Timer100ms>:
void APP_Timer100ms(){
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0

}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <APP_Timer1000ms>:
void APP_Timer1000ms(){
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0

}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <APP_Timer10s>:
void APP_Timer10s(){
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0

}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <APP_Show_SystemIntro>:
void APP_Show_SystemIntro(){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
    LCD_i2cDeviceCheck();
 8002af0:	f7ff fd6c 	bl	80025cc <LCD_i2cDeviceCheck>
    LCD_BackLight(LCD_BL_ON);
 8002af4:	2008      	movs	r0, #8
 8002af6:	f7ff ff57 	bl	80029a8 <LCD_BackLight>
    LCD_SetCursor(1,1);
 8002afa:	2101      	movs	r1, #1
 8002afc:	2001      	movs	r0, #1
 8002afe:	f7ff fe53 	bl	80027a8 <LCD_SetCursor>
    LCD_Clear();
 8002b02:	f7ff fe3d 	bl	8002780 <LCD_Clear>
    LCD_Print("Cargando Datos",1);
 8002b06:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b0a:	4805      	ldr	r0, [pc, #20]	; (8002b20 <APP_Show_SystemIntro+0x34>)
 8002b0c:	f7ff ff32 	bl	8002974 <LCD_Print>
    BSP_Delay(4000);
 8002b10:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002b14:	f7fe fbdc 	bl	80012d0 <BSP_Delay>
    LCD_Clear();
 8002b18:	f7ff fe32 	bl	8002780 <LCD_Clear>
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	08008f44 	.word	0x08008f44

08002b24 <APP_Keypad>:

void APP_Keypad(int rangohmin, int rangohmax, int estado_cortina, int cortina_manual){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
    BSP_Keypad(rangohmin, rangohmax, estado_cortina, cortina_manual);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7fe fd73 	bl	8001624 <BSP_Keypad>
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <APP_Show_DHT22>:

void APP_Show_DHT22(){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
    LCD_Clear();  //REVISAR necesidad de esta funcion
 8002b4c:	f7ff fe18 	bl	8002780 <LCD_Clear>
    DHT_GetData(&DHT22);
 8002b50:	4809      	ldr	r0, [pc, #36]	; (8002b78 <APP_Show_DHT22+0x30>)
 8002b52:	f7fe fa13 	bl	8000f7c <DHT_GetData>
    BSP_LCD_Temperature(DHT22.Temperature);
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <APP_Show_DHT22+0x30>)
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b60:	f7fe fbc4 	bl	80012ec <BSP_LCD_Temperature>
    BSP_LCD_Humidity(DHT22.Humidity);
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <APP_Show_DHT22+0x30>)
 8002b66:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6e:	f7fe fbd1 	bl	8001314 <BSP_LCD_Humidity>
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	2000029c 	.word	0x2000029c

08002b7c <APP_Show_Movement>:

void APP_Show_Movement(){
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
    BSP_Detect_Movement();
 8002b80:	f7fe fc0a 	bl	8001398 <BSP_Detect_Movement>
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <APP_CoverFromTemperature>:

void APP_CoverFromTemperature(int estado_cortina, int cortina_manual){
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
    BSP_CoverFromTemperature(estado_cortina, cortina_manual);
 8002b92:	6839      	ldr	r1, [r7, #0]
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7fe fc2d 	bl	80013f4 <BSP_CoverFromTemperature>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <APP_Show_SoilHumidity>:

void APP_Show_SoilHumidity(){
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	af00      	add	r7, sp, #0
    BSP_Show_SoilHumidity();
 8002ba6:	f7fe fca1 	bl	80014ec <BSP_Show_SoilHumidity>
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}

08002bae <APP_Irrigation>:

void APP_Irrigation(int rangohmin, int rangohmax){
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
    BSP_Irrigation(rangohmin, rangohmax);
 8002bb8:	6839      	ldr	r1, [r7, #0]
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe fcce 	bl	800155c <BSP_Irrigation>
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_MspInit+0x4c>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_MspInit+0x4c>)
 8002bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <HAL_MspInit+0x4c>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <HAL_MspInit+0x4c>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	4a08      	ldr	r2, [pc, #32]	; (8002c14 <HAL_MspInit+0x4c>)
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_MspInit+0x4c>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800

08002c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2e      	ldr	r2, [pc, #184]	; (8002cf0 <HAL_ADC_MspInit+0xd8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d156      	bne.n	8002ce8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	4b2d      	ldr	r3, [pc, #180]	; (8002cf4 <HAL_ADC_MspInit+0xdc>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	4a2c      	ldr	r2, [pc, #176]	; (8002cf4 <HAL_ADC_MspInit+0xdc>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4a:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <HAL_ADC_MspInit+0xdc>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <HAL_ADC_MspInit+0xdc>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	4a25      	ldr	r2, [pc, #148]	; (8002cf4 <HAL_ADC_MspInit+0xdc>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6313      	str	r3, [r2, #48]	; 0x30
 8002c66:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <HAL_ADC_MspInit+0xdc>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8002c72:	231a      	movs	r3, #26
 8002c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c76:	2303      	movs	r3, #3
 8002c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	4619      	mov	r1, r3
 8002c84:	481c      	ldr	r0, [pc, #112]	; (8002cf8 <HAL_ADC_MspInit+0xe0>)
 8002c86:	f001 fa25 	bl	80040d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <HAL_ADC_MspInit+0xe4>)
 8002c8c:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <HAL_ADC_MspInit+0xe8>)
 8002c8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002c90:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <HAL_ADC_MspInit+0xe4>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c96:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_ADC_MspInit+0xe4>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c9c:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <HAL_ADC_MspInit+0xe4>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ca2:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <HAL_ADC_MspInit+0xe4>)
 8002ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <HAL_ADC_MspInit+0xe4>)
 8002cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cb0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_ADC_MspInit+0xe4>)
 8002cb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <HAL_ADC_MspInit+0xe4>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_ADC_MspInit+0xe4>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <HAL_ADC_MspInit+0xe4>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ccc:	480b      	ldr	r0, [pc, #44]	; (8002cfc <HAL_ADC_MspInit+0xe4>)
 8002cce:	f000 ff17 	bl	8003b00 <HAL_DMA_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002cd8:	f7ff fa56 	bl	8002188 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <HAL_ADC_MspInit+0xe4>)
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
 8002ce2:	4a06      	ldr	r2, [pc, #24]	; (8002cfc <HAL_ADC_MspInit+0xe4>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ce8:	bf00      	nop
 8002cea:	3728      	adds	r7, #40	; 0x28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40012000 	.word	0x40012000
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	20000148 	.word	0x20000148
 8002d00:	40026410 	.word	0x40026410

08002d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <HAL_I2C_MspInit+0x84>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d12c      	bne.n	8002d80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_I2C_MspInit+0x88>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <HAL_I2C_MspInit+0x88>)
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_I2C_MspInit+0x88>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002d42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d48:	2312      	movs	r3, #18
 8002d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d54:	2304      	movs	r3, #4
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	480c      	ldr	r0, [pc, #48]	; (8002d90 <HAL_I2C_MspInit+0x8c>)
 8002d60:	f001 f9b8 	bl	80040d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_I2C_MspInit+0x88>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <HAL_I2C_MspInit+0x88>)
 8002d6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_I2C_MspInit+0x88>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d80:	bf00      	nop
 8002d82:	3728      	adds	r7, #40	; 0x28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40005400 	.word	0x40005400
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40020400 	.word	0x40020400

08002d94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a08      	ldr	r2, [pc, #32]	; (8002dc4 <HAL_RTC_MspInit+0x30>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d10a      	bne.n	8002dbc <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <HAL_RTC_MspInit+0x34>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002dac:	2200      	movs	r2, #0
 8002dae:	2100      	movs	r1, #0
 8002db0:	2029      	movs	r0, #41	; 0x29
 8002db2:	f000 fe7b 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002db6:	2029      	movs	r0, #41	; 0x29
 8002db8:	f000 fe94 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40002800 	.word	0x40002800
 8002dc8:	42470e3c 	.word	0x42470e3c

08002dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ddc:	d10e      	bne.n	8002dfc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <HAL_TIM_Base_MspInit+0x64>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <HAL_TIM_Base_MspInit+0x64>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_TIM_Base_MspInit+0x64>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002dfa:	e012      	b.n	8002e22 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0c      	ldr	r2, [pc, #48]	; (8002e34 <HAL_TIM_Base_MspInit+0x68>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10d      	bne.n	8002e22 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_TIM_Base_MspInit+0x64>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <HAL_TIM_Base_MspInit+0x64>)
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	6413      	str	r3, [r2, #64]	; 0x40
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_TIM_Base_MspInit+0x64>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40000400 	.word	0x40000400

08002e38 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	f107 030c 	add.w	r3, r7, #12
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e58:	d11d      	bne.n	8002e96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_TIM_MspPostInit+0x68>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a0f      	ldr	r2, [pc, #60]	; (8002ea0 <HAL_TIM_MspPostInit+0x68>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <HAL_TIM_MspPostInit+0x68>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e76:	2320      	movs	r3, #32
 8002e78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e86:	2301      	movs	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8a:	f107 030c 	add.w	r3, r7, #12
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <HAL_TIM_MspPostInit+0x6c>)
 8002e92:	f001 f91f 	bl	80040d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e96:	bf00      	nop
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40020000 	.word	0x40020000

08002ea8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08c      	sub	sp, #48	; 0x30
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	2032      	movs	r0, #50	; 0x32
 8002ebe:	f000 fdf5 	bl	8003aac <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ec2:	2032      	movs	r0, #50	; 0x32
 8002ec4:	f000 fe0e 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <HAL_InitTick+0xa4>)
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	4a1e      	ldr	r2, [pc, #120]	; (8002f4c <HAL_InitTick+0xa4>)
 8002ed2:	f043 0308 	orr.w	r3, r3, #8
 8002ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <HAL_InitTick+0xa4>)
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ee4:	f107 0210 	add.w	r2, r7, #16
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f002 fc9a 	bl	8005828 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ef4:	f002 fc84 	bl	8005800 <HAL_RCC_GetPCLK1Freq>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <HAL_InitTick+0xa8>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0c9b      	lsrs	r3, r3, #18
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <HAL_InitTick+0xac>)
 8002f0e:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <HAL_InitTick+0xb0>)
 8002f10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_InitTick+0xac>)
 8002f14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f18:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002f1a:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <HAL_InitTick+0xac>)
 8002f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <HAL_InitTick+0xac>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f26:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_InitTick+0xac>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002f2c:	4809      	ldr	r0, [pc, #36]	; (8002f54 <HAL_InitTick+0xac>)
 8002f2e:	f003 f997 	bl	8006260 <HAL_TIM_Base_Init>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d104      	bne.n	8002f42 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8002f38:	4806      	ldr	r0, [pc, #24]	; (8002f54 <HAL_InitTick+0xac>)
 8002f3a:	f003 f9e0 	bl	80062fe <HAL_TIM_Base_Start_IT>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	e000      	b.n	8002f44 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3730      	adds	r7, #48	; 0x30
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	431bde83 	.word	0x431bde83
 8002f54:	200006f0 	.word	0x200006f0
 8002f58:	40000c00 	.word	0x40000c00

08002f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f6e:	e7fe      	b.n	8002f6e <HardFault_Handler+0x4>

08002f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <MemManage_Handler+0x4>

08002f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f7a:	e7fe      	b.n	8002f7a <BusFault_Handler+0x4>

08002f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <UsageFault_Handler+0x4>

08002f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002f94:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <RTC_Alarm_IRQHandler+0x10>)
 8002f96:	f003 f897 	bl	80060c8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200001fc 	.word	0x200001fc

08002fa4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002fa8:	4802      	ldr	r0, [pc, #8]	; (8002fb4 <TIM5_IRQHandler+0x10>)
 8002faa:	f003 fa33 	bl	8006414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	200006f0 	.word	0x200006f0

08002fb8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <DMA2_Stream0_IRQHandler+0x10>)
 8002fbe:	f000 fe4d 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000148 	.word	0x20000148

08002fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fd4:	4a14      	ldr	r2, [pc, #80]	; (8003028 <_sbrk+0x5c>)
 8002fd6:	4b15      	ldr	r3, [pc, #84]	; (800302c <_sbrk+0x60>)
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe0:	4b13      	ldr	r3, [pc, #76]	; (8003030 <_sbrk+0x64>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <_sbrk+0x64>)
 8002fea:	4a12      	ldr	r2, [pc, #72]	; (8003034 <_sbrk+0x68>)
 8002fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fee:	4b10      	ldr	r3, [pc, #64]	; (8003030 <_sbrk+0x64>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d207      	bcs.n	800300c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ffc:	f005 fa4e 	bl	800849c <__errno>
 8003000:	4603      	mov	r3, r0
 8003002:	220c      	movs	r2, #12
 8003004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	e009      	b.n	8003020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <_sbrk+0x64>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003012:	4b07      	ldr	r3, [pc, #28]	; (8003030 <_sbrk+0x64>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	4a05      	ldr	r2, [pc, #20]	; (8003030 <_sbrk+0x64>)
 800301c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800301e:	68fb      	ldr	r3, [r7, #12]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20020000 	.word	0x20020000
 800302c:	00000400 	.word	0x00000400
 8003030:	20000730 	.word	0x20000730
 8003034:	20004498 	.word	0x20004498

08003038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <SystemInit+0x28>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003042:	4a07      	ldr	r2, [pc, #28]	; (8003060 <SystemInit+0x28>)
 8003044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <SystemInit+0x28>)
 800304e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003052:	609a      	str	r2, [r3, #8]
#endif
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800309c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003068:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800306a:	e003      	b.n	8003074 <LoopCopyDataInit>

0800306c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800306e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003070:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003072:	3104      	adds	r1, #4

08003074 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003074:	480b      	ldr	r0, [pc, #44]	; (80030a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003078:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800307a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800307c:	d3f6      	bcc.n	800306c <CopyDataInit>
  ldr  r2, =_sbss
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003080:	e002      	b.n	8003088 <LoopFillZerobss>

08003082 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003082:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003084:	f842 3b04 	str.w	r3, [r2], #4

08003088 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800308a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800308c:	d3f9      	bcc.n	8003082 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800308e:	f7ff ffd3 	bl	8003038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003092:	f005 fa09 	bl	80084a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003096:	f7ff fcc9 	bl	8002a2c <main>
  bx  lr    
 800309a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800309c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80030a0:	08008fe0 	.word	0x08008fe0
  ldr  r0, =_sdata
 80030a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030a8:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80030ac:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 80030b0:	20004494 	.word	0x20004494

080030b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b4:	e7fe      	b.n	80030b4 <ADC_IRQHandler>
	...

080030b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030bc:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <HAL_Init+0x40>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0d      	ldr	r2, [pc, #52]	; (80030f8 <HAL_Init+0x40>)
 80030c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_Init+0x40>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <HAL_Init+0x40>)
 80030ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_Init+0x40>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a07      	ldr	r2, [pc, #28]	; (80030f8 <HAL_Init+0x40>)
 80030da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e0:	2003      	movs	r0, #3
 80030e2:	f000 fcd8 	bl	8003a96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030e6:	2000      	movs	r0, #0
 80030e8:	f7ff fede 	bl	8002ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ec:	f7ff fd6c 	bl	8002bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00

080030fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_IncTick+0x20>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_IncTick+0x24>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4413      	add	r3, r2
 800310c:	4a04      	ldr	r2, [pc, #16]	; (8003120 <HAL_IncTick+0x24>)
 800310e:	6013      	str	r3, [r2, #0]
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000020 	.word	0x20000020
 8003120:	20000734 	.word	0x20000734

08003124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return uwTick;
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <HAL_GetTick+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000734 	.word	0x20000734

0800313c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003144:	f7ff ffee 	bl	8003124 <HAL_GetTick>
 8003148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d005      	beq.n	8003162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_Delay+0x44>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003162:	bf00      	nop
 8003164:	f7ff ffde 	bl	8003124 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	429a      	cmp	r2, r3
 8003172:	d8f7      	bhi.n	8003164 <HAL_Delay+0x28>
  {
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000020 	.word	0x20000020

08003184 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e033      	b.n	8003202 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff fd38 	bl	8002c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d118      	bne.n	80031f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031ca:	f023 0302 	bic.w	r3, r3, #2
 80031ce:	f043 0202 	orr.w	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fab4 	bl	8003744 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f023 0303 	bic.w	r3, r3, #3
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
 80031f2:	e001      	b.n	80031f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003200:	7bfb      	ldrb	r3, [r7, #15]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_ADC_Start+0x1a>
 8003222:	2302      	movs	r3, #2
 8003224:	e08a      	b.n	800333c <HAL_ADC_Start+0x130>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d018      	beq.n	800326e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800324c:	4b3e      	ldr	r3, [pc, #248]	; (8003348 <HAL_ADC_Start+0x13c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a3e      	ldr	r2, [pc, #248]	; (800334c <HAL_ADC_Start+0x140>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0c9a      	lsrs	r2, r3, #18
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003260:	e002      	b.n	8003268 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	3b01      	subs	r3, #1
 8003266:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f9      	bne.n	8003262 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d15e      	bne.n	800333a <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ba:	d106      	bne.n	80032ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c0:	f023 0206 	bic.w	r2, r3, #6
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	645a      	str	r2, [r3, #68]	; 0x44
 80032c8:	e002      	b.n	80032d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032d8:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <HAL_ADC_Start+0x144>)
 80032da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10f      	bne.n	8003312 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d11c      	bne.n	800333a <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	e013      	b.n	800333a <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a0f      	ldr	r2, [pc, #60]	; (8003354 <HAL_ADC_Start+0x148>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d10e      	bne.n	800333a <HAL_ADC_Start+0x12e>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003338:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	20000018 	.word	0x20000018
 800334c:	431bde83 	.word	0x431bde83
 8003350:	40012300 	.word	0x40012300
 8003354:	40012000 	.word	0x40012000

08003358 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_ADC_Stop+0x16>
 800336a:	2302      	movs	r3, #2
 800336c:	e021      	b.n	80033b2 <HAL_ADC_Stop+0x5a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	f043 0201 	orr.w	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033da:	d113      	bne.n	8003404 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ea:	d10b      	bne.n	8003404 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e05c      	b.n	80034be <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003404:	f7ff fe8e 	bl	8003124 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800340a:	e01a      	b.n	8003442 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d016      	beq.n	8003442 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_ADC_PollForConversion+0x6c>
 800341a:	f7ff fe83 	bl	8003124 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d20b      	bcs.n	8003442 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f043 0204 	orr.w	r2, r3, #4
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e03d      	b.n	80034be <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b02      	cmp	r3, #2
 800344e:	d1dd      	bne.n	800340c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0212 	mvn.w	r2, #18
 8003458:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d123      	bne.n	80034bc <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003478:	2b00      	cmp	r3, #0
 800347a:	d11f      	bne.n	80034bc <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003494:	2b00      	cmp	r3, #0
 8003496:	d111      	bne.n	80034bc <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x1c>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e113      	b.n	8003724 <HAL_ADC_ConfigChannel+0x244>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b09      	cmp	r3, #9
 800350a:	d925      	bls.n	8003558 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68d9      	ldr	r1, [r3, #12]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	4613      	mov	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	4413      	add	r3, r2
 8003520:	3b1e      	subs	r3, #30
 8003522:	2207      	movs	r2, #7
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43da      	mvns	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	400a      	ands	r2, r1
 8003530:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68d9      	ldr	r1, [r3, #12]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	4618      	mov	r0, r3
 8003544:	4603      	mov	r3, r0
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4403      	add	r3, r0
 800354a:	3b1e      	subs	r3, #30
 800354c:	409a      	lsls	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	e022      	b.n	800359e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6919      	ldr	r1, [r3, #16]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	2207      	movs	r2, #7
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43da      	mvns	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	400a      	ands	r2, r1
 800357a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6919      	ldr	r1, [r3, #16]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	4618      	mov	r0, r3
 800358e:	4603      	mov	r3, r0
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4403      	add	r3, r0
 8003594:	409a      	lsls	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d824      	bhi.n	80035f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	3b05      	subs	r3, #5
 80035b8:	221f      	movs	r2, #31
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	400a      	ands	r2, r1
 80035c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4618      	mov	r0, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	3b05      	subs	r3, #5
 80035e2:	fa00 f203 	lsl.w	r2, r0, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	635a      	str	r2, [r3, #52]	; 0x34
 80035ee:	e04c      	b.n	800368a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	d824      	bhi.n	8003642 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	3b23      	subs	r3, #35	; 0x23
 800360a:	221f      	movs	r2, #31
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43da      	mvns	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	400a      	ands	r2, r1
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	4618      	mov	r0, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	3b23      	subs	r3, #35	; 0x23
 8003634:	fa00 f203 	lsl.w	r2, r0, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
 8003640:	e023      	b.n	800368a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	3b41      	subs	r3, #65	; 0x41
 8003654:	221f      	movs	r2, #31
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	400a      	ands	r2, r1
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	4618      	mov	r0, r3
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	3b41      	subs	r3, #65	; 0x41
 800367e:	fa00 f203 	lsl.w	r2, r0, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800368a:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_ADC_ConfigChannel+0x250>)
 800368c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a28      	ldr	r2, [pc, #160]	; (8003734 <HAL_ADC_ConfigChannel+0x254>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d10f      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x1d8>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b12      	cmp	r3, #18
 800369e:	d10b      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1d      	ldr	r2, [pc, #116]	; (8003734 <HAL_ADC_ConfigChannel+0x254>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d12b      	bne.n	800371a <HAL_ADC_ConfigChannel+0x23a>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <HAL_ADC_ConfigChannel+0x258>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x1f4>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b11      	cmp	r3, #17
 80036d2:	d122      	bne.n	800371a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a11      	ldr	r2, [pc, #68]	; (8003738 <HAL_ADC_ConfigChannel+0x258>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d111      	bne.n	800371a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036f6:	4b11      	ldr	r3, [pc, #68]	; (800373c <HAL_ADC_ConfigChannel+0x25c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a11      	ldr	r2, [pc, #68]	; (8003740 <HAL_ADC_ConfigChannel+0x260>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	0c9a      	lsrs	r2, r3, #18
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800370c:	e002      	b.n	8003714 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3b01      	subs	r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f9      	bne.n	800370e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	40012300 	.word	0x40012300
 8003734:	40012000 	.word	0x40012000
 8003738:	10000012 	.word	0x10000012
 800373c:	20000018 	.word	0x20000018
 8003740:	431bde83 	.word	0x431bde83

08003744 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800374c:	4b79      	ldr	r3, [pc, #484]	; (8003934 <ADC_Init+0x1f0>)
 800374e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003778:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	021a      	lsls	r2, r3, #8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800379c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	4a58      	ldr	r2, [pc, #352]	; (8003938 <ADC_Init+0x1f4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d022      	beq.n	8003822 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6899      	ldr	r1, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800380c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6899      	ldr	r1, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	e00f      	b.n	8003842 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003830:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003840:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0202 	bic.w	r2, r2, #2
 8003850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6899      	ldr	r1, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7e1b      	ldrb	r3, [r3, #24]
 800385c:	005a      	lsls	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800388e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	3b01      	subs	r3, #1
 800389c:	035a      	lsls	r2, r3, #13
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	e007      	b.n	80038b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	051a      	lsls	r2, r3, #20
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6899      	ldr	r1, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038fa:	025a      	lsls	r2, r3, #9
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6899      	ldr	r1, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	029a      	lsls	r2, r3, #10
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40012300 	.word	0x40012300
 8003938:	0f000001 	.word	0x0f000001

0800393c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003958:	4013      	ands	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396e:	4a04      	ldr	r2, [pc, #16]	; (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	60d3      	str	r3, [r2, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <__NVIC_GetPriorityGrouping+0x18>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	f003 0307 	and.w	r3, r3, #7
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	db0b      	blt.n	80039ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	f003 021f 	and.w	r2, r3, #31
 80039b8:	4907      	ldr	r1, [pc, #28]	; (80039d8 <__NVIC_EnableIRQ+0x38>)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	2001      	movs	r0, #1
 80039c2:	fa00 f202 	lsl.w	r2, r0, r2
 80039c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000e100 	.word	0xe000e100

080039dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	6039      	str	r1, [r7, #0]
 80039e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	db0a      	blt.n	8003a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	490c      	ldr	r1, [pc, #48]	; (8003a28 <__NVIC_SetPriority+0x4c>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	0112      	lsls	r2, r2, #4
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	440b      	add	r3, r1
 8003a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a04:	e00a      	b.n	8003a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4908      	ldr	r1, [pc, #32]	; (8003a2c <__NVIC_SetPriority+0x50>)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	3b04      	subs	r3, #4
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	440b      	add	r3, r1
 8003a1a:	761a      	strb	r2, [r3, #24]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000e100 	.word	0xe000e100
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f1c3 0307 	rsb	r3, r3, #7
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	bf28      	it	cs
 8003a4e:	2304      	movcs	r3, #4
 8003a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d902      	bls.n	8003a60 <NVIC_EncodePriority+0x30>
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3b03      	subs	r3, #3
 8003a5e:	e000      	b.n	8003a62 <NVIC_EncodePriority+0x32>
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a64:	f04f 32ff 	mov.w	r2, #4294967295
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	401a      	ands	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a78:	f04f 31ff 	mov.w	r1, #4294967295
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	43d9      	mvns	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	4313      	orrs	r3, r2
         );
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3724      	adds	r7, #36	; 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ff4c 	bl	800393c <__NVIC_SetPriorityGrouping>
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003abe:	f7ff ff61 	bl	8003984 <__NVIC_GetPriorityGrouping>
 8003ac2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	6978      	ldr	r0, [r7, #20]
 8003aca:	f7ff ffb1 	bl	8003a30 <NVIC_EncodePriority>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ff80 	bl	80039dc <__NVIC_SetPriority>
}
 8003adc:	bf00      	nop
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ff54 	bl	80039a0 <__NVIC_EnableIRQ>
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b0c:	f7ff fb0a 	bl	8003124 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e099      	b.n	8003c50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b3c:	e00f      	b.n	8003b5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b3e:	f7ff faf1 	bl	8003124 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d908      	bls.n	8003b5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2203      	movs	r2, #3
 8003b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e078      	b.n	8003c50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e8      	bne.n	8003b3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <HAL_DMA_Init+0x158>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d107      	bne.n	8003bc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 0307 	bic.w	r3, r3, #7
 8003bde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d117      	bne.n	8003c22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00e      	beq.n	8003c22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f9e9 	bl	8003fdc <DMA_CheckFifoParam>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2240      	movs	r2, #64	; 0x40
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e016      	b.n	8003c50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f9a0 	bl	8003f70 <DMA_CalcBaseAndBitshift>
 8003c30:	4603      	mov	r3, r0
 8003c32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c38:	223f      	movs	r2, #63	; 0x3f
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	f010803f 	.word	0xf010803f

08003c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c68:	4b8e      	ldr	r3, [pc, #568]	; (8003ea4 <HAL_DMA_IRQHandler+0x248>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a8e      	ldr	r2, [pc, #568]	; (8003ea8 <HAL_DMA_IRQHandler+0x24c>)
 8003c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c72:	0a9b      	lsrs	r3, r3, #10
 8003c74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	2208      	movs	r2, #8
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01a      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d013      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0204 	bic.w	r2, r2, #4
 8003cae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	2201      	movs	r2, #1
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d012      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	2201      	movs	r2, #1
 8003cec:	409a      	lsls	r2, r3
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf6:	f043 0202 	orr.w	r2, r3, #2
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	2204      	movs	r2, #4
 8003d04:	409a      	lsls	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d012      	beq.n	8003d34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d20:	2204      	movs	r2, #4
 8003d22:	409a      	lsls	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d38:	2210      	movs	r2, #16
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d043      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d03c      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d56:	2210      	movs	r2, #16
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d018      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d108      	bne.n	8003d8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d024      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
 8003d8a:	e01f      	b.n	8003dcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01b      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
 8003d9c:	e016      	b.n	8003dcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d107      	bne.n	8003dbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0208 	bic.w	r2, r2, #8
 8003dba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 808f 	beq.w	8003efc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8087 	beq.w	8003efc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	2220      	movs	r2, #32
 8003df4:	409a      	lsls	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b05      	cmp	r3, #5
 8003e04:	d136      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0216 	bic.w	r2, r2, #22
 8003e14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <HAL_DMA_IRQHandler+0x1da>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0208 	bic.w	r2, r2, #8
 8003e44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4a:	223f      	movs	r2, #63	; 0x3f
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d07e      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
        }
        return;
 8003e72:	e079      	b.n	8003f68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01d      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10d      	bne.n	8003eac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d031      	beq.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
 8003ea0:	e02c      	b.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
 8003ea2:	bf00      	nop
 8003ea4:	20000018 	.word	0x20000018
 8003ea8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d023      	beq.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
 8003ebc:	e01e      	b.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10f      	bne.n	8003eec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0210 	bic.w	r2, r2, #16
 8003eda:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d032      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d022      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2205      	movs	r2, #5
 8003f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d307      	bcc.n	8003f44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f2      	bne.n	8003f28 <HAL_DMA_IRQHandler+0x2cc>
 8003f42:	e000      	b.n	8003f46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f44:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
 8003f66:	e000      	b.n	8003f6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f68:	bf00      	nop
    }
  }
}
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	3b10      	subs	r3, #16
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <DMA_CalcBaseAndBitshift+0x64>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f8a:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <DMA_CalcBaseAndBitshift+0x68>)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d909      	bls.n	8003fb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fa6:	f023 0303 	bic.w	r3, r3, #3
 8003faa:	1d1a      	adds	r2, r3, #4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	659a      	str	r2, [r3, #88]	; 0x58
 8003fb0:	e007      	b.n	8003fc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fba:	f023 0303 	bic.w	r3, r3, #3
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	aaaaaaab 	.word	0xaaaaaaab
 8003fd8:	08008f94 	.word	0x08008f94

08003fdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d11f      	bne.n	8004036 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d856      	bhi.n	80040aa <DMA_CheckFifoParam+0xce>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <DMA_CheckFifoParam+0x28>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004015 	.word	0x08004015
 8004008:	08004027 	.word	0x08004027
 800400c:	08004015 	.word	0x08004015
 8004010:	080040ab 	.word	0x080040ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d046      	beq.n	80040ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004024:	e043      	b.n	80040ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800402e:	d140      	bne.n	80040b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004034:	e03d      	b.n	80040b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403e:	d121      	bne.n	8004084 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b03      	cmp	r3, #3
 8004044:	d837      	bhi.n	80040b6 <DMA_CheckFifoParam+0xda>
 8004046:	a201      	add	r2, pc, #4	; (adr r2, 800404c <DMA_CheckFifoParam+0x70>)
 8004048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404c:	0800405d 	.word	0x0800405d
 8004050:	08004063 	.word	0x08004063
 8004054:	0800405d 	.word	0x0800405d
 8004058:	08004075 	.word	0x08004075
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
      break;
 8004060:	e030      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d025      	beq.n	80040ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004072:	e022      	b.n	80040ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800407c:	d11f      	bne.n	80040be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004082:	e01c      	b.n	80040be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d903      	bls.n	8004092 <DMA_CheckFifoParam+0xb6>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d003      	beq.n	8004098 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004090:	e018      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	73fb      	strb	r3, [r7, #15]
      break;
 8004096:	e015      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00e      	beq.n	80040c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
      break;
 80040a8:	e00b      	b.n	80040c2 <DMA_CheckFifoParam+0xe6>
      break;
 80040aa:	bf00      	nop
 80040ac:	e00a      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040ae:	bf00      	nop
 80040b0:	e008      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040b2:	bf00      	nop
 80040b4:	e006      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040b6:	bf00      	nop
 80040b8:	e004      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040ba:	bf00      	nop
 80040bc:	e002      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040c2:	bf00      	nop
    }
  } 
  
  return status; 
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop

080040d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	e159      	b.n	80043a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040f0:	2201      	movs	r2, #1
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	429a      	cmp	r2, r3
 800410a:	f040 8148 	bne.w	800439e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d00b      	beq.n	800412e <HAL_GPIO_Init+0x5a>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d007      	beq.n	800412e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004122:	2b11      	cmp	r3, #17
 8004124:	d003      	beq.n	800412e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b12      	cmp	r3, #18
 800412c:	d130      	bne.n	8004190 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	2203      	movs	r2, #3
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4013      	ands	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4313      	orrs	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004164:	2201      	movs	r2, #1
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	091b      	lsrs	r3, r3, #4
 800417a:	f003 0201 	and.w	r2, r3, #1
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	2203      	movs	r2, #3
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_Init+0xfc>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b12      	cmp	r3, #18
 80041ce:	d123      	bne.n	8004218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	08da      	lsrs	r2, r3, #3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3208      	adds	r2, #8
 80041d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	220f      	movs	r2, #15
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	08da      	lsrs	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3208      	adds	r2, #8
 8004212:	69b9      	ldr	r1, [r7, #24]
 8004214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	2203      	movs	r2, #3
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 0203 	and.w	r2, r3, #3
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80a2 	beq.w	800439e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	4b57      	ldr	r3, [pc, #348]	; (80043bc <HAL_GPIO_Init+0x2e8>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	4a56      	ldr	r2, [pc, #344]	; (80043bc <HAL_GPIO_Init+0x2e8>)
 8004264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004268:	6453      	str	r3, [r2, #68]	; 0x44
 800426a:	4b54      	ldr	r3, [pc, #336]	; (80043bc <HAL_GPIO_Init+0x2e8>)
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004276:	4a52      	ldr	r2, [pc, #328]	; (80043c0 <HAL_GPIO_Init+0x2ec>)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	089b      	lsrs	r3, r3, #2
 800427c:	3302      	adds	r3, #2
 800427e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	220f      	movs	r2, #15
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a49      	ldr	r2, [pc, #292]	; (80043c4 <HAL_GPIO_Init+0x2f0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d019      	beq.n	80042d6 <HAL_GPIO_Init+0x202>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a48      	ldr	r2, [pc, #288]	; (80043c8 <HAL_GPIO_Init+0x2f4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <HAL_GPIO_Init+0x1fe>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a47      	ldr	r2, [pc, #284]	; (80043cc <HAL_GPIO_Init+0x2f8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00d      	beq.n	80042ce <HAL_GPIO_Init+0x1fa>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a46      	ldr	r2, [pc, #280]	; (80043d0 <HAL_GPIO_Init+0x2fc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d007      	beq.n	80042ca <HAL_GPIO_Init+0x1f6>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a45      	ldr	r2, [pc, #276]	; (80043d4 <HAL_GPIO_Init+0x300>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_GPIO_Init+0x1f2>
 80042c2:	2304      	movs	r3, #4
 80042c4:	e008      	b.n	80042d8 <HAL_GPIO_Init+0x204>
 80042c6:	2307      	movs	r3, #7
 80042c8:	e006      	b.n	80042d8 <HAL_GPIO_Init+0x204>
 80042ca:	2303      	movs	r3, #3
 80042cc:	e004      	b.n	80042d8 <HAL_GPIO_Init+0x204>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e002      	b.n	80042d8 <HAL_GPIO_Init+0x204>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <HAL_GPIO_Init+0x204>
 80042d6:	2300      	movs	r3, #0
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	f002 0203 	and.w	r2, r2, #3
 80042de:	0092      	lsls	r2, r2, #2
 80042e0:	4093      	lsls	r3, r2
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042e8:	4935      	ldr	r1, [pc, #212]	; (80043c0 <HAL_GPIO_Init+0x2ec>)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	3302      	adds	r3, #2
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042f6:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <HAL_GPIO_Init+0x304>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	43db      	mvns	r3, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4013      	ands	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800431a:	4a2f      	ldr	r2, [pc, #188]	; (80043d8 <HAL_GPIO_Init+0x304>)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004320:	4b2d      	ldr	r3, [pc, #180]	; (80043d8 <HAL_GPIO_Init+0x304>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	43db      	mvns	r3, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4013      	ands	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004344:	4a24      	ldr	r2, [pc, #144]	; (80043d8 <HAL_GPIO_Init+0x304>)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800434a:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <HAL_GPIO_Init+0x304>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	43db      	mvns	r3, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4013      	ands	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800436e:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <HAL_GPIO_Init+0x304>)
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004374:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <HAL_GPIO_Init+0x304>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	43db      	mvns	r3, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004398:	4a0f      	ldr	r2, [pc, #60]	; (80043d8 <HAL_GPIO_Init+0x304>)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	3301      	adds	r3, #1
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b0f      	cmp	r3, #15
 80043a8:	f67f aea2 	bls.w	80040f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	3724      	adds	r7, #36	; 0x24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800
 80043c0:	40013800 	.word	0x40013800
 80043c4:	40020000 	.word	0x40020000
 80043c8:	40020400 	.word	0x40020400
 80043cc:	40020800 	.word	0x40020800
 80043d0:	40020c00 	.word	0x40020c00
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40013c00 	.word	0x40013c00

080043dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	887b      	ldrh	r3, [r7, #2]
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
 80043f8:	e001      	b.n	80043fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	807b      	strh	r3, [r7, #2]
 8004418:	4613      	mov	r3, r2
 800441a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800441c:	787b      	ldrb	r3, [r7, #1]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004422:	887a      	ldrh	r2, [r7, #2]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004428:	e003      	b.n	8004432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800442a:	887b      	ldrh	r3, [r7, #2]
 800442c:	041a      	lsls	r2, r3, #16
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	619a      	str	r2, [r3, #24]
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e12b      	b.n	80046aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fe fc4c 	bl	8002d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	; 0x24
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044a4:	f001 f9ac 	bl	8005800 <HAL_RCC_GetPCLK1Freq>
 80044a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4a81      	ldr	r2, [pc, #516]	; (80046b4 <HAL_I2C_Init+0x274>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d807      	bhi.n	80044c4 <HAL_I2C_Init+0x84>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4a80      	ldr	r2, [pc, #512]	; (80046b8 <HAL_I2C_Init+0x278>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	bf94      	ite	ls
 80044bc:	2301      	movls	r3, #1
 80044be:	2300      	movhi	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e006      	b.n	80044d2 <HAL_I2C_Init+0x92>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a7d      	ldr	r2, [pc, #500]	; (80046bc <HAL_I2C_Init+0x27c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	bf94      	ite	ls
 80044cc:	2301      	movls	r3, #1
 80044ce:	2300      	movhi	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e0e7      	b.n	80046aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a78      	ldr	r2, [pc, #480]	; (80046c0 <HAL_I2C_Init+0x280>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	0c9b      	lsrs	r3, r3, #18
 80044e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4a6a      	ldr	r2, [pc, #424]	; (80046b4 <HAL_I2C_Init+0x274>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d802      	bhi.n	8004514 <HAL_I2C_Init+0xd4>
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	3301      	adds	r3, #1
 8004512:	e009      	b.n	8004528 <HAL_I2C_Init+0xe8>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800451a:	fb02 f303 	mul.w	r3, r2, r3
 800451e:	4a69      	ldr	r2, [pc, #420]	; (80046c4 <HAL_I2C_Init+0x284>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	099b      	lsrs	r3, r3, #6
 8004526:	3301      	adds	r3, #1
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	430b      	orrs	r3, r1
 800452e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800453a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	495c      	ldr	r1, [pc, #368]	; (80046b4 <HAL_I2C_Init+0x274>)
 8004544:	428b      	cmp	r3, r1
 8004546:	d819      	bhi.n	800457c <HAL_I2C_Init+0x13c>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1e59      	subs	r1, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	fbb1 f3f3 	udiv	r3, r1, r3
 8004556:	1c59      	adds	r1, r3, #1
 8004558:	f640 73fc 	movw	r3, #4092	; 0xffc
 800455c:	400b      	ands	r3, r1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_I2C_Init+0x138>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1e59      	subs	r1, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004570:	3301      	adds	r3, #1
 8004572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004576:	e051      	b.n	800461c <HAL_I2C_Init+0x1dc>
 8004578:	2304      	movs	r3, #4
 800457a:	e04f      	b.n	800461c <HAL_I2C_Init+0x1dc>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d111      	bne.n	80045a8 <HAL_I2C_Init+0x168>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1e58      	subs	r0, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	440b      	add	r3, r1
 8004592:	fbb0 f3f3 	udiv	r3, r0, r3
 8004596:	3301      	adds	r3, #1
 8004598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	e012      	b.n	80045ce <HAL_I2C_Init+0x18e>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1e58      	subs	r0, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6859      	ldr	r1, [r3, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	0099      	lsls	r1, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80045be:	3301      	adds	r3, #1
 80045c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bf0c      	ite	eq
 80045c8:	2301      	moveq	r3, #1
 80045ca:	2300      	movne	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_I2C_Init+0x196>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e022      	b.n	800461c <HAL_I2C_Init+0x1dc>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10e      	bne.n	80045fc <HAL_I2C_Init+0x1bc>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1e58      	subs	r0, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6859      	ldr	r1, [r3, #4]
 80045e6:	460b      	mov	r3, r1
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	440b      	add	r3, r1
 80045ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80045f0:	3301      	adds	r3, #1
 80045f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fa:	e00f      	b.n	800461c <HAL_I2C_Init+0x1dc>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1e58      	subs	r0, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6859      	ldr	r1, [r3, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	0099      	lsls	r1, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004612:	3301      	adds	r3, #1
 8004614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	6809      	ldr	r1, [r1, #0]
 8004620:	4313      	orrs	r3, r2
 8004622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69da      	ldr	r2, [r3, #28]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800464a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6911      	ldr	r1, [r2, #16]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	68d2      	ldr	r2, [r2, #12]
 8004656:	4311      	orrs	r1, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	430b      	orrs	r3, r1
 800465e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695a      	ldr	r2, [r3, #20]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	000186a0 	.word	0x000186a0
 80046b8:	001e847f 	.word	0x001e847f
 80046bc:	003d08ff 	.word	0x003d08ff
 80046c0:	431bde83 	.word	0x431bde83
 80046c4:	10624dd3 	.word	0x10624dd3

080046c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	607a      	str	r2, [r7, #4]
 80046d2:	461a      	mov	r2, r3
 80046d4:	460b      	mov	r3, r1
 80046d6:	817b      	strh	r3, [r7, #10]
 80046d8:	4613      	mov	r3, r2
 80046da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046dc:	f7fe fd22 	bl	8003124 <HAL_GetTick>
 80046e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	f040 80e0 	bne.w	80048b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	2319      	movs	r3, #25
 80046f6:	2201      	movs	r2, #1
 80046f8:	4970      	ldr	r1, [pc, #448]	; (80048bc <HAL_I2C_Master_Transmit+0x1f4>)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fa92 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004706:	2302      	movs	r3, #2
 8004708:	e0d3      	b.n	80048b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_I2C_Master_Transmit+0x50>
 8004714:	2302      	movs	r3, #2
 8004716:	e0cc      	b.n	80048b2 <HAL_I2C_Master_Transmit+0x1ea>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b01      	cmp	r3, #1
 800472c:	d007      	beq.n	800473e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0201 	orr.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800474c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2221      	movs	r2, #33	; 0x21
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2210      	movs	r2, #16
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	893a      	ldrh	r2, [r7, #8]
 800476e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a50      	ldr	r2, [pc, #320]	; (80048c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004780:	8979      	ldrh	r1, [r7, #10]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	6a3a      	ldr	r2, [r7, #32]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f9ca 	bl	8004b20 <I2C_MasterRequestWrite>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e08d      	b.n	80048b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004796:	2300      	movs	r3, #0
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80047ac:	e066      	b.n	800487c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	6a39      	ldr	r1, [r7, #32]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fb0c 	bl	8004dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d107      	bne.n	80047d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e06b      	b.n	80048b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b04      	cmp	r3, #4
 8004816:	d11b      	bne.n	8004850 <HAL_I2C_Master_Transmit+0x188>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d017      	beq.n	8004850 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	781a      	ldrb	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	6a39      	ldr	r1, [r7, #32]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 fafc 	bl	8004e52 <I2C_WaitOnBTFFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00d      	beq.n	800487c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	2b04      	cmp	r3, #4
 8004866:	d107      	bne.n	8004878 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004876:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e01a      	b.n	80048b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004880:	2b00      	cmp	r3, #0
 8004882:	d194      	bne.n	80047ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	e000      	b.n	80048b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80048b0:	2302      	movs	r3, #2
  }
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	00100002 	.word	0x00100002
 80048c0:	ffff0000 	.word	0xffff0000

080048c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	; 0x28
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	460b      	mov	r3, r1
 80048d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80048d4:	f7fe fc26 	bl	8003124 <HAL_GetTick>
 80048d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80048da:	2301      	movs	r3, #1
 80048dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	f040 8111 	bne.w	8004b0e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	2319      	movs	r3, #25
 80048f2:	2201      	movs	r2, #1
 80048f4:	4988      	ldr	r1, [pc, #544]	; (8004b18 <HAL_I2C_IsDeviceReady+0x254>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f994 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004902:	2302      	movs	r3, #2
 8004904:	e104      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_I2C_IsDeviceReady+0x50>
 8004910:	2302      	movs	r3, #2
 8004912:	e0fd      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b01      	cmp	r3, #1
 8004928:	d007      	beq.n	800493a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004948:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2224      	movs	r2, #36	; 0x24
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4a70      	ldr	r2, [pc, #448]	; (8004b1c <HAL_I2C_IsDeviceReady+0x258>)
 800495c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800496c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f952 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004994:	d103      	bne.n	800499e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800499c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e0b6      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049a2:	897b      	ldrh	r3, [r7, #10]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80049b2:	f7fe fbb7 	bl	8003124 <HAL_GetTick>
 80049b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	bf0c      	ite	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	2300      	movne	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049dc:	bf0c      	ite	eq
 80049de:	2301      	moveq	r3, #1
 80049e0:	2300      	movne	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80049e6:	e025      	b.n	8004a34 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049e8:	f7fe fb9c 	bl	8003124 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <HAL_I2C_IsDeviceReady+0x13a>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	22a0      	movs	r2, #160	; 0xa0
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2ba0      	cmp	r3, #160	; 0xa0
 8004a3e:	d005      	beq.n	8004a4c <HAL_I2C_IsDeviceReady+0x188>
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <HAL_I2C_IsDeviceReady+0x188>
 8004a46:	7dbb      	ldrb	r3, [r7, #22]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0cd      	beq.n	80049e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d129      	bne.n	8004ab6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a70:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	2319      	movs	r3, #25
 8004a8e:	2201      	movs	r2, #1
 8004a90:	4921      	ldr	r1, [pc, #132]	; (8004b18 <HAL_I2C_IsDeviceReady+0x254>)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f8c6 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e036      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e02c      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ace:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	2319      	movs	r3, #25
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	490f      	ldr	r1, [pc, #60]	; (8004b18 <HAL_I2C_IsDeviceReady+0x254>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f8a2 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e012      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	3301      	adds	r3, #1
 8004aee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	f4ff af32 	bcc.w	800495e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004b0e:	2302      	movs	r3, #2
  }
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	00100002 	.word	0x00100002
 8004b1c:	ffff0000 	.word	0xffff0000

08004b20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d006      	beq.n	8004b4a <I2C_MasterRequestWrite+0x2a>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d003      	beq.n	8004b4a <I2C_MasterRequestWrite+0x2a>
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b48:	d108      	bne.n	8004b5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e00b      	b.n	8004b74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	2b12      	cmp	r3, #18
 8004b62:	d107      	bne.n	8004b74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f84f 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00d      	beq.n	8004ba8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b9a:	d103      	bne.n	8004ba4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e035      	b.n	8004c14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb0:	d108      	bne.n	8004bc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bb2:	897b      	ldrh	r3, [r7, #10]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bc0:	611a      	str	r2, [r3, #16]
 8004bc2:	e01b      	b.n	8004bfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bc4:	897b      	ldrh	r3, [r7, #10]
 8004bc6:	11db      	asrs	r3, r3, #7
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f003 0306 	and.w	r3, r3, #6
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f063 030f 	orn	r3, r3, #15
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	490e      	ldr	r1, [pc, #56]	; (8004c1c <I2C_MasterRequestWrite+0xfc>)
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f875 	bl	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e010      	b.n	8004c14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bf2:	897b      	ldrh	r3, [r7, #10]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4907      	ldr	r1, [pc, #28]	; (8004c20 <I2C_MasterRequestWrite+0x100>)
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 f865 	bl	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	00010008 	.word	0x00010008
 8004c20:	00010002 	.word	0x00010002

08004c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c34:	e025      	b.n	8004c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d021      	beq.n	8004c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3e:	f7fe fa71 	bl	8003124 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d302      	bcc.n	8004c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d116      	bne.n	8004c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e023      	b.n	8004cca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d10d      	bne.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	43da      	mvns	r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4013      	ands	r3, r2
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	e00c      	b.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf0c      	ite	eq
 8004cba:	2301      	moveq	r3, #1
 8004cbc:	2300      	movne	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d0b6      	beq.n	8004c36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce0:	e051      	b.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf0:	d123      	bne.n	8004d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f043 0204 	orr.w	r2, r3, #4
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e046      	b.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d021      	beq.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d42:	f7fe f9ef 	bl	8003124 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d302      	bcc.n	8004d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d116      	bne.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f043 0220 	orr.w	r2, r3, #32
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e020      	b.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10c      	bne.n	8004daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	43da      	mvns	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf14      	ite	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	2300      	moveq	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	e00b      	b.n	8004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	43da      	mvns	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf14      	ite	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	2300      	moveq	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d18d      	bne.n	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ddc:	e02d      	b.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f878 	bl	8004ed4 <I2C_IsAcknowledgeFailed>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e02d      	b.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d021      	beq.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df6:	f7fe f995 	bl	8003124 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d116      	bne.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e007      	b.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e44:	2b80      	cmp	r3, #128	; 0x80
 8004e46:	d1ca      	bne.n	8004dde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e5e:	e02d      	b.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f837 	bl	8004ed4 <I2C_IsAcknowledgeFailed>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e02d      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d021      	beq.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e78:	f7fe f954 	bl	8003124 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d302      	bcc.n	8004e8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d116      	bne.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e007      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d1ca      	bne.n	8004e60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eea:	d11b      	bne.n	8004f24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ef4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	f043 0204 	orr.w	r2, r3, #4
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
	...

08004f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e25e      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d075      	beq.n	800503e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f52:	4b88      	ldr	r3, [pc, #544]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d00c      	beq.n	8004f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5e:	4b85      	ldr	r3, [pc, #532]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d112      	bne.n	8004f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6a:	4b82      	ldr	r3, [pc, #520]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f76:	d10b      	bne.n	8004f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f78:	4b7e      	ldr	r3, [pc, #504]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d05b      	beq.n	800503c <HAL_RCC_OscConfig+0x108>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d157      	bne.n	800503c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e239      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f98:	d106      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x74>
 8004f9a:	4b76      	ldr	r3, [pc, #472]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a75      	ldr	r2, [pc, #468]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e01d      	b.n	8004fe4 <HAL_RCC_OscConfig+0xb0>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x98>
 8004fb2:	4b70      	ldr	r3, [pc, #448]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a6f      	ldr	r2, [pc, #444]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	4b6d      	ldr	r3, [pc, #436]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a6c      	ldr	r2, [pc, #432]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCC_OscConfig+0xb0>
 8004fcc:	4b69      	ldr	r3, [pc, #420]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a68      	ldr	r2, [pc, #416]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	4b66      	ldr	r3, [pc, #408]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a65      	ldr	r2, [pc, #404]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fec:	f7fe f89a 	bl	8003124 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff4:	f7fe f896 	bl	8003124 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	; 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e1fe      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005006:	4b5b      	ldr	r3, [pc, #364]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0xc0>
 8005012:	e014      	b.n	800503e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005014:	f7fe f886 	bl	8003124 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800501c:	f7fe f882 	bl	8003124 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b64      	cmp	r3, #100	; 0x64
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e1ea      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800502e:	4b51      	ldr	r3, [pc, #324]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0xe8>
 800503a:	e000      	b.n	800503e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d063      	beq.n	8005112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800504a:	4b4a      	ldr	r3, [pc, #296]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00b      	beq.n	800506e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005056:	4b47      	ldr	r3, [pc, #284]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800505e:	2b08      	cmp	r3, #8
 8005060:	d11c      	bne.n	800509c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005062:	4b44      	ldr	r3, [pc, #272]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d116      	bne.n	800509c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800506e:	4b41      	ldr	r3, [pc, #260]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_RCC_OscConfig+0x152>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d001      	beq.n	8005086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e1be      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005086:	4b3b      	ldr	r3, [pc, #236]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4937      	ldr	r1, [pc, #220]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509a:	e03a      	b.n	8005112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d020      	beq.n	80050e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a4:	4b34      	ldr	r3, [pc, #208]	; (8005178 <HAL_RCC_OscConfig+0x244>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050aa:	f7fe f83b 	bl	8003124 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b2:	f7fe f837 	bl	8003124 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e19f      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c4:	4b2b      	ldr	r3, [pc, #172]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d0:	4b28      	ldr	r3, [pc, #160]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4925      	ldr	r1, [pc, #148]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	600b      	str	r3, [r1, #0]
 80050e4:	e015      	b.n	8005112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050e6:	4b24      	ldr	r3, [pc, #144]	; (8005178 <HAL_RCC_OscConfig+0x244>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fe f81a 	bl	8003124 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f4:	f7fe f816 	bl	8003124 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e17e      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005106:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d036      	beq.n	800518c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <HAL_RCC_OscConfig+0x248>)
 8005128:	2201      	movs	r2, #1
 800512a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512c:	f7fd fffa 	bl	8003124 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005134:	f7fd fff6 	bl	8003124 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e15e      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005146:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0x200>
 8005152:	e01b      	b.n	800518c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005154:	4b09      	ldr	r3, [pc, #36]	; (800517c <HAL_RCC_OscConfig+0x248>)
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515a:	f7fd ffe3 	bl	8003124 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005160:	e00e      	b.n	8005180 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005162:	f7fd ffdf 	bl	8003124 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d907      	bls.n	8005180 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e147      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
 8005174:	40023800 	.word	0x40023800
 8005178:	42470000 	.word	0x42470000
 800517c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005180:	4b88      	ldr	r3, [pc, #544]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1ea      	bne.n	8005162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8097 	beq.w	80052c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800519e:	4b81      	ldr	r3, [pc, #516]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10f      	bne.n	80051ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	4b7d      	ldr	r3, [pc, #500]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	4a7c      	ldr	r2, [pc, #496]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ba:	4b7a      	ldr	r3, [pc, #488]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c2:	60bb      	str	r3, [r7, #8]
 80051c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ca:	4b77      	ldr	r3, [pc, #476]	; (80053a8 <HAL_RCC_OscConfig+0x474>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d118      	bne.n	8005208 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051d6:	4b74      	ldr	r3, [pc, #464]	; (80053a8 <HAL_RCC_OscConfig+0x474>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a73      	ldr	r2, [pc, #460]	; (80053a8 <HAL_RCC_OscConfig+0x474>)
 80051dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051e2:	f7fd ff9f 	bl	8003124 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ea:	f7fd ff9b 	bl	8003124 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e103      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fc:	4b6a      	ldr	r3, [pc, #424]	; (80053a8 <HAL_RCC_OscConfig+0x474>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0f0      	beq.n	80051ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d106      	bne.n	800521e <HAL_RCC_OscConfig+0x2ea>
 8005210:	4b64      	ldr	r3, [pc, #400]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005214:	4a63      	ldr	r2, [pc, #396]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	6713      	str	r3, [r2, #112]	; 0x70
 800521c:	e01c      	b.n	8005258 <HAL_RCC_OscConfig+0x324>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b05      	cmp	r3, #5
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0x30c>
 8005226:	4b5f      	ldr	r3, [pc, #380]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	4a5e      	ldr	r2, [pc, #376]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 800522c:	f043 0304 	orr.w	r3, r3, #4
 8005230:	6713      	str	r3, [r2, #112]	; 0x70
 8005232:	4b5c      	ldr	r3, [pc, #368]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	4a5b      	ldr	r2, [pc, #364]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	6713      	str	r3, [r2, #112]	; 0x70
 800523e:	e00b      	b.n	8005258 <HAL_RCC_OscConfig+0x324>
 8005240:	4b58      	ldr	r3, [pc, #352]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005244:	4a57      	ldr	r2, [pc, #348]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005246:	f023 0301 	bic.w	r3, r3, #1
 800524a:	6713      	str	r3, [r2, #112]	; 0x70
 800524c:	4b55      	ldr	r3, [pc, #340]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	4a54      	ldr	r2, [pc, #336]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005252:	f023 0304 	bic.w	r3, r3, #4
 8005256:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d015      	beq.n	800528c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fd ff60 	bl	8003124 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005266:	e00a      	b.n	800527e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005268:	f7fd ff5c 	bl	8003124 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	; 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e0c2      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527e:	4b49      	ldr	r3, [pc, #292]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0ee      	beq.n	8005268 <HAL_RCC_OscConfig+0x334>
 800528a:	e014      	b.n	80052b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800528c:	f7fd ff4a 	bl	8003124 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005292:	e00a      	b.n	80052aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005294:	f7fd ff46 	bl	8003124 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e0ac      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052aa:	4b3e      	ldr	r3, [pc, #248]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1ee      	bne.n	8005294 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d105      	bne.n	80052c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052bc:	4b39      	ldr	r3, [pc, #228]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	4a38      	ldr	r2, [pc, #224]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80052c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8098 	beq.w	8005402 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052d2:	4b34      	ldr	r3, [pc, #208]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d05c      	beq.n	8005398 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d141      	bne.n	800536a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e6:	4b31      	ldr	r3, [pc, #196]	; (80053ac <HAL_RCC_OscConfig+0x478>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ec:	f7fd ff1a 	bl	8003124 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fd ff16 	bl	8003124 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e07e      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69da      	ldr	r2, [r3, #28]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	019b      	lsls	r3, r3, #6
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	3b01      	subs	r3, #1
 800532c:	041b      	lsls	r3, r3, #16
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	061b      	lsls	r3, r3, #24
 8005336:	491b      	ldr	r1, [pc, #108]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005338:	4313      	orrs	r3, r2
 800533a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800533c:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <HAL_RCC_OscConfig+0x478>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005342:	f7fd feef 	bl	8003124 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800534a:	f7fd feeb 	bl	8003124 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e053      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535c:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <HAL_RCC_OscConfig+0x416>
 8005368:	e04b      	b.n	8005402 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536a:	4b10      	ldr	r3, [pc, #64]	; (80053ac <HAL_RCC_OscConfig+0x478>)
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005370:	f7fd fed8 	bl	8003124 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005378:	f7fd fed4 	bl	8003124 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e03c      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0x444>
 8005396:	e034      	b.n	8005402 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d107      	bne.n	80053b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e02f      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
 80053a4:	40023800 	.word	0x40023800
 80053a8:	40007000 	.word	0x40007000
 80053ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053b0:	4b16      	ldr	r3, [pc, #88]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d11c      	bne.n	80053fe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d115      	bne.n	80053fe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053d8:	4013      	ands	r3, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053de:	4293      	cmp	r3, r2
 80053e0:	d10d      	bne.n	80053fe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d106      	bne.n	80053fe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d001      	beq.n	8005402 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40023800 	.word	0x40023800

08005410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0cc      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005424:	4b68      	ldr	r3, [pc, #416]	; (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d90c      	bls.n	800544c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005432:	4b65      	ldr	r3, [pc, #404]	; (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543a:	4b63      	ldr	r3, [pc, #396]	; (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e0b8      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d020      	beq.n	800549a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005464:	4b59      	ldr	r3, [pc, #356]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	4a58      	ldr	r2, [pc, #352]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800546e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800547c:	4b53      	ldr	r3, [pc, #332]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	4a52      	ldr	r2, [pc, #328]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005488:	4b50      	ldr	r3, [pc, #320]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	494d      	ldr	r1, [pc, #308]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d044      	beq.n	8005530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d107      	bne.n	80054be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	4b47      	ldr	r3, [pc, #284]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d119      	bne.n	80054ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e07f      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d003      	beq.n	80054ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d107      	bne.n	80054de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ce:	4b3f      	ldr	r3, [pc, #252]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d109      	bne.n	80054ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e06f      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054de:	4b3b      	ldr	r3, [pc, #236]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e067      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ee:	4b37      	ldr	r3, [pc, #220]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f023 0203 	bic.w	r2, r3, #3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	4934      	ldr	r1, [pc, #208]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005500:	f7fd fe10 	bl	8003124 <HAL_GetTick>
 8005504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005506:	e00a      	b.n	800551e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005508:	f7fd fe0c 	bl	8003124 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	f241 3288 	movw	r2, #5000	; 0x1388
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e04f      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551e:	4b2b      	ldr	r3, [pc, #172]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 020c 	and.w	r2, r3, #12
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	429a      	cmp	r2, r3
 800552e:	d1eb      	bne.n	8005508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005530:	4b25      	ldr	r3, [pc, #148]	; (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d20c      	bcs.n	8005558 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553e:	4b22      	ldr	r3, [pc, #136]	; (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005546:	4b20      	ldr	r3, [pc, #128]	; (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d001      	beq.n	8005558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e032      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005564:	4b19      	ldr	r3, [pc, #100]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	4916      	ldr	r1, [pc, #88]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005582:	4b12      	ldr	r3, [pc, #72]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	490e      	ldr	r1, [pc, #56]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005596:	f000 f821 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 800559a:	4602      	mov	r2, r0
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	490a      	ldr	r1, [pc, #40]	; (80055d0 <HAL_RCC_ClockConfig+0x1c0>)
 80055a8:	5ccb      	ldrb	r3, [r1, r3]
 80055aa:	fa22 f303 	lsr.w	r3, r2, r3
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <HAL_RCC_ClockConfig+0x1c4>)
 80055b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055b2:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fd fc76 	bl	8002ea8 <HAL_InitTick>

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40023c00 	.word	0x40023c00
 80055cc:	40023800 	.word	0x40023800
 80055d0:	08008f7c 	.word	0x08008f7c
 80055d4:	20000018 	.word	0x20000018
 80055d8:	2000001c 	.word	0x2000001c

080055dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e0:	b094      	sub	sp, #80	; 0x50
 80055e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	647b      	str	r3, [r7, #68]	; 0x44
 80055e8:	2300      	movs	r3, #0
 80055ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ec:	2300      	movs	r3, #0
 80055ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055f4:	4b79      	ldr	r3, [pc, #484]	; (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 030c 	and.w	r3, r3, #12
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d00d      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0x40>
 8005600:	2b08      	cmp	r3, #8
 8005602:	f200 80e1 	bhi.w	80057c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_RCC_GetSysClockFreq+0x34>
 800560a:	2b04      	cmp	r3, #4
 800560c:	d003      	beq.n	8005616 <HAL_RCC_GetSysClockFreq+0x3a>
 800560e:	e0db      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005610:	4b73      	ldr	r3, [pc, #460]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005612:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005614:	e0db      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005616:	4b73      	ldr	r3, [pc, #460]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005618:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800561a:	e0d8      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800561c:	4b6f      	ldr	r3, [pc, #444]	; (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005624:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005626:	4b6d      	ldr	r3, [pc, #436]	; (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d063      	beq.n	80056fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005632:	4b6a      	ldr	r3, [pc, #424]	; (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	099b      	lsrs	r3, r3, #6
 8005638:	2200      	movs	r2, #0
 800563a:	63bb      	str	r3, [r7, #56]	; 0x38
 800563c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005644:	633b      	str	r3, [r7, #48]	; 0x30
 8005646:	2300      	movs	r3, #0
 8005648:	637b      	str	r3, [r7, #52]	; 0x34
 800564a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800564e:	4622      	mov	r2, r4
 8005650:	462b      	mov	r3, r5
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f04f 0100 	mov.w	r1, #0
 800565a:	0159      	lsls	r1, r3, #5
 800565c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005660:	0150      	lsls	r0, r2, #5
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4621      	mov	r1, r4
 8005668:	1a51      	subs	r1, r2, r1
 800566a:	6139      	str	r1, [r7, #16]
 800566c:	4629      	mov	r1, r5
 800566e:	eb63 0301 	sbc.w	r3, r3, r1
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005680:	4659      	mov	r1, fp
 8005682:	018b      	lsls	r3, r1, #6
 8005684:	4651      	mov	r1, sl
 8005686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800568a:	4651      	mov	r1, sl
 800568c:	018a      	lsls	r2, r1, #6
 800568e:	4651      	mov	r1, sl
 8005690:	ebb2 0801 	subs.w	r8, r2, r1
 8005694:	4659      	mov	r1, fp
 8005696:	eb63 0901 	sbc.w	r9, r3, r1
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ae:	4690      	mov	r8, r2
 80056b0:	4699      	mov	r9, r3
 80056b2:	4623      	mov	r3, r4
 80056b4:	eb18 0303 	adds.w	r3, r8, r3
 80056b8:	60bb      	str	r3, [r7, #8]
 80056ba:	462b      	mov	r3, r5
 80056bc:	eb49 0303 	adc.w	r3, r9, r3
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056ce:	4629      	mov	r1, r5
 80056d0:	024b      	lsls	r3, r1, #9
 80056d2:	4621      	mov	r1, r4
 80056d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056d8:	4621      	mov	r1, r4
 80056da:	024a      	lsls	r2, r1, #9
 80056dc:	4610      	mov	r0, r2
 80056de:	4619      	mov	r1, r3
 80056e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e2:	2200      	movs	r2, #0
 80056e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056ec:	f7fb f9ee 	bl	8000acc <__aeabi_uldivmod>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4613      	mov	r3, r2
 80056f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f8:	e058      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056fa:	4b38      	ldr	r3, [pc, #224]	; (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	099b      	lsrs	r3, r3, #6
 8005700:	2200      	movs	r2, #0
 8005702:	4618      	mov	r0, r3
 8005704:	4611      	mov	r1, r2
 8005706:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800570a:	623b      	str	r3, [r7, #32]
 800570c:	2300      	movs	r3, #0
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
 8005710:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005714:	4642      	mov	r2, r8
 8005716:	464b      	mov	r3, r9
 8005718:	f04f 0000 	mov.w	r0, #0
 800571c:	f04f 0100 	mov.w	r1, #0
 8005720:	0159      	lsls	r1, r3, #5
 8005722:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005726:	0150      	lsls	r0, r2, #5
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4641      	mov	r1, r8
 800572e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005732:	4649      	mov	r1, r9
 8005734:	eb63 0b01 	sbc.w	fp, r3, r1
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005744:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005748:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800574c:	ebb2 040a 	subs.w	r4, r2, sl
 8005750:	eb63 050b 	sbc.w	r5, r3, fp
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	00eb      	lsls	r3, r5, #3
 800575e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005762:	00e2      	lsls	r2, r4, #3
 8005764:	4614      	mov	r4, r2
 8005766:	461d      	mov	r5, r3
 8005768:	4643      	mov	r3, r8
 800576a:	18e3      	adds	r3, r4, r3
 800576c:	603b      	str	r3, [r7, #0]
 800576e:	464b      	mov	r3, r9
 8005770:	eb45 0303 	adc.w	r3, r5, r3
 8005774:	607b      	str	r3, [r7, #4]
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	f04f 0300 	mov.w	r3, #0
 800577e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005782:	4629      	mov	r1, r5
 8005784:	028b      	lsls	r3, r1, #10
 8005786:	4621      	mov	r1, r4
 8005788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800578c:	4621      	mov	r1, r4
 800578e:	028a      	lsls	r2, r1, #10
 8005790:	4610      	mov	r0, r2
 8005792:	4619      	mov	r1, r3
 8005794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005796:	2200      	movs	r2, #0
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	61fa      	str	r2, [r7, #28]
 800579c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057a0:	f7fb f994 	bl	8000acc <__aeabi_uldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4613      	mov	r3, r2
 80057aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057ac:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	0c1b      	lsrs	r3, r3, #16
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	3301      	adds	r3, #1
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057c6:	e002      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80057ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3750      	adds	r7, #80	; 0x50
 80057d4:	46bd      	mov	sp, r7
 80057d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057da:	bf00      	nop
 80057dc:	40023800 	.word	0x40023800
 80057e0:	00f42400 	.word	0x00f42400
 80057e4:	007a1200 	.word	0x007a1200

080057e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ec:	4b03      	ldr	r3, [pc, #12]	; (80057fc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ee:	681b      	ldr	r3, [r3, #0]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	20000018 	.word	0x20000018

08005800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005804:	f7ff fff0 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8005808:	4602      	mov	r2, r0
 800580a:	4b05      	ldr	r3, [pc, #20]	; (8005820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	0a9b      	lsrs	r3, r3, #10
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	4903      	ldr	r1, [pc, #12]	; (8005824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005816:	5ccb      	ldrb	r3, [r1, r3]
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800581c:	4618      	mov	r0, r3
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40023800 	.word	0x40023800
 8005824:	08008f8c 	.word	0x08008f8c

08005828 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	220f      	movs	r2, #15
 8005836:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005838:	4b12      	ldr	r3, [pc, #72]	; (8005884 <HAL_RCC_GetClockConfig+0x5c>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 0203 	and.w	r2, r3, #3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005844:	4b0f      	ldr	r3, [pc, #60]	; (8005884 <HAL_RCC_GetClockConfig+0x5c>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005850:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <HAL_RCC_GetClockConfig+0x5c>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800585c:	4b09      	ldr	r3, [pc, #36]	; (8005884 <HAL_RCC_GetClockConfig+0x5c>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	08db      	lsrs	r3, r3, #3
 8005862:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <HAL_RCC_GetClockConfig+0x60>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 020f 	and.w	r2, r3, #15
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	601a      	str	r2, [r3, #0]
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40023800 	.word	0x40023800
 8005888:	40023c00 	.word	0x40023c00

0800588c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d105      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d038      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058b4:	4b68      	ldr	r3, [pc, #416]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058ba:	f7fd fc33 	bl	8003124 <HAL_GetTick>
 80058be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058c0:	e008      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058c2:	f7fd fc2f 	bl	8003124 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e0bd      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058d4:	4b61      	ldr	r3, [pc, #388]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1f0      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	019b      	lsls	r3, r3, #6
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	071b      	lsls	r3, r3, #28
 80058f2:	495a      	ldr	r1, [pc, #360]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058fa:	4b57      	ldr	r3, [pc, #348]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005900:	f7fd fc10 	bl	8003124 <HAL_GetTick>
 8005904:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005906:	e008      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005908:	f7fd fc0c 	bl	8003124 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e09a      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800591a:	4b50      	ldr	r3, [pc, #320]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8083 	beq.w	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	4b48      	ldr	r3, [pc, #288]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	4a47      	ldr	r2, [pc, #284]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800593e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005942:	6413      	str	r3, [r2, #64]	; 0x40
 8005944:	4b45      	ldr	r3, [pc, #276]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005950:	4b43      	ldr	r3, [pc, #268]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a42      	ldr	r2, [pc, #264]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800595c:	f7fd fbe2 	bl	8003124 <HAL_GetTick>
 8005960:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005964:	f7fd fbde 	bl	8003124 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e06c      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005976:	4b3a      	ldr	r3, [pc, #232]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005982:	4b36      	ldr	r3, [pc, #216]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d02f      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	429a      	cmp	r2, r3
 800599e:	d028      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059a0:	4b2e      	ldr	r3, [pc, #184]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059aa:	4b2e      	ldr	r3, [pc, #184]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059b0:	4b2c      	ldr	r3, [pc, #176]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059b6:	4a29      	ldr	r2, [pc, #164]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059bc:	4b27      	ldr	r3, [pc, #156]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d114      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059c8:	f7fd fbac 	bl	8003124 <HAL_GetTick>
 80059cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ce:	e00a      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d0:	f7fd fba8 	bl	8003124 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	f241 3288 	movw	r2, #5000	; 0x1388
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e034      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e6:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0ee      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059fe:	d10d      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005a00:	4b16      	ldr	r3, [pc, #88]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a14:	4911      	ldr	r1, [pc, #68]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	608b      	str	r3, [r1, #8]
 8005a1a:	e005      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005a1c:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	4a0e      	ldr	r2, [pc, #56]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a26:	6093      	str	r3, [r2, #8]
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a34:	4909      	ldr	r1, [pc, #36]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	7d1a      	ldrb	r2, [r3, #20]
 8005a4a:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005a4c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	42470068 	.word	0x42470068
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	40007000 	.word	0x40007000
 8005a64:	42470e40 	.word	0x42470e40
 8005a68:	424711e0 	.word	0x424711e0

08005a6c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e083      	b.n	8005b86 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7f5b      	ldrb	r3, [r3, #29]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d105      	bne.n	8005a94 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fd f980 	bl	8002d94 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	22ca      	movs	r2, #202	; 0xca
 8005aa0:	625a      	str	r2, [r3, #36]	; 0x24
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2253      	movs	r2, #83	; 0x53
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fb84 	bl	80061b8 <RTC_EnterInitMode>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d008      	beq.n	8005ac8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	22ff      	movs	r2, #255	; 0xff
 8005abc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e05e      	b.n	8005b86 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ada:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6899      	ldr	r1, [r3, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	68d2      	ldr	r2, [r2, #12]
 8005b02:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6919      	ldr	r1, [r3, #16]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	041a      	lsls	r2, r3, #16
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b26:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10e      	bne.n	8005b54 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fb16 	bl	8006168 <HAL_RTC_WaitForSynchro>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d008      	beq.n	8005b54 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	22ff      	movs	r2, #255	; 0xff
 8005b48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e018      	b.n	8005b86 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b62:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	22ff      	movs	r2, #255	; 0xff
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005b84:	2300      	movs	r3, #0
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b8e:	b590      	push	{r4, r7, lr}
 8005b90:	b087      	sub	sp, #28
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	7f1b      	ldrb	r3, [r3, #28]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_RTC_SetTime+0x1c>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e0aa      	b.n	8005d00 <HAL_RTC_SetTime+0x172>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d126      	bne.n	8005c0a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d102      	bne.n	8005bd0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fb1b 	bl	8006210 <RTC_ByteToBcd2>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fb14 	bl	8006210 <RTC_ByteToBcd2>
 8005be8:	4603      	mov	r3, r0
 8005bea:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005bec:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	789b      	ldrb	r3, [r3, #2]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fb0c 	bl	8006210 <RTC_ByteToBcd2>
 8005bf8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005bfa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	78db      	ldrb	r3, [r3, #3]
 8005c02:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e018      	b.n	8005c3c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d102      	bne.n	8005c1e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c2a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c30:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	78db      	ldrb	r3, [r3, #3]
 8005c36:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	22ca      	movs	r2, #202	; 0xca
 8005c42:	625a      	str	r2, [r3, #36]	; 0x24
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2253      	movs	r2, #83	; 0x53
 8005c4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fab3 	bl	80061b8 <RTC_EnterInitMode>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	22ff      	movs	r2, #255	; 0xff
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2204      	movs	r2, #4
 8005c64:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e047      	b.n	8005d00 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c7a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c7e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c8e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6899      	ldr	r1, [r3, #8]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cb6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d111      	bne.n	8005cea <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fa4e 	bl	8006168 <HAL_RTC_WaitForSynchro>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00b      	beq.n	8005cea <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	22ff      	movs	r2, #255	; 0xff
 8005cd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2204      	movs	r2, #4
 8005cde:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e00a      	b.n	8005d00 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	22ff      	movs	r2, #255	; 0xff
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
  }
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd90      	pop	{r4, r7, pc}

08005d08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	7f1b      	ldrb	r3, [r3, #28]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_RTC_SetDate+0x1c>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e094      	b.n	8005e4e <HAL_RTC_SetDate+0x146>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2201      	movs	r2, #1
 8005d28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10e      	bne.n	8005d54 <HAL_RTC_SetDate+0x4c>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d008      	beq.n	8005d54 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	785b      	ldrb	r3, [r3, #1]
 8005d46:	f023 0310 	bic.w	r3, r3, #16
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	330a      	adds	r3, #10
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d11c      	bne.n	8005d94 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	78db      	ldrb	r3, [r3, #3]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fa56 	bl	8006210 <RTC_ByteToBcd2>
 8005d64:	4603      	mov	r3, r0
 8005d66:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fa4f 	bl	8006210 <RTC_ByteToBcd2>
 8005d72:	4603      	mov	r3, r0
 8005d74:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d76:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	789b      	ldrb	r3, [r3, #2]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fa47 	bl	8006210 <RTC_ByteToBcd2>
 8005d82:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005d84:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	e00e      	b.n	8005db2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	78db      	ldrb	r3, [r3, #3]
 8005d98:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	785b      	ldrb	r3, [r3, #1]
 8005d9e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005da0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005da6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	22ca      	movs	r2, #202	; 0xca
 8005db8:	625a      	str	r2, [r3, #36]	; 0x24
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2253      	movs	r2, #83	; 0x53
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f9f8 	bl	80061b8 <RTC_EnterInitMode>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00b      	beq.n	8005de6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	22ff      	movs	r2, #255	; 0xff
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e033      	b.n	8005e4e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005df0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005df4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e04:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d111      	bne.n	8005e38 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f9a7 	bl	8006168 <HAL_RTC_WaitForSynchro>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	22ff      	movs	r2, #255	; 0xff
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e00a      	b.n	8005e4e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	22ff      	movs	r2, #255	; 0xff
 8005e3e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
  }
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd90      	pop	{r4, r7, pc}
	...

08005e58 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005e58:	b590      	push	{r4, r7, lr}
 8005e5a:	b089      	sub	sp, #36	; 0x24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8005e6c:	4b93      	ldr	r3, [pc, #588]	; (80060bc <HAL_RTC_SetAlarm_IT+0x264>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a93      	ldr	r2, [pc, #588]	; (80060c0 <HAL_RTC_SetAlarm_IT+0x268>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	0adb      	lsrs	r3, r3, #11
 8005e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e7c:	fb02 f303 	mul.w	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	7f1b      	ldrb	r3, [r3, #28]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_RTC_SetAlarm_IT+0x36>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e111      	b.n	80060b2 <HAL_RTC_SetAlarm_IT+0x25a>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2202      	movs	r2, #2
 8005e98:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d137      	bne.n	8005f10 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 f9a9 	bl	8006210 <RTC_ByteToBcd2>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f9a2 	bl	8006210 <RTC_ByteToBcd2>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005ed0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	789b      	ldrb	r3, [r3, #2]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 f99a 	bl	8006210 <RTC_ByteToBcd2>
 8005edc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005ede:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	78db      	ldrb	r3, [r3, #3]
 8005ee6:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005ee8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 f98c 	bl	8006210 <RTC_ByteToBcd2>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005efc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f04:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	61fb      	str	r3, [r7, #28]
 8005f0e:	e023      	b.n	8005f58 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d102      	bne.n	8005f24 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2200      	movs	r2, #0
 8005f22:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	785b      	ldrb	r3, [r3, #1]
 8005f2e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f30:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f36:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	78db      	ldrb	r3, [r3, #3]
 8005f3c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005f3e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f46:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f48:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f4e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f54:	4313      	orrs	r3, r2
 8005f56:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	22ca      	movs	r2, #202	; 0xca
 8005f6a:	625a      	str	r2, [r3, #36]	; 0x24
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2253      	movs	r2, #83	; 0x53
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7c:	d141      	bne.n	8006002 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f8c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005f9e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	1e5a      	subs	r2, r3, #1
 8005fa4:	617a      	str	r2, [r7, #20]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10b      	bne.n	8005fc2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	22ff      	movs	r2, #255	; 0xff
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2203      	movs	r2, #3
 8005fb6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e077      	b.n	80060b2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0e7      	beq.n	8005fa0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fee:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ffe:	609a      	str	r2, [r3, #8]
 8006000:	e040      	b.n	8006084 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006010:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006022:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	1e5a      	subs	r2, r3, #1
 8006028:	617a      	str	r2, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	22ff      	movs	r2, #255	; 0xff
 8006034:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2203      	movs	r2, #3
 800603a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e035      	b.n	80060b2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0e7      	beq.n	8006024 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006072:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006082:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a0e      	ldr	r2, [pc, #56]	; (80060c4 <HAL_RTC_SetAlarm_IT+0x26c>)
 800608a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800608e:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8006090:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	4a0b      	ldr	r2, [pc, #44]	; (80060c4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8006096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800609a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	22ff      	movs	r2, #255	; 0xff
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3724      	adds	r7, #36	; 0x24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd90      	pop	{r4, r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000018 	.word	0x20000018
 80060c0:	10624dd3 	.word	0x10624dd3
 80060c4:	40013c00 	.word	0x40013c00

080060c8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d012      	beq.n	8006104 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f831 	bl	8006154 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006102:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d012      	beq.n	8006138 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f893 	bl	800624c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006136:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006138:	4b05      	ldr	r3, [pc, #20]	; (8006150 <HAL_RTC_AlarmIRQHandler+0x88>)
 800613a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800613e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	775a      	strb	r2, [r3, #29]
}
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40013c00 	.word	0x40013c00

08006154 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006182:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006184:	f7fc ffce 	bl	8003124 <HAL_GetTick>
 8006188:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800618a:	e009      	b.n	80061a0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800618c:	f7fc ffca 	bl	8003124 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800619a:	d901      	bls.n	80061a0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e007      	b.n	80061b0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0ee      	beq.n	800618c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d119      	bne.n	8006206 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f04f 32ff 	mov.w	r2, #4294967295
 80061da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061dc:	f7fc ffa2 	bl	8003124 <HAL_GetTick>
 80061e0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061e2:	e009      	b.n	80061f8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80061e4:	f7fc ff9e 	bl	8003124 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061f2:	d901      	bls.n	80061f8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e007      	b.n	8006208 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0ee      	beq.n	80061e4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	4603      	mov	r3, r0
 8006218:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800621e:	e005      	b.n	800622c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3301      	adds	r3, #1
 8006224:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	3b0a      	subs	r3, #10
 800622a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800622c:	79fb      	ldrb	r3, [r7, #7]
 800622e:	2b09      	cmp	r3, #9
 8006230:	d8f6      	bhi.n	8006220 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	b2da      	uxtb	r2, r3
 800623a:	79fb      	ldrb	r3, [r7, #7]
 800623c:	4313      	orrs	r3, r2
 800623e:	b2db      	uxtb	r3, r3
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e01d      	b.n	80062ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7fc fda0 	bl	8002dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3304      	adds	r3, #4
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f000 fb72 	bl	8006988 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b06      	cmp	r3, #6
 80062d6:	d007      	beq.n	80062e8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062fe:	b480      	push	{r7}
 8006300:	b085      	sub	sp, #20
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0201 	orr.w	r2, r2, #1
 8006314:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b06      	cmp	r3, #6
 8006326:	d007      	beq.n	8006338 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e01d      	b.n	8006394 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d106      	bne.n	8006372 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f815 	bl	800639c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3304      	adds	r3, #4
 8006382:	4619      	mov	r1, r3
 8006384:	4610      	mov	r0, r2
 8006386:	f000 faff 	bl	8006988 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2201      	movs	r2, #1
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fd86 	bl	8006ed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a10      	ldr	r2, [pc, #64]	; (8006410 <HAL_TIM_PWM_Start+0x60>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d107      	bne.n	80063e2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b06      	cmp	r3, #6
 80063f2:	d007      	beq.n	8006404 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40010000 	.word	0x40010000

08006414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b02      	cmp	r3, #2
 8006428:	d122      	bne.n	8006470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b02      	cmp	r3, #2
 8006436:	d11b      	bne.n	8006470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0202 	mvn.w	r2, #2
 8006440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa78 	bl	800694c <HAL_TIM_IC_CaptureCallback>
 800645c:	e005      	b.n	800646a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fa6a 	bl	8006938 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fa7b 	bl	8006960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b04      	cmp	r3, #4
 800647c:	d122      	bne.n	80064c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b04      	cmp	r3, #4
 800648a:	d11b      	bne.n	80064c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0204 	mvn.w	r2, #4
 8006494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fa4e 	bl	800694c <HAL_TIM_IC_CaptureCallback>
 80064b0:	e005      	b.n	80064be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa40 	bl	8006938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fa51 	bl	8006960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d122      	bne.n	8006518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d11b      	bne.n	8006518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0208 	mvn.w	r2, #8
 80064e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2204      	movs	r2, #4
 80064ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa24 	bl	800694c <HAL_TIM_IC_CaptureCallback>
 8006504:	e005      	b.n	8006512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fa16 	bl	8006938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fa27 	bl	8006960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b10      	cmp	r3, #16
 8006524:	d122      	bne.n	800656c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b10      	cmp	r3, #16
 8006532:	d11b      	bne.n	800656c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0210 	mvn.w	r2, #16
 800653c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2208      	movs	r2, #8
 8006542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f9fa 	bl	800694c <HAL_TIM_IC_CaptureCallback>
 8006558:	e005      	b.n	8006566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f9ec 	bl	8006938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f9fd 	bl	8006960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b01      	cmp	r3, #1
 8006578:	d10e      	bne.n	8006598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b01      	cmp	r3, #1
 8006586:	d107      	bne.n	8006598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0201 	mvn.w	r2, #1
 8006590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fa fe40 	bl	8001218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a2:	2b80      	cmp	r3, #128	; 0x80
 80065a4:	d10e      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b0:	2b80      	cmp	r3, #128	; 0x80
 80065b2:	d107      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fd26 	bl	8007010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ce:	2b40      	cmp	r3, #64	; 0x40
 80065d0:	d10e      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065dc:	2b40      	cmp	r3, #64	; 0x40
 80065de:	d107      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f9c2 	bl	8006974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d10e      	bne.n	800661c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f003 0320 	and.w	r3, r3, #32
 8006608:	2b20      	cmp	r3, #32
 800660a:	d107      	bne.n	800661c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f06f 0220 	mvn.w	r2, #32
 8006614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fcf0 	bl	8006ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800663a:	2302      	movs	r3, #2
 800663c:	e0b4      	b.n	80067a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2202      	movs	r2, #2
 800664a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b0c      	cmp	r3, #12
 8006652:	f200 809f 	bhi.w	8006794 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	08006691 	.word	0x08006691
 8006660:	08006795 	.word	0x08006795
 8006664:	08006795 	.word	0x08006795
 8006668:	08006795 	.word	0x08006795
 800666c:	080066d1 	.word	0x080066d1
 8006670:	08006795 	.word	0x08006795
 8006674:	08006795 	.word	0x08006795
 8006678:	08006795 	.word	0x08006795
 800667c:	08006713 	.word	0x08006713
 8006680:	08006795 	.word	0x08006795
 8006684:	08006795 	.word	0x08006795
 8006688:	08006795 	.word	0x08006795
 800668c:	08006753 	.word	0x08006753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f9f6 	bl	8006a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0208 	orr.w	r2, r2, #8
 80066aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699a      	ldr	r2, [r3, #24]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0204 	bic.w	r2, r2, #4
 80066ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6999      	ldr	r1, [r3, #24]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	691a      	ldr	r2, [r3, #16]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	619a      	str	r2, [r3, #24]
      break;
 80066ce:	e062      	b.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fa3c 	bl	8006b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	699a      	ldr	r2, [r3, #24]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699a      	ldr	r2, [r3, #24]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6999      	ldr	r1, [r3, #24]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	021a      	lsls	r2, r3, #8
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	619a      	str	r2, [r3, #24]
      break;
 8006710:	e041      	b.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fa87 	bl	8006c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69da      	ldr	r2, [r3, #28]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 0208 	orr.w	r2, r2, #8
 800672c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69da      	ldr	r2, [r3, #28]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0204 	bic.w	r2, r2, #4
 800673c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69d9      	ldr	r1, [r3, #28]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	61da      	str	r2, [r3, #28]
      break;
 8006750:	e021      	b.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fad1 	bl	8006d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69da      	ldr	r2, [r3, #28]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800676c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69da      	ldr	r2, [r3, #28]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800677c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69d9      	ldr	r1, [r3, #28]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	021a      	lsls	r2, r3, #8
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	61da      	str	r2, [r3, #28]
      break;
 8006792:	e000      	b.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006794:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <HAL_TIM_ConfigClockSource+0x18>
 80067c4:	2302      	movs	r3, #2
 80067c6:	e0b3      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x180>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006800:	d03e      	beq.n	8006880 <HAL_TIM_ConfigClockSource+0xd0>
 8006802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006806:	f200 8087 	bhi.w	8006918 <HAL_TIM_ConfigClockSource+0x168>
 800680a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680e:	f000 8085 	beq.w	800691c <HAL_TIM_ConfigClockSource+0x16c>
 8006812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006816:	d87f      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006818:	2b70      	cmp	r3, #112	; 0x70
 800681a:	d01a      	beq.n	8006852 <HAL_TIM_ConfigClockSource+0xa2>
 800681c:	2b70      	cmp	r3, #112	; 0x70
 800681e:	d87b      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006820:	2b60      	cmp	r3, #96	; 0x60
 8006822:	d050      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x116>
 8006824:	2b60      	cmp	r3, #96	; 0x60
 8006826:	d877      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006828:	2b50      	cmp	r3, #80	; 0x50
 800682a:	d03c      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0xf6>
 800682c:	2b50      	cmp	r3, #80	; 0x50
 800682e:	d873      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006830:	2b40      	cmp	r3, #64	; 0x40
 8006832:	d058      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0x136>
 8006834:	2b40      	cmp	r3, #64	; 0x40
 8006836:	d86f      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006838:	2b30      	cmp	r3, #48	; 0x30
 800683a:	d064      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x156>
 800683c:	2b30      	cmp	r3, #48	; 0x30
 800683e:	d86b      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006840:	2b20      	cmp	r3, #32
 8006842:	d060      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x156>
 8006844:	2b20      	cmp	r3, #32
 8006846:	d867      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d05c      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x156>
 800684c:	2b10      	cmp	r3, #16
 800684e:	d05a      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006850:	e062      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6899      	ldr	r1, [r3, #8]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f000 fb17 	bl	8006e94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006874:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	609a      	str	r2, [r3, #8]
      break;
 800687e:	e04e      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	6899      	ldr	r1, [r3, #8]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f000 fb00 	bl	8006e94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068a2:	609a      	str	r2, [r3, #8]
      break;
 80068a4:	e03b      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	6859      	ldr	r1, [r3, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	461a      	mov	r2, r3
 80068b4:	f000 fa74 	bl	8006da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2150      	movs	r1, #80	; 0x50
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 facd 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 80068c4:	e02b      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	6859      	ldr	r1, [r3, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	461a      	mov	r2, r3
 80068d4:	f000 fa93 	bl	8006dfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2160      	movs	r1, #96	; 0x60
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fabd 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 80068e4:	e01b      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6859      	ldr	r1, [r3, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f000 fa54 	bl	8006da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2140      	movs	r1, #64	; 0x40
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 faad 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 8006904:	e00b      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4619      	mov	r1, r3
 8006910:	4610      	mov	r0, r2
 8006912:	f000 faa4 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 8006916:	e002      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006918:	bf00      	nop
 800691a:	e000      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800691c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a34      	ldr	r2, [pc, #208]	; (8006a6c <TIM_Base_SetConfig+0xe4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d00f      	beq.n	80069c0 <TIM_Base_SetConfig+0x38>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a6:	d00b      	beq.n	80069c0 <TIM_Base_SetConfig+0x38>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a31      	ldr	r2, [pc, #196]	; (8006a70 <TIM_Base_SetConfig+0xe8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d007      	beq.n	80069c0 <TIM_Base_SetConfig+0x38>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a30      	ldr	r2, [pc, #192]	; (8006a74 <TIM_Base_SetConfig+0xec>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_Base_SetConfig+0x38>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a2f      	ldr	r2, [pc, #188]	; (8006a78 <TIM_Base_SetConfig+0xf0>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d108      	bne.n	80069d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a25      	ldr	r2, [pc, #148]	; (8006a6c <TIM_Base_SetConfig+0xe4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d01b      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e0:	d017      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <TIM_Base_SetConfig+0xe8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a21      	ldr	r2, [pc, #132]	; (8006a74 <TIM_Base_SetConfig+0xec>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d00f      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a20      	ldr	r2, [pc, #128]	; (8006a78 <TIM_Base_SetConfig+0xf0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00b      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a1f      	ldr	r2, [pc, #124]	; (8006a7c <TIM_Base_SetConfig+0xf4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d007      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a1e      	ldr	r2, [pc, #120]	; (8006a80 <TIM_Base_SetConfig+0xf8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d003      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a1d      	ldr	r2, [pc, #116]	; (8006a84 <TIM_Base_SetConfig+0xfc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d108      	bne.n	8006a24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a08      	ldr	r2, [pc, #32]	; (8006a6c <TIM_Base_SetConfig+0xe4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d103      	bne.n	8006a58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	691a      	ldr	r2, [r3, #16]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	615a      	str	r2, [r3, #20]
}
 8006a5e:	bf00      	nop
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40010000 	.word	0x40010000
 8006a70:	40000400 	.word	0x40000400
 8006a74:	40000800 	.word	0x40000800
 8006a78:	40000c00 	.word	0x40000c00
 8006a7c:	40014000 	.word	0x40014000
 8006a80:	40014400 	.word	0x40014400
 8006a84:	40014800 	.word	0x40014800

08006a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f023 0201 	bic.w	r2, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0303 	bic.w	r3, r3, #3
 8006abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f023 0302 	bic.w	r3, r3, #2
 8006ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a1c      	ldr	r2, [pc, #112]	; (8006b50 <TIM_OC1_SetConfig+0xc8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d10c      	bne.n	8006afe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f023 0308 	bic.w	r3, r3, #8
 8006aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f023 0304 	bic.w	r3, r3, #4
 8006afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a13      	ldr	r2, [pc, #76]	; (8006b50 <TIM_OC1_SetConfig+0xc8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d111      	bne.n	8006b2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	621a      	str	r2, [r3, #32]
}
 8006b44:	bf00      	nop
 8006b46:	371c      	adds	r7, #28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	40010000 	.word	0x40010000

08006b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f023 0210 	bic.w	r2, r3, #16
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0320 	bic.w	r3, r3, #32
 8006b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a1e      	ldr	r2, [pc, #120]	; (8006c28 <TIM_OC2_SetConfig+0xd4>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d10d      	bne.n	8006bd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a15      	ldr	r2, [pc, #84]	; (8006c28 <TIM_OC2_SetConfig+0xd4>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d113      	bne.n	8006c00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	621a      	str	r2, [r3, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40010000 	.word	0x40010000

08006c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f023 0303 	bic.w	r3, r3, #3
 8006c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a1d      	ldr	r2, [pc, #116]	; (8006cfc <TIM_OC3_SetConfig+0xd0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d10d      	bne.n	8006ca6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	021b      	lsls	r3, r3, #8
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a14      	ldr	r2, [pc, #80]	; (8006cfc <TIM_OC3_SetConfig+0xd0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d113      	bne.n	8006cd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	621a      	str	r2, [r3, #32]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	40010000 	.word	0x40010000

08006d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	031b      	lsls	r3, r3, #12
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a10      	ldr	r2, [pc, #64]	; (8006d9c <TIM_OC4_SetConfig+0x9c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d109      	bne.n	8006d74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	019b      	lsls	r3, r3, #6
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40010000 	.word	0x40010000

08006da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f023 0201 	bic.w	r2, r3, #1
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f023 030a 	bic.w	r3, r3, #10
 8006ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b087      	sub	sp, #28
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f023 0210 	bic.w	r2, r3, #16
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	031b      	lsls	r3, r3, #12
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	621a      	str	r2, [r3, #32]
}
 8006e52:	bf00      	nop
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b085      	sub	sp, #20
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f043 0307 	orr.w	r3, r3, #7
 8006e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	609a      	str	r2, [r3, #8]
}
 8006e88:	bf00      	nop
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	021a      	lsls	r2, r3, #8
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	609a      	str	r2, [r3, #8]
}
 8006ec8:	bf00      	nop
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a1a      	ldr	r2, [r3, #32]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	401a      	ands	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a1a      	ldr	r2, [r3, #32]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f003 031f 	and.w	r3, r3, #31
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	621a      	str	r2, [r3, #32]
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f34:	2302      	movs	r3, #2
 8006f36:	e050      	b.n	8006fda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1c      	ldr	r2, [pc, #112]	; (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d018      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f84:	d013      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a18      	ldr	r2, [pc, #96]	; (8006fec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00e      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a16      	ldr	r2, [pc, #88]	; (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d009      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a15      	ldr	r2, [pc, #84]	; (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d004      	beq.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a13      	ldr	r2, [pc, #76]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d10c      	bne.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40010000 	.word	0x40010000
 8006fec:	40000400 	.word	0x40000400
 8006ff0:	40000800 	.word	0x40000800
 8006ff4:	40000c00 	.word	0x40000c00
 8006ff8:	40014000 	.word	0x40014000

08006ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007036:	2b84      	cmp	r3, #132	; 0x84
 8007038:	d005      	beq.n	8007046 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800703a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	3303      	adds	r3, #3
 8007044:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007046:	68fb      	ldr	r3, [r7, #12]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007058:	f000 fade 	bl	8007618 <vTaskStartScheduler>
  
  return osOK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	bd80      	pop	{r7, pc}

08007062 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007064:	b089      	sub	sp, #36	; 0x24
 8007066:	af04      	add	r7, sp, #16
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d020      	beq.n	80070b6 <osThreadCreate+0x54>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01c      	beq.n	80070b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685c      	ldr	r4, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681d      	ldr	r5, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691e      	ldr	r6, [r3, #16]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff ffc8 	bl	8007024 <makeFreeRtosPriority>
 8007094:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800709e:	9202      	str	r2, [sp, #8]
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	9100      	str	r1, [sp, #0]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	4632      	mov	r2, r6
 80070a8:	4629      	mov	r1, r5
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 f8ed 	bl	800728a <xTaskCreateStatic>
 80070b0:	4603      	mov	r3, r0
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	e01c      	b.n	80070f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685c      	ldr	r4, [r3, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070c2:	b29e      	uxth	r6, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff ffaa 	bl	8007024 <makeFreeRtosPriority>
 80070d0:	4602      	mov	r2, r0
 80070d2:	f107 030c 	add.w	r3, r7, #12
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	9200      	str	r2, [sp, #0]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	4632      	mov	r2, r6
 80070de:	4629      	mov	r1, r5
 80070e0:	4620      	mov	r0, r4
 80070e2:	f000 f92f 	bl	8007344 <xTaskCreate>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d001      	beq.n	80070f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80070ec:	2300      	movs	r3, #0
 80070ee:	e000      	b.n	80070f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80070f0:	68fb      	ldr	r3, [r7, #12]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <osDelay+0x16>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	e000      	b.n	8007112 <osDelay+0x18>
 8007110:	2301      	movs	r3, #1
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fa4c 	bl	80075b0 <vTaskDelay>
  
  return osOK;
 8007118:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f103 0208 	add.w	r2, r3, #8
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f04f 32ff 	mov.w	r2, #4294967295
 800713a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f103 0208 	add.w	r2, r3, #8
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f103 0208 	add.w	r2, r3, #8
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	601a      	str	r2, [r3, #0]
}
 80071b8:	bf00      	nop
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071da:	d103      	bne.n	80071e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	e00c      	b.n	80071fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3308      	adds	r3, #8
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	e002      	b.n	80071f2 <vListInsert+0x2e>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d2f6      	bcs.n	80071ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	601a      	str	r2, [r3, #0]
}
 800722a:	bf00      	nop
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6892      	ldr	r2, [r2, #8]
 800724c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6852      	ldr	r2, [r2, #4]
 8007256:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	429a      	cmp	r2, r3
 8007260:	d103      	bne.n	800726a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689a      	ldr	r2, [r3, #8]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	1e5a      	subs	r2, r3, #1
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800728a:	b580      	push	{r7, lr}
 800728c:	b08e      	sub	sp, #56	; 0x38
 800728e:	af04      	add	r7, sp, #16
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	60b9      	str	r1, [r7, #8]
 8007294:	607a      	str	r2, [r7, #4]
 8007296:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10a      	bne.n	80072b4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10a      	bne.n	80072d0 <xTaskCreateStatic+0x46>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	61fb      	str	r3, [r7, #28]
}
 80072cc:	bf00      	nop
 80072ce:	e7fe      	b.n	80072ce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072d0:	2354      	movs	r3, #84	; 0x54
 80072d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2b54      	cmp	r3, #84	; 0x54
 80072d8:	d00a      	beq.n	80072f0 <xTaskCreateStatic+0x66>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	61bb      	str	r3, [r7, #24]
}
 80072ec:	bf00      	nop
 80072ee:	e7fe      	b.n	80072ee <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80072f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d01e      	beq.n	8007336 <xTaskCreateStatic+0xac>
 80072f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d01b      	beq.n	8007336 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007306:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	2202      	movs	r2, #2
 800730c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007310:	2300      	movs	r3, #0
 8007312:	9303      	str	r3, [sp, #12]
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	9302      	str	r3, [sp, #8]
 8007318:	f107 0314 	add.w	r3, r7, #20
 800731c:	9301      	str	r3, [sp, #4]
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	68b9      	ldr	r1, [r7, #8]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 f850 	bl	80073ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800732e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007330:	f000 f8d4 	bl	80074dc <prvAddNewTaskToReadyList>
 8007334:	e001      	b.n	800733a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800733a:	697b      	ldr	r3, [r7, #20]
	}
 800733c:	4618      	mov	r0, r3
 800733e:	3728      	adds	r7, #40	; 0x28
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007344:	b580      	push	{r7, lr}
 8007346:	b08c      	sub	sp, #48	; 0x30
 8007348:	af04      	add	r7, sp, #16
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	603b      	str	r3, [r7, #0]
 8007350:	4613      	mov	r3, r2
 8007352:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007354:	88fb      	ldrh	r3, [r7, #6]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fec5 	bl	80080e8 <pvPortMalloc>
 800735e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00e      	beq.n	8007384 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007366:	2054      	movs	r0, #84	; 0x54
 8007368:	f000 febe 	bl	80080e8 <pvPortMalloc>
 800736c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d003      	beq.n	800737c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	631a      	str	r2, [r3, #48]	; 0x30
 800737a:	e005      	b.n	8007388 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800737c:	6978      	ldr	r0, [r7, #20]
 800737e:	f000 ff77 	bl	8008270 <vPortFree>
 8007382:	e001      	b.n	8007388 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007384:	2300      	movs	r3, #0
 8007386:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d017      	beq.n	80073be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007396:	88fa      	ldrh	r2, [r7, #6]
 8007398:	2300      	movs	r3, #0
 800739a:	9303      	str	r3, [sp, #12]
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	9302      	str	r3, [sp, #8]
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	68b9      	ldr	r1, [r7, #8]
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 f80e 	bl	80073ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073b2:	69f8      	ldr	r0, [r7, #28]
 80073b4:	f000 f892 	bl	80074dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073b8:	2301      	movs	r3, #1
 80073ba:	61bb      	str	r3, [r7, #24]
 80073bc:	e002      	b.n	80073c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073be:	f04f 33ff 	mov.w	r3, #4294967295
 80073c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073c4:	69bb      	ldr	r3, [r7, #24]
	}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3720      	adds	r7, #32
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b088      	sub	sp, #32
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	607a      	str	r2, [r7, #4]
 80073da:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80073e6:	3b01      	subs	r3, #1
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	f023 0307 	bic.w	r3, r3, #7
 80073f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	617b      	str	r3, [r7, #20]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01f      	beq.n	800745c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800741c:	2300      	movs	r3, #0
 800741e:	61fb      	str	r3, [r7, #28]
 8007420:	e012      	b.n	8007448 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4413      	add	r3, r2
 8007428:	7819      	ldrb	r1, [r3, #0]
 800742a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	4413      	add	r3, r2
 8007430:	3334      	adds	r3, #52	; 0x34
 8007432:	460a      	mov	r2, r1
 8007434:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	4413      	add	r3, r2
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d006      	beq.n	8007450 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	3301      	adds	r3, #1
 8007446:	61fb      	str	r3, [r7, #28]
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	2b0f      	cmp	r3, #15
 800744c:	d9e9      	bls.n	8007422 <prvInitialiseNewTask+0x54>
 800744e:	e000      	b.n	8007452 <prvInitialiseNewTask+0x84>
			{
				break;
 8007450:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800745a:	e003      	b.n	8007464 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	2b06      	cmp	r3, #6
 8007468:	d901      	bls.n	800746e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800746a:	2306      	movs	r3, #6
 800746c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007472:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007478:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	2200      	movs	r2, #0
 800747e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	3304      	adds	r3, #4
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff fe6c 	bl	8007162 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	3318      	adds	r3, #24
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff fe67 	bl	8007162 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007498:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	f1c3 0207 	rsb	r2, r3, #7
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	2200      	movs	r2, #0
 80074ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	69b8      	ldr	r0, [r7, #24]
 80074be:	f000 fc05 	bl	8007ccc <pxPortInitialiseStack>
 80074c2:	4602      	mov	r2, r0
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074d4:	bf00      	nop
 80074d6:	3720      	adds	r7, #32
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074e4:	f000 fd1e 	bl	8007f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074e8:	4b2a      	ldr	r3, [pc, #168]	; (8007594 <prvAddNewTaskToReadyList+0xb8>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3301      	adds	r3, #1
 80074ee:	4a29      	ldr	r2, [pc, #164]	; (8007594 <prvAddNewTaskToReadyList+0xb8>)
 80074f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074f2:	4b29      	ldr	r3, [pc, #164]	; (8007598 <prvAddNewTaskToReadyList+0xbc>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d109      	bne.n	800750e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074fa:	4a27      	ldr	r2, [pc, #156]	; (8007598 <prvAddNewTaskToReadyList+0xbc>)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007500:	4b24      	ldr	r3, [pc, #144]	; (8007594 <prvAddNewTaskToReadyList+0xb8>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d110      	bne.n	800752a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007508:	f000 fabc 	bl	8007a84 <prvInitialiseTaskLists>
 800750c:	e00d      	b.n	800752a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800750e:	4b23      	ldr	r3, [pc, #140]	; (800759c <prvAddNewTaskToReadyList+0xc0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007516:	4b20      	ldr	r3, [pc, #128]	; (8007598 <prvAddNewTaskToReadyList+0xbc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	429a      	cmp	r2, r3
 8007522:	d802      	bhi.n	800752a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007524:	4a1c      	ldr	r2, [pc, #112]	; (8007598 <prvAddNewTaskToReadyList+0xbc>)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800752a:	4b1d      	ldr	r3, [pc, #116]	; (80075a0 <prvAddNewTaskToReadyList+0xc4>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3301      	adds	r3, #1
 8007530:	4a1b      	ldr	r2, [pc, #108]	; (80075a0 <prvAddNewTaskToReadyList+0xc4>)
 8007532:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	2201      	movs	r2, #1
 800753a:	409a      	lsls	r2, r3
 800753c:	4b19      	ldr	r3, [pc, #100]	; (80075a4 <prvAddNewTaskToReadyList+0xc8>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4313      	orrs	r3, r2
 8007542:	4a18      	ldr	r2, [pc, #96]	; (80075a4 <prvAddNewTaskToReadyList+0xc8>)
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4a15      	ldr	r2, [pc, #84]	; (80075a8 <prvAddNewTaskToReadyList+0xcc>)
 8007554:	441a      	add	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3304      	adds	r3, #4
 800755a:	4619      	mov	r1, r3
 800755c:	4610      	mov	r0, r2
 800755e:	f7ff fe0d 	bl	800717c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007562:	f000 fd0f 	bl	8007f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007566:	4b0d      	ldr	r3, [pc, #52]	; (800759c <prvAddNewTaskToReadyList+0xc0>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00e      	beq.n	800758c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800756e:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <prvAddNewTaskToReadyList+0xbc>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	429a      	cmp	r2, r3
 800757a:	d207      	bcs.n	800758c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800757c:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <prvAddNewTaskToReadyList+0xd0>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800758c:	bf00      	nop
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	20000838 	.word	0x20000838
 8007598:	20000738 	.word	0x20000738
 800759c:	20000844 	.word	0x20000844
 80075a0:	20000854 	.word	0x20000854
 80075a4:	20000840 	.word	0x20000840
 80075a8:	2000073c 	.word	0x2000073c
 80075ac:	e000ed04 	.word	0xe000ed04

080075b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d017      	beq.n	80075f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075c2:	4b13      	ldr	r3, [pc, #76]	; (8007610 <vTaskDelay+0x60>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <vTaskDelay+0x30>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	60bb      	str	r3, [r7, #8]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80075e0:	f000 f87a 	bl	80076d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075e4:	2100      	movs	r1, #0
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fb0a 	bl	8007c00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075ec:	f000 f882 	bl	80076f4 <xTaskResumeAll>
 80075f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d107      	bne.n	8007608 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80075f8:	4b06      	ldr	r3, [pc, #24]	; (8007614 <vTaskDelay+0x64>)
 80075fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	20000860 	.word	0x20000860
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08a      	sub	sp, #40	; 0x28
 800761c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007622:	2300      	movs	r3, #0
 8007624:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007626:	463a      	mov	r2, r7
 8007628:	1d39      	adds	r1, r7, #4
 800762a:	f107 0308 	add.w	r3, r7, #8
 800762e:	4618      	mov	r0, r3
 8007630:	f7fa fdb2 	bl	8002198 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	9202      	str	r2, [sp, #8]
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	2300      	movs	r3, #0
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	2300      	movs	r3, #0
 8007644:	460a      	mov	r2, r1
 8007646:	491e      	ldr	r1, [pc, #120]	; (80076c0 <vTaskStartScheduler+0xa8>)
 8007648:	481e      	ldr	r0, [pc, #120]	; (80076c4 <vTaskStartScheduler+0xac>)
 800764a:	f7ff fe1e 	bl	800728a <xTaskCreateStatic>
 800764e:	4603      	mov	r3, r0
 8007650:	4a1d      	ldr	r2, [pc, #116]	; (80076c8 <vTaskStartScheduler+0xb0>)
 8007652:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007654:	4b1c      	ldr	r3, [pc, #112]	; (80076c8 <vTaskStartScheduler+0xb0>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800765c:	2301      	movs	r3, #1
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	e001      	b.n	8007666 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d116      	bne.n	800769a <vTaskStartScheduler+0x82>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	613b      	str	r3, [r7, #16]
}
 800767e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007680:	4b12      	ldr	r3, [pc, #72]	; (80076cc <vTaskStartScheduler+0xb4>)
 8007682:	f04f 32ff 	mov.w	r2, #4294967295
 8007686:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007688:	4b11      	ldr	r3, [pc, #68]	; (80076d0 <vTaskStartScheduler+0xb8>)
 800768a:	2201      	movs	r2, #1
 800768c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800768e:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <vTaskStartScheduler+0xbc>)
 8007690:	2200      	movs	r2, #0
 8007692:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007694:	f000 fba4 	bl	8007de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007698:	e00e      	b.n	80076b8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a0:	d10a      	bne.n	80076b8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	60fb      	str	r3, [r7, #12]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <vTaskStartScheduler+0x9e>
}
 80076b8:	bf00      	nop
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	08008f54 	.word	0x08008f54
 80076c4:	08007a55 	.word	0x08007a55
 80076c8:	2000085c 	.word	0x2000085c
 80076cc:	20000858 	.word	0x20000858
 80076d0:	20000844 	.word	0x20000844
 80076d4:	2000083c 	.word	0x2000083c

080076d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80076dc:	4b04      	ldr	r3, [pc, #16]	; (80076f0 <vTaskSuspendAll+0x18>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3301      	adds	r3, #1
 80076e2:	4a03      	ldr	r2, [pc, #12]	; (80076f0 <vTaskSuspendAll+0x18>)
 80076e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80076e6:	bf00      	nop
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	20000860 	.word	0x20000860

080076f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076fe:	2300      	movs	r3, #0
 8007700:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007702:	4b41      	ldr	r3, [pc, #260]	; (8007808 <xTaskResumeAll+0x114>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <xTaskResumeAll+0x2c>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	603b      	str	r3, [r7, #0]
}
 800771c:	bf00      	nop
 800771e:	e7fe      	b.n	800771e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007720:	f000 fc00 	bl	8007f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007724:	4b38      	ldr	r3, [pc, #224]	; (8007808 <xTaskResumeAll+0x114>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3b01      	subs	r3, #1
 800772a:	4a37      	ldr	r2, [pc, #220]	; (8007808 <xTaskResumeAll+0x114>)
 800772c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800772e:	4b36      	ldr	r3, [pc, #216]	; (8007808 <xTaskResumeAll+0x114>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d161      	bne.n	80077fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007736:	4b35      	ldr	r3, [pc, #212]	; (800780c <xTaskResumeAll+0x118>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d05d      	beq.n	80077fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800773e:	e02e      	b.n	800779e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007740:	4b33      	ldr	r3, [pc, #204]	; (8007810 <xTaskResumeAll+0x11c>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3318      	adds	r3, #24
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff fd72 	bl	8007236 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3304      	adds	r3, #4
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff fd6d 	bl	8007236 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	2201      	movs	r2, #1
 8007762:	409a      	lsls	r2, r3
 8007764:	4b2b      	ldr	r3, [pc, #172]	; (8007814 <xTaskResumeAll+0x120>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4313      	orrs	r3, r2
 800776a:	4a2a      	ldr	r2, [pc, #168]	; (8007814 <xTaskResumeAll+0x120>)
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4a27      	ldr	r2, [pc, #156]	; (8007818 <xTaskResumeAll+0x124>)
 800777c:	441a      	add	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3304      	adds	r3, #4
 8007782:	4619      	mov	r1, r3
 8007784:	4610      	mov	r0, r2
 8007786:	f7ff fcf9 	bl	800717c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778e:	4b23      	ldr	r3, [pc, #140]	; (800781c <xTaskResumeAll+0x128>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	429a      	cmp	r2, r3
 8007796:	d302      	bcc.n	800779e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007798:	4b21      	ldr	r3, [pc, #132]	; (8007820 <xTaskResumeAll+0x12c>)
 800779a:	2201      	movs	r2, #1
 800779c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800779e:	4b1c      	ldr	r3, [pc, #112]	; (8007810 <xTaskResumeAll+0x11c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1cc      	bne.n	8007740 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077ac:	f000 fa08 	bl	8007bc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80077b0:	4b1c      	ldr	r3, [pc, #112]	; (8007824 <xTaskResumeAll+0x130>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d010      	beq.n	80077de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077bc:	f000 f836 	bl	800782c <xTaskIncrementTick>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80077c6:	4b16      	ldr	r3, [pc, #88]	; (8007820 <xTaskResumeAll+0x12c>)
 80077c8:	2201      	movs	r2, #1
 80077ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1f1      	bne.n	80077bc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80077d8:	4b12      	ldr	r3, [pc, #72]	; (8007824 <xTaskResumeAll+0x130>)
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077de:	4b10      	ldr	r3, [pc, #64]	; (8007820 <xTaskResumeAll+0x12c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d009      	beq.n	80077fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077e6:	2301      	movs	r3, #1
 80077e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077ea:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <xTaskResumeAll+0x134>)
 80077ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077fa:	f000 fbc3 	bl	8007f84 <vPortExitCritical>

	return xAlreadyYielded;
 80077fe:	68bb      	ldr	r3, [r7, #8]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	20000860 	.word	0x20000860
 800780c:	20000838 	.word	0x20000838
 8007810:	200007f8 	.word	0x200007f8
 8007814:	20000840 	.word	0x20000840
 8007818:	2000073c 	.word	0x2000073c
 800781c:	20000738 	.word	0x20000738
 8007820:	2000084c 	.word	0x2000084c
 8007824:	20000848 	.word	0x20000848
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007832:	2300      	movs	r3, #0
 8007834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007836:	4b4e      	ldr	r3, [pc, #312]	; (8007970 <xTaskIncrementTick+0x144>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	f040 8088 	bne.w	8007950 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007840:	4b4c      	ldr	r3, [pc, #304]	; (8007974 <xTaskIncrementTick+0x148>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3301      	adds	r3, #1
 8007846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007848:	4a4a      	ldr	r2, [pc, #296]	; (8007974 <xTaskIncrementTick+0x148>)
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d120      	bne.n	8007896 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007854:	4b48      	ldr	r3, [pc, #288]	; (8007978 <xTaskIncrementTick+0x14c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <xTaskIncrementTick+0x48>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	603b      	str	r3, [r7, #0]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <xTaskIncrementTick+0x46>
 8007874:	4b40      	ldr	r3, [pc, #256]	; (8007978 <xTaskIncrementTick+0x14c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	4b40      	ldr	r3, [pc, #256]	; (800797c <xTaskIncrementTick+0x150>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a3e      	ldr	r2, [pc, #248]	; (8007978 <xTaskIncrementTick+0x14c>)
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	4a3e      	ldr	r2, [pc, #248]	; (800797c <xTaskIncrementTick+0x150>)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	4b3d      	ldr	r3, [pc, #244]	; (8007980 <xTaskIncrementTick+0x154>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3301      	adds	r3, #1
 800788e:	4a3c      	ldr	r2, [pc, #240]	; (8007980 <xTaskIncrementTick+0x154>)
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	f000 f995 	bl	8007bc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007896:	4b3b      	ldr	r3, [pc, #236]	; (8007984 <xTaskIncrementTick+0x158>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	429a      	cmp	r2, r3
 800789e:	d348      	bcc.n	8007932 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078a0:	4b35      	ldr	r3, [pc, #212]	; (8007978 <xTaskIncrementTick+0x14c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d104      	bne.n	80078b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078aa:	4b36      	ldr	r3, [pc, #216]	; (8007984 <xTaskIncrementTick+0x158>)
 80078ac:	f04f 32ff 	mov.w	r2, #4294967295
 80078b0:	601a      	str	r2, [r3, #0]
					break;
 80078b2:	e03e      	b.n	8007932 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b4:	4b30      	ldr	r3, [pc, #192]	; (8007978 <xTaskIncrementTick+0x14c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d203      	bcs.n	80078d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078cc:	4a2d      	ldr	r2, [pc, #180]	; (8007984 <xTaskIncrementTick+0x158>)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078d2:	e02e      	b.n	8007932 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff fcac 	bl	8007236 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d004      	beq.n	80078f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	3318      	adds	r3, #24
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7ff fca3 	bl	8007236 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f4:	2201      	movs	r2, #1
 80078f6:	409a      	lsls	r2, r3
 80078f8:	4b23      	ldr	r3, [pc, #140]	; (8007988 <xTaskIncrementTick+0x15c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	4a22      	ldr	r2, [pc, #136]	; (8007988 <xTaskIncrementTick+0x15c>)
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	4613      	mov	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4a1f      	ldr	r2, [pc, #124]	; (800798c <xTaskIncrementTick+0x160>)
 8007910:	441a      	add	r2, r3
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	3304      	adds	r3, #4
 8007916:	4619      	mov	r1, r3
 8007918:	4610      	mov	r0, r2
 800791a:	f7ff fc2f 	bl	800717c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007922:	4b1b      	ldr	r3, [pc, #108]	; (8007990 <xTaskIncrementTick+0x164>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	429a      	cmp	r2, r3
 800792a:	d3b9      	bcc.n	80078a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800792c:	2301      	movs	r3, #1
 800792e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007930:	e7b6      	b.n	80078a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007932:	4b17      	ldr	r3, [pc, #92]	; (8007990 <xTaskIncrementTick+0x164>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007938:	4914      	ldr	r1, [pc, #80]	; (800798c <xTaskIncrementTick+0x160>)
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	440b      	add	r3, r1
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d907      	bls.n	800795a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800794a:	2301      	movs	r3, #1
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	e004      	b.n	800795a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007950:	4b10      	ldr	r3, [pc, #64]	; (8007994 <xTaskIncrementTick+0x168>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3301      	adds	r3, #1
 8007956:	4a0f      	ldr	r2, [pc, #60]	; (8007994 <xTaskIncrementTick+0x168>)
 8007958:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800795a:	4b0f      	ldr	r3, [pc, #60]	; (8007998 <xTaskIncrementTick+0x16c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007962:	2301      	movs	r3, #1
 8007964:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007966:	697b      	ldr	r3, [r7, #20]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20000860 	.word	0x20000860
 8007974:	2000083c 	.word	0x2000083c
 8007978:	200007f0 	.word	0x200007f0
 800797c:	200007f4 	.word	0x200007f4
 8007980:	20000850 	.word	0x20000850
 8007984:	20000858 	.word	0x20000858
 8007988:	20000840 	.word	0x20000840
 800798c:	2000073c 	.word	0x2000073c
 8007990:	20000738 	.word	0x20000738
 8007994:	20000848 	.word	0x20000848
 8007998:	2000084c 	.word	0x2000084c

0800799c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079a2:	4b27      	ldr	r3, [pc, #156]	; (8007a40 <vTaskSwitchContext+0xa4>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079aa:	4b26      	ldr	r3, [pc, #152]	; (8007a44 <vTaskSwitchContext+0xa8>)
 80079ac:	2201      	movs	r2, #1
 80079ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079b0:	e03f      	b.n	8007a32 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80079b2:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <vTaskSwitchContext+0xa8>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b8:	4b23      	ldr	r3, [pc, #140]	; (8007a48 <vTaskSwitchContext+0xac>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	fab3 f383 	clz	r3, r3
 80079c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80079c6:	7afb      	ldrb	r3, [r7, #11]
 80079c8:	f1c3 031f 	rsb	r3, r3, #31
 80079cc:	617b      	str	r3, [r7, #20]
 80079ce:	491f      	ldr	r1, [pc, #124]	; (8007a4c <vTaskSwitchContext+0xb0>)
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	607b      	str	r3, [r7, #4]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <vTaskSwitchContext+0x5a>
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4a12      	ldr	r2, [pc, #72]	; (8007a4c <vTaskSwitchContext+0xb0>)
 8007a04:	4413      	add	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	605a      	str	r2, [r3, #4]
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	3308      	adds	r3, #8
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d104      	bne.n	8007a28 <vTaskSwitchContext+0x8c>
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	605a      	str	r2, [r3, #4]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	4a08      	ldr	r2, [pc, #32]	; (8007a50 <vTaskSwitchContext+0xb4>)
 8007a30:	6013      	str	r3, [r2, #0]
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	20000860 	.word	0x20000860
 8007a44:	2000084c 	.word	0x2000084c
 8007a48:	20000840 	.word	0x20000840
 8007a4c:	2000073c 	.word	0x2000073c
 8007a50:	20000738 	.word	0x20000738

08007a54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a5c:	f000 f852 	bl	8007b04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a60:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <prvIdleTask+0x28>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d9f9      	bls.n	8007a5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <prvIdleTask+0x2c>)
 8007a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a78:	e7f0      	b.n	8007a5c <prvIdleTask+0x8>
 8007a7a:	bf00      	nop
 8007a7c:	2000073c 	.word	0x2000073c
 8007a80:	e000ed04 	.word	0xe000ed04

08007a84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	607b      	str	r3, [r7, #4]
 8007a8e:	e00c      	b.n	8007aaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4a12      	ldr	r2, [pc, #72]	; (8007ae4 <prvInitialiseTaskLists+0x60>)
 8007a9c:	4413      	add	r3, r2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff fb3f 	bl	8007122 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	607b      	str	r3, [r7, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b06      	cmp	r3, #6
 8007aae:	d9ef      	bls.n	8007a90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ab0:	480d      	ldr	r0, [pc, #52]	; (8007ae8 <prvInitialiseTaskLists+0x64>)
 8007ab2:	f7ff fb36 	bl	8007122 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ab6:	480d      	ldr	r0, [pc, #52]	; (8007aec <prvInitialiseTaskLists+0x68>)
 8007ab8:	f7ff fb33 	bl	8007122 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007abc:	480c      	ldr	r0, [pc, #48]	; (8007af0 <prvInitialiseTaskLists+0x6c>)
 8007abe:	f7ff fb30 	bl	8007122 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ac2:	480c      	ldr	r0, [pc, #48]	; (8007af4 <prvInitialiseTaskLists+0x70>)
 8007ac4:	f7ff fb2d 	bl	8007122 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ac8:	480b      	ldr	r0, [pc, #44]	; (8007af8 <prvInitialiseTaskLists+0x74>)
 8007aca:	f7ff fb2a 	bl	8007122 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ace:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <prvInitialiseTaskLists+0x78>)
 8007ad0:	4a05      	ldr	r2, [pc, #20]	; (8007ae8 <prvInitialiseTaskLists+0x64>)
 8007ad2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ad4:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <prvInitialiseTaskLists+0x7c>)
 8007ad6:	4a05      	ldr	r2, [pc, #20]	; (8007aec <prvInitialiseTaskLists+0x68>)
 8007ad8:	601a      	str	r2, [r3, #0]
}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	2000073c 	.word	0x2000073c
 8007ae8:	200007c8 	.word	0x200007c8
 8007aec:	200007dc 	.word	0x200007dc
 8007af0:	200007f8 	.word	0x200007f8
 8007af4:	2000080c 	.word	0x2000080c
 8007af8:	20000824 	.word	0x20000824
 8007afc:	200007f0 	.word	0x200007f0
 8007b00:	200007f4 	.word	0x200007f4

08007b04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b0a:	e019      	b.n	8007b40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b0c:	f000 fa0a 	bl	8007f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b10:	4b10      	ldr	r3, [pc, #64]	; (8007b54 <prvCheckTasksWaitingTermination+0x50>)
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff fb8a 	bl	8007236 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b22:	4b0d      	ldr	r3, [pc, #52]	; (8007b58 <prvCheckTasksWaitingTermination+0x54>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	4a0b      	ldr	r2, [pc, #44]	; (8007b58 <prvCheckTasksWaitingTermination+0x54>)
 8007b2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b2c:	4b0b      	ldr	r3, [pc, #44]	; (8007b5c <prvCheckTasksWaitingTermination+0x58>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	4a0a      	ldr	r2, [pc, #40]	; (8007b5c <prvCheckTasksWaitingTermination+0x58>)
 8007b34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b36:	f000 fa25 	bl	8007f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f810 	bl	8007b60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b40:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <prvCheckTasksWaitingTermination+0x58>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e1      	bne.n	8007b0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	2000080c 	.word	0x2000080c
 8007b58:	20000838 	.word	0x20000838
 8007b5c:	20000820 	.word	0x20000820

08007b60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d108      	bne.n	8007b84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fb7a 	bl	8008270 <vPortFree>
				vPortFree( pxTCB );
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fb77 	bl	8008270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b82:	e018      	b.n	8007bb6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d103      	bne.n	8007b96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fb6e 	bl	8008270 <vPortFree>
	}
 8007b94:	e00f      	b.n	8007bb6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d00a      	beq.n	8007bb6 <prvDeleteTCB+0x56>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	60fb      	str	r3, [r7, #12]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <prvDeleteTCB+0x54>
	}
 8007bb6:	bf00      	nop
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bc6:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <prvResetNextTaskUnblockTime+0x38>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d104      	bne.n	8007bda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bd0:	4b0a      	ldr	r3, [pc, #40]	; (8007bfc <prvResetNextTaskUnblockTime+0x3c>)
 8007bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bd8:	e008      	b.n	8007bec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bda:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <prvResetNextTaskUnblockTime+0x38>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	4a04      	ldr	r2, [pc, #16]	; (8007bfc <prvResetNextTaskUnblockTime+0x3c>)
 8007bea:	6013      	str	r3, [r2, #0]
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	200007f0 	.word	0x200007f0
 8007bfc:	20000858 	.word	0x20000858

08007c00 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c0a:	4b29      	ldr	r3, [pc, #164]	; (8007cb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c10:	4b28      	ldr	r3, [pc, #160]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3304      	adds	r3, #4
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff fb0d 	bl	8007236 <uxListRemove>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10b      	bne.n	8007c3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c22:	4b24      	ldr	r3, [pc, #144]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c28:	2201      	movs	r2, #1
 8007c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2e:	43da      	mvns	r2, r3
 8007c30:	4b21      	ldr	r3, [pc, #132]	; (8007cb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4013      	ands	r3, r2
 8007c36:	4a20      	ldr	r2, [pc, #128]	; (8007cb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c40:	d10a      	bne.n	8007c58 <prvAddCurrentTaskToDelayedList+0x58>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d007      	beq.n	8007c58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c48:	4b1a      	ldr	r3, [pc, #104]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	4619      	mov	r1, r3
 8007c50:	481a      	ldr	r0, [pc, #104]	; (8007cbc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007c52:	f7ff fa93 	bl	800717c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c56:	e026      	b.n	8007ca6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c60:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d209      	bcs.n	8007c84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c70:	4b13      	ldr	r3, [pc, #76]	; (8007cc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	4b0f      	ldr	r3, [pc, #60]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	f7ff faa1 	bl	80071c4 <vListInsert>
}
 8007c82:	e010      	b.n	8007ca6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c84:	4b0f      	ldr	r3, [pc, #60]	; (8007cc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	4b0a      	ldr	r3, [pc, #40]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4610      	mov	r0, r2
 8007c92:	f7ff fa97 	bl	80071c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c96:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d202      	bcs.n	8007ca6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ca0:	4a09      	ldr	r2, [pc, #36]	; (8007cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6013      	str	r3, [r2, #0]
}
 8007ca6:	bf00      	nop
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	2000083c 	.word	0x2000083c
 8007cb4:	20000738 	.word	0x20000738
 8007cb8:	20000840 	.word	0x20000840
 8007cbc:	20000824 	.word	0x20000824
 8007cc0:	200007f4 	.word	0x200007f4
 8007cc4:	200007f0 	.word	0x200007f0
 8007cc8:	20000858 	.word	0x20000858

08007ccc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3b04      	subs	r3, #4
 8007cdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3b04      	subs	r3, #4
 8007cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f023 0201 	bic.w	r2, r3, #1
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3b04      	subs	r3, #4
 8007cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cfc:	4a0c      	ldr	r2, [pc, #48]	; (8007d30 <pxPortInitialiseStack+0x64>)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3b14      	subs	r3, #20
 8007d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3b04      	subs	r3, #4
 8007d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f06f 0202 	mvn.w	r2, #2
 8007d1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3b20      	subs	r3, #32
 8007d20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d22:	68fb      	ldr	r3, [r7, #12]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	08007d35 	.word	0x08007d35

08007d34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d3e:	4b12      	ldr	r3, [pc, #72]	; (8007d88 <prvTaskExitError+0x54>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d46:	d00a      	beq.n	8007d5e <prvTaskExitError+0x2a>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	60fb      	str	r3, [r7, #12]
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <prvTaskExitError+0x28>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60bb      	str	r3, [r7, #8]
}
 8007d70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d72:	bf00      	nop
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0fc      	beq.n	8007d74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	20000024 	.word	0x20000024
 8007d8c:	00000000 	.word	0x00000000

08007d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <pxCurrentTCBConst2>)
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	6808      	ldr	r0, [r1, #0]
 8007d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9a:	f380 8809 	msr	PSP, r0
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f380 8811 	msr	BASEPRI, r0
 8007daa:	4770      	bx	lr
 8007dac:	f3af 8000 	nop.w

08007db0 <pxCurrentTCBConst2>:
 8007db0:	20000738 	.word	0x20000738
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop

08007db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007db8:	4808      	ldr	r0, [pc, #32]	; (8007ddc <prvPortStartFirstTask+0x24>)
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	6800      	ldr	r0, [r0, #0]
 8007dbe:	f380 8808 	msr	MSP, r0
 8007dc2:	f04f 0000 	mov.w	r0, #0
 8007dc6:	f380 8814 	msr	CONTROL, r0
 8007dca:	b662      	cpsie	i
 8007dcc:	b661      	cpsie	f
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	df00      	svc	0
 8007dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dda:	bf00      	nop
 8007ddc:	e000ed08 	.word	0xe000ed08

08007de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007de6:	4b46      	ldr	r3, [pc, #280]	; (8007f00 <xPortStartScheduler+0x120>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a46      	ldr	r2, [pc, #280]	; (8007f04 <xPortStartScheduler+0x124>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d10a      	bne.n	8007e06 <xPortStartScheduler+0x26>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	613b      	str	r3, [r7, #16]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e06:	4b3e      	ldr	r3, [pc, #248]	; (8007f00 <xPortStartScheduler+0x120>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a3f      	ldr	r2, [pc, #252]	; (8007f08 <xPortStartScheduler+0x128>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d10a      	bne.n	8007e26 <xPortStartScheduler+0x46>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	60fb      	str	r3, [r7, #12]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e26:	4b39      	ldr	r3, [pc, #228]	; (8007f0c <xPortStartScheduler+0x12c>)
 8007e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	22ff      	movs	r2, #255	; 0xff
 8007e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	4b31      	ldr	r3, [pc, #196]	; (8007f10 <xPortStartScheduler+0x130>)
 8007e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e4e:	4b31      	ldr	r3, [pc, #196]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e50:	2207      	movs	r2, #7
 8007e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e54:	e009      	b.n	8007e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e56:	4b2f      	ldr	r3, [pc, #188]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	4a2d      	ldr	r2, [pc, #180]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e60:	78fb      	ldrb	r3, [r7, #3]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e72:	2b80      	cmp	r3, #128	; 0x80
 8007e74:	d0ef      	beq.n	8007e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e76:	4b27      	ldr	r3, [pc, #156]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1c3 0307 	rsb	r3, r3, #7
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d00a      	beq.n	8007e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	60bb      	str	r3, [r7, #8]
}
 8007e94:	bf00      	nop
 8007e96:	e7fe      	b.n	8007e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e98:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <xPortStartScheduler+0x134>)
 8007ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ea2:	4b1c      	ldr	r3, [pc, #112]	; (8007f14 <xPortStartScheduler+0x134>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eaa:	4a1a      	ldr	r2, [pc, #104]	; (8007f14 <xPortStartScheduler+0x134>)
 8007eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007eb6:	4b18      	ldr	r3, [pc, #96]	; (8007f18 <xPortStartScheduler+0x138>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a17      	ldr	r2, [pc, #92]	; (8007f18 <xPortStartScheduler+0x138>)
 8007ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ec2:	4b15      	ldr	r3, [pc, #84]	; (8007f18 <xPortStartScheduler+0x138>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a14      	ldr	r2, [pc, #80]	; (8007f18 <xPortStartScheduler+0x138>)
 8007ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ece:	f000 f8dd 	bl	800808c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ed2:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <xPortStartScheduler+0x13c>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ed8:	f000 f8fc 	bl	80080d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007edc:	4b10      	ldr	r3, [pc, #64]	; (8007f20 <xPortStartScheduler+0x140>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a0f      	ldr	r2, [pc, #60]	; (8007f20 <xPortStartScheduler+0x140>)
 8007ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ee8:	f7ff ff66 	bl	8007db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007eec:	f7ff fd56 	bl	800799c <vTaskSwitchContext>
	prvTaskExitError();
 8007ef0:	f7ff ff20 	bl	8007d34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	e000ed00 	.word	0xe000ed00
 8007f04:	410fc271 	.word	0x410fc271
 8007f08:	410fc270 	.word	0x410fc270
 8007f0c:	e000e400 	.word	0xe000e400
 8007f10:	20000864 	.word	0x20000864
 8007f14:	20000868 	.word	0x20000868
 8007f18:	e000ed20 	.word	0xe000ed20
 8007f1c:	20000024 	.word	0x20000024
 8007f20:	e000ef34 	.word	0xe000ef34

08007f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	607b      	str	r3, [r7, #4]
}
 8007f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f3e:	4b0f      	ldr	r3, [pc, #60]	; (8007f7c <vPortEnterCritical+0x58>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3301      	adds	r3, #1
 8007f44:	4a0d      	ldr	r2, [pc, #52]	; (8007f7c <vPortEnterCritical+0x58>)
 8007f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f48:	4b0c      	ldr	r3, [pc, #48]	; (8007f7c <vPortEnterCritical+0x58>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d10f      	bne.n	8007f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f50:	4b0b      	ldr	r3, [pc, #44]	; (8007f80 <vPortEnterCritical+0x5c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	603b      	str	r3, [r7, #0]
}
 8007f6c:	bf00      	nop
 8007f6e:	e7fe      	b.n	8007f6e <vPortEnterCritical+0x4a>
	}
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	20000024 	.word	0x20000024
 8007f80:	e000ed04 	.word	0xe000ed04

08007f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f8a:	4b12      	ldr	r3, [pc, #72]	; (8007fd4 <vPortExitCritical+0x50>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <vPortExitCritical+0x24>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	607b      	str	r3, [r7, #4]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <vPortExitCritical+0x50>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	4a09      	ldr	r2, [pc, #36]	; (8007fd4 <vPortExitCritical+0x50>)
 8007fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fb2:	4b08      	ldr	r3, [pc, #32]	; (8007fd4 <vPortExitCritical+0x50>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d105      	bne.n	8007fc6 <vPortExitCritical+0x42>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	20000024 	.word	0x20000024
	...

08007fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fe0:	f3ef 8009 	mrs	r0, PSP
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	4b15      	ldr	r3, [pc, #84]	; (8008040 <pxCurrentTCBConst>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	f01e 0f10 	tst.w	lr, #16
 8007ff0:	bf08      	it	eq
 8007ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffa:	6010      	str	r0, [r2, #0]
 8007ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008004:	f380 8811 	msr	BASEPRI, r0
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f7ff fcc4 	bl	800799c <vTaskSwitchContext>
 8008014:	f04f 0000 	mov.w	r0, #0
 8008018:	f380 8811 	msr	BASEPRI, r0
 800801c:	bc09      	pop	{r0, r3}
 800801e:	6819      	ldr	r1, [r3, #0]
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008026:	f01e 0f10 	tst.w	lr, #16
 800802a:	bf08      	it	eq
 800802c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008030:	f380 8809 	msr	PSP, r0
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	f3af 8000 	nop.w

08008040 <pxCurrentTCBConst>:
 8008040:	20000738 	.word	0x20000738
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	607b      	str	r3, [r7, #4]
}
 8008060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008062:	f7ff fbe3 	bl	800782c <xTaskIncrementTick>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800806c:	4b06      	ldr	r3, [pc, #24]	; (8008088 <SysTick_Handler+0x40>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	2300      	movs	r3, #0
 8008076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f383 8811 	msr	BASEPRI, r3
}
 800807e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008090:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <vPortSetupTimerInterrupt+0x34>)
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008096:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <vPortSetupTimerInterrupt+0x38>)
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800809c:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <vPortSetupTimerInterrupt+0x3c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a0a      	ldr	r2, [pc, #40]	; (80080cc <vPortSetupTimerInterrupt+0x40>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	4a09      	ldr	r2, [pc, #36]	; (80080d0 <vPortSetupTimerInterrupt+0x44>)
 80080aa:	3b01      	subs	r3, #1
 80080ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080ae:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <vPortSetupTimerInterrupt+0x34>)
 80080b0:	2207      	movs	r2, #7
 80080b2:	601a      	str	r2, [r3, #0]
}
 80080b4:	bf00      	nop
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	e000e010 	.word	0xe000e010
 80080c4:	e000e018 	.word	0xe000e018
 80080c8:	20000018 	.word	0x20000018
 80080cc:	10624dd3 	.word	0x10624dd3
 80080d0:	e000e014 	.word	0xe000e014

080080d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080e4 <vPortEnableVFP+0x10>
 80080d8:	6801      	ldr	r1, [r0, #0]
 80080da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080de:	6001      	str	r1, [r0, #0]
 80080e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080e2:	bf00      	nop
 80080e4:	e000ed88 	.word	0xe000ed88

080080e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08a      	sub	sp, #40	; 0x28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080f4:	f7ff faf0 	bl	80076d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080f8:	4b58      	ldr	r3, [pc, #352]	; (800825c <pvPortMalloc+0x174>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008100:	f000 f910 	bl	8008324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008104:	4b56      	ldr	r3, [pc, #344]	; (8008260 <pvPortMalloc+0x178>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4013      	ands	r3, r2
 800810c:	2b00      	cmp	r3, #0
 800810e:	f040 808e 	bne.w	800822e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01d      	beq.n	8008154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008118:	2208      	movs	r2, #8
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4413      	add	r3, r2
 800811e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	2b00      	cmp	r3, #0
 8008128:	d014      	beq.n	8008154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f023 0307 	bic.w	r3, r3, #7
 8008130:	3308      	adds	r3, #8
 8008132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <pvPortMalloc+0x6c>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	617b      	str	r3, [r7, #20]
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d069      	beq.n	800822e <pvPortMalloc+0x146>
 800815a:	4b42      	ldr	r3, [pc, #264]	; (8008264 <pvPortMalloc+0x17c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d864      	bhi.n	800822e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008164:	4b40      	ldr	r3, [pc, #256]	; (8008268 <pvPortMalloc+0x180>)
 8008166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008168:	4b3f      	ldr	r3, [pc, #252]	; (8008268 <pvPortMalloc+0x180>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800816e:	e004      	b.n	800817a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	429a      	cmp	r2, r3
 8008182:	d903      	bls.n	800818c <pvPortMalloc+0xa4>
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1f1      	bne.n	8008170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800818c:	4b33      	ldr	r3, [pc, #204]	; (800825c <pvPortMalloc+0x174>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008192:	429a      	cmp	r2, r3
 8008194:	d04b      	beq.n	800822e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2208      	movs	r2, #8
 800819c:	4413      	add	r3, r2
 800819e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	2308      	movs	r3, #8
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d91f      	bls.n	80081f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4413      	add	r3, r2
 80081be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <pvPortMalloc+0xf8>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	613b      	str	r3, [r7, #16]
}
 80081dc:	bf00      	nop
 80081de:	e7fe      	b.n	80081de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	1ad2      	subs	r2, r2, r3
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081f2:	69b8      	ldr	r0, [r7, #24]
 80081f4:	f000 f8f8 	bl	80083e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081f8:	4b1a      	ldr	r3, [pc, #104]	; (8008264 <pvPortMalloc+0x17c>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	4a18      	ldr	r2, [pc, #96]	; (8008264 <pvPortMalloc+0x17c>)
 8008204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008206:	4b17      	ldr	r3, [pc, #92]	; (8008264 <pvPortMalloc+0x17c>)
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	4b18      	ldr	r3, [pc, #96]	; (800826c <pvPortMalloc+0x184>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	429a      	cmp	r2, r3
 8008210:	d203      	bcs.n	800821a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008212:	4b14      	ldr	r3, [pc, #80]	; (8008264 <pvPortMalloc+0x17c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a15      	ldr	r2, [pc, #84]	; (800826c <pvPortMalloc+0x184>)
 8008218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	4b10      	ldr	r3, [pc, #64]	; (8008260 <pvPortMalloc+0x178>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	431a      	orrs	r2, r3
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	2200      	movs	r2, #0
 800822c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800822e:	f7ff fa61 	bl	80076f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00a      	beq.n	8008252 <pvPortMalloc+0x16a>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	60fb      	str	r3, [r7, #12]
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <pvPortMalloc+0x168>
	return pvReturn;
 8008252:	69fb      	ldr	r3, [r7, #28]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3728      	adds	r7, #40	; 0x28
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	20004474 	.word	0x20004474
 8008260:	20004480 	.word	0x20004480
 8008264:	20004478 	.word	0x20004478
 8008268:	2000446c 	.word	0x2000446c
 800826c:	2000447c 	.word	0x2000447c

08008270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d048      	beq.n	8008314 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008282:	2308      	movs	r3, #8
 8008284:	425b      	negs	r3, r3
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	4413      	add	r3, r2
 800828a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	4b21      	ldr	r3, [pc, #132]	; (800831c <vPortFree+0xac>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4013      	ands	r3, r2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10a      	bne.n	80082b4 <vPortFree+0x44>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	60fb      	str	r3, [r7, #12]
}
 80082b0:	bf00      	nop
 80082b2:	e7fe      	b.n	80082b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <vPortFree+0x62>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	60bb      	str	r3, [r7, #8]
}
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	4b11      	ldr	r3, [pc, #68]	; (800831c <vPortFree+0xac>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4013      	ands	r3, r2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d019      	beq.n	8008314 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d115      	bne.n	8008314 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	4b0b      	ldr	r3, [pc, #44]	; (800831c <vPortFree+0xac>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	43db      	mvns	r3, r3
 80082f2:	401a      	ands	r2, r3
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082f8:	f7ff f9ee 	bl	80076d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	4b07      	ldr	r3, [pc, #28]	; (8008320 <vPortFree+0xb0>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4413      	add	r3, r2
 8008306:	4a06      	ldr	r2, [pc, #24]	; (8008320 <vPortFree+0xb0>)
 8008308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800830a:	6938      	ldr	r0, [r7, #16]
 800830c:	f000 f86c 	bl	80083e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008310:	f7ff f9f0 	bl	80076f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008314:	bf00      	nop
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20004480 	.word	0x20004480
 8008320:	20004478 	.word	0x20004478

08008324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800832a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800832e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008330:	4b27      	ldr	r3, [pc, #156]	; (80083d0 <prvHeapInit+0xac>)
 8008332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00c      	beq.n	8008358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3307      	adds	r3, #7
 8008342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 0307 	bic.w	r3, r3, #7
 800834a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	4a1f      	ldr	r2, [pc, #124]	; (80083d0 <prvHeapInit+0xac>)
 8008354:	4413      	add	r3, r2
 8008356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800835c:	4a1d      	ldr	r2, [pc, #116]	; (80083d4 <prvHeapInit+0xb0>)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008362:	4b1c      	ldr	r3, [pc, #112]	; (80083d4 <prvHeapInit+0xb0>)
 8008364:	2200      	movs	r2, #0
 8008366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	4413      	add	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008370:	2208      	movs	r2, #8
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0307 	bic.w	r3, r3, #7
 800837e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4a15      	ldr	r2, [pc, #84]	; (80083d8 <prvHeapInit+0xb4>)
 8008384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008386:	4b14      	ldr	r3, [pc, #80]	; (80083d8 <prvHeapInit+0xb4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2200      	movs	r2, #0
 800838c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800838e:	4b12      	ldr	r3, [pc, #72]	; (80083d8 <prvHeapInit+0xb4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	1ad2      	subs	r2, r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083a4:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <prvHeapInit+0xb4>)
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	4a0a      	ldr	r2, [pc, #40]	; (80083dc <prvHeapInit+0xb8>)
 80083b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	4a09      	ldr	r2, [pc, #36]	; (80083e0 <prvHeapInit+0xbc>)
 80083ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083bc:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <prvHeapInit+0xc0>)
 80083be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083c2:	601a      	str	r2, [r3, #0]
}
 80083c4:	bf00      	nop
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	2000086c 	.word	0x2000086c
 80083d4:	2000446c 	.word	0x2000446c
 80083d8:	20004474 	.word	0x20004474
 80083dc:	2000447c 	.word	0x2000447c
 80083e0:	20004478 	.word	0x20004478
 80083e4:	20004480 	.word	0x20004480

080083e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083f0:	4b28      	ldr	r3, [pc, #160]	; (8008494 <prvInsertBlockIntoFreeList+0xac>)
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	e002      	b.n	80083fc <prvInsertBlockIntoFreeList+0x14>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	429a      	cmp	r2, r3
 8008404:	d8f7      	bhi.n	80083f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	4413      	add	r3, r2
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d108      	bne.n	800842a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	441a      	add	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	441a      	add	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	429a      	cmp	r2, r3
 800843c:	d118      	bne.n	8008470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	4b15      	ldr	r3, [pc, #84]	; (8008498 <prvInsertBlockIntoFreeList+0xb0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d00d      	beq.n	8008466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	441a      	add	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	e008      	b.n	8008478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008466:	4b0c      	ldr	r3, [pc, #48]	; (8008498 <prvInsertBlockIntoFreeList+0xb0>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	e003      	b.n	8008478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	429a      	cmp	r2, r3
 800847e:	d002      	beq.n	8008486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008486:	bf00      	nop
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	2000446c 	.word	0x2000446c
 8008498:	20004474 	.word	0x20004474

0800849c <__errno>:
 800849c:	4b01      	ldr	r3, [pc, #4]	; (80084a4 <__errno+0x8>)
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	20000028 	.word	0x20000028

080084a8 <__libc_init_array>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	4d0d      	ldr	r5, [pc, #52]	; (80084e0 <__libc_init_array+0x38>)
 80084ac:	4c0d      	ldr	r4, [pc, #52]	; (80084e4 <__libc_init_array+0x3c>)
 80084ae:	1b64      	subs	r4, r4, r5
 80084b0:	10a4      	asrs	r4, r4, #2
 80084b2:	2600      	movs	r6, #0
 80084b4:	42a6      	cmp	r6, r4
 80084b6:	d109      	bne.n	80084cc <__libc_init_array+0x24>
 80084b8:	4d0b      	ldr	r5, [pc, #44]	; (80084e8 <__libc_init_array+0x40>)
 80084ba:	4c0c      	ldr	r4, [pc, #48]	; (80084ec <__libc_init_array+0x44>)
 80084bc:	f000 fc8e 	bl	8008ddc <_init>
 80084c0:	1b64      	subs	r4, r4, r5
 80084c2:	10a4      	asrs	r4, r4, #2
 80084c4:	2600      	movs	r6, #0
 80084c6:	42a6      	cmp	r6, r4
 80084c8:	d105      	bne.n	80084d6 <__libc_init_array+0x2e>
 80084ca:	bd70      	pop	{r4, r5, r6, pc}
 80084cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d0:	4798      	blx	r3
 80084d2:	3601      	adds	r6, #1
 80084d4:	e7ee      	b.n	80084b4 <__libc_init_array+0xc>
 80084d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084da:	4798      	blx	r3
 80084dc:	3601      	adds	r6, #1
 80084de:	e7f2      	b.n	80084c6 <__libc_init_array+0x1e>
 80084e0:	08008fd8 	.word	0x08008fd8
 80084e4:	08008fd8 	.word	0x08008fd8
 80084e8:	08008fd8 	.word	0x08008fd8
 80084ec:	08008fdc 	.word	0x08008fdc

080084f0 <memcpy>:
 80084f0:	440a      	add	r2, r1
 80084f2:	4291      	cmp	r1, r2
 80084f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80084f8:	d100      	bne.n	80084fc <memcpy+0xc>
 80084fa:	4770      	bx	lr
 80084fc:	b510      	push	{r4, lr}
 80084fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008506:	4291      	cmp	r1, r2
 8008508:	d1f9      	bne.n	80084fe <memcpy+0xe>
 800850a:	bd10      	pop	{r4, pc}

0800850c <memset>:
 800850c:	4402      	add	r2, r0
 800850e:	4603      	mov	r3, r0
 8008510:	4293      	cmp	r3, r2
 8008512:	d100      	bne.n	8008516 <memset+0xa>
 8008514:	4770      	bx	lr
 8008516:	f803 1b01 	strb.w	r1, [r3], #1
 800851a:	e7f9      	b.n	8008510 <memset+0x4>

0800851c <siprintf>:
 800851c:	b40e      	push	{r1, r2, r3}
 800851e:	b500      	push	{lr}
 8008520:	b09c      	sub	sp, #112	; 0x70
 8008522:	ab1d      	add	r3, sp, #116	; 0x74
 8008524:	9002      	str	r0, [sp, #8]
 8008526:	9006      	str	r0, [sp, #24]
 8008528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800852c:	4809      	ldr	r0, [pc, #36]	; (8008554 <siprintf+0x38>)
 800852e:	9107      	str	r1, [sp, #28]
 8008530:	9104      	str	r1, [sp, #16]
 8008532:	4909      	ldr	r1, [pc, #36]	; (8008558 <siprintf+0x3c>)
 8008534:	f853 2b04 	ldr.w	r2, [r3], #4
 8008538:	9105      	str	r1, [sp, #20]
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	9301      	str	r3, [sp, #4]
 800853e:	a902      	add	r1, sp, #8
 8008540:	f000 f868 	bl	8008614 <_svfiprintf_r>
 8008544:	9b02      	ldr	r3, [sp, #8]
 8008546:	2200      	movs	r2, #0
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	b01c      	add	sp, #112	; 0x70
 800854c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008550:	b003      	add	sp, #12
 8008552:	4770      	bx	lr
 8008554:	20000028 	.word	0x20000028
 8008558:	ffff0208 	.word	0xffff0208

0800855c <__ssputs_r>:
 800855c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008560:	688e      	ldr	r6, [r1, #8]
 8008562:	429e      	cmp	r6, r3
 8008564:	4682      	mov	sl, r0
 8008566:	460c      	mov	r4, r1
 8008568:	4690      	mov	r8, r2
 800856a:	461f      	mov	r7, r3
 800856c:	d838      	bhi.n	80085e0 <__ssputs_r+0x84>
 800856e:	898a      	ldrh	r2, [r1, #12]
 8008570:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008574:	d032      	beq.n	80085dc <__ssputs_r+0x80>
 8008576:	6825      	ldr	r5, [r4, #0]
 8008578:	6909      	ldr	r1, [r1, #16]
 800857a:	eba5 0901 	sub.w	r9, r5, r1
 800857e:	6965      	ldr	r5, [r4, #20]
 8008580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008584:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008588:	3301      	adds	r3, #1
 800858a:	444b      	add	r3, r9
 800858c:	106d      	asrs	r5, r5, #1
 800858e:	429d      	cmp	r5, r3
 8008590:	bf38      	it	cc
 8008592:	461d      	movcc	r5, r3
 8008594:	0553      	lsls	r3, r2, #21
 8008596:	d531      	bpl.n	80085fc <__ssputs_r+0xa0>
 8008598:	4629      	mov	r1, r5
 800859a:	f000 fb55 	bl	8008c48 <_malloc_r>
 800859e:	4606      	mov	r6, r0
 80085a0:	b950      	cbnz	r0, 80085b8 <__ssputs_r+0x5c>
 80085a2:	230c      	movs	r3, #12
 80085a4:	f8ca 3000 	str.w	r3, [sl]
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ae:	81a3      	strh	r3, [r4, #12]
 80085b0:	f04f 30ff 	mov.w	r0, #4294967295
 80085b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b8:	6921      	ldr	r1, [r4, #16]
 80085ba:	464a      	mov	r2, r9
 80085bc:	f7ff ff98 	bl	80084f0 <memcpy>
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ca:	81a3      	strh	r3, [r4, #12]
 80085cc:	6126      	str	r6, [r4, #16]
 80085ce:	6165      	str	r5, [r4, #20]
 80085d0:	444e      	add	r6, r9
 80085d2:	eba5 0509 	sub.w	r5, r5, r9
 80085d6:	6026      	str	r6, [r4, #0]
 80085d8:	60a5      	str	r5, [r4, #8]
 80085da:	463e      	mov	r6, r7
 80085dc:	42be      	cmp	r6, r7
 80085de:	d900      	bls.n	80085e2 <__ssputs_r+0x86>
 80085e0:	463e      	mov	r6, r7
 80085e2:	6820      	ldr	r0, [r4, #0]
 80085e4:	4632      	mov	r2, r6
 80085e6:	4641      	mov	r1, r8
 80085e8:	f000 faa8 	bl	8008b3c <memmove>
 80085ec:	68a3      	ldr	r3, [r4, #8]
 80085ee:	1b9b      	subs	r3, r3, r6
 80085f0:	60a3      	str	r3, [r4, #8]
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	4433      	add	r3, r6
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	2000      	movs	r0, #0
 80085fa:	e7db      	b.n	80085b4 <__ssputs_r+0x58>
 80085fc:	462a      	mov	r2, r5
 80085fe:	f000 fb97 	bl	8008d30 <_realloc_r>
 8008602:	4606      	mov	r6, r0
 8008604:	2800      	cmp	r0, #0
 8008606:	d1e1      	bne.n	80085cc <__ssputs_r+0x70>
 8008608:	6921      	ldr	r1, [r4, #16]
 800860a:	4650      	mov	r0, sl
 800860c:	f000 fab0 	bl	8008b70 <_free_r>
 8008610:	e7c7      	b.n	80085a2 <__ssputs_r+0x46>
	...

08008614 <_svfiprintf_r>:
 8008614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008618:	4698      	mov	r8, r3
 800861a:	898b      	ldrh	r3, [r1, #12]
 800861c:	061b      	lsls	r3, r3, #24
 800861e:	b09d      	sub	sp, #116	; 0x74
 8008620:	4607      	mov	r7, r0
 8008622:	460d      	mov	r5, r1
 8008624:	4614      	mov	r4, r2
 8008626:	d50e      	bpl.n	8008646 <_svfiprintf_r+0x32>
 8008628:	690b      	ldr	r3, [r1, #16]
 800862a:	b963      	cbnz	r3, 8008646 <_svfiprintf_r+0x32>
 800862c:	2140      	movs	r1, #64	; 0x40
 800862e:	f000 fb0b 	bl	8008c48 <_malloc_r>
 8008632:	6028      	str	r0, [r5, #0]
 8008634:	6128      	str	r0, [r5, #16]
 8008636:	b920      	cbnz	r0, 8008642 <_svfiprintf_r+0x2e>
 8008638:	230c      	movs	r3, #12
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	f04f 30ff 	mov.w	r0, #4294967295
 8008640:	e0d1      	b.n	80087e6 <_svfiprintf_r+0x1d2>
 8008642:	2340      	movs	r3, #64	; 0x40
 8008644:	616b      	str	r3, [r5, #20]
 8008646:	2300      	movs	r3, #0
 8008648:	9309      	str	r3, [sp, #36]	; 0x24
 800864a:	2320      	movs	r3, #32
 800864c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008650:	f8cd 800c 	str.w	r8, [sp, #12]
 8008654:	2330      	movs	r3, #48	; 0x30
 8008656:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008800 <_svfiprintf_r+0x1ec>
 800865a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800865e:	f04f 0901 	mov.w	r9, #1
 8008662:	4623      	mov	r3, r4
 8008664:	469a      	mov	sl, r3
 8008666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800866a:	b10a      	cbz	r2, 8008670 <_svfiprintf_r+0x5c>
 800866c:	2a25      	cmp	r2, #37	; 0x25
 800866e:	d1f9      	bne.n	8008664 <_svfiprintf_r+0x50>
 8008670:	ebba 0b04 	subs.w	fp, sl, r4
 8008674:	d00b      	beq.n	800868e <_svfiprintf_r+0x7a>
 8008676:	465b      	mov	r3, fp
 8008678:	4622      	mov	r2, r4
 800867a:	4629      	mov	r1, r5
 800867c:	4638      	mov	r0, r7
 800867e:	f7ff ff6d 	bl	800855c <__ssputs_r>
 8008682:	3001      	adds	r0, #1
 8008684:	f000 80aa 	beq.w	80087dc <_svfiprintf_r+0x1c8>
 8008688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800868a:	445a      	add	r2, fp
 800868c:	9209      	str	r2, [sp, #36]	; 0x24
 800868e:	f89a 3000 	ldrb.w	r3, [sl]
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 80a2 	beq.w	80087dc <_svfiprintf_r+0x1c8>
 8008698:	2300      	movs	r3, #0
 800869a:	f04f 32ff 	mov.w	r2, #4294967295
 800869e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086a2:	f10a 0a01 	add.w	sl, sl, #1
 80086a6:	9304      	str	r3, [sp, #16]
 80086a8:	9307      	str	r3, [sp, #28]
 80086aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086ae:	931a      	str	r3, [sp, #104]	; 0x68
 80086b0:	4654      	mov	r4, sl
 80086b2:	2205      	movs	r2, #5
 80086b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b8:	4851      	ldr	r0, [pc, #324]	; (8008800 <_svfiprintf_r+0x1ec>)
 80086ba:	f7f7 fd99 	bl	80001f0 <memchr>
 80086be:	9a04      	ldr	r2, [sp, #16]
 80086c0:	b9d8      	cbnz	r0, 80086fa <_svfiprintf_r+0xe6>
 80086c2:	06d0      	lsls	r0, r2, #27
 80086c4:	bf44      	itt	mi
 80086c6:	2320      	movmi	r3, #32
 80086c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086cc:	0711      	lsls	r1, r2, #28
 80086ce:	bf44      	itt	mi
 80086d0:	232b      	movmi	r3, #43	; 0x2b
 80086d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086d6:	f89a 3000 	ldrb.w	r3, [sl]
 80086da:	2b2a      	cmp	r3, #42	; 0x2a
 80086dc:	d015      	beq.n	800870a <_svfiprintf_r+0xf6>
 80086de:	9a07      	ldr	r2, [sp, #28]
 80086e0:	4654      	mov	r4, sl
 80086e2:	2000      	movs	r0, #0
 80086e4:	f04f 0c0a 	mov.w	ip, #10
 80086e8:	4621      	mov	r1, r4
 80086ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ee:	3b30      	subs	r3, #48	; 0x30
 80086f0:	2b09      	cmp	r3, #9
 80086f2:	d94e      	bls.n	8008792 <_svfiprintf_r+0x17e>
 80086f4:	b1b0      	cbz	r0, 8008724 <_svfiprintf_r+0x110>
 80086f6:	9207      	str	r2, [sp, #28]
 80086f8:	e014      	b.n	8008724 <_svfiprintf_r+0x110>
 80086fa:	eba0 0308 	sub.w	r3, r0, r8
 80086fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008702:	4313      	orrs	r3, r2
 8008704:	9304      	str	r3, [sp, #16]
 8008706:	46a2      	mov	sl, r4
 8008708:	e7d2      	b.n	80086b0 <_svfiprintf_r+0x9c>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	1d19      	adds	r1, r3, #4
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	9103      	str	r1, [sp, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	bfbb      	ittet	lt
 8008716:	425b      	neglt	r3, r3
 8008718:	f042 0202 	orrlt.w	r2, r2, #2
 800871c:	9307      	strge	r3, [sp, #28]
 800871e:	9307      	strlt	r3, [sp, #28]
 8008720:	bfb8      	it	lt
 8008722:	9204      	strlt	r2, [sp, #16]
 8008724:	7823      	ldrb	r3, [r4, #0]
 8008726:	2b2e      	cmp	r3, #46	; 0x2e
 8008728:	d10c      	bne.n	8008744 <_svfiprintf_r+0x130>
 800872a:	7863      	ldrb	r3, [r4, #1]
 800872c:	2b2a      	cmp	r3, #42	; 0x2a
 800872e:	d135      	bne.n	800879c <_svfiprintf_r+0x188>
 8008730:	9b03      	ldr	r3, [sp, #12]
 8008732:	1d1a      	adds	r2, r3, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	9203      	str	r2, [sp, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	bfb8      	it	lt
 800873c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008740:	3402      	adds	r4, #2
 8008742:	9305      	str	r3, [sp, #20]
 8008744:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008810 <_svfiprintf_r+0x1fc>
 8008748:	7821      	ldrb	r1, [r4, #0]
 800874a:	2203      	movs	r2, #3
 800874c:	4650      	mov	r0, sl
 800874e:	f7f7 fd4f 	bl	80001f0 <memchr>
 8008752:	b140      	cbz	r0, 8008766 <_svfiprintf_r+0x152>
 8008754:	2340      	movs	r3, #64	; 0x40
 8008756:	eba0 000a 	sub.w	r0, r0, sl
 800875a:	fa03 f000 	lsl.w	r0, r3, r0
 800875e:	9b04      	ldr	r3, [sp, #16]
 8008760:	4303      	orrs	r3, r0
 8008762:	3401      	adds	r4, #1
 8008764:	9304      	str	r3, [sp, #16]
 8008766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800876a:	4826      	ldr	r0, [pc, #152]	; (8008804 <_svfiprintf_r+0x1f0>)
 800876c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008770:	2206      	movs	r2, #6
 8008772:	f7f7 fd3d 	bl	80001f0 <memchr>
 8008776:	2800      	cmp	r0, #0
 8008778:	d038      	beq.n	80087ec <_svfiprintf_r+0x1d8>
 800877a:	4b23      	ldr	r3, [pc, #140]	; (8008808 <_svfiprintf_r+0x1f4>)
 800877c:	bb1b      	cbnz	r3, 80087c6 <_svfiprintf_r+0x1b2>
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	3307      	adds	r3, #7
 8008782:	f023 0307 	bic.w	r3, r3, #7
 8008786:	3308      	adds	r3, #8
 8008788:	9303      	str	r3, [sp, #12]
 800878a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800878c:	4433      	add	r3, r6
 800878e:	9309      	str	r3, [sp, #36]	; 0x24
 8008790:	e767      	b.n	8008662 <_svfiprintf_r+0x4e>
 8008792:	fb0c 3202 	mla	r2, ip, r2, r3
 8008796:	460c      	mov	r4, r1
 8008798:	2001      	movs	r0, #1
 800879a:	e7a5      	b.n	80086e8 <_svfiprintf_r+0xd4>
 800879c:	2300      	movs	r3, #0
 800879e:	3401      	adds	r4, #1
 80087a0:	9305      	str	r3, [sp, #20]
 80087a2:	4619      	mov	r1, r3
 80087a4:	f04f 0c0a 	mov.w	ip, #10
 80087a8:	4620      	mov	r0, r4
 80087aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087ae:	3a30      	subs	r2, #48	; 0x30
 80087b0:	2a09      	cmp	r2, #9
 80087b2:	d903      	bls.n	80087bc <_svfiprintf_r+0x1a8>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d0c5      	beq.n	8008744 <_svfiprintf_r+0x130>
 80087b8:	9105      	str	r1, [sp, #20]
 80087ba:	e7c3      	b.n	8008744 <_svfiprintf_r+0x130>
 80087bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80087c0:	4604      	mov	r4, r0
 80087c2:	2301      	movs	r3, #1
 80087c4:	e7f0      	b.n	80087a8 <_svfiprintf_r+0x194>
 80087c6:	ab03      	add	r3, sp, #12
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	462a      	mov	r2, r5
 80087cc:	4b0f      	ldr	r3, [pc, #60]	; (800880c <_svfiprintf_r+0x1f8>)
 80087ce:	a904      	add	r1, sp, #16
 80087d0:	4638      	mov	r0, r7
 80087d2:	f3af 8000 	nop.w
 80087d6:	1c42      	adds	r2, r0, #1
 80087d8:	4606      	mov	r6, r0
 80087da:	d1d6      	bne.n	800878a <_svfiprintf_r+0x176>
 80087dc:	89ab      	ldrh	r3, [r5, #12]
 80087de:	065b      	lsls	r3, r3, #25
 80087e0:	f53f af2c 	bmi.w	800863c <_svfiprintf_r+0x28>
 80087e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087e6:	b01d      	add	sp, #116	; 0x74
 80087e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ec:	ab03      	add	r3, sp, #12
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	462a      	mov	r2, r5
 80087f2:	4b06      	ldr	r3, [pc, #24]	; (800880c <_svfiprintf_r+0x1f8>)
 80087f4:	a904      	add	r1, sp, #16
 80087f6:	4638      	mov	r0, r7
 80087f8:	f000 f87a 	bl	80088f0 <_printf_i>
 80087fc:	e7eb      	b.n	80087d6 <_svfiprintf_r+0x1c2>
 80087fe:	bf00      	nop
 8008800:	08008f9c 	.word	0x08008f9c
 8008804:	08008fa6 	.word	0x08008fa6
 8008808:	00000000 	.word	0x00000000
 800880c:	0800855d 	.word	0x0800855d
 8008810:	08008fa2 	.word	0x08008fa2

08008814 <_printf_common>:
 8008814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008818:	4616      	mov	r6, r2
 800881a:	4699      	mov	r9, r3
 800881c:	688a      	ldr	r2, [r1, #8]
 800881e:	690b      	ldr	r3, [r1, #16]
 8008820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008824:	4293      	cmp	r3, r2
 8008826:	bfb8      	it	lt
 8008828:	4613      	movlt	r3, r2
 800882a:	6033      	str	r3, [r6, #0]
 800882c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008830:	4607      	mov	r7, r0
 8008832:	460c      	mov	r4, r1
 8008834:	b10a      	cbz	r2, 800883a <_printf_common+0x26>
 8008836:	3301      	adds	r3, #1
 8008838:	6033      	str	r3, [r6, #0]
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	0699      	lsls	r1, r3, #26
 800883e:	bf42      	ittt	mi
 8008840:	6833      	ldrmi	r3, [r6, #0]
 8008842:	3302      	addmi	r3, #2
 8008844:	6033      	strmi	r3, [r6, #0]
 8008846:	6825      	ldr	r5, [r4, #0]
 8008848:	f015 0506 	ands.w	r5, r5, #6
 800884c:	d106      	bne.n	800885c <_printf_common+0x48>
 800884e:	f104 0a19 	add.w	sl, r4, #25
 8008852:	68e3      	ldr	r3, [r4, #12]
 8008854:	6832      	ldr	r2, [r6, #0]
 8008856:	1a9b      	subs	r3, r3, r2
 8008858:	42ab      	cmp	r3, r5
 800885a:	dc26      	bgt.n	80088aa <_printf_common+0x96>
 800885c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008860:	1e13      	subs	r3, r2, #0
 8008862:	6822      	ldr	r2, [r4, #0]
 8008864:	bf18      	it	ne
 8008866:	2301      	movne	r3, #1
 8008868:	0692      	lsls	r2, r2, #26
 800886a:	d42b      	bmi.n	80088c4 <_printf_common+0xb0>
 800886c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008870:	4649      	mov	r1, r9
 8008872:	4638      	mov	r0, r7
 8008874:	47c0      	blx	r8
 8008876:	3001      	adds	r0, #1
 8008878:	d01e      	beq.n	80088b8 <_printf_common+0xa4>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	68e5      	ldr	r5, [r4, #12]
 800887e:	6832      	ldr	r2, [r6, #0]
 8008880:	f003 0306 	and.w	r3, r3, #6
 8008884:	2b04      	cmp	r3, #4
 8008886:	bf08      	it	eq
 8008888:	1aad      	subeq	r5, r5, r2
 800888a:	68a3      	ldr	r3, [r4, #8]
 800888c:	6922      	ldr	r2, [r4, #16]
 800888e:	bf0c      	ite	eq
 8008890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008894:	2500      	movne	r5, #0
 8008896:	4293      	cmp	r3, r2
 8008898:	bfc4      	itt	gt
 800889a:	1a9b      	subgt	r3, r3, r2
 800889c:	18ed      	addgt	r5, r5, r3
 800889e:	2600      	movs	r6, #0
 80088a0:	341a      	adds	r4, #26
 80088a2:	42b5      	cmp	r5, r6
 80088a4:	d11a      	bne.n	80088dc <_printf_common+0xc8>
 80088a6:	2000      	movs	r0, #0
 80088a8:	e008      	b.n	80088bc <_printf_common+0xa8>
 80088aa:	2301      	movs	r3, #1
 80088ac:	4652      	mov	r2, sl
 80088ae:	4649      	mov	r1, r9
 80088b0:	4638      	mov	r0, r7
 80088b2:	47c0      	blx	r8
 80088b4:	3001      	adds	r0, #1
 80088b6:	d103      	bne.n	80088c0 <_printf_common+0xac>
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c0:	3501      	adds	r5, #1
 80088c2:	e7c6      	b.n	8008852 <_printf_common+0x3e>
 80088c4:	18e1      	adds	r1, r4, r3
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	2030      	movs	r0, #48	; 0x30
 80088ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088ce:	4422      	add	r2, r4
 80088d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088d8:	3302      	adds	r3, #2
 80088da:	e7c7      	b.n	800886c <_printf_common+0x58>
 80088dc:	2301      	movs	r3, #1
 80088de:	4622      	mov	r2, r4
 80088e0:	4649      	mov	r1, r9
 80088e2:	4638      	mov	r0, r7
 80088e4:	47c0      	blx	r8
 80088e6:	3001      	adds	r0, #1
 80088e8:	d0e6      	beq.n	80088b8 <_printf_common+0xa4>
 80088ea:	3601      	adds	r6, #1
 80088ec:	e7d9      	b.n	80088a2 <_printf_common+0x8e>
	...

080088f0 <_printf_i>:
 80088f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088f4:	7e0f      	ldrb	r7, [r1, #24]
 80088f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088f8:	2f78      	cmp	r7, #120	; 0x78
 80088fa:	4691      	mov	r9, r2
 80088fc:	4680      	mov	r8, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	469a      	mov	sl, r3
 8008902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008906:	d807      	bhi.n	8008918 <_printf_i+0x28>
 8008908:	2f62      	cmp	r7, #98	; 0x62
 800890a:	d80a      	bhi.n	8008922 <_printf_i+0x32>
 800890c:	2f00      	cmp	r7, #0
 800890e:	f000 80d8 	beq.w	8008ac2 <_printf_i+0x1d2>
 8008912:	2f58      	cmp	r7, #88	; 0x58
 8008914:	f000 80a3 	beq.w	8008a5e <_printf_i+0x16e>
 8008918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800891c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008920:	e03a      	b.n	8008998 <_printf_i+0xa8>
 8008922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008926:	2b15      	cmp	r3, #21
 8008928:	d8f6      	bhi.n	8008918 <_printf_i+0x28>
 800892a:	a101      	add	r1, pc, #4	; (adr r1, 8008930 <_printf_i+0x40>)
 800892c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008930:	08008989 	.word	0x08008989
 8008934:	0800899d 	.word	0x0800899d
 8008938:	08008919 	.word	0x08008919
 800893c:	08008919 	.word	0x08008919
 8008940:	08008919 	.word	0x08008919
 8008944:	08008919 	.word	0x08008919
 8008948:	0800899d 	.word	0x0800899d
 800894c:	08008919 	.word	0x08008919
 8008950:	08008919 	.word	0x08008919
 8008954:	08008919 	.word	0x08008919
 8008958:	08008919 	.word	0x08008919
 800895c:	08008aa9 	.word	0x08008aa9
 8008960:	080089cd 	.word	0x080089cd
 8008964:	08008a8b 	.word	0x08008a8b
 8008968:	08008919 	.word	0x08008919
 800896c:	08008919 	.word	0x08008919
 8008970:	08008acb 	.word	0x08008acb
 8008974:	08008919 	.word	0x08008919
 8008978:	080089cd 	.word	0x080089cd
 800897c:	08008919 	.word	0x08008919
 8008980:	08008919 	.word	0x08008919
 8008984:	08008a93 	.word	0x08008a93
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	1d1a      	adds	r2, r3, #4
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	602a      	str	r2, [r5, #0]
 8008990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008998:	2301      	movs	r3, #1
 800899a:	e0a3      	b.n	8008ae4 <_printf_i+0x1f4>
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	6829      	ldr	r1, [r5, #0]
 80089a0:	0606      	lsls	r6, r0, #24
 80089a2:	f101 0304 	add.w	r3, r1, #4
 80089a6:	d50a      	bpl.n	80089be <_printf_i+0xce>
 80089a8:	680e      	ldr	r6, [r1, #0]
 80089aa:	602b      	str	r3, [r5, #0]
 80089ac:	2e00      	cmp	r6, #0
 80089ae:	da03      	bge.n	80089b8 <_printf_i+0xc8>
 80089b0:	232d      	movs	r3, #45	; 0x2d
 80089b2:	4276      	negs	r6, r6
 80089b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089b8:	485e      	ldr	r0, [pc, #376]	; (8008b34 <_printf_i+0x244>)
 80089ba:	230a      	movs	r3, #10
 80089bc:	e019      	b.n	80089f2 <_printf_i+0x102>
 80089be:	680e      	ldr	r6, [r1, #0]
 80089c0:	602b      	str	r3, [r5, #0]
 80089c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089c6:	bf18      	it	ne
 80089c8:	b236      	sxthne	r6, r6
 80089ca:	e7ef      	b.n	80089ac <_printf_i+0xbc>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	6820      	ldr	r0, [r4, #0]
 80089d0:	1d19      	adds	r1, r3, #4
 80089d2:	6029      	str	r1, [r5, #0]
 80089d4:	0601      	lsls	r1, r0, #24
 80089d6:	d501      	bpl.n	80089dc <_printf_i+0xec>
 80089d8:	681e      	ldr	r6, [r3, #0]
 80089da:	e002      	b.n	80089e2 <_printf_i+0xf2>
 80089dc:	0646      	lsls	r6, r0, #25
 80089de:	d5fb      	bpl.n	80089d8 <_printf_i+0xe8>
 80089e0:	881e      	ldrh	r6, [r3, #0]
 80089e2:	4854      	ldr	r0, [pc, #336]	; (8008b34 <_printf_i+0x244>)
 80089e4:	2f6f      	cmp	r7, #111	; 0x6f
 80089e6:	bf0c      	ite	eq
 80089e8:	2308      	moveq	r3, #8
 80089ea:	230a      	movne	r3, #10
 80089ec:	2100      	movs	r1, #0
 80089ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089f2:	6865      	ldr	r5, [r4, #4]
 80089f4:	60a5      	str	r5, [r4, #8]
 80089f6:	2d00      	cmp	r5, #0
 80089f8:	bfa2      	ittt	ge
 80089fa:	6821      	ldrge	r1, [r4, #0]
 80089fc:	f021 0104 	bicge.w	r1, r1, #4
 8008a00:	6021      	strge	r1, [r4, #0]
 8008a02:	b90e      	cbnz	r6, 8008a08 <_printf_i+0x118>
 8008a04:	2d00      	cmp	r5, #0
 8008a06:	d04d      	beq.n	8008aa4 <_printf_i+0x1b4>
 8008a08:	4615      	mov	r5, r2
 8008a0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008a12:	5dc7      	ldrb	r7, [r0, r7]
 8008a14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a18:	4637      	mov	r7, r6
 8008a1a:	42bb      	cmp	r3, r7
 8008a1c:	460e      	mov	r6, r1
 8008a1e:	d9f4      	bls.n	8008a0a <_printf_i+0x11a>
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d10b      	bne.n	8008a3c <_printf_i+0x14c>
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	07de      	lsls	r6, r3, #31
 8008a28:	d508      	bpl.n	8008a3c <_printf_i+0x14c>
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	6861      	ldr	r1, [r4, #4]
 8008a2e:	4299      	cmp	r1, r3
 8008a30:	bfde      	ittt	le
 8008a32:	2330      	movle	r3, #48	; 0x30
 8008a34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a3c:	1b52      	subs	r2, r2, r5
 8008a3e:	6122      	str	r2, [r4, #16]
 8008a40:	f8cd a000 	str.w	sl, [sp]
 8008a44:	464b      	mov	r3, r9
 8008a46:	aa03      	add	r2, sp, #12
 8008a48:	4621      	mov	r1, r4
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	f7ff fee2 	bl	8008814 <_printf_common>
 8008a50:	3001      	adds	r0, #1
 8008a52:	d14c      	bne.n	8008aee <_printf_i+0x1fe>
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	b004      	add	sp, #16
 8008a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5e:	4835      	ldr	r0, [pc, #212]	; (8008b34 <_printf_i+0x244>)
 8008a60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a64:	6829      	ldr	r1, [r5, #0]
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a6c:	6029      	str	r1, [r5, #0]
 8008a6e:	061d      	lsls	r5, r3, #24
 8008a70:	d514      	bpl.n	8008a9c <_printf_i+0x1ac>
 8008a72:	07df      	lsls	r7, r3, #31
 8008a74:	bf44      	itt	mi
 8008a76:	f043 0320 	orrmi.w	r3, r3, #32
 8008a7a:	6023      	strmi	r3, [r4, #0]
 8008a7c:	b91e      	cbnz	r6, 8008a86 <_printf_i+0x196>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	f023 0320 	bic.w	r3, r3, #32
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	2310      	movs	r3, #16
 8008a88:	e7b0      	b.n	80089ec <_printf_i+0xfc>
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	f043 0320 	orr.w	r3, r3, #32
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	2378      	movs	r3, #120	; 0x78
 8008a94:	4828      	ldr	r0, [pc, #160]	; (8008b38 <_printf_i+0x248>)
 8008a96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a9a:	e7e3      	b.n	8008a64 <_printf_i+0x174>
 8008a9c:	0659      	lsls	r1, r3, #25
 8008a9e:	bf48      	it	mi
 8008aa0:	b2b6      	uxthmi	r6, r6
 8008aa2:	e7e6      	b.n	8008a72 <_printf_i+0x182>
 8008aa4:	4615      	mov	r5, r2
 8008aa6:	e7bb      	b.n	8008a20 <_printf_i+0x130>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	6826      	ldr	r6, [r4, #0]
 8008aac:	6961      	ldr	r1, [r4, #20]
 8008aae:	1d18      	adds	r0, r3, #4
 8008ab0:	6028      	str	r0, [r5, #0]
 8008ab2:	0635      	lsls	r5, r6, #24
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	d501      	bpl.n	8008abc <_printf_i+0x1cc>
 8008ab8:	6019      	str	r1, [r3, #0]
 8008aba:	e002      	b.n	8008ac2 <_printf_i+0x1d2>
 8008abc:	0670      	lsls	r0, r6, #25
 8008abe:	d5fb      	bpl.n	8008ab8 <_printf_i+0x1c8>
 8008ac0:	8019      	strh	r1, [r3, #0]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	6123      	str	r3, [r4, #16]
 8008ac6:	4615      	mov	r5, r2
 8008ac8:	e7ba      	b.n	8008a40 <_printf_i+0x150>
 8008aca:	682b      	ldr	r3, [r5, #0]
 8008acc:	1d1a      	adds	r2, r3, #4
 8008ace:	602a      	str	r2, [r5, #0]
 8008ad0:	681d      	ldr	r5, [r3, #0]
 8008ad2:	6862      	ldr	r2, [r4, #4]
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f7f7 fb8a 	bl	80001f0 <memchr>
 8008adc:	b108      	cbz	r0, 8008ae2 <_printf_i+0x1f2>
 8008ade:	1b40      	subs	r0, r0, r5
 8008ae0:	6060      	str	r0, [r4, #4]
 8008ae2:	6863      	ldr	r3, [r4, #4]
 8008ae4:	6123      	str	r3, [r4, #16]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aec:	e7a8      	b.n	8008a40 <_printf_i+0x150>
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	462a      	mov	r2, r5
 8008af2:	4649      	mov	r1, r9
 8008af4:	4640      	mov	r0, r8
 8008af6:	47d0      	blx	sl
 8008af8:	3001      	adds	r0, #1
 8008afa:	d0ab      	beq.n	8008a54 <_printf_i+0x164>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	079b      	lsls	r3, r3, #30
 8008b00:	d413      	bmi.n	8008b2a <_printf_i+0x23a>
 8008b02:	68e0      	ldr	r0, [r4, #12]
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	4298      	cmp	r0, r3
 8008b08:	bfb8      	it	lt
 8008b0a:	4618      	movlt	r0, r3
 8008b0c:	e7a4      	b.n	8008a58 <_printf_i+0x168>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4632      	mov	r2, r6
 8008b12:	4649      	mov	r1, r9
 8008b14:	4640      	mov	r0, r8
 8008b16:	47d0      	blx	sl
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d09b      	beq.n	8008a54 <_printf_i+0x164>
 8008b1c:	3501      	adds	r5, #1
 8008b1e:	68e3      	ldr	r3, [r4, #12]
 8008b20:	9903      	ldr	r1, [sp, #12]
 8008b22:	1a5b      	subs	r3, r3, r1
 8008b24:	42ab      	cmp	r3, r5
 8008b26:	dcf2      	bgt.n	8008b0e <_printf_i+0x21e>
 8008b28:	e7eb      	b.n	8008b02 <_printf_i+0x212>
 8008b2a:	2500      	movs	r5, #0
 8008b2c:	f104 0619 	add.w	r6, r4, #25
 8008b30:	e7f5      	b.n	8008b1e <_printf_i+0x22e>
 8008b32:	bf00      	nop
 8008b34:	08008fad 	.word	0x08008fad
 8008b38:	08008fbe 	.word	0x08008fbe

08008b3c <memmove>:
 8008b3c:	4288      	cmp	r0, r1
 8008b3e:	b510      	push	{r4, lr}
 8008b40:	eb01 0402 	add.w	r4, r1, r2
 8008b44:	d902      	bls.n	8008b4c <memmove+0x10>
 8008b46:	4284      	cmp	r4, r0
 8008b48:	4623      	mov	r3, r4
 8008b4a:	d807      	bhi.n	8008b5c <memmove+0x20>
 8008b4c:	1e43      	subs	r3, r0, #1
 8008b4e:	42a1      	cmp	r1, r4
 8008b50:	d008      	beq.n	8008b64 <memmove+0x28>
 8008b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b5a:	e7f8      	b.n	8008b4e <memmove+0x12>
 8008b5c:	4402      	add	r2, r0
 8008b5e:	4601      	mov	r1, r0
 8008b60:	428a      	cmp	r2, r1
 8008b62:	d100      	bne.n	8008b66 <memmove+0x2a>
 8008b64:	bd10      	pop	{r4, pc}
 8008b66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b6e:	e7f7      	b.n	8008b60 <memmove+0x24>

08008b70 <_free_r>:
 8008b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b72:	2900      	cmp	r1, #0
 8008b74:	d044      	beq.n	8008c00 <_free_r+0x90>
 8008b76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b7a:	9001      	str	r0, [sp, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b82:	bfb8      	it	lt
 8008b84:	18e4      	addlt	r4, r4, r3
 8008b86:	f000 f913 	bl	8008db0 <__malloc_lock>
 8008b8a:	4a1e      	ldr	r2, [pc, #120]	; (8008c04 <_free_r+0x94>)
 8008b8c:	9801      	ldr	r0, [sp, #4]
 8008b8e:	6813      	ldr	r3, [r2, #0]
 8008b90:	b933      	cbnz	r3, 8008ba0 <_free_r+0x30>
 8008b92:	6063      	str	r3, [r4, #4]
 8008b94:	6014      	str	r4, [r2, #0]
 8008b96:	b003      	add	sp, #12
 8008b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b9c:	f000 b90e 	b.w	8008dbc <__malloc_unlock>
 8008ba0:	42a3      	cmp	r3, r4
 8008ba2:	d908      	bls.n	8008bb6 <_free_r+0x46>
 8008ba4:	6825      	ldr	r5, [r4, #0]
 8008ba6:	1961      	adds	r1, r4, r5
 8008ba8:	428b      	cmp	r3, r1
 8008baa:	bf01      	itttt	eq
 8008bac:	6819      	ldreq	r1, [r3, #0]
 8008bae:	685b      	ldreq	r3, [r3, #4]
 8008bb0:	1949      	addeq	r1, r1, r5
 8008bb2:	6021      	streq	r1, [r4, #0]
 8008bb4:	e7ed      	b.n	8008b92 <_free_r+0x22>
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	b10b      	cbz	r3, 8008bc0 <_free_r+0x50>
 8008bbc:	42a3      	cmp	r3, r4
 8008bbe:	d9fa      	bls.n	8008bb6 <_free_r+0x46>
 8008bc0:	6811      	ldr	r1, [r2, #0]
 8008bc2:	1855      	adds	r5, r2, r1
 8008bc4:	42a5      	cmp	r5, r4
 8008bc6:	d10b      	bne.n	8008be0 <_free_r+0x70>
 8008bc8:	6824      	ldr	r4, [r4, #0]
 8008bca:	4421      	add	r1, r4
 8008bcc:	1854      	adds	r4, r2, r1
 8008bce:	42a3      	cmp	r3, r4
 8008bd0:	6011      	str	r1, [r2, #0]
 8008bd2:	d1e0      	bne.n	8008b96 <_free_r+0x26>
 8008bd4:	681c      	ldr	r4, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	6053      	str	r3, [r2, #4]
 8008bda:	4421      	add	r1, r4
 8008bdc:	6011      	str	r1, [r2, #0]
 8008bde:	e7da      	b.n	8008b96 <_free_r+0x26>
 8008be0:	d902      	bls.n	8008be8 <_free_r+0x78>
 8008be2:	230c      	movs	r3, #12
 8008be4:	6003      	str	r3, [r0, #0]
 8008be6:	e7d6      	b.n	8008b96 <_free_r+0x26>
 8008be8:	6825      	ldr	r5, [r4, #0]
 8008bea:	1961      	adds	r1, r4, r5
 8008bec:	428b      	cmp	r3, r1
 8008bee:	bf04      	itt	eq
 8008bf0:	6819      	ldreq	r1, [r3, #0]
 8008bf2:	685b      	ldreq	r3, [r3, #4]
 8008bf4:	6063      	str	r3, [r4, #4]
 8008bf6:	bf04      	itt	eq
 8008bf8:	1949      	addeq	r1, r1, r5
 8008bfa:	6021      	streq	r1, [r4, #0]
 8008bfc:	6054      	str	r4, [r2, #4]
 8008bfe:	e7ca      	b.n	8008b96 <_free_r+0x26>
 8008c00:	b003      	add	sp, #12
 8008c02:	bd30      	pop	{r4, r5, pc}
 8008c04:	20004484 	.word	0x20004484

08008c08 <sbrk_aligned>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	4e0e      	ldr	r6, [pc, #56]	; (8008c44 <sbrk_aligned+0x3c>)
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	6831      	ldr	r1, [r6, #0]
 8008c10:	4605      	mov	r5, r0
 8008c12:	b911      	cbnz	r1, 8008c1a <sbrk_aligned+0x12>
 8008c14:	f000 f8bc 	bl	8008d90 <_sbrk_r>
 8008c18:	6030      	str	r0, [r6, #0]
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f000 f8b7 	bl	8008d90 <_sbrk_r>
 8008c22:	1c43      	adds	r3, r0, #1
 8008c24:	d00a      	beq.n	8008c3c <sbrk_aligned+0x34>
 8008c26:	1cc4      	adds	r4, r0, #3
 8008c28:	f024 0403 	bic.w	r4, r4, #3
 8008c2c:	42a0      	cmp	r0, r4
 8008c2e:	d007      	beq.n	8008c40 <sbrk_aligned+0x38>
 8008c30:	1a21      	subs	r1, r4, r0
 8008c32:	4628      	mov	r0, r5
 8008c34:	f000 f8ac 	bl	8008d90 <_sbrk_r>
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d101      	bne.n	8008c40 <sbrk_aligned+0x38>
 8008c3c:	f04f 34ff 	mov.w	r4, #4294967295
 8008c40:	4620      	mov	r0, r4
 8008c42:	bd70      	pop	{r4, r5, r6, pc}
 8008c44:	20004488 	.word	0x20004488

08008c48 <_malloc_r>:
 8008c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c4c:	1ccd      	adds	r5, r1, #3
 8008c4e:	f025 0503 	bic.w	r5, r5, #3
 8008c52:	3508      	adds	r5, #8
 8008c54:	2d0c      	cmp	r5, #12
 8008c56:	bf38      	it	cc
 8008c58:	250c      	movcc	r5, #12
 8008c5a:	2d00      	cmp	r5, #0
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	db01      	blt.n	8008c64 <_malloc_r+0x1c>
 8008c60:	42a9      	cmp	r1, r5
 8008c62:	d905      	bls.n	8008c70 <_malloc_r+0x28>
 8008c64:	230c      	movs	r3, #12
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	2600      	movs	r6, #0
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c70:	4e2e      	ldr	r6, [pc, #184]	; (8008d2c <_malloc_r+0xe4>)
 8008c72:	f000 f89d 	bl	8008db0 <__malloc_lock>
 8008c76:	6833      	ldr	r3, [r6, #0]
 8008c78:	461c      	mov	r4, r3
 8008c7a:	bb34      	cbnz	r4, 8008cca <_malloc_r+0x82>
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	4638      	mov	r0, r7
 8008c80:	f7ff ffc2 	bl	8008c08 <sbrk_aligned>
 8008c84:	1c43      	adds	r3, r0, #1
 8008c86:	4604      	mov	r4, r0
 8008c88:	d14d      	bne.n	8008d26 <_malloc_r+0xde>
 8008c8a:	6834      	ldr	r4, [r6, #0]
 8008c8c:	4626      	mov	r6, r4
 8008c8e:	2e00      	cmp	r6, #0
 8008c90:	d140      	bne.n	8008d14 <_malloc_r+0xcc>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	4631      	mov	r1, r6
 8008c96:	4638      	mov	r0, r7
 8008c98:	eb04 0803 	add.w	r8, r4, r3
 8008c9c:	f000 f878 	bl	8008d90 <_sbrk_r>
 8008ca0:	4580      	cmp	r8, r0
 8008ca2:	d13a      	bne.n	8008d1a <_malloc_r+0xd2>
 8008ca4:	6821      	ldr	r1, [r4, #0]
 8008ca6:	3503      	adds	r5, #3
 8008ca8:	1a6d      	subs	r5, r5, r1
 8008caa:	f025 0503 	bic.w	r5, r5, #3
 8008cae:	3508      	adds	r5, #8
 8008cb0:	2d0c      	cmp	r5, #12
 8008cb2:	bf38      	it	cc
 8008cb4:	250c      	movcc	r5, #12
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	4638      	mov	r0, r7
 8008cba:	f7ff ffa5 	bl	8008c08 <sbrk_aligned>
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	d02b      	beq.n	8008d1a <_malloc_r+0xd2>
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	442b      	add	r3, r5
 8008cc6:	6023      	str	r3, [r4, #0]
 8008cc8:	e00e      	b.n	8008ce8 <_malloc_r+0xa0>
 8008cca:	6822      	ldr	r2, [r4, #0]
 8008ccc:	1b52      	subs	r2, r2, r5
 8008cce:	d41e      	bmi.n	8008d0e <_malloc_r+0xc6>
 8008cd0:	2a0b      	cmp	r2, #11
 8008cd2:	d916      	bls.n	8008d02 <_malloc_r+0xba>
 8008cd4:	1961      	adds	r1, r4, r5
 8008cd6:	42a3      	cmp	r3, r4
 8008cd8:	6025      	str	r5, [r4, #0]
 8008cda:	bf18      	it	ne
 8008cdc:	6059      	strne	r1, [r3, #4]
 8008cde:	6863      	ldr	r3, [r4, #4]
 8008ce0:	bf08      	it	eq
 8008ce2:	6031      	streq	r1, [r6, #0]
 8008ce4:	5162      	str	r2, [r4, r5]
 8008ce6:	604b      	str	r3, [r1, #4]
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f104 060b 	add.w	r6, r4, #11
 8008cee:	f000 f865 	bl	8008dbc <__malloc_unlock>
 8008cf2:	f026 0607 	bic.w	r6, r6, #7
 8008cf6:	1d23      	adds	r3, r4, #4
 8008cf8:	1af2      	subs	r2, r6, r3
 8008cfa:	d0b6      	beq.n	8008c6a <_malloc_r+0x22>
 8008cfc:	1b9b      	subs	r3, r3, r6
 8008cfe:	50a3      	str	r3, [r4, r2]
 8008d00:	e7b3      	b.n	8008c6a <_malloc_r+0x22>
 8008d02:	6862      	ldr	r2, [r4, #4]
 8008d04:	42a3      	cmp	r3, r4
 8008d06:	bf0c      	ite	eq
 8008d08:	6032      	streq	r2, [r6, #0]
 8008d0a:	605a      	strne	r2, [r3, #4]
 8008d0c:	e7ec      	b.n	8008ce8 <_malloc_r+0xa0>
 8008d0e:	4623      	mov	r3, r4
 8008d10:	6864      	ldr	r4, [r4, #4]
 8008d12:	e7b2      	b.n	8008c7a <_malloc_r+0x32>
 8008d14:	4634      	mov	r4, r6
 8008d16:	6876      	ldr	r6, [r6, #4]
 8008d18:	e7b9      	b.n	8008c8e <_malloc_r+0x46>
 8008d1a:	230c      	movs	r3, #12
 8008d1c:	603b      	str	r3, [r7, #0]
 8008d1e:	4638      	mov	r0, r7
 8008d20:	f000 f84c 	bl	8008dbc <__malloc_unlock>
 8008d24:	e7a1      	b.n	8008c6a <_malloc_r+0x22>
 8008d26:	6025      	str	r5, [r4, #0]
 8008d28:	e7de      	b.n	8008ce8 <_malloc_r+0xa0>
 8008d2a:	bf00      	nop
 8008d2c:	20004484 	.word	0x20004484

08008d30 <_realloc_r>:
 8008d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d34:	4680      	mov	r8, r0
 8008d36:	4614      	mov	r4, r2
 8008d38:	460e      	mov	r6, r1
 8008d3a:	b921      	cbnz	r1, 8008d46 <_realloc_r+0x16>
 8008d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d40:	4611      	mov	r1, r2
 8008d42:	f7ff bf81 	b.w	8008c48 <_malloc_r>
 8008d46:	b92a      	cbnz	r2, 8008d54 <_realloc_r+0x24>
 8008d48:	f7ff ff12 	bl	8008b70 <_free_r>
 8008d4c:	4625      	mov	r5, r4
 8008d4e:	4628      	mov	r0, r5
 8008d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d54:	f000 f838 	bl	8008dc8 <_malloc_usable_size_r>
 8008d58:	4284      	cmp	r4, r0
 8008d5a:	4607      	mov	r7, r0
 8008d5c:	d802      	bhi.n	8008d64 <_realloc_r+0x34>
 8008d5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d62:	d812      	bhi.n	8008d8a <_realloc_r+0x5a>
 8008d64:	4621      	mov	r1, r4
 8008d66:	4640      	mov	r0, r8
 8008d68:	f7ff ff6e 	bl	8008c48 <_malloc_r>
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d0ed      	beq.n	8008d4e <_realloc_r+0x1e>
 8008d72:	42bc      	cmp	r4, r7
 8008d74:	4622      	mov	r2, r4
 8008d76:	4631      	mov	r1, r6
 8008d78:	bf28      	it	cs
 8008d7a:	463a      	movcs	r2, r7
 8008d7c:	f7ff fbb8 	bl	80084f0 <memcpy>
 8008d80:	4631      	mov	r1, r6
 8008d82:	4640      	mov	r0, r8
 8008d84:	f7ff fef4 	bl	8008b70 <_free_r>
 8008d88:	e7e1      	b.n	8008d4e <_realloc_r+0x1e>
 8008d8a:	4635      	mov	r5, r6
 8008d8c:	e7df      	b.n	8008d4e <_realloc_r+0x1e>
	...

08008d90 <_sbrk_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d06      	ldr	r5, [pc, #24]	; (8008dac <_sbrk_r+0x1c>)
 8008d94:	2300      	movs	r3, #0
 8008d96:	4604      	mov	r4, r0
 8008d98:	4608      	mov	r0, r1
 8008d9a:	602b      	str	r3, [r5, #0]
 8008d9c:	f7fa f916 	bl	8002fcc <_sbrk>
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	d102      	bne.n	8008daa <_sbrk_r+0x1a>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	b103      	cbz	r3, 8008daa <_sbrk_r+0x1a>
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	bd38      	pop	{r3, r4, r5, pc}
 8008dac:	2000448c 	.word	0x2000448c

08008db0 <__malloc_lock>:
 8008db0:	4801      	ldr	r0, [pc, #4]	; (8008db8 <__malloc_lock+0x8>)
 8008db2:	f000 b811 	b.w	8008dd8 <__retarget_lock_acquire_recursive>
 8008db6:	bf00      	nop
 8008db8:	20004490 	.word	0x20004490

08008dbc <__malloc_unlock>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	; (8008dc4 <__malloc_unlock+0x8>)
 8008dbe:	f000 b80c 	b.w	8008dda <__retarget_lock_release_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	20004490 	.word	0x20004490

08008dc8 <_malloc_usable_size_r>:
 8008dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dcc:	1f18      	subs	r0, r3, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bfbc      	itt	lt
 8008dd2:	580b      	ldrlt	r3, [r1, r0]
 8008dd4:	18c0      	addlt	r0, r0, r3
 8008dd6:	4770      	bx	lr

08008dd8 <__retarget_lock_acquire_recursive>:
 8008dd8:	4770      	bx	lr

08008dda <__retarget_lock_release_recursive>:
 8008dda:	4770      	bx	lr

08008ddc <_init>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	bf00      	nop
 8008de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de2:	bc08      	pop	{r3}
 8008de4:	469e      	mov	lr, r3
 8008de6:	4770      	bx	lr

08008de8 <_fini>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	bf00      	nop
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr


freeRTOSHuerta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08008ce4  08008ce4  00018ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f50  08008f50  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f50  08008f50  00018f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f58  08008f58  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f58  08008f58  00018f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f5c  08008f5c  00018f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004418  2000008c  08008fec  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044a4  08008fec  000244a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fb5  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc6  00000000  00000000  00038071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  0003bd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  0003d408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a512  00000000  00000000  0003e928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1e1  00000000  00000000  00058e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0049  00000000  00000000  0007301b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113064  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006334  00000000  00000000  001130b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ccc 	.word	0x08008ccc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08008ccc 	.word	0x08008ccc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b974 	b.w	8000dcc <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <delay>:
uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

__STATIC_INLINE void delay(volatile uint16_t microseconds) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
    delay_us(microseconds);
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f9aa 	bl	8001138 <delay_us>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f003 f8ce 	bl	8003fbc <HAL_GPIO_Init>
}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f003 f8b0 	bl	8003fbc <HAL_GPIO_Init>
}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <DHT_Start>:

/**
 * Iniciamos el proceso de lectura del sensor DHT22
 **/
void DHT_Start (void) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
    /********  Tbe  ********/
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000e68:	2101      	movs	r1, #1
 8000e6a:	480a      	ldr	r0, [pc, #40]	; (8000e94 <DHT_Start+0x30>)
 8000e6c:	f7ff ffbe 	bl	8000dec <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000e70:	2200      	movs	r2, #0
 8000e72:	2101      	movs	r1, #1
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <DHT_Start+0x30>)
 8000e76:	f003 fa3d 	bl	80042f4 <HAL_GPIO_WritePin>
	delay (1200);  // >1ms delay
 8000e7a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000e7e:	f7ff ffa7 	bl	8000dd0 <delay>

    /********  Tgo  ********/
    Set_Pin_Input(DHT_PORT, DHT_PIN);
 8000e82:	2101      	movs	r1, #1
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <DHT_Start+0x30>)
 8000e86:	f7ff ffcf 	bl	8000e28 <Set_Pin_Input>
    delay (30);   // wait for 30us
 8000e8a:	201e      	movs	r0, #30
 8000e8c:	f7ff ffa0 	bl	8000dd0 <delay>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40020000 	.word	0x40020000

08000e98 <DHT_Check_Response>:


/**
 * Esperamos la respuesta inicial del sensor DHT22
 **/
uint8_t DHT_Check_Response (void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <DHT_Check_Response+0x50>)
 8000ea6:	f003 fa0d 	bl	80042c4 <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10e      	bne.n	8000ece <DHT_Check_Response+0x36>
	{
		delay (80);
 8000eb0:	2050      	movs	r0, #80	; 0x50
 8000eb2:	f7ff ff8d 	bl	8000dd0 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <DHT_Check_Response+0x50>)
 8000eba:	f003 fa03 	bl	80042c4 <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <DHT_Check_Response+0x32>
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	e001      	b.n	8000ece <DHT_Check_Response+0x36>
		else Response = -1;
 8000eca:	23ff      	movs	r3, #255	; 0xff
 8000ecc:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000ece:	bf00      	nop
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <DHT_Check_Response+0x50>)
 8000ed4:	f003 f9f6 	bl	80042c4 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f8      	bne.n	8000ed0 <DHT_Check_Response+0x38>

	return Response;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40020000 	.word	0x40020000

08000eec <DHT_Read>:


/**
 * Leemos la respuesta del sensor DHT22
 **/
uint8_t DHT_Read (void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	71bb      	strb	r3, [r7, #6]
 8000ef6:	e037      	b.n	8000f68 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000ef8:	bf00      	nop
 8000efa:	2101      	movs	r1, #1
 8000efc:	481e      	ldr	r0, [pc, #120]	; (8000f78 <DHT_Read+0x8c>)
 8000efe:	f003 f9e1 	bl	80042c4 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f8      	beq.n	8000efa <DHT_Read+0xe>
		delay (35);   // wait for 40 us
 8000f08:	2023      	movs	r0, #35	; 0x23
 8000f0a:	f7ff ff61 	bl	8000dd0 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4819      	ldr	r0, [pc, #100]	; (8000f78 <DHT_Read+0x8c>)
 8000f12:	f003 f9d7 	bl	80042c4 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10e      	bne.n	8000f3a <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2201      	movs	r2, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	b25a      	sxtb	r2, r3
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	4013      	ands	r3, r2
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	e00b      	b.n	8000f52 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	f1c3 0307 	rsb	r3, r3, #7
 8000f40:	2201      	movs	r2, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	b25a      	sxtb	r2, r3
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000f52:	bf00      	nop
 8000f54:	2101      	movs	r1, #1
 8000f56:	4808      	ldr	r0, [pc, #32]	; (8000f78 <DHT_Read+0x8c>)
 8000f58:	f003 f9b4 	bl	80042c4 <HAL_GPIO_ReadPin>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f8      	bne.n	8000f54 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	3301      	adds	r3, #1
 8000f66:	71bb      	strb	r3, [r7, #6]
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	d9c4      	bls.n	8000ef8 <DHT_Read+0xc>
	}
	return i;
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40020000 	.word	0x40020000

08000f7c <DHT_GetData>:

/**
 * Iniciamos la toma de datos y la almacenamos en nuestra estructura basica
 **/
void
DHT_GetData (DHT_DataTypeDef *DHT_Data) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000f84:	f7ff ff6e 	bl	8000e64 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000f88:	f7ff ff86 	bl	8000e98 <DHT_Check_Response>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b32      	ldr	r3, [pc, #200]	; (800105c <DHT_GetData+0xe0>)
 8000f92:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000f94:	f7ff ffaa 	bl	8000eec <DHT_Read>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <DHT_GetData+0xe4>)
 8000f9e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000fa0:	f7ff ffa4 	bl	8000eec <DHT_Read>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <DHT_GetData+0xe8>)
 8000faa:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000fac:	f7ff ff9e 	bl	8000eec <DHT_Read>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <DHT_GetData+0xec>)
 8000fb6:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000fb8:	f7ff ff98 	bl	8000eec <DHT_Read>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <DHT_GetData+0xf0>)
 8000fc2:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000fc4:	f7ff ff92 	bl	8000eec <DHT_Read>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <DHT_GetData+0xf4>)
 8000fce:	801a      	strh	r2, [r3, #0]

	if (SUM == (uint8_t)(Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2)){
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <DHT_GetData+0xe4>)
 8000fd2:	781a      	ldrb	r2, [r3, #0]
 8000fd4:	4b23      	ldr	r3, [pc, #140]	; (8001064 <DHT_GetData+0xe8>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4413      	add	r3, r2
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <DHT_GetData+0xec>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <DHT_GetData+0xf0>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	4b20      	ldr	r3, [pc, #128]	; (8001070 <DHT_GetData+0xf4>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d12d      	bne.n	8001052 <DHT_GetData+0xd6>
        DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2) / 10.0;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <DHT_GetData+0xec>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <DHT_GetData+0xf0>)
 8000ffe:	7812      	ldrb	r2, [r2, #0]
 8001000:	4313      	orrs	r3, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fa96 	bl	8000534 <__aeabi_i2d>
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <DHT_GetData+0xf8>)
 800100e:	f7ff fc25 	bl	800085c <__aeabi_ddiv>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f7ff fd07 	bl	8000a2c <__aeabi_d2f>
 800101e:	4602      	mov	r2, r0
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	601a      	str	r2, [r3, #0]
        DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2) / 10.0;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <DHT_GetData+0xe4>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <DHT_GetData+0xe8>)
 800102c:	7812      	ldrb	r2, [r2, #0]
 800102e:	4313      	orrs	r3, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa7f 	bl	8000534 <__aeabi_i2d>
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <DHT_GetData+0xf8>)
 800103c:	f7ff fc0e 	bl	800085c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fcf0 	bl	8000a2c <__aeabi_d2f>
 800104c:	4602      	mov	r2, r0
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	605a      	str	r2, [r3, #4]
	}
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200000ae 	.word	0x200000ae
 8001060:	200000a8 	.word	0x200000a8
 8001064:	200000a9 	.word	0x200000a9
 8001068:	200000aa 	.word	0x200000aa
 800106c:	200000ab 	.word	0x200000ab
 8001070:	200000ac 	.word	0x200000ac
 8001074:	40240000 	.word	0x40240000

08001078 <TimerDelay_Init>:
volatile static uint32_t gu32_ticks = 0;

void Error_Handler();

void TimerDelay_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
	gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 800107e:	f004 fb27 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 8001082:	4603      	mov	r3, r0
 8001084:	4a28      	ldr	r2, [pc, #160]	; (8001128 <TimerDelay_Init+0xb0>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	0c9b      	lsrs	r3, r3, #18
 800108c:	4a27      	ldr	r2, [pc, #156]	; (800112c <TimerDelay_Init+0xb4>)
 800108e:	6013      	str	r3, [r2, #0]
	HTIMx.Instance = TIMER;
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <TimerDelay_Init+0xb8>)
 8001092:	4a28      	ldr	r2, [pc, #160]	; (8001134 <TimerDelay_Init+0xbc>)
 8001094:	601a      	str	r2, [r3, #0]

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]


    HTIMx.Init.Prescaler = gu32_ticks-1;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <TimerDelay_Init+0xb4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <TimerDelay_Init+0xb8>)
 80010b4:	6053      	str	r3, [r2, #4]
    HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <TimerDelay_Init+0xb8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
    HTIMx.Init.Period = 65535;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <TimerDelay_Init+0xb8>)
 80010be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c2:	60da      	str	r2, [r3, #12]
    HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <TimerDelay_Init+0xb8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
    HTIMx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <TimerDelay_Init+0xb8>)
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&HTIMx) != HAL_OK)
 80010d0:	4817      	ldr	r0, [pc, #92]	; (8001130 <TimerDelay_Init+0xb8>)
 80010d2:	f005 f839 	bl	8006148 <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <TimerDelay_Init+0x68>
    {
      Error_Handler();
 80010dc:	f000 ff6a 	bl	8001fb4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&HTIMx, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4619      	mov	r1, r3
 80010ec:	4810      	ldr	r0, [pc, #64]	; (8001130 <TimerDelay_Init+0xb8>)
 80010ee:	f005 fad3 	bl	8006698 <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <TimerDelay_Init+0x84>
    {
      Error_Handler();
 80010f8:	f000 ff5c 	bl	8001fb4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&HTIMx, &sMasterConfig) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <TimerDelay_Init+0xb8>)
 800110a:	f005 fe7d 	bl	8006e08 <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <TimerDelay_Init+0xa0>
    {
      Error_Handler();
 8001114:	f000 ff4e 	bl	8001fb4 <Error_Handler>
    }

    HAL_TIM_Base_Start(&HTIMx);
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <TimerDelay_Init+0xb8>)
 800111a:	f005 f840 	bl	800619e <HAL_TIM_Base_Start>

}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	431bde83 	.word	0x431bde83
 800112c:	200000f0 	.word	0x200000f0
 8001130:	200000b0 	.word	0x200000b0
 8001134:	40000400 	.word	0x40000400

08001138 <delay_us>:

void delay_us(volatile uint16_t au16_us)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
	HTIMx.Instance->CNT = 0;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <delay_us+0x30>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
	while (HTIMx.Instance->CNT < au16_us);
 800114a:	bf00      	nop
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <delay_us+0x30>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	88fa      	ldrh	r2, [r7, #6]
 8001154:	b292      	uxth	r2, r2
 8001156:	4293      	cmp	r3, r2
 8001158:	d3f8      	bcc.n	800114c <delay_us+0x14>
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	200000b0 	.word	0x200000b0

0800116c <delay_ms>:

void delay_ms(volatile uint16_t au16_ms)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
	while(au16_ms > 0)
 8001176:	e00f      	b.n	8001198 <delay_ms+0x2c>
	{
		HTIMx.Instance->CNT = 0;
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <delay_ms+0x44>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	; 0x24
		au16_ms--;
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	b29b      	uxth	r3, r3
 8001184:	3b01      	subs	r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	80fb      	strh	r3, [r7, #6]
		while (HTIMx.Instance->CNT < 1000);
 800118a:	bf00      	nop
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <delay_ms+0x44>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001196:	d3f9      	bcc.n	800118c <delay_ms+0x20>
	while(au16_ms > 0)
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	b29b      	uxth	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1eb      	bne.n	8001178 <delay_ms+0xc>
	}
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200000b0 	.word	0x200000b0

080011b4 <BSP_Init>:
static void MX_TIM3_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
static void MX_RTC_Init(void);

void BSP_Init() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
    HAL_Init();
 80011b8:	f001 fef2 	bl	8002fa0 <HAL_Init>
    SystemClock_Config();
 80011bc:	f000 fb86 	bl	80018cc <SystemClock_Config>
    MX_GPIO_Init();
 80011c0:	f000 fdf8 	bl	8001db4 <MX_GPIO_Init>
    MX_DMA_Init();
 80011c4:	f000 fdd6 	bl	8001d74 <MX_DMA_Init>
    MX_I2C1_Init();
 80011c8:	f000 fc56 	bl	8001a78 <MX_I2C1_Init>
    MX_TIM3_Init();
 80011cc:	f000 fd84 	bl	8001cd8 <MX_TIM3_Init>
    MX_ADC1_Init();
 80011d0:	f000 fc00 	bl	80019d4 <MX_ADC1_Init>
    MX_TIM2_Init();
 80011d4:	f000 fd0a 	bl	8001bec <MX_TIM2_Init>
    MX_RTC_Init();
 80011d8:	f000 fc7c 	bl	8001ad4 <MX_RTC_Init>
    TimerDelay_Init();
 80011dc:	f7ff ff4c 	bl	8001078 <TimerDelay_Init>
    LCD_Init();
 80011e0:	f001 fb16 	bl	8002810 <LCD_Init>
    keypad_init();
 80011e4:	f000 ff08 	bl	8001ff8 <keypad_init>
    //BSP_Output_Init();

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Init PWM
 80011e8:	2100      	movs	r1, #0
 80011ea:	4808      	ldr	r0, [pc, #32]	; (800120c <BSP_Init+0x58>)
 80011ec:	f005 f854 	bl	8006298 <HAL_TIM_PWM_Start>

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); //  ENA1
 80011f0:	2200      	movs	r2, #0
 80011f2:	2110      	movs	r1, #16
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <BSP_Init+0x5c>)
 80011f6:	f003 f87d 	bl	80042f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); //  ENA2
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <BSP_Init+0x60>)
 8001202:	f003 f877 	bl	80042f4 <HAL_GPIO_WritePin>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000021c 	.word	0x2000021c
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40020800 	.word	0x40020800

08001218 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){  //Duda si anda este callback
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    static uint32_t App_1000msTimeout = 1000;
    static uint32_t App_100msTimeout = 100;
    static uint32_t App_10msTimeout = 10;
    static uint32_t App_10sTimeout = 10000;

    if(htim->Instance == TIM5){
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a25      	ldr	r2, [pc, #148]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d10c      	bne.n	8001244 <HAL_TIM_PeriodElapsedCallback+0x2c>
    	HAL_IncTick();
 800122a:	f001 fedb 	bl	8002fe4 <HAL_IncTick>
        if(App_100msTimeout){
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <HAL_TIM_PeriodElapsedCallback+0x2c>
            App_100msTimeout--;
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3b01      	subs	r3, #1
 800123c:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800123e:	6013      	str	r3, [r2, #0]
            APP_Timer100ms();
 8001240:	f001 fbed 	bl	8002a1e <APP_Timer100ms>

            //codigo
        }
    }
    if(App_10msTimeout){
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00d      	beq.n	8001268 <HAL_TIM_PeriodElapsedCallback+0x50>
        App_10msTimeout--;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3b01      	subs	r3, #1
 8001252:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001254:	6013      	str	r3, [r2, #0]
        if(App_10msTimeout == 0){
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d104      	bne.n	8001268 <HAL_TIM_PeriodElapsedCallback+0x50>
            App_10msTimeout = 10;
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001260:	220a      	movs	r2, #10
 8001262:	601a      	str	r2, [r3, #0]
            APP_Timer10ms();
 8001264:	f001 fbd4 	bl	8002a10 <APP_Timer10ms>
        }
    }
    if(App_1000msTimeout){
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00e      	beq.n	800128e <HAL_TIM_PeriodElapsedCallback+0x76>
        App_1000msTimeout--;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3b01      	subs	r3, #1
 8001276:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001278:	6013      	str	r3, [r2, #0]
        if(App_1000msTimeout == 0){
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d105      	bne.n	800128e <HAL_TIM_PeriodElapsedCallback+0x76>
            App_1000msTimeout = 1000;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001288:	601a      	str	r2, [r3, #0]
            APP_Timer1000ms();
 800128a:	f001 fbcf 	bl	8002a2c <APP_Timer1000ms>
        }
    }
    if(App_10sTimeout){
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00e      	beq.n	80012b4 <HAL_TIM_PeriodElapsedCallback+0x9c>
        App_10sTimeout--;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3b01      	subs	r3, #1
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800129e:	6013      	str	r3, [r2, #0]
        if(App_10sTimeout == 0){
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <HAL_TIM_PeriodElapsedCallback+0x9c>
            App_10sTimeout = 10000;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80012aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80012ae:	601a      	str	r2, [r3, #0]
            APP_Timer10s();
 80012b0:	f001 fbc3 	bl	8002a3a <APP_Timer10s>
        }
    }
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40000c00 	.word	0x40000c00
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000004 	.word	0x20000004
 80012c8:	20000008 	.word	0x20000008
 80012cc:	2000000c 	.word	0x2000000c

080012d0 <BSP_Delay>:

void BSP_Delay(uint16_t Delay){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
    delay_ms(Delay);
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff45 	bl	800116c <delay_ms>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <BSP_LCD_Temperature>:

void BSP_LCD_Temperature(float temperatura) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	ed87 0a01 	vstr	s0, [r7, #4]
    LCD_SetCursor(1, 4);
 80012f6:	2104      	movs	r1, #4
 80012f8:	2001      	movs	r0, #1
 80012fa:	f001 f96b 	bl	80025d4 <LCD_SetCursor>
    LCD_Print("Grados:%0.0fC", temperatura);
 80012fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8001302:	4803      	ldr	r0, [pc, #12]	; (8001310 <BSP_LCD_Temperature+0x24>)
 8001304:	f001 fa4c 	bl	80027a0 <LCD_Print>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	08008ce4 	.word	0x08008ce4

08001314 <BSP_LCD_Humidity>:

void BSP_LCD_Humidity(float humedad) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	ed87 0a01 	vstr	s0, [r7, #4]
    LCD_SetCursor(2, 1);
 800131e:	2101      	movs	r1, #1
 8001320:	2002      	movs	r0, #2
 8001322:	f001 f957 	bl	80025d4 <LCD_SetCursor>
    LCD_Print("HA:%0.0f%%", humedad);
 8001326:	ed97 0a01 	vldr	s0, [r7, #4]
 800132a:	4803      	ldr	r0, [pc, #12]	; (8001338 <BSP_LCD_Humidity+0x24>)
 800132c:	f001 fa38 	bl	80027a0 <LCD_Print>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	08008cf4 	.word	0x08008cf4

0800133c <BSP_Get_percentageHS>:

uint32_t BSP_Get_percentageHS(uint32_t value){
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    int hummin = 4095;                      //REVISAR TIPO DE DATO
 8001344:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001348:	617b      	str	r3, [r7, #20]
    int hummax = 2300;                      //REVISAR Maximo y Minimo en especial maximo
 800134a:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800134e:	613b      	str	r3, [r7, #16]
//#define humminp = 0
    int hummaxp = 100;
 8001350:	2364      	movs	r3, #100	; 0x64
 8001352:	60fb      	str	r3, [r7, #12]
    if (value > hummin)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	d901      	bls.n	8001360 <BSP_Get_percentageHS+0x24>
        value = hummin;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	607b      	str	r3, [r7, #4]
    if (value <= hummax)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	d802      	bhi.n	800136e <BSP_Get_percentageHS+0x32>
        value = hummax + 1;
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	3301      	adds	r3, #1
 800136c:	607b      	str	r3, [r7, #4]
    value = value - hummax;
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	607b      	str	r3, [r7, #4]
    return 100 - ((value * hummaxp) / (hummin - hummax));
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	6979      	ldr	r1, [r7, #20]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	1a8a      	subs	r2, r1, r2
 8001384:	fbb3 f3f2 	udiv	r3, r3, r2
 8001388:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
}
 800138c:	4618      	mov	r0, r3
 800138e:	371c      	adds	r7, #28
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <BSP_Detect_Movement>:

void BSP_Detect_Movement(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
    if ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2))) {  //si el pin esta en alto
 800139c:	2104      	movs	r1, #4
 800139e:	480f      	ldr	r0, [pc, #60]	; (80013dc <BSP_Detect_Movement+0x44>)
 80013a0:	f002 ff90 	bl	80042c4 <HAL_GPIO_ReadPin>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d016      	beq.n	80013d8 <BSP_Detect_Movement+0x40>
        //buzzer_on();  //suena el buzzer
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); //Encender led verde
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <BSP_Detect_Movement+0x48>)
 80013b2:	f002 ff9f 	bl	80042f4 <HAL_GPIO_WritePin>
        LCD_Clear();
 80013b6:	f001 f8f9 	bl	80025ac <LCD_Clear>
        LCD_SetCursor(2, 4);
 80013ba:	2104      	movs	r1, #4
 80013bc:	2002      	movs	r0, #2
 80013be:	f001 f909 	bl	80025d4 <LCD_SetCursor>
        LCD_Print("Movimiento", 1);   // Durante toda la espera con cortina cerrada?
 80013c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80013c6:	4807      	ldr	r0, [pc, #28]	; (80013e4 <BSP_Detect_Movement+0x4c>)
 80013c8:	f001 f9ea 	bl	80027a0 <LCD_Print>
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);     //  ENA
//        }
//        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2));   //espera hasta que el pir se apague

        //buzzer_off(); //se apaga el buffer
        HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET); //se apaga el led verde
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d2:	4803      	ldr	r0, [pc, #12]	; (80013e0 <BSP_Detect_Movement+0x48>)
 80013d4:	f002 ff8e 	bl	80042f4 <HAL_GPIO_WritePin>
    }
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	08008d00 	.word	0x08008d00

080013e8 <BSP_Show_SoilHumidity>:
            estado_cortina = 0;                                                    //cambio de estado
        }
    }
}

void BSP_Show_SoilHumidity(){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 80013ec:	4815      	ldr	r0, [pc, #84]	; (8001444 <BSP_Show_SoilHumidity+0x5c>)
 80013ee:	f001 fe81 	bl	80030f4 <HAL_ADC_Start>
    if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK){     //incilur esta parte en el solenoide para hecr while?
 80013f2:	2105      	movs	r1, #5
 80013f4:	4813      	ldr	r0, [pc, #76]	; (8001444 <BSP_Show_SoilHumidity+0x5c>)
 80013f6:	f001 ff56 	bl	80032a6 <HAL_ADC_PollForConversion>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d110      	bne.n	8001422 <BSP_Show_SoilHumidity+0x3a>
        value_adc[0] = HAL_ADC_GetValue(&hadc1);
 8001400:	4810      	ldr	r0, [pc, #64]	; (8001444 <BSP_Show_SoilHumidity+0x5c>)
 8001402:	f001 ffd4 	bl	80033ae <HAL_ADC_GetValue>
 8001406:	4603      	mov	r3, r0
 8001408:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <BSP_Show_SoilHumidity+0x60>)
 800140a:	6013      	str	r3, [r2, #0]
        value_adc[0] = BSP_Get_percentageHS(value_adc[0]);
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <BSP_Show_SoilHumidity+0x60>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff93 	bl	800133c <BSP_Get_percentageHS>
 8001416:	4603      	mov	r3, r0
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <BSP_Show_SoilHumidity+0x60>)
 800141a:	6013      	str	r3, [r2, #0]
        HAL_ADC_Stop(&hadc1);
 800141c:	4809      	ldr	r0, [pc, #36]	; (8001444 <BSP_Show_SoilHumidity+0x5c>)
 800141e:	f001 ff0f 	bl	8003240 <HAL_ADC_Stop>
    }
    LCD_SetCursor(2, 10);
 8001422:	210a      	movs	r1, #10
 8001424:	2002      	movs	r0, #2
 8001426:	f001 f8d5 	bl	80025d4 <LCD_SetCursor>
    LCD_Print("HS:%0.0f%%", value_adc[0]);  //REVISAR
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <BSP_Show_SoilHumidity+0x60>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001436:	eeb0 0a67 	vmov.f32	s0, s15
 800143a:	4804      	ldr	r0, [pc, #16]	; (800144c <BSP_Show_SoilHumidity+0x64>)
 800143c:	f001 f9b0 	bl	80027a0 <LCD_Print>

    //HAL_Delay(3000);
    //LCD_Clear();
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000100 	.word	0x20000100
 8001448:	200000f4 	.word	0x200000f4
 800144c:	08008d34 	.word	0x08008d34

08001450 <BSP_Keypad>:
    }
    while (value_adc[0] <= rangohmax && value_adc[0] >= rangohmin);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); //  ENA
}

void BSP_Keypad(int rangohmin, int rangohmax, int estado_cortina, int cortina_manual){
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]
    int tecla;
    tecla = keypad_read();
 800145e:	f000 fe7b 	bl	8002158 <keypad_read>
 8001462:	4603      	mov	r3, r0
 8001464:	617b      	str	r3, [r7, #20]
    LCD_Clear();
 8001466:	f001 f8a1 	bl	80025ac <LCD_Clear>
    if (tecla != 0){
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 821d 	beq.w	80018ac <BSP_Keypad+0x45c>
        switch (tecla) {
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3b30      	subs	r3, #48	; 0x30
 8001476:	2b14      	cmp	r3, #20
 8001478:	f200 821b 	bhi.w	80018b2 <BSP_Keypad+0x462>
 800147c:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <BSP_Keypad+0x34>)
 800147e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001482:	bf00      	nop
 8001484:	08001891 	.word	0x08001891
 8001488:	08001661 	.word	0x08001661
 800148c:	0800167d 	.word	0x0800167d
 8001490:	08001699 	.word	0x08001699
 8001494:	080016b5 	.word	0x080016b5
 8001498:	080016d1 	.word	0x080016d1
 800149c:	080016ed 	.word	0x080016ed
 80014a0:	08001709 	.word	0x08001709
 80014a4:	08001725 	.word	0x08001725
 80014a8:	08001741 	.word	0x08001741
 80014ac:	080018b3 	.word	0x080018b3
 80014b0:	080018b3 	.word	0x080018b3
 80014b4:	080018b3 	.word	0x080018b3
 80014b8:	080018b3 	.word	0x080018b3
 80014bc:	080018b3 	.word	0x080018b3
 80014c0:	080018b3 	.word	0x080018b3
 80014c4:	080018b3 	.word	0x080018b3
 80014c8:	080014d9 	.word	0x080014d9
 80014cc:	080018b1 	.word	0x080018b1
 80014d0:	0800175d 	.word	0x0800175d
 80014d4:	08001781 	.word	0x08001781
            case 65:
                LCD_Clear();
 80014d8:	f001 f868 	bl	80025ac <LCD_Clear>
                LCD_SetCursor(1, 5);
 80014dc:	2105      	movs	r1, #5
 80014de:	2001      	movs	r0, #1
 80014e0:	f001 f878 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("MINIMO:", 1);
 80014e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80014e8:	48bf      	ldr	r0, [pc, #764]	; (80017e8 <BSP_Keypad+0x398>)
 80014ea:	f001 f959 	bl	80027a0 <LCD_Print>
                HAL_Delay(2000);
 80014ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014f2:	f001 fd97 	bl	8003024 <HAL_Delay>
                do {                                         //REVISAR
                    tecla = keypad_read();                  //DUDA NECESARIO PRESIONADO EN EL MOMENTO JUSTO?
 80014f6:	f000 fe2f 	bl	8002158 <keypad_read>
 80014fa:	4603      	mov	r3, r0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3b30      	subs	r3, #48	; 0x30
 8001502:	2b09      	cmp	r3, #9
 8001504:	d834      	bhi.n	8001570 <BSP_Keypad+0x120>
 8001506:	a201      	add	r2, pc, #4	; (adr r2, 800150c <BSP_Keypad+0xbc>)
 8001508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150c:	0800156b 	.word	0x0800156b
 8001510:	08001535 	.word	0x08001535
 8001514:	0800153b 	.word	0x0800153b
 8001518:	08001541 	.word	0x08001541
 800151c:	08001547 	.word	0x08001547
 8001520:	0800154d 	.word	0x0800154d
 8001524:	08001553 	.word	0x08001553
 8001528:	08001559 	.word	0x08001559
 800152c:	0800155f 	.word	0x0800155f
 8001530:	08001565 	.word	0x08001565
                    switch (tecla) {
                        case 49: rangohmin = 10; break;
 8001534:	230a      	movs	r3, #10
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	e01c      	b.n	8001574 <BSP_Keypad+0x124>
                        case 50: rangohmin = 20; break;
 800153a:	2314      	movs	r3, #20
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e019      	b.n	8001574 <BSP_Keypad+0x124>
                        case 51: rangohmin = 30; break;
 8001540:	231e      	movs	r3, #30
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	e016      	b.n	8001574 <BSP_Keypad+0x124>
                        case 52: rangohmin = 40; break;
 8001546:	2328      	movs	r3, #40	; 0x28
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	e013      	b.n	8001574 <BSP_Keypad+0x124>
                        case 53: rangohmin = 50; break;
 800154c:	2332      	movs	r3, #50	; 0x32
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e010      	b.n	8001574 <BSP_Keypad+0x124>
                        case 54: rangohmin = 60; break;
 8001552:	233c      	movs	r3, #60	; 0x3c
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e00d      	b.n	8001574 <BSP_Keypad+0x124>
                        case 55: rangohmin = 70; break;
 8001558:	2346      	movs	r3, #70	; 0x46
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	e00a      	b.n	8001574 <BSP_Keypad+0x124>
                        case 56: rangohmin = 80; break;
 800155e:	2350      	movs	r3, #80	; 0x50
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	e007      	b.n	8001574 <BSP_Keypad+0x124>
                        case 57: rangohmin = 90; break;
 8001564:	235a      	movs	r3, #90	; 0x5a
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e004      	b.n	8001574 <BSP_Keypad+0x124>
                        case 48: rangohmin =  0; break;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	e001      	b.n	8001574 <BSP_Keypad+0x124>
                        default: rangohmin = 100;              //FALTA CASO 100
 8001570:	2364      	movs	r3, #100	; 0x64
 8001572:	60fb      	str	r3, [r7, #12]
                    }
                } while (tecla == 0 || rangohmin == 100);             //VER MAS CASOS // oscioso dos veces 100 porciento
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0bd      	beq.n	80014f6 <BSP_Keypad+0xa6>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b64      	cmp	r3, #100	; 0x64
 800157e:	d0ba      	beq.n	80014f6 <BSP_Keypad+0xa6>
                LCD_SetCursor(1, 5);
 8001580:	2105      	movs	r1, #5
 8001582:	2001      	movs	r0, #1
 8001584:	f001 f826 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("MINIMO:%0.0f", rangohmin);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001592:	eeb0 0a67 	vmov.f32	s0, s15
 8001596:	4895      	ldr	r0, [pc, #596]	; (80017ec <BSP_Keypad+0x39c>)
 8001598:	f001 f902 	bl	80027a0 <LCD_Print>
                LCD_SetCursor(2, 5);
 800159c:	2105      	movs	r1, #5
 800159e:	2002      	movs	r0, #2
 80015a0:	f001 f818 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("MAXIMO:", 1);
 80015a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80015a8:	4891      	ldr	r0, [pc, #580]	; (80017f0 <BSP_Keypad+0x3a0>)
 80015aa:	f001 f8f9 	bl	80027a0 <LCD_Print>
                do {
                    tecla = keypad_read();                  //DUDA NECESARIO PRESIONADO EN EL MOMENTO JUSTO?
 80015ae:	f000 fdd3 	bl	8002158 <keypad_read>
 80015b2:	4603      	mov	r3, r0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3b30      	subs	r3, #48	; 0x30
 80015ba:	2b09      	cmp	r3, #9
 80015bc:	d834      	bhi.n	8001628 <BSP_Keypad+0x1d8>
 80015be:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <BSP_Keypad+0x174>)
 80015c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c4:	08001623 	.word	0x08001623
 80015c8:	080015ed 	.word	0x080015ed
 80015cc:	080015f3 	.word	0x080015f3
 80015d0:	080015f9 	.word	0x080015f9
 80015d4:	080015ff 	.word	0x080015ff
 80015d8:	08001605 	.word	0x08001605
 80015dc:	0800160b 	.word	0x0800160b
 80015e0:	08001611 	.word	0x08001611
 80015e4:	08001617 	.word	0x08001617
 80015e8:	0800161d 	.word	0x0800161d
                    switch (tecla) {                         //REVISAR
                        case 49: rangohmax = 10; break;
 80015ec:	230a      	movs	r3, #10
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	e01c      	b.n	800162c <BSP_Keypad+0x1dc>
                        case 50: rangohmax = 20; break;
 80015f2:	2314      	movs	r3, #20
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	e019      	b.n	800162c <BSP_Keypad+0x1dc>
                        case 51: rangohmax = 30; break;
 80015f8:	231e      	movs	r3, #30
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	e016      	b.n	800162c <BSP_Keypad+0x1dc>
                        case 52: rangohmax = 40; break;
 80015fe:	2328      	movs	r3, #40	; 0x28
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	e013      	b.n	800162c <BSP_Keypad+0x1dc>
                        case 53: rangohmax = 50; break;         //FALTA DEFAULT??
 8001604:	2332      	movs	r3, #50	; 0x32
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	e010      	b.n	800162c <BSP_Keypad+0x1dc>
                        case 54: rangohmax = 60; break;
 800160a:	233c      	movs	r3, #60	; 0x3c
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	e00d      	b.n	800162c <BSP_Keypad+0x1dc>
                        case 55: rangohmax = 70; break;
 8001610:	2346      	movs	r3, #70	; 0x46
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	e00a      	b.n	800162c <BSP_Keypad+0x1dc>
                        case 56: rangohmax = 80; break;
 8001616:	2350      	movs	r3, #80	; 0x50
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	e007      	b.n	800162c <BSP_Keypad+0x1dc>
                        case 57: rangohmax = 90; break;
 800161c:	235a      	movs	r3, #90	; 0x5a
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	e004      	b.n	800162c <BSP_Keypad+0x1dc>
                        case 48: rangohmax =  0; break;
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	e001      	b.n	800162c <BSP_Keypad+0x1dc>
                        default: rangohmax = 100;               //FALTA CASO 100
 8001628:	2364      	movs	r3, #100	; 0x64
 800162a:	60bb      	str	r3, [r7, #8]
                    }                                           //FALTA CASO ERROR QUE SEA MENOR AL MÍNIMO
                } while (tecla == 0 || rangohmax <= rangohmin);   //REVISAR NO HACE EFECTO
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0bd      	beq.n	80015ae <BSP_Keypad+0x15e>
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	429a      	cmp	r2, r3
 8001638:	ddb9      	ble.n	80015ae <BSP_Keypad+0x15e>
                LCD_SetCursor(2, 5);
 800163a:	2105      	movs	r1, #5
 800163c:	2002      	movs	r0, #2
 800163e:	f000 ffc9 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("MAXIMO:%0.0f", rangohmax);
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164c:	eeb0 0a67 	vmov.f32	s0, s15
 8001650:	4868      	ldr	r0, [pc, #416]	; (80017f4 <BSP_Keypad+0x3a4>)
 8001652:	f001 f8a5 	bl	80027a0 <LCD_Print>
                HAL_Delay(4000);
 8001656:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800165a:	f001 fce3 	bl	8003024 <HAL_Delay>
                break;
 800165e:	e128      	b.n	80018b2 <BSP_Keypad+0x462>
            case 49:
                LCD_SetCursor(2, 1);
 8001660:	2101      	movs	r1, #1
 8001662:	2002      	movs	r0, #2
 8001664:	f000 ffb6 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("Ingreso 1", 1);
 8001668:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800166c:	4862      	ldr	r0, [pc, #392]	; (80017f8 <BSP_Keypad+0x3a8>)
 800166e:	f001 f897 	bl	80027a0 <LCD_Print>
                HAL_Delay(2000);
 8001672:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001676:	f001 fcd5 	bl	8003024 <HAL_Delay>
                break;
 800167a:	e11a      	b.n	80018b2 <BSP_Keypad+0x462>
            case 50:
                LCD_SetCursor(2, 1);
 800167c:	2101      	movs	r1, #1
 800167e:	2002      	movs	r0, #2
 8001680:	f000 ffa8 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("Ingreso 2", 1);
 8001684:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001688:	485c      	ldr	r0, [pc, #368]	; (80017fc <BSP_Keypad+0x3ac>)
 800168a:	f001 f889 	bl	80027a0 <LCD_Print>
                HAL_Delay(2000);
 800168e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001692:	f001 fcc7 	bl	8003024 <HAL_Delay>
                break;
 8001696:	e10c      	b.n	80018b2 <BSP_Keypad+0x462>
            case 51:
                LCD_SetCursor(2, 1);
 8001698:	2101      	movs	r1, #1
 800169a:	2002      	movs	r0, #2
 800169c:	f000 ff9a 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("Ingreso 3", 1);
 80016a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80016a4:	4856      	ldr	r0, [pc, #344]	; (8001800 <BSP_Keypad+0x3b0>)
 80016a6:	f001 f87b 	bl	80027a0 <LCD_Print>
                HAL_Delay(2000);
 80016aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016ae:	f001 fcb9 	bl	8003024 <HAL_Delay>
                break;
 80016b2:	e0fe      	b.n	80018b2 <BSP_Keypad+0x462>
            case 52:
                LCD_SetCursor(2, 1);
 80016b4:	2101      	movs	r1, #1
 80016b6:	2002      	movs	r0, #2
 80016b8:	f000 ff8c 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("Ingreso 4", 1);
 80016bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80016c0:	4850      	ldr	r0, [pc, #320]	; (8001804 <BSP_Keypad+0x3b4>)
 80016c2:	f001 f86d 	bl	80027a0 <LCD_Print>
                HAL_Delay(2000);
 80016c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016ca:	f001 fcab 	bl	8003024 <HAL_Delay>
                break;
 80016ce:	e0f0      	b.n	80018b2 <BSP_Keypad+0x462>
            case 53:
                LCD_SetCursor(2, 1);
 80016d0:	2101      	movs	r1, #1
 80016d2:	2002      	movs	r0, #2
 80016d4:	f000 ff7e 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("Ingreso 5", 1);
 80016d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80016dc:	484a      	ldr	r0, [pc, #296]	; (8001808 <BSP_Keypad+0x3b8>)
 80016de:	f001 f85f 	bl	80027a0 <LCD_Print>
                HAL_Delay(2000);
 80016e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016e6:	f001 fc9d 	bl	8003024 <HAL_Delay>
                break;
 80016ea:	e0e2      	b.n	80018b2 <BSP_Keypad+0x462>
            case 54:
                LCD_SetCursor(2, 1);
 80016ec:	2101      	movs	r1, #1
 80016ee:	2002      	movs	r0, #2
 80016f0:	f000 ff70 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("Ingreso 6", 1);
 80016f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80016f8:	4844      	ldr	r0, [pc, #272]	; (800180c <BSP_Keypad+0x3bc>)
 80016fa:	f001 f851 	bl	80027a0 <LCD_Print>
                HAL_Delay(2000);
 80016fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001702:	f001 fc8f 	bl	8003024 <HAL_Delay>
                break;
 8001706:	e0d4      	b.n	80018b2 <BSP_Keypad+0x462>
//                if (AMoPM == 2){

//                }
                break;
            case 55:
                LCD_SetCursor(2, 1);
 8001708:	2101      	movs	r1, #1
 800170a:	2002      	movs	r0, #2
 800170c:	f000 ff62 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("Ingreso 7", 1);
 8001710:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001714:	483e      	ldr	r0, [pc, #248]	; (8001810 <BSP_Keypad+0x3c0>)
 8001716:	f001 f843 	bl	80027a0 <LCD_Print>
                HAL_Delay(2000);
 800171a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800171e:	f001 fc81 	bl	8003024 <HAL_Delay>
                break;
 8001722:	e0c6      	b.n	80018b2 <BSP_Keypad+0x462>
            case 56:
                LCD_SetCursor(2, 1);
 8001724:	2101      	movs	r1, #1
 8001726:	2002      	movs	r0, #2
 8001728:	f000 ff54 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("Ingreso 8", 1);
 800172c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001730:	4838      	ldr	r0, [pc, #224]	; (8001814 <BSP_Keypad+0x3c4>)
 8001732:	f001 f835 	bl	80027a0 <LCD_Print>
                HAL_Delay(2000);
 8001736:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800173a:	f001 fc73 	bl	8003024 <HAL_Delay>
                break;
 800173e:	e0b8      	b.n	80018b2 <BSP_Keypad+0x462>
            case 57:
                LCD_SetCursor(2, 1);
 8001740:	2101      	movs	r1, #1
 8001742:	2002      	movs	r0, #2
 8001744:	f000 ff46 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("Ingreso 9", 1);
 8001748:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800174c:	4832      	ldr	r0, [pc, #200]	; (8001818 <BSP_Keypad+0x3c8>)
 800174e:	f001 f827 	bl	80027a0 <LCD_Print>
                HAL_Delay(2000);
 8001752:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001756:	f001 fc65 	bl	8003024 <HAL_Delay>
                break;
 800175a:	e0aa      	b.n	80018b2 <BSP_Keypad+0x462>
            case 67:                                             //TECLA 'C'
                LCD_SetCursor(2, 5);
 800175c:	2105      	movs	r1, #5
 800175e:	2002      	movs	r0, #2
 8001760:	f000 ff38 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("PESTICIDA", 1);
 8001764:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001768:	482c      	ldr	r0, [pc, #176]	; (800181c <BSP_Keypad+0x3cc>)
 800176a:	f001 f819 	bl	80027a0 <LCD_Print>
                htim2.Instance->CCR1 = 75; //ANGULO 90 GRADOS
 800176e:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <BSP_Keypad+0x3d0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	224b      	movs	r2, #75	; 0x4b
 8001774:	635a      	str	r2, [r3, #52]	; 0x34
                HAL_Delay(4000);
 8001776:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800177a:	f001 fc53 	bl	8003024 <HAL_Delay>
                break;
 800177e:	e098      	b.n	80018b2 <BSP_Keypad+0x462>
            case 68:                                             //TECLA 'D'
                if(estado_cortina == 0) {       //flag para ver si la cortina esta abierta o cerrada
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d154      	bne.n	8001830 <BSP_Keypad+0x3e0>
                    LCD_SetCursor(2, 1);
 8001786:	2101      	movs	r1, #1
 8001788:	2002      	movs	r0, #2
 800178a:	f000 ff23 	bl	80025d4 <LCD_SetCursor>
                    LCD_Print("CERRANDO CORTINA", 1);
 800178e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001792:	4824      	ldr	r0, [pc, #144]	; (8001824 <BSP_Keypad+0x3d4>)
 8001794:	f001 f804 	bl	80027a0 <LCD_Print>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET); //  ENA
 8001798:	2201      	movs	r2, #1
 800179a:	2110      	movs	r1, #16
 800179c:	4822      	ldr	r0, [pc, #136]	; (8001828 <BSP_Keypad+0x3d8>)
 800179e:	f002 fda9 	bl	80042f4 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); //  IN1
 80017a2:	2201      	movs	r2, #1
 80017a4:	2108      	movs	r1, #8
 80017a6:	4820      	ldr	r0, [pc, #128]	; (8001828 <BSP_Keypad+0x3d8>)
 80017a8:	f002 fda4 	bl	80042f4 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //  IN2
 80017ac:	2200      	movs	r2, #0
 80017ae:	2104      	movs	r1, #4
 80017b0:	481d      	ldr	r0, [pc, #116]	; (8001828 <BSP_Keypad+0x3d8>)
 80017b2:	f002 fd9f 	bl	80042f4 <HAL_GPIO_WritePin>
                    while (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5));   //espera hasta que la cortina toque fin de carrera con pull up
 80017b6:	bf00      	nop
 80017b8:	2120      	movs	r1, #32
 80017ba:	481c      	ldr	r0, [pc, #112]	; (800182c <BSP_Keypad+0x3dc>)
 80017bc:	f002 fd82 	bl	80042c4 <HAL_GPIO_ReadPin>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f8      	beq.n	80017b8 <BSP_Keypad+0x368>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); //  ENA
 80017c6:	2200      	movs	r2, #0
 80017c8:	2110      	movs	r1, #16
 80017ca:	4817      	ldr	r0, [pc, #92]	; (8001828 <BSP_Keypad+0x3d8>)
 80017cc:	f002 fd92 	bl	80042f4 <HAL_GPIO_WritePin>
                    estado_cortina = 1;                                                  //cambio de estado
 80017d0:	2301      	movs	r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
                    if (cortina_manual == 0)   //revisar
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <BSP_Keypad+0x390>
                        cortina_manual = 1;        //bandera para saber si se quiere de manera manual la cortina abierta
 80017da:	2301      	movs	r3, #1
 80017dc:	603b      	str	r3, [r7, #0]
                    if (cortina_manual == 0)   //revisar
                        cortina_manual = 1;
                    else
                        cortina_manual = 0;    //bandera para saber si se quiere de manera manual la cortina abierta
                }
                break;
 80017de:	e068      	b.n	80018b2 <BSP_Keypad+0x462>
                        cortina_manual = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	603b      	str	r3, [r7, #0]
                break;
 80017e4:	e065      	b.n	80018b2 <BSP_Keypad+0x462>
 80017e6:	bf00      	nop
 80017e8:	08008d48 	.word	0x08008d48
 80017ec:	08008d50 	.word	0x08008d50
 80017f0:	08008d60 	.word	0x08008d60
 80017f4:	08008d68 	.word	0x08008d68
 80017f8:	08008d78 	.word	0x08008d78
 80017fc:	08008d84 	.word	0x08008d84
 8001800:	08008d90 	.word	0x08008d90
 8001804:	08008d9c 	.word	0x08008d9c
 8001808:	08008da8 	.word	0x08008da8
 800180c:	08008db4 	.word	0x08008db4
 8001810:	08008dc0 	.word	0x08008dc0
 8001814:	08008dcc 	.word	0x08008dcc
 8001818:	08008dd8 	.word	0x08008dd8
 800181c:	08008de4 	.word	0x08008de4
 8001820:	2000021c 	.word	0x2000021c
 8001824:	08008d0c 	.word	0x08008d0c
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021000 	.word	0x40021000
                    LCD_SetCursor(2, 1);
 8001830:	2101      	movs	r1, #1
 8001832:	2002      	movs	r0, #2
 8001834:	f000 fece 	bl	80025d4 <LCD_SetCursor>
                    LCD_Print("ABRIENDO CORTINA", 1);
 8001838:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800183c:	481f      	ldr	r0, [pc, #124]	; (80018bc <BSP_Keypad+0x46c>)
 800183e:	f000 ffaf 	bl	80027a0 <LCD_Print>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET); //  ENA
 8001842:	2201      	movs	r2, #1
 8001844:	2110      	movs	r1, #16
 8001846:	481e      	ldr	r0, [pc, #120]	; (80018c0 <BSP_Keypad+0x470>)
 8001848:	f002 fd54 	bl	80042f4 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); //  IN1
 800184c:	2200      	movs	r2, #0
 800184e:	2108      	movs	r1, #8
 8001850:	481b      	ldr	r0, [pc, #108]	; (80018c0 <BSP_Keypad+0x470>)
 8001852:	f002 fd4f 	bl	80042f4 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //  IN2
 8001856:	2201      	movs	r2, #1
 8001858:	2104      	movs	r1, #4
 800185a:	4819      	ldr	r0, [pc, #100]	; (80018c0 <BSP_Keypad+0x470>)
 800185c:	f002 fd4a 	bl	80042f4 <HAL_GPIO_WritePin>
                    while (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3));   //espera hasta que la cortina toque fin de carrera con pull up
 8001860:	bf00      	nop
 8001862:	2108      	movs	r1, #8
 8001864:	4817      	ldr	r0, [pc, #92]	; (80018c4 <BSP_Keypad+0x474>)
 8001866:	f002 fd2d 	bl	80042c4 <HAL_GPIO_ReadPin>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f8      	beq.n	8001862 <BSP_Keypad+0x412>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); //  ENA
 8001870:	2200      	movs	r2, #0
 8001872:	2110      	movs	r1, #16
 8001874:	4812      	ldr	r0, [pc, #72]	; (80018c0 <BSP_Keypad+0x470>)
 8001876:	f002 fd3d 	bl	80042f4 <HAL_GPIO_WritePin>
                    estado_cortina = 0;                                           //cambio de estado
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
                    if (cortina_manual == 0)   //revisar
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <BSP_Keypad+0x43a>
                        cortina_manual = 1;
 8001884:	2301      	movs	r3, #1
 8001886:	603b      	str	r3, [r7, #0]
                break;
 8001888:	e013      	b.n	80018b2 <BSP_Keypad+0x462>
                        cortina_manual = 0;    //bandera para saber si se quiere de manera manual la cortina abierta
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
                break;
 800188e:	e010      	b.n	80018b2 <BSP_Keypad+0x462>
            case 48:
                LCD_SetCursor(2, 1);
 8001890:	2101      	movs	r1, #1
 8001892:	2002      	movs	r0, #2
 8001894:	f000 fe9e 	bl	80025d4 <LCD_SetCursor>
                LCD_Print("Ingreso 0", 1);
 8001898:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800189c:	480a      	ldr	r0, [pc, #40]	; (80018c8 <BSP_Keypad+0x478>)
 800189e:	f000 ff7f 	bl	80027a0 <LCD_Print>
                HAL_Delay(2000);
 80018a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018a6:	f001 fbbd 	bl	8003024 <HAL_Delay>
                break;
 80018aa:	e002      	b.n	80018b2 <BSP_Keypad+0x462>
        }
    }
 80018ac:	bf00      	nop
 80018ae:	e000      	b.n	80018b2 <BSP_Keypad+0x462>
                break;
 80018b0:	bf00      	nop
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	08008d20 	.word	0x08008d20
 80018c0:	40020c00 	.word	0x40020c00
 80018c4:	40021000 	.word	0x40021000
 80018c8:	08008df0 	.word	0x08008df0

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b09a      	sub	sp, #104	; 0x68
 80018d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018d6:	2230      	movs	r2, #48	; 0x30
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f006 fd8e 	bl	80083fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
 8001900:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b31      	ldr	r3, [pc, #196]	; (80019cc <SystemClock_Config+0x100>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a30      	ldr	r2, [pc, #192]	; (80019cc <SystemClock_Config+0x100>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <SystemClock_Config+0x100>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <SystemClock_Config+0x104>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a2a      	ldr	r2, [pc, #168]	; (80019d0 <SystemClock_Config+0x104>)
 8001928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <SystemClock_Config+0x104>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800193a:	230a      	movs	r3, #10
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800193e:	2301      	movs	r3, #1
 8001940:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001942:	2310      	movs	r3, #16
 8001944:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001946:	2301      	movs	r3, #1
 8001948:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194a:	2302      	movs	r3, #2
 800194c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800194e:	2300      	movs	r3, #0
 8001950:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001952:	2308      	movs	r3, #8
 8001954:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001956:	2364      	movs	r3, #100	; 0x64
 8001958:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800195a:	2302      	movs	r3, #2
 800195c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800195e:	2308      	movs	r3, #8
 8001960:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001962:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fa58 	bl	8004e1c <HAL_RCC_OscConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001972:	f000 fb1f 	bl	8001fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001976:	230f      	movs	r3, #15
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197a:	2302      	movs	r3, #2
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800197e:	2300      	movs	r3, #0
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001982:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198c:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800198e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001992:	2103      	movs	r1, #3
 8001994:	4618      	mov	r0, r3
 8001996:	f003 fcaf 	bl	80052f8 <HAL_RCC_ClockConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80019a0:	f000 fb08 	bl	8001fb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019a4:	2302      	movs	r3, #2
 80019a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ac:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 fede 	bl	8005774 <HAL_RCCEx_PeriphCLKConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80019be:	f000 faf9 	bl	8001fb4 <Error_Handler>
  }
}
 80019c2:	bf00      	nop
 80019c4:	3768      	adds	r7, #104	; 0x68
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40007000 	.word	0x40007000

080019d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 80019da:	463b      	mov	r3, r7
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <MX_ADC1_Init+0x98>)
 80019e8:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <MX_ADC1_Init+0x9c>)
 80019ea:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <MX_ADC1_Init+0x98>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <MX_ADC1_Init+0x98>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 80019f8:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <MX_ADC1_Init+0x98>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a14:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <MX_ADC1_Init+0xa0>)
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a32:	480e      	ldr	r0, [pc, #56]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a34:	f001 fb1a 	bl	800306c <HAL_ADC_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_ADC1_Init+0x6e>
    {
        Error_Handler();
 8001a3e:	f000 fab9 	bl	8001fb4 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8001a46:	2301      	movs	r3, #1
 8001a48:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a4e:	463b      	mov	r3, r7
 8001a50:	4619      	mov	r1, r3
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <MX_ADC1_Init+0x98>)
 8001a54:	f001 fcb8 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_ADC1_Init+0x8e>
    {
        Error_Handler();
 8001a5e:	f000 faa9 	bl	8001fb4 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000100 	.word	0x20000100
 8001a70:	40012000 	.word	0x40012000
 8001a74:	0f000001 	.word	0x0f000001

08001a78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001a7e:	4a13      	ldr	r2, [pc, #76]	; (8001acc <MX_I2C1_Init+0x54>)
 8001a80:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001a84:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <MX_I2C1_Init+0x58>)
 8001a86:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001a96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a9a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001ab6:	f002 fc37 	bl	8004328 <HAL_I2C_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8001ac0:	f000 fa78 	bl	8001fb4 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200001a8 	.word	0x200001a8
 8001acc:	40005400 	.word	0x40005400
 8001ad0:	000186a0 	.word	0x000186a0

08001ad4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b090      	sub	sp, #64	; 0x40
 8001ad8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN RTC_Init 0 */

    /* USER CODE END RTC_Init 0 */

    RTC_TimeTypeDef sTime = {0};
 8001ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8001aea:	2300      	movs	r3, #0
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
    RTC_AlarmTypeDef sAlarm = {0};
 8001aee:	463b      	mov	r3, r7
 8001af0:	2228      	movs	r2, #40	; 0x28
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f006 fc81 	bl	80083fc <memset>
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
    */
    hrtc.Instance = RTC;
 8001afa:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <MX_RTC_Init+0x110>)
 8001afc:	4a3a      	ldr	r2, [pc, #232]	; (8001be8 <MX_RTC_Init+0x114>)
 8001afe:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b00:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <MX_RTC_Init+0x110>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8001b06:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <MX_RTC_Init+0x110>)
 8001b08:	227f      	movs	r2, #127	; 0x7f
 8001b0a:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8001b0c:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <MX_RTC_Init+0x110>)
 8001b0e:	22ff      	movs	r2, #255	; 0xff
 8001b10:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b12:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <MX_RTC_Init+0x110>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b18:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <MX_RTC_Init+0x110>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b1e:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <MX_RTC_Init+0x110>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b24:	482f      	ldr	r0, [pc, #188]	; (8001be4 <MX_RTC_Init+0x110>)
 8001b26:	f003 ff15 	bl	8005954 <HAL_RTC_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_RTC_Init+0x60>
    {
        Error_Handler();
 8001b30:	f000 fa40 	bl	8001fb4 <Error_Handler>

    /* USER CODE END Check_RTC_BKUP */

    /** Initialize RTC and set the Time and Date
    */
    sTime.Hours = 23;
 8001b34:	2317      	movs	r3, #23
 8001b36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    sTime.Minutes = 59;
 8001b3a:	233b      	movs	r3, #59	; 0x3b
 8001b3c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    sTime.Seconds = 45;
 8001b40:	232d      	movs	r3, #45	; 0x2d
 8001b42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	63bb      	str	r3, [r7, #56]	; 0x38
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	4823      	ldr	r0, [pc, #140]	; (8001be4 <MX_RTC_Init+0x110>)
 8001b58:	f003 ff8d 	bl	8005a76 <HAL_RTC_SetTime>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_RTC_Init+0x92>
    {
        Error_Handler();
 8001b62:	f000 fa27 	bl	8001fb4 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001b66:	2303      	movs	r3, #3
 8001b68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    sDate.Month = RTC_MONTH_OCTOBER;
 8001b6c:	2310      	movs	r3, #16
 8001b6e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    sDate.Date = 28;
 8001b72:	231c      	movs	r3, #28
 8001b74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    sDate.Year = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b82:	2200      	movs	r2, #0
 8001b84:	4619      	mov	r1, r3
 8001b86:	4817      	ldr	r0, [pc, #92]	; (8001be4 <MX_RTC_Init+0x110>)
 8001b88:	f004 f832 	bl	8005bf0 <HAL_RTC_SetDate>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_RTC_Init+0xc2>
    {
        Error_Handler();
 8001b92:	f000 fa0f 	bl	8001fb4 <Error_Handler>
    }
    /** Enable the Alarm A
    */
    sAlarm.AlarmTime.Hours = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	703b      	strb	r3, [r7, #0]
    sAlarm.AlarmTime.Minutes = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	707b      	strb	r3, [r7, #1]
    sAlarm.AlarmTime.Seconds = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	70bb      	strb	r3, [r7, #2]
    sAlarm.AlarmTime.SubSeconds = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
    sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
    sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
    sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmDateWeekDay = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 3020 	strb.w	r3, [r7, #32]
    sAlarm.Alarm = RTC_ALARM_A;
 8001bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_RTC_Init+0x110>)
 8001bce:	f004 f8b7 	bl	8005d40 <HAL_RTC_SetAlarm_IT>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_RTC_Init+0x108>
    {
        Error_Handler();
 8001bd8:	f000 f9ec 	bl	8001fb4 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	3740      	adds	r7, #64	; 0x40
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200001fc 	.word	0x200001fc
 8001be8:	40002800 	.word	0x40002800

08001bec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08e      	sub	sp, #56	; 0x38
 8001bf0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	f107 0320 	add.w	r3, r7, #32
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
 8001c18:	615a      	str	r2, [r3, #20]
 8001c1a:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <MX_TIM2_Init+0xe8>)
 8001c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c22:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 1000-1;
 8001c24:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <MX_TIM2_Init+0xe8>)
 8001c26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c2a:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <MX_TIM2_Init+0xe8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 1000-1;
 8001c32:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <MX_TIM2_Init+0xe8>)
 8001c34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c38:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <MX_TIM2_Init+0xe8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <MX_TIM2_Init+0xe8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c46:	4823      	ldr	r0, [pc, #140]	; (8001cd4 <MX_TIM2_Init+0xe8>)
 8001c48:	f004 fa7e 	bl	8006148 <HAL_TIM_Base_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM2_Init+0x6a>
    {
        Error_Handler();
 8001c52:	f000 f9af 	bl	8001fb4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c60:	4619      	mov	r1, r3
 8001c62:	481c      	ldr	r0, [pc, #112]	; (8001cd4 <MX_TIM2_Init+0xe8>)
 8001c64:	f004 fd18 	bl	8006698 <HAL_TIM_ConfigClockSource>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM2_Init+0x86>
    {
        Error_Handler();
 8001c6e:	f000 f9a1 	bl	8001fb4 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c72:	4818      	ldr	r0, [pc, #96]	; (8001cd4 <MX_TIM2_Init+0xe8>)
 8001c74:	f004 fadb 	bl	800622e <HAL_TIM_PWM_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM2_Init+0x96>
    {
        Error_Handler();
 8001c7e:	f000 f999 	bl	8001fb4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c8a:	f107 0320 	add.w	r3, r7, #32
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4810      	ldr	r0, [pc, #64]	; (8001cd4 <MX_TIM2_Init+0xe8>)
 8001c92:	f005 f8b9 	bl	8006e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM2_Init+0xb4>
    {
        Error_Handler();
 8001c9c:	f000 f98a 	bl	8001fb4 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca0:	2360      	movs	r3, #96	; 0x60
 8001ca2:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4807      	ldr	r0, [pc, #28]	; (8001cd4 <MX_TIM2_Init+0xe8>)
 8001cb8:	f004 fc28 	bl	800650c <HAL_TIM_PWM_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM2_Init+0xda>
    {
        Error_Handler();
 8001cc2:	f000 f977 	bl	8001fb4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 8001cc6:	4803      	ldr	r0, [pc, #12]	; (8001cd4 <MX_TIM2_Init+0xe8>)
 8001cc8:	f001 f82a 	bl	8002d20 <HAL_TIM_MspPostInit>

}
 8001ccc:	bf00      	nop
 8001cce:	3738      	adds	r7, #56	; 0x38
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	2000021c 	.word	0x2000021c

08001cd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cde:	f107 0308 	add.w	r3, r7, #8
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cec:	463b      	mov	r3, r7
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <MX_TIM3_Init+0x94>)
 8001cf6:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <MX_TIM3_Init+0x98>)
 8001cf8:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <MX_TIM3_Init+0x94>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <MX_TIM3_Init+0x94>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 8001d06:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <MX_TIM3_Init+0x94>)
 8001d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d0c:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <MX_TIM3_Init+0x94>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <MX_TIM3_Init+0x94>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d1a:	4814      	ldr	r0, [pc, #80]	; (8001d6c <MX_TIM3_Init+0x94>)
 8001d1c:	f004 fa14 	bl	8006148 <HAL_TIM_Base_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM3_Init+0x52>
    {
        Error_Handler();
 8001d26:	f000 f945 	bl	8001fb4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2e:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d30:	f107 0308 	add.w	r3, r7, #8
 8001d34:	4619      	mov	r1, r3
 8001d36:	480d      	ldr	r0, [pc, #52]	; (8001d6c <MX_TIM3_Init+0x94>)
 8001d38:	f004 fcae 	bl	8006698 <HAL_TIM_ConfigClockSource>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM3_Init+0x6e>
    {
        Error_Handler();
 8001d42:	f000 f937 	bl	8001fb4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d4e:	463b      	mov	r3, r7
 8001d50:	4619      	mov	r1, r3
 8001d52:	4806      	ldr	r0, [pc, #24]	; (8001d6c <MX_TIM3_Init+0x94>)
 8001d54:	f005 f858 	bl	8006e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM3_Init+0x8a>
    {
        Error_Handler();
 8001d5e:	f000 f929 	bl	8001fb4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000025c 	.word	0x2000025c
 8001d70:	40000400 	.word	0x40000400

08001d74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_DMA_Init+0x3c>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <MX_DMA_Init+0x3c>)
 8001d84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_DMA_Init+0x3c>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2038      	movs	r0, #56	; 0x38
 8001d9c:	f001 fdfa 	bl	8003994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001da0:	2038      	movs	r0, #56	; 0x38
 8001da2:	f001 fe13 	bl	80039cc <HAL_NVIC_EnableIRQ>

}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800

08001db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	4b73      	ldr	r3, [pc, #460]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a72      	ldr	r2, [pc, #456]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001dd4:	f043 0310 	orr.w	r3, r3, #16
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b70      	ldr	r3, [pc, #448]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	4b6c      	ldr	r3, [pc, #432]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a6b      	ldr	r2, [pc, #428]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b69      	ldr	r3, [pc, #420]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b65      	ldr	r3, [pc, #404]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a64      	ldr	r2, [pc, #400]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b62      	ldr	r3, [pc, #392]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a5d      	ldr	r2, [pc, #372]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b5b      	ldr	r3, [pc, #364]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b57      	ldr	r3, [pc, #348]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a56      	ldr	r2, [pc, #344]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b54      	ldr	r3, [pc, #336]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a4f      	ldr	r2, [pc, #316]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001e60:	f043 0308 	orr.w	r3, r3, #8
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b4d      	ldr	r3, [pc, #308]	; (8001f9c <MX_GPIO_Init+0x1e8>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f641 4108 	movw	r1, #7176	; 0x1c08
 8001e78:	4849      	ldr	r0, [pc, #292]	; (8001fa0 <MX_GPIO_Init+0x1ec>)
 8001e7a:	f002 fa3b 	bl	80042f4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8001e84:	4847      	ldr	r0, [pc, #284]	; (8001fa4 <MX_GPIO_Init+0x1f0>)
 8001e86:	f002 fa35 	bl	80042f4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e90:	4845      	ldr	r0, [pc, #276]	; (8001fa8 <MX_GPIO_Init+0x1f4>)
 8001e92:	f002 fa2f 	bl	80042f4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, LD4_Pin|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	f241 011c 	movw	r1, #4124	; 0x101c
 8001e9c:	4843      	ldr	r0, [pc, #268]	; (8001fac <MX_GPIO_Init+0x1f8>)
 8001e9e:	f002 fa29 	bl	80042f4 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PE3 PE5 */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001ea2:	2328      	movs	r3, #40	; 0x28
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	483b      	ldr	r0, [pc, #236]	; (8001fa4 <MX_GPIO_Init+0x1f0>)
 8001eb6:	f002 f881 	bl	8003fbc <HAL_GPIO_Init>

    /*Configure GPIO pins : PC3 PC10 PC11 PC12 */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001eba:	f641 4308 	movw	r3, #7176	; 0x1c08
 8001ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4833      	ldr	r0, [pc, #204]	; (8001fa0 <MX_GPIO_Init+0x1ec>)
 8001ed4:	f002 f872 	bl	8003fbc <HAL_GPIO_Init>

    /*Configure GPIO pins : PA0 PA2 */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001ed8:	2305      	movs	r3, #5
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4831      	ldr	r0, [pc, #196]	; (8001fb0 <MX_GPIO_Init+0x1fc>)
 8001eec:	f002 f866 	bl	8003fbc <HAL_GPIO_Init>

    /*Configure GPIO pin : PC4 */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	4619      	mov	r1, r3
 8001f02:	4827      	ldr	r0, [pc, #156]	; (8001fa0 <MX_GPIO_Init+0x1ec>)
 8001f04:	f002 f85a 	bl	8003fbc <HAL_GPIO_Init>

    /*Configure GPIO pins : PB0 PB2 */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001f08:	2305      	movs	r3, #5
 8001f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f10:	2301      	movs	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4823      	ldr	r0, [pc, #140]	; (8001fa8 <MX_GPIO_Init+0x1f4>)
 8001f1c:	f002 f84e 	bl	8003fbc <HAL_GPIO_Init>

    /*Configure GPIO pin : PE8 */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f2e:	f107 031c 	add.w	r3, r7, #28
 8001f32:	4619      	mov	r1, r3
 8001f34:	481b      	ldr	r0, [pc, #108]	; (8001fa4 <MX_GPIO_Init+0x1f0>)
 8001f36:	f002 f841 	bl	8003fbc <HAL_GPIO_Init>

    /*Configure GPIO pins : PE10 PE12 PE14 */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8001f3a:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	4619      	mov	r1, r3
 8001f52:	4814      	ldr	r0, [pc, #80]	; (8001fa4 <MX_GPIO_Init+0x1f0>)
 8001f54:	f002 f832 	bl	8003fbc <HAL_GPIO_Init>

    /*Configure GPIO pin : PB10 */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <MX_GPIO_Init+0x1f4>)
 8001f72:	f002 f823 	bl	8003fbc <HAL_GPIO_Init>

    /*Configure GPIO pins : LD4_Pin PD2 PD3 PD4 */
    GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001f76:	f241 031c 	movw	r3, #4124	; 0x101c
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4807      	ldr	r0, [pc, #28]	; (8001fac <MX_GPIO_Init+0x1f8>)
 8001f90:	f002 f814 	bl	8003fbc <HAL_GPIO_Init>

}
 8001f94:	bf00      	nop
 8001f96:	3730      	adds	r7, #48	; 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40020000 	.word	0x40020000

08001fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <vApplicationGetIdleTaskMemory+0x30>)
 8001fda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	200002a4 	.word	0x200002a4
 8001ff4:	200002f8 	.word	0x200002f8

08001ff8 <keypad_init>:
#include "stm32f4xx_hal.h"
#include "keypad.h"

void keypad_init(void){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	4b51      	ldr	r3, [pc, #324]	; (8002148 <keypad_init+0x150>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a50      	ldr	r2, [pc, #320]	; (8002148 <keypad_init+0x150>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b4e      	ldr	r3, [pc, #312]	; (8002148 <keypad_init+0x150>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	4b4a      	ldr	r3, [pc, #296]	; (8002148 <keypad_init+0x150>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a49      	ldr	r2, [pc, #292]	; (8002148 <keypad_init+0x150>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b47      	ldr	r3, [pc, #284]	; (8002148 <keypad_init+0x150>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
	
	
  GPIO_InitStruct.Pin 	= ROW1_PIN;
 8002036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 800203c:	2301      	movs	r3, #1
 800203e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW1_PORT, &GPIO_InitStruct);
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	4619      	mov	r1, r3
 800204e:	483f      	ldr	r0, [pc, #252]	; (800214c <keypad_init+0x154>)
 8002050:	f001 ffb4 	bl	8003fbc <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW2_PIN;
 8002054:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002058:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 800205a:	2301      	movs	r3, #1
 800205c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW2_PORT, &GPIO_InitStruct);
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	4619      	mov	r1, r3
 800206c:	4838      	ldr	r0, [pc, #224]	; (8002150 <keypad_init+0x158>)
 800206e:	f001 ffa5 	bl	8003fbc <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW3_PIN;
 8002072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8002078:	2301      	movs	r3, #1
 800207a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW3_PORT, &GPIO_InitStruct);
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	4619      	mov	r1, r3
 800208a:	4831      	ldr	r0, [pc, #196]	; (8002150 <keypad_init+0x158>)
 800208c:	f001 ff96 	bl	8003fbc <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW4_PIN;
 8002090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8002096:	2301      	movs	r3, #1
 8002098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW4_PORT, &GPIO_InitStruct);
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	4619      	mov	r1, r3
 80020a8:	4829      	ldr	r0, [pc, #164]	; (8002150 <keypad_init+0x158>)
 80020aa:	f001 ff87 	bl	8003fbc <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN, GPIO_PIN_RESET);
 80020ae:	2200      	movs	r2, #0
 80020b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b4:	4825      	ldr	r0, [pc, #148]	; (800214c <keypad_init+0x154>)
 80020b6:	f002 f91d 	bl	80042f4 <HAL_GPIO_WritePin>
	
  HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN, GPIO_PIN_RESET);
 80020ba:	2200      	movs	r2, #0
 80020bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c0:	4823      	ldr	r0, [pc, #140]	; (8002150 <keypad_init+0x158>)
 80020c2:	f002 f917 	bl	80042f4 <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN, GPIO_PIN_RESET);
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020cc:	4820      	ldr	r0, [pc, #128]	; (8002150 <keypad_init+0x158>)
 80020ce:	f002 f911 	bl	80042f4 <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN, GPIO_PIN_RESET);
 80020d2:	2200      	movs	r2, #0
 80020d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020d8:	481d      	ldr	r0, [pc, #116]	; (8002150 <keypad_init+0x158>)
 80020da:	f002 f90b 	bl	80042f4 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 	= COL1_PIN;
 80020de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL1_PORT, &GPIO_InitStruct);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	4619      	mov	r1, r3
 80020f2:	4817      	ldr	r0, [pc, #92]	; (8002150 <keypad_init+0x158>)
 80020f4:	f001 ff62 	bl	8003fbc <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL2_PIN;
 80020f8:	2304      	movs	r3, #4
 80020fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8002100:	2301      	movs	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL2_PORT, &GPIO_InitStruct);
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	4619      	mov	r1, r3
 800210a:	4810      	ldr	r0, [pc, #64]	; (800214c <keypad_init+0x154>)
 800210c:	f001 ff56 	bl	8003fbc <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL3_PIN;
 8002110:	2301      	movs	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8002118:	2301      	movs	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL3_PORT, &GPIO_InitStruct);
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	4619      	mov	r1, r3
 8002122:	480a      	ldr	r0, [pc, #40]	; (800214c <keypad_init+0x154>)
 8002124:	f001 ff4a 	bl	8003fbc <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL4_PIN;
 8002128:	2310      	movs	r3, #16
 800212a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8002130:	2301      	movs	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL4_PORT, &GPIO_InitStruct);
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	4619      	mov	r1, r3
 800213a:	4806      	ldr	r0, [pc, #24]	; (8002154 <keypad_init+0x15c>)
 800213c:	f001 ff3e 	bl	8003fbc <HAL_GPIO_Init>
		
}
 8002140:	bf00      	nop
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800
 800214c:	40020400 	.word	0x40020400
 8002150:	40021000 	.word	0x40021000
 8002154:	40020800 	.word	0x40020800

08002158 <keypad_read>:

char keypad_read(void){
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
	char letras[4][4]={	{'1','2','3','A'},
 800215e:	4b9a      	ldr	r3, [pc, #616]	; (80023c8 <keypad_read+0x270>)
 8002160:	463c      	mov	r4, r7
 8002162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002164:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                      {'4','5','6','B'},
                      {'7','8','9','C'},
                      {'*','0','#','D'}};
	int  i=0;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
	char valor=0;
 800216c:	2300      	movs	r3, #0
 800216e:	74fb      	strb	r3, [r7, #19]


	for(i=0;i<4;i++){
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e11e      	b.n	80023b4 <keypad_read+0x25c>
		if(i==0){
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d143      	bne.n	8002204 <keypad_read+0xac>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_SET);
 800217c:	2201      	movs	r2, #1
 800217e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002182:	4892      	ldr	r0, [pc, #584]	; (80023cc <keypad_read+0x274>)
 8002184:	f002 f8b6 	bl	80042f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 8002188:	2201      	movs	r2, #1
 800218a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800218e:	488f      	ldr	r0, [pc, #572]	; (80023cc <keypad_read+0x274>)
 8002190:	f002 f8b0 	bl	80042f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8002194:	2201      	movs	r2, #1
 8002196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219a:	488c      	ldr	r0, [pc, #560]	; (80023cc <keypad_read+0x274>)
 800219c:	f002 f8aa 	bl	80042f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_RESET);
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a6:	488a      	ldr	r0, [pc, #552]	; (80023d0 <keypad_read+0x278>)
 80021a8:	f002 f8a4 	bl	80042f4 <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 80021ac:	200a      	movs	r0, #10
 80021ae:	f000 ff39 	bl	8003024 <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[0][0];}	//1
 80021b2:	e001      	b.n	80021b8 <keypad_read+0x60>
 80021b4:	783b      	ldrb	r3, [r7, #0]
 80021b6:	74fb      	strb	r3, [r7, #19]
 80021b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021bc:	4883      	ldr	r0, [pc, #524]	; (80023cc <keypad_read+0x274>)
 80021be:	f002 f881 	bl	80042c4 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f5      	beq.n	80021b4 <keypad_read+0x5c>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[0][1];}	//2
 80021c8:	e001      	b.n	80021ce <keypad_read+0x76>
 80021ca:	787b      	ldrb	r3, [r7, #1]
 80021cc:	74fb      	strb	r3, [r7, #19]
 80021ce:	2104      	movs	r1, #4
 80021d0:	487f      	ldr	r0, [pc, #508]	; (80023d0 <keypad_read+0x278>)
 80021d2:	f002 f877 	bl	80042c4 <HAL_GPIO_ReadPin>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f6      	beq.n	80021ca <keypad_read+0x72>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[0][2];}	//3
 80021dc:	e001      	b.n	80021e2 <keypad_read+0x8a>
 80021de:	78bb      	ldrb	r3, [r7, #2]
 80021e0:	74fb      	strb	r3, [r7, #19]
 80021e2:	2101      	movs	r1, #1
 80021e4:	487a      	ldr	r0, [pc, #488]	; (80023d0 <keypad_read+0x278>)
 80021e6:	f002 f86d 	bl	80042c4 <HAL_GPIO_ReadPin>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f6      	beq.n	80021de <keypad_read+0x86>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[0][3];}	//A
 80021f0:	e001      	b.n	80021f6 <keypad_read+0x9e>
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	74fb      	strb	r3, [r7, #19]
 80021f6:	2110      	movs	r1, #16
 80021f8:	4876      	ldr	r0, [pc, #472]	; (80023d4 <keypad_read+0x27c>)
 80021fa:	f002 f863 	bl	80042c4 <HAL_GPIO_ReadPin>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f6      	beq.n	80021f2 <keypad_read+0x9a>
		}

		if(i==1){
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d143      	bne.n	8002292 <keypad_read+0x13a>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002210:	486f      	ldr	r0, [pc, #444]	; (80023d0 <keypad_read+0x278>)
 8002212:	f002 f86f 	bl	80042f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 8002216:	2201      	movs	r2, #1
 8002218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800221c:	486b      	ldr	r0, [pc, #428]	; (80023cc <keypad_read+0x274>)
 800221e:	f002 f869 	bl	80042f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8002222:	2201      	movs	r2, #1
 8002224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002228:	4868      	ldr	r0, [pc, #416]	; (80023cc <keypad_read+0x274>)
 800222a:	f002 f863 	bl	80042f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002234:	4865      	ldr	r0, [pc, #404]	; (80023cc <keypad_read+0x274>)
 8002236:	f002 f85d 	bl	80042f4 <HAL_GPIO_WritePin>

			HAL_Delay(10);
 800223a:	200a      	movs	r0, #10
 800223c:	f000 fef2 	bl	8003024 <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[1][0];}	//4
 8002240:	e001      	b.n	8002246 <keypad_read+0xee>
 8002242:	793b      	ldrb	r3, [r7, #4]
 8002244:	74fb      	strb	r3, [r7, #19]
 8002246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224a:	4860      	ldr	r0, [pc, #384]	; (80023cc <keypad_read+0x274>)
 800224c:	f002 f83a 	bl	80042c4 <HAL_GPIO_ReadPin>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f5      	beq.n	8002242 <keypad_read+0xea>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[1][1];}	//5
 8002256:	e001      	b.n	800225c <keypad_read+0x104>
 8002258:	797b      	ldrb	r3, [r7, #5]
 800225a:	74fb      	strb	r3, [r7, #19]
 800225c:	2104      	movs	r1, #4
 800225e:	485c      	ldr	r0, [pc, #368]	; (80023d0 <keypad_read+0x278>)
 8002260:	f002 f830 	bl	80042c4 <HAL_GPIO_ReadPin>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f6      	beq.n	8002258 <keypad_read+0x100>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[1][2];}	//6
 800226a:	e001      	b.n	8002270 <keypad_read+0x118>
 800226c:	79bb      	ldrb	r3, [r7, #6]
 800226e:	74fb      	strb	r3, [r7, #19]
 8002270:	2101      	movs	r1, #1
 8002272:	4857      	ldr	r0, [pc, #348]	; (80023d0 <keypad_read+0x278>)
 8002274:	f002 f826 	bl	80042c4 <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f6      	beq.n	800226c <keypad_read+0x114>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[1][3];}	//B
 800227e:	e001      	b.n	8002284 <keypad_read+0x12c>
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	74fb      	strb	r3, [r7, #19]
 8002284:	2110      	movs	r1, #16
 8002286:	4853      	ldr	r0, [pc, #332]	; (80023d4 <keypad_read+0x27c>)
 8002288:	f002 f81c 	bl	80042c4 <HAL_GPIO_ReadPin>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f6      	beq.n	8002280 <keypad_read+0x128>
		}

		if(i==2){
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d143      	bne.n	8002320 <keypad_read+0x1c8>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 8002298:	2201      	movs	r2, #1
 800229a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800229e:	484c      	ldr	r0, [pc, #304]	; (80023d0 <keypad_read+0x278>)
 80022a0:	f002 f828 	bl	80042f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 80022a4:	2201      	movs	r2, #1
 80022a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022aa:	4848      	ldr	r0, [pc, #288]	; (80023cc <keypad_read+0x274>)
 80022ac:	f002 f822 	bl	80042f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 80022b0:	2201      	movs	r2, #1
 80022b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b6:	4845      	ldr	r0, [pc, #276]	; (80023cc <keypad_read+0x274>)
 80022b8:	f002 f81c 	bl	80042f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_RESET);
 80022bc:	2200      	movs	r2, #0
 80022be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c2:	4842      	ldr	r0, [pc, #264]	; (80023cc <keypad_read+0x274>)
 80022c4:	f002 f816 	bl	80042f4 <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 80022c8:	200a      	movs	r0, #10
 80022ca:	f000 feab 	bl	8003024 <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[2][0];}	//7
 80022ce:	e001      	b.n	80022d4 <keypad_read+0x17c>
 80022d0:	7a3b      	ldrb	r3, [r7, #8]
 80022d2:	74fb      	strb	r3, [r7, #19]
 80022d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d8:	483c      	ldr	r0, [pc, #240]	; (80023cc <keypad_read+0x274>)
 80022da:	f001 fff3 	bl	80042c4 <HAL_GPIO_ReadPin>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f5      	beq.n	80022d0 <keypad_read+0x178>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[2][1];}	//8
 80022e4:	e001      	b.n	80022ea <keypad_read+0x192>
 80022e6:	7a7b      	ldrb	r3, [r7, #9]
 80022e8:	74fb      	strb	r3, [r7, #19]
 80022ea:	2104      	movs	r1, #4
 80022ec:	4838      	ldr	r0, [pc, #224]	; (80023d0 <keypad_read+0x278>)
 80022ee:	f001 ffe9 	bl	80042c4 <HAL_GPIO_ReadPin>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f6      	beq.n	80022e6 <keypad_read+0x18e>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[2][2];}	//9
 80022f8:	e001      	b.n	80022fe <keypad_read+0x1a6>
 80022fa:	7abb      	ldrb	r3, [r7, #10]
 80022fc:	74fb      	strb	r3, [r7, #19]
 80022fe:	2101      	movs	r1, #1
 8002300:	4833      	ldr	r0, [pc, #204]	; (80023d0 <keypad_read+0x278>)
 8002302:	f001 ffdf 	bl	80042c4 <HAL_GPIO_ReadPin>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f6      	beq.n	80022fa <keypad_read+0x1a2>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[2][3];}	//C
 800230c:	e001      	b.n	8002312 <keypad_read+0x1ba>
 800230e:	7afb      	ldrb	r3, [r7, #11]
 8002310:	74fb      	strb	r3, [r7, #19]
 8002312:	2110      	movs	r1, #16
 8002314:	482f      	ldr	r0, [pc, #188]	; (80023d4 <keypad_read+0x27c>)
 8002316:	f001 ffd5 	bl	80042c4 <HAL_GPIO_ReadPin>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f6      	beq.n	800230e <keypad_read+0x1b6>
		}

		if(i==3){
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d143      	bne.n	80023ae <keypad_read+0x256>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 8002326:	2201      	movs	r2, #1
 8002328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800232c:	4828      	ldr	r0, [pc, #160]	; (80023d0 <keypad_read+0x278>)
 800232e:	f001 ffe1 	bl	80042f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 8002332:	2201      	movs	r2, #1
 8002334:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002338:	4824      	ldr	r0, [pc, #144]	; (80023cc <keypad_read+0x274>)
 800233a:	f001 ffdb 	bl	80042f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_SET);
 800233e:	2201      	movs	r2, #1
 8002340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002344:	4821      	ldr	r0, [pc, #132]	; (80023cc <keypad_read+0x274>)
 8002346:	f001 ffd5 	bl	80042f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_RESET);
 800234a:	2200      	movs	r2, #0
 800234c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002350:	481e      	ldr	r0, [pc, #120]	; (80023cc <keypad_read+0x274>)
 8002352:	f001 ffcf 	bl	80042f4 <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 8002356:	200a      	movs	r0, #10
 8002358:	f000 fe64 	bl	8003024 <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[3][0];}	//*
 800235c:	e001      	b.n	8002362 <keypad_read+0x20a>
 800235e:	7b3b      	ldrb	r3, [r7, #12]
 8002360:	74fb      	strb	r3, [r7, #19]
 8002362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002366:	4819      	ldr	r0, [pc, #100]	; (80023cc <keypad_read+0x274>)
 8002368:	f001 ffac 	bl	80042c4 <HAL_GPIO_ReadPin>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f5      	beq.n	800235e <keypad_read+0x206>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[3][1];}	//0
 8002372:	e001      	b.n	8002378 <keypad_read+0x220>
 8002374:	7b7b      	ldrb	r3, [r7, #13]
 8002376:	74fb      	strb	r3, [r7, #19]
 8002378:	2104      	movs	r1, #4
 800237a:	4815      	ldr	r0, [pc, #84]	; (80023d0 <keypad_read+0x278>)
 800237c:	f001 ffa2 	bl	80042c4 <HAL_GPIO_ReadPin>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f6      	beq.n	8002374 <keypad_read+0x21c>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[3][2];}	//+
 8002386:	e001      	b.n	800238c <keypad_read+0x234>
 8002388:	7bbb      	ldrb	r3, [r7, #14]
 800238a:	74fb      	strb	r3, [r7, #19]
 800238c:	2101      	movs	r1, #1
 800238e:	4810      	ldr	r0, [pc, #64]	; (80023d0 <keypad_read+0x278>)
 8002390:	f001 ff98 	bl	80042c4 <HAL_GPIO_ReadPin>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f6      	beq.n	8002388 <keypad_read+0x230>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[3][3];}	//D
 800239a:	e001      	b.n	80023a0 <keypad_read+0x248>
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	74fb      	strb	r3, [r7, #19]
 80023a0:	2110      	movs	r1, #16
 80023a2:	480c      	ldr	r0, [pc, #48]	; (80023d4 <keypad_read+0x27c>)
 80023a4:	f001 ff8e 	bl	80042c4 <HAL_GPIO_ReadPin>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f6      	beq.n	800239c <keypad_read+0x244>
	for(i=0;i<4;i++){
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	3301      	adds	r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	f77f aedd 	ble.w	8002176 <keypad_read+0x1e>
		}
	}
	
	return valor;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd90      	pop	{r4, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	08008dfc 	.word	0x08008dfc
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40020400 	.word	0x40020400
 80023d4:	40020800 	.word	0x40020800

080023d8 <hi2cx_define>:
*/
I2C_HandleTypeDef hi2cx;
extern I2C_HandleTypeDef hi2c1; //* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type(i2c1,i2c2...) you use, default is hi2c1.
                                //That I2C_HandleTypeDef hi2c1 comes from main.c*.
static void hi2cx_define(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
	hi2cx = hi2c1;	//* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type you use, default is hi2c1.
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <hi2cx_define+0x18>)
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <hi2cx_define+0x1c>)
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	2354      	movs	r3, #84	; 0x54
 80023e6:	461a      	mov	r2, r3
 80023e8:	f005 fffa 	bl	80083e0 <memcpy>
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200004f8 	.word	0x200004f8
 80023f4:	200001a8 	.word	0x200001a8

080023f8 <LCD_i2cDeviceCheck>:
/**
*@brief: Lcd i2c device check.
*@retval: none
*/
void LCD_i2cDeviceCheck(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	/* Checks if target device is ready for communication. */
	/* 3 is number of trials, 1000ms is timeout */
	HAL_Delay(50);
 80023fc:	2032      	movs	r0, #50	; 0x32
 80023fe:	f000 fe11 	bl	8003024 <HAL_Delay>
	hi2cx_define();
 8002402:	f7ff ffe9 	bl	80023d8 <hi2cx_define>
	while (HAL_I2C_IsDeviceReady(&hi2cx, i2cDeviceAddr, 3, 1000) != HAL_OK) 
 8002406:	bf00      	nop
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <LCD_i2cDeviceCheck+0x30>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b299      	uxth	r1, r3
 800240e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002412:	2203      	movs	r2, #3
 8002414:	4805      	ldr	r0, [pc, #20]	; (800242c <LCD_i2cDeviceCheck+0x34>)
 8002416:	f002 f9c9 	bl	80047ac <HAL_I2C_IsDeviceReady>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f3      	bne.n	8002408 <LCD_i2cDeviceCheck+0x10>
	{	
		
	}
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000010 	.word	0x20000010
 800242c:	200004f8 	.word	0x200004f8

08002430 <LCD_Set_Command>:
/**
*@brief: Send commands to lcd.
*@retval: none
*/
void LCD_Set_Command(uint8_t cmd)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af02      	add	r7, sp, #8
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
	data_M = cmd & Mask_Data;        //Most significant bit
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <LCD_Set_Command+0x9c>)
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	4013      	ands	r3, r2
 8002442:	b2da      	uxtb	r2, r3
 8002444:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <LCD_Set_Command+0xa0>)
 8002446:	701a      	strb	r2, [r3, #0]
	data_L = (cmd << 4) & Mask_Data; //Least significant bit
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	b25a      	sxtb	r2, r3
 800244e:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <LCD_Set_Command+0x9c>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	b25b      	sxtb	r3, r3
 8002454:	4013      	ands	r3, r2
 8002456:	b25b      	sxtb	r3, r3
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <LCD_Set_Command+0xa4>)
 800245c:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <LCD_Set_Command+0xa0>)
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <LCD_Set_Command+0xa8>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <LCD_Set_Command+0xa0>)
 800246c:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 800246e:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <LCD_Set_Command+0xa4>)
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <LCD_Set_Command+0xa8>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <LCD_Set_Command+0xa4>)
 800247c:	701a      	strb	r2, [r3, #0]
	
	data[0] = data_M | LCD_E;  //Enable E pin, RS=0
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <LCD_Set_Command+0xa0>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	b2da      	uxtb	r2, r3
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <LCD_Set_Command+0xac>)
 800248a:	701a      	strb	r2, [r3, #0]
	data[1] = data_M;          //Disable E pin, RS=0
 800248c:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <LCD_Set_Command+0xa0>)
 800248e:	781a      	ldrb	r2, [r3, #0]
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <LCD_Set_Command+0xac>)
 8002492:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <LCD_Set_Command+0xa4>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <LCD_Set_Command+0xac>)
 80024a0:	709a      	strb	r2, [r3, #2]
  data[3] = data_L;
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <LCD_Set_Command+0xa4>)
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <LCD_Set_Command+0xac>)
 80024a8:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();	
 80024aa:	f7ff ff95 	bl	80023d8 <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <LCD_Set_Command+0xb0>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b299      	uxth	r1, r3
 80024b4:	23c8      	movs	r3, #200	; 0xc8
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2304      	movs	r3, #4
 80024ba:	4a08      	ldr	r2, [pc, #32]	; (80024dc <LCD_Set_Command+0xac>)
 80024bc:	4809      	ldr	r0, [pc, #36]	; (80024e4 <LCD_Set_Command+0xb4>)
 80024be:	f002 f877 	bl	80045b0 <HAL_I2C_Master_Transmit>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000011 	.word	0x20000011
 80024d0:	20000550 	.word	0x20000550
 80024d4:	20000551 	.word	0x20000551
 80024d8:	20000552 	.word	0x20000552
 80024dc:	2000054c 	.word	0x2000054c
 80024e0:	20000010 	.word	0x20000010
 80024e4:	200004f8 	.word	0x200004f8

080024e8 <LCD_Write_Data>:
/**
*@brief: Write data to lcd.
*@retval: none
*/
void LCD_Write_Data(uint8_t datax)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
	data_M = datax & Mask_Data;        //Most significant bit
 80024f2:	4b27      	ldr	r3, [pc, #156]	; (8002590 <LCD_Write_Data+0xa8>)
 80024f4:	781a      	ldrb	r2, [r3, #0]
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	4013      	ands	r3, r2
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <LCD_Write_Data+0xac>)
 80024fe:	701a      	strb	r2, [r3, #0]
	data_L = (datax << 4) & Mask_Data; //Least significant bit
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	b25a      	sxtb	r2, r3
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <LCD_Write_Data+0xa8>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	b25b      	sxtb	r3, r3
 800250c:	4013      	ands	r3, r2
 800250e:	b25b      	sxtb	r3, r3
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <LCD_Write_Data+0xb0>)
 8002514:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 8002516:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <LCD_Write_Data+0xac>)
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <LCD_Write_Data+0xb4>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <LCD_Write_Data+0xac>)
 8002524:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 8002526:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <LCD_Write_Data+0xb0>)
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	4b1c      	ldr	r3, [pc, #112]	; (800259c <LCD_Write_Data+0xb4>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <LCD_Write_Data+0xb0>)
 8002534:	701a      	strb	r2, [r3, #0]
	 	
	data[0] = data_M | LCD_E|LCD_RS;  //Enable E pin, RS=1
 8002536:	4b17      	ldr	r3, [pc, #92]	; (8002594 <LCD_Write_Data+0xac>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	f043 0305 	orr.w	r3, r3, #5
 800253e:	b2da      	uxtb	r2, r3
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <LCD_Write_Data+0xb8>)
 8002542:	701a      	strb	r2, [r3, #0]
	data[1] = data_M | LCD_RS;        //Disable E pin, RS=1
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <LCD_Write_Data+0xac>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <LCD_Write_Data+0xb8>)
 8002550:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E|LCD_RS;
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <LCD_Write_Data+0xb0>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	f043 0305 	orr.w	r3, r3, #5
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <LCD_Write_Data+0xb8>)
 800255e:	709a      	strb	r2, [r3, #2]
  data[3] = data_L | LCD_RS;  
 8002560:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <LCD_Write_Data+0xb0>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <LCD_Write_Data+0xb8>)
 800256c:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();
 800256e:	f7ff ff33 	bl	80023d8 <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <LCD_Write_Data+0xbc>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b299      	uxth	r1, r3
 8002578:	23c8      	movs	r3, #200	; 0xc8
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2304      	movs	r3, #4
 800257e:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <LCD_Write_Data+0xb8>)
 8002580:	4809      	ldr	r0, [pc, #36]	; (80025a8 <LCD_Write_Data+0xc0>)
 8002582:	f002 f815 	bl	80045b0 <HAL_I2C_Master_Transmit>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000011 	.word	0x20000011
 8002594:	20000550 	.word	0x20000550
 8002598:	20000551 	.word	0x20000551
 800259c:	20000552 	.word	0x20000552
 80025a0:	2000054c 	.word	0x2000054c
 80025a4:	20000010 	.word	0x20000010
 80025a8:	200004f8 	.word	0x200004f8

080025ac <LCD_Clear>:
/**
*@brief: Clear lcd display.
*@retval: none
*/
void LCD_Clear(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f7ff ff3d 	bl	8002430 <LCD_Set_Command>
	HAL_Delay(10);
 80025b6:	200a      	movs	r0, #10
 80025b8:	f000 fd34 	bl	8003024 <HAL_Delay>
	str_len = 0;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <LCD_Clear+0x20>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
	line_pos = 1;
 80025c2:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <LCD_Clear+0x24>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000553 	.word	0x20000553
 80025d0:	20000012 	.word	0x20000012

080025d4 <LCD_SetCursor>:
*@brief: Set lcd cursor position.
*@param: line_x: line no, chr_x: character no.
*@retval: none
*/
void LCD_SetCursor(int line_x, int chr_x)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  line_pos = line_x; //hold line position.	
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <LCD_SetCursor+0x58>)
 80025e4:	701a      	strb	r2, [r3, #0]
	
	if(((line_x >=1 && line_x <= line_MAX) && (chr_x >=1 && chr_x <= chr_MAX)))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	dd1b      	ble.n	8002624 <LCD_SetCursor+0x50>
 80025ec:	2302      	movs	r3, #2
 80025ee:	461a      	mov	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4293      	cmp	r3, r2
 80025f4:	dc16      	bgt.n	8002624 <LCD_SetCursor+0x50>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	dd13      	ble.n	8002624 <LCD_SetCursor+0x50>
 80025fc:	2310      	movs	r3, #16
 80025fe:	461a      	mov	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4293      	cmp	r3, r2
 8002604:	dc0e      	bgt.n	8002624 <LCD_SetCursor+0x50>
	{		
		LCD_Set_Command(LCD_SET_DDRAMADDR | Cursor_Data[line_x - 1][chr_x - 1]);		
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	1e5a      	subs	r2, r3, #1
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	3b01      	subs	r3, #1
 800260e:	4908      	ldr	r1, [pc, #32]	; (8002630 <LCD_SetCursor+0x5c>)
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	440a      	add	r2, r1
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800261c:	b2db      	uxtb	r3, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ff06 	bl	8002430 <LCD_Set_Command>
	}
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000012 	.word	0x20000012
 8002630:	08008edc 	.word	0x08008edc

08002634 <LCD_Send_String>:
*@brief: Send string data to lcd.
*@param: str[]: string array, mode: str slide/noslide.
*@retval: none
*/
void LCD_Send_String(char str[], uint8_t mode)
{	 
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
	static char *buffer[100];
	static uint8_t i[4] = {chr_MAX,chr_MAX,chr_MAX,chr_MAX}; //i follows the ch position while sliding.
  static uint8_t c[4] = {0, 0, 0, 0}; //c follows the each ch of the str buffer while sliding.
  static uint8_t ch_len = 0; //follow the string lenght.
  str_len = 0;
 8002640:	4b51      	ldr	r3, [pc, #324]	; (8002788 <LCD_Send_String+0x154>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
	

	switch(mode)
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01e      	beq.n	800268a <LCD_Send_String+0x56>
 800264c:	2b01      	cmp	r3, #1
 800264e:	d021      	beq.n	8002694 <LCD_Send_String+0x60>
					}												
			}
		 			
			break;	 
	}	
}
 8002650:	e096      	b.n	8002780 <LCD_Send_String+0x14c>
				LCD_Write_Data (*str++);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ff44 	bl	80024e8 <LCD_Write_Data>
				str_len++;
 8002660:	4b49      	ldr	r3, [pc, #292]	; (8002788 <LCD_Send_String+0x154>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	b2da      	uxtb	r2, r3
 8002668:	4b47      	ldr	r3, [pc, #284]	; (8002788 <LCD_Send_String+0x154>)
 800266a:	701a      	strb	r2, [r3, #0]
				if(str_len == chr_MAX)
 800266c:	4b46      	ldr	r3, [pc, #280]	; (8002788 <LCD_Send_String+0x154>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2210      	movs	r2, #16
 8002672:	4293      	cmp	r3, r2
 8002674:	d109      	bne.n	800268a <LCD_Send_String+0x56>
					LCD_SetCursor(line_pos + 1, 1);
 8002676:	4b45      	ldr	r3, [pc, #276]	; (800278c <LCD_Send_String+0x158>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	2101      	movs	r1, #1
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ffa8 	bl	80025d4 <LCD_SetCursor>
					str_len = 0;
 8002684:	4b40      	ldr	r3, [pc, #256]	; (8002788 <LCD_Send_String+0x154>)
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
			while (*str) 
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1df      	bne.n	8002652 <LCD_Send_String+0x1e>
			break;
 8002692:	e075      	b.n	8002780 <LCD_Send_String+0x14c>
		  for(int a = 0; a < BFR_MAX; a++)
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e009      	b.n	80026ae <LCD_Send_String+0x7a>
		  buffer[a]=str++;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	493b      	ldr	r1, [pc, #236]	; (8002790 <LCD_Send_String+0x15c>)
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		  for(int a = 0; a < BFR_MAX; a++)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3301      	adds	r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	2364      	movs	r3, #100	; 0x64
 80026b0:	461a      	mov	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4293      	cmp	r3, r2
 80026b6:	dbf0      	blt.n	800269a <LCD_Send_String+0x66>
			ch_len = strlen(*buffer);
 80026b8:	4b35      	ldr	r3, [pc, #212]	; (8002790 <LCD_Send_String+0x15c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd fd8f 	bl	80001e0 <strlen>
 80026c2:	4603      	mov	r3, r0
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4b33      	ldr	r3, [pc, #204]	; (8002794 <LCD_Send_String+0x160>)
 80026c8:	701a      	strb	r2, [r3, #0]
			LCD_SetCursor(line_pos, i[line_pos - 1]);	
 80026ca:	4b30      	ldr	r3, [pc, #192]	; (800278c <LCD_Send_String+0x158>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	4b2e      	ldr	r3, [pc, #184]	; (800278c <LCD_Send_String+0x158>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	4a30      	ldr	r2, [pc, #192]	; (8002798 <LCD_Send_String+0x164>)
 80026d8:	5cd3      	ldrb	r3, [r2, r3]
 80026da:	4619      	mov	r1, r3
 80026dc:	f7ff ff7a 	bl	80025d4 <LCD_SetCursor>
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 80026e0:	4b2a      	ldr	r3, [pc, #168]	; (800278c <LCD_Send_String+0x158>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	4a2d      	ldr	r2, [pc, #180]	; (800279c <LCD_Send_String+0x168>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	e00a      	b.n	8002704 <LCD_Send_String+0xd0>
			LCD_Write_Data (*buffer[k]);
 80026ee:	4a28      	ldr	r2, [pc, #160]	; (8002790 <LCD_Send_String+0x15c>)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fef5 	bl	80024e8 <LCD_Write_Data>
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3301      	adds	r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	4b23      	ldr	r3, [pc, #140]	; (8002794 <LCD_Send_String+0x160>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4293      	cmp	r3, r2
 800270e:	dbee      	blt.n	80026ee <LCD_Send_String+0xba>
			i[line_pos - 1]--;
 8002710:	4b1e      	ldr	r3, [pc, #120]	; (800278c <LCD_Send_String+0x158>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	3b01      	subs	r3, #1
 8002716:	4a20      	ldr	r2, [pc, #128]	; (8002798 <LCD_Send_String+0x164>)
 8002718:	5cd2      	ldrb	r2, [r2, r3]
 800271a:	3a01      	subs	r2, #1
 800271c:	b2d1      	uxtb	r1, r2
 800271e:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <LCD_Send_String+0x164>)
 8002720:	54d1      	strb	r1, [r2, r3]
			if(i[line_pos -1] == 0)
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <LCD_Send_String+0x158>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	3b01      	subs	r3, #1
 8002728:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <LCD_Send_String+0x164>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d126      	bne.n	800277e <LCD_Send_String+0x14a>
				i[line_pos - 1] = 1;
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <LCD_Send_String+0x158>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	3b01      	subs	r3, #1
 8002736:	4a18      	ldr	r2, [pc, #96]	; (8002798 <LCD_Send_String+0x164>)
 8002738:	2101      	movs	r1, #1
 800273a:	54d1      	strb	r1, [r2, r3]
				c[line_pos - 1]++;
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <LCD_Send_String+0x158>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	3b01      	subs	r3, #1
 8002742:	4a16      	ldr	r2, [pc, #88]	; (800279c <LCD_Send_String+0x168>)
 8002744:	5cd2      	ldrb	r2, [r2, r3]
 8002746:	3201      	adds	r2, #1
 8002748:	b2d1      	uxtb	r1, r2
 800274a:	4a14      	ldr	r2, [pc, #80]	; (800279c <LCD_Send_String+0x168>)
 800274c:	54d1      	strb	r1, [r2, r3]
        if(c[line_pos - 1] == ch_len)
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <LCD_Send_String+0x158>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	3b01      	subs	r3, #1
 8002754:	4a11      	ldr	r2, [pc, #68]	; (800279c <LCD_Send_String+0x168>)
 8002756:	5cd2      	ldrb	r2, [r2, r3]
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <LCD_Send_String+0x160>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d10e      	bne.n	800277e <LCD_Send_String+0x14a>
						i[line_pos - 1] = chr_MAX;
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <LCD_Send_String+0x158>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	3b01      	subs	r3, #1
 8002766:	2110      	movs	r1, #16
 8002768:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <LCD_Send_String+0x164>)
 800276a:	54d1      	strb	r1, [r2, r3]
						c[line_pos - 1] = 0;
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <LCD_Send_String+0x158>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	3b01      	subs	r3, #1
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <LCD_Send_String+0x168>)
 8002774:	2100      	movs	r1, #0
 8002776:	54d1      	strb	r1, [r2, r3]
						ch_len = 0;						
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <LCD_Send_String+0x160>)
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
			break;	 
 800277e:	bf00      	nop
}
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000553 	.word	0x20000553
 800278c:	20000012 	.word	0x20000012
 8002790:	20000554 	.word	0x20000554
 8002794:	200006e4 	.word	0x200006e4
 8002798:	20000014 	.word	0x20000014
 800279c:	200006e8 	.word	0x200006e8

080027a0 <LCD_Print>:
*@brief: Print value, ch to lcd.
*@param: *ch: "string + %f", value: float data variable
*@retval: none
*/
void LCD_Print(char const *ch, float value)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b09c      	sub	sp, #112	; 0x70
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	ed87 0a00 	vstr	s0, [r7]
	char data_ch[100]; //default data size:100.
	
	sprintf(data_ch, ch, value);
 80027ac:	6838      	ldr	r0, [r7, #0]
 80027ae:	f7fd fed3 	bl	8000558 <__aeabi_f2d>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	f107 000c 	add.w	r0, r7, #12
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	f005 fe26 	bl	800840c <siprintf>
	LCD_Send_String(data_ch, STR_NOSLIDE);	
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ff34 	bl	8002634 <LCD_Send_String>
}
 80027cc:	bf00      	nop
 80027ce:	3770      	adds	r7, #112	; 0x70
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <LCD_BackLight>:
*@brief: Backlight control
*@param: light_state: BL on/off
*@retval: none
*/
void LCD_BackLight(uint8_t light_state)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
	if(light_state == LCD_BL_ON)
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d106      	bne.n	80027f2 <LCD_BackLight+0x1e>
	{
    data_BL = LCD_BL_ON;		
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <LCD_BackLight+0x38>)
 80027e6:	2208      	movs	r2, #8
 80027e8:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20); //Empty character
 80027ea:	2020      	movs	r0, #32
 80027ec:	f7ff fe7c 	bl	80024e8 <LCD_Write_Data>
	else if (light_state == LCD_BL_OFF)
	{
		data_BL = LCD_BL_OFF;
		LCD_Write_Data(0x20);
	}
}
 80027f0:	e008      	b.n	8002804 <LCD_BackLight+0x30>
	else if (light_state == LCD_BL_OFF)
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <LCD_BackLight+0x30>
		data_BL = LCD_BL_OFF;
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <LCD_BackLight+0x38>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20);
 80027fe:	2020      	movs	r0, #32
 8002800:	f7ff fe72 	bl	80024e8 <LCD_Write_Data>
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000552 	.word	0x20000552

08002810 <LCD_Init>:
/**
*@brief: Lcd initiliazing settings.
*@retval: none
*/
void LCD_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 8002814:	2001      	movs	r0, #1
 8002816:	f7ff fe0b 	bl	8002430 <LCD_Set_Command>
	HAL_Delay(1000);
 800281a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800281e:	f000 fc01 	bl	8003024 <HAL_Delay>
	LCD_Set_Command(LCD_RETURN_HOME);
 8002822:	2002      	movs	r0, #2
 8002824:	f7ff fe04 	bl	8002430 <LCD_Set_Command>
	HAL_Delay(5);
 8002828:	2005      	movs	r0, #5
 800282a:	f000 fbfb 	bl	8003024 <HAL_Delay>
	LCD_Set_Command(LCD_FUNCTION_SET|MODE_4B|MODE_2L|MODE_5X8_DOTS);
 800282e:	2028      	movs	r0, #40	; 0x28
 8002830:	f7ff fdfe 	bl	8002430 <LCD_Set_Command>
	HAL_Delay(5);
 8002834:	2005      	movs	r0, #5
 8002836:	f000 fbf5 	bl	8003024 <HAL_Delay>
	LCD_Set_Command(LCD_DISPLAY_CONTROL|DISPLAY_ON|CURSOR_OFF|BLINK_OFF);
 800283a:	200c      	movs	r0, #12
 800283c:	f7ff fdf8 	bl	8002430 <LCD_Set_Command>
	HAL_Delay(5);
 8002840:	2005      	movs	r0, #5
 8002842:	f000 fbef 	bl	8003024 <HAL_Delay>
	LCD_Set_Command(LCD_SET_DDRAMADDR);
 8002846:	2080      	movs	r0, #128	; 0x80
 8002848:	f7ff fdf2 	bl	8002430 <LCD_Set_Command>
	HAL_Delay(500);
 800284c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002850:	f000 fbe8 	bl	8003024 <HAL_Delay>
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}

08002858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002858:	b5b0      	push	{r4, r5, r7, lr}
 800285a:	b0a8      	sub	sp, #160	; 0xa0
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    BSP_Init();
 800285e:	f7fe fca9 	bl	80011b4 <BSP_Init>
    APP_Show_SystemIntro();
 8002862:	f000 f8f1 	bl	8002a48 <APP_Show_SystemIntro>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  int estado_cortina = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  int cortina_manual = 0;        //bandera si se presiona de manera manual la cortina
 800286c:	2300      	movs	r3, #0
 800286e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int rangohmin = 50;
 8002872:	2332      	movs	r3, #50	; 0x32
 8002874:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  int rangohmax = 60;            //REVISAR RANGO INICIAL DE HUMEDAD
 8002878:	233c      	movs	r3, #60	; 0x3c
 800287a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800287e:	4b30      	ldr	r3, [pc, #192]	; (8002940 <main+0xe8>)
 8002880:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002884:	461d      	mov	r5, r3
 8002886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800288a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800288e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002892:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f004 fb56 	bl	8006f4a <osThreadCreate>
 800289e:	4603      	mov	r3, r0
 80028a0:	4a28      	ldr	r2, [pc, #160]	; (8002944 <main+0xec>)
 80028a2:	6013      	str	r3, [r2, #0]


  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(Task1, StartTask1, osPriorityBelowNormal, 0, 128);
 80028a4:	4b28      	ldr	r3, [pc, #160]	; (8002948 <main+0xf0>)
 80028a6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80028aa:	461d      	mov	r5, r3
 80028ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80028b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f004 fb43 	bl	8006f4a <osThreadCreate>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4a21      	ldr	r2, [pc, #132]	; (800294c <main+0xf4>)
 80028c8:	6013      	str	r3, [r2, #0]

  osThreadDef(Task2, StartTask2, osPriorityAboveNormal, 0, 128);
 80028ca:	4b21      	ldr	r3, [pc, #132]	; (8002950 <main+0xf8>)
 80028cc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80028d0:	461d      	mov	r5, r3
 80028d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80028de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f004 fb30 	bl	8006f4a <osThreadCreate>
 80028ea:	4603      	mov	r3, r0
 80028ec:	4a19      	ldr	r2, [pc, #100]	; (8002954 <main+0xfc>)
 80028ee:	6013      	str	r3, [r2, #0]

  osThreadDef(Task3, StartTask3, osPriorityNormal, 0, 128);
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <main+0x100>)
 80028f2:	f107 0420 	add.w	r4, r7, #32
 80028f6:	461d      	mov	r5, r3
 80028f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002900:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8002904:	f107 0320 	add.w	r3, r7, #32
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f004 fb1d 	bl	8006f4a <osThreadCreate>
 8002910:	4603      	mov	r3, r0
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <main+0x104>)
 8002914:	6013      	str	r3, [r2, #0]

  osThreadDef(Task4, StartTask4, osPriorityHigh, 0, 128);
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <main+0x108>)
 8002918:	1d3c      	adds	r4, r7, #4
 800291a:	461d      	mov	r5, r3
 800291c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800291e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002920:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002924:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   Task4Handle = osThreadCreate(osThread(Task4), NULL);
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f004 fb0c 	bl	8006f4a <osThreadCreate>
 8002932:	4603      	mov	r3, r0
 8002934:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <main+0x10c>)
 8002936:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002938:	f004 fb00 	bl	8006f3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800293c:	e7fe      	b.n	800293c <main+0xe4>
 800293e:	bf00      	nop
 8002940:	08008e38 	.word	0x08008e38
 8002944:	200006ec 	.word	0x200006ec
 8002948:	08008e54 	.word	0x08008e54
 800294c:	200006f0 	.word	0x200006f0
 8002950:	08008e70 	.word	0x08008e70
 8002954:	200006f4 	.word	0x200006f4
 8002958:	08008e8c 	.word	0x08008e8c
 800295c:	200006f8 	.word	0x200006f8
 8002960:	08008ea8 	.word	0x08008ea8
 8002964:	200006fc 	.word	0x200006fc

08002968 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	DHT_GetData(&DHT22);
 8002970:	4803      	ldr	r0, [pc, #12]	; (8002980 <StartDefaultTask+0x18>)
 8002972:	f7fe fb03 	bl	8000f7c <DHT_GetData>
  /* Infinite loop */
  for(;;)
  {

    osDelay(2000);
 8002976:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800297a:	f004 fb32 	bl	8006fe2 <osDelay>
 800297e:	e7fa      	b.n	8002976 <StartDefaultTask+0xe>
 8002980:	2000029c 	.word	0x2000029c

08002984 <StartTask1>:
  }
  /* USER CODE END 5 */
}

void StartTask1(void const * argument){
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

	while(1){
		LCD_Clear();
 800298c:	f7ff fe0e 	bl	80025ac <LCD_Clear>
	    BSP_LCD_Temperature(DHT22.Temperature);
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <StartTask1+0x38>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	eeb0 0a67 	vmov.f32	s0, s15
 800299a:	f7fe fca7 	bl	80012ec <BSP_LCD_Temperature>
	    BSP_LCD_Humidity(DHT22.Humidity);
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <StartTask1+0x38>)
 80029a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80029a4:	eeb0 0a67 	vmov.f32	s0, s15
 80029a8:	f7fe fcb4 	bl	8001314 <BSP_LCD_Humidity>
	    BSP_Show_SoilHumidity();
 80029ac:	f7fe fd1c 	bl	80013e8 <BSP_Show_SoilHumidity>
		osDelay(2000);
 80029b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029b4:	f004 fb15 	bl	8006fe2 <osDelay>
		LCD_Clear();
 80029b8:	e7e8      	b.n	800298c <StartTask1+0x8>
 80029ba:	bf00      	nop
 80029bc:	2000029c 	.word	0x2000029c

080029c0 <StartTask2>:
	}
}

void StartTask2(void const * argument){
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

	while(1){
		APP_Show_Movement();
 80029c8:	f000 f86b 	bl	8002aa2 <APP_Show_Movement>
		osDelay(1000);
 80029cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029d0:	f004 fb07 	bl	8006fe2 <osDelay>
		APP_Show_Movement();
 80029d4:	e7f8      	b.n	80029c8 <StartTask2+0x8>

080029d6 <StartTask3>:
	}
}

void StartTask3(void const * argument, int rangohmin, int rangohmax){
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]

	while(1){
		//APP_Irrigation(rangohmin, rangohmax);
		osDelay(2000);
 80029e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029e6:	f004 fafc 	bl	8006fe2 <osDelay>
 80029ea:	e7fa      	b.n	80029e2 <StartTask3+0xc>

080029ec <StartTask4>:
	}
}

void StartTask4(void const * argument, int rangohmin, int rangohmax, int estado_cortina, int cortina_manual){
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]

	while(1){

		APP_Keypad(rangohmin, rangohmax, estado_cortina, cortina_manual);
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	68b8      	ldr	r0, [r7, #8]
 8002a02:	f000 f83d 	bl	8002a80 <APP_Keypad>
		osDelay(2000);
 8002a06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a0a:	f004 faea 	bl	8006fe2 <osDelay>
		APP_Keypad(rangohmin, rangohmax, estado_cortina, cortina_manual);
 8002a0e:	e7f4      	b.n	80029fa <StartTask4+0xe>

08002a10 <APP_Timer10ms>:
	}
}


void APP_Timer10ms(){ //Borrar
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0

}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <APP_Timer100ms>:
void APP_Timer100ms(){
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0

}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <APP_Timer1000ms>:
void APP_Timer1000ms(){
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0

}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <APP_Timer10s>:
void APP_Timer10s(){
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0

}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <APP_Show_SystemIntro>:
void APP_Show_SystemIntro(){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
    LCD_i2cDeviceCheck();
 8002a4c:	f7ff fcd4 	bl	80023f8 <LCD_i2cDeviceCheck>
    LCD_BackLight(LCD_BL_ON);
 8002a50:	2008      	movs	r0, #8
 8002a52:	f7ff febf 	bl	80027d4 <LCD_BackLight>
    LCD_SetCursor(1,1);
 8002a56:	2101      	movs	r1, #1
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f7ff fdbb 	bl	80025d4 <LCD_SetCursor>
    LCD_Clear();
 8002a5e:	f7ff fda5 	bl	80025ac <LCD_Clear>
    LCD_Print("Cargando Datos",1);
 8002a62:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002a66:	4805      	ldr	r0, [pc, #20]	; (8002a7c <APP_Show_SystemIntro+0x34>)
 8002a68:	f7ff fe9a 	bl	80027a0 <LCD_Print>
    BSP_Delay(4000);
 8002a6c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002a70:	f7fe fc2e 	bl	80012d0 <BSP_Delay>
    LCD_Clear();
 8002a74:	f7ff fd9a 	bl	80025ac <LCD_Clear>
}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	08008ec4 	.word	0x08008ec4

08002a80 <APP_Keypad>:

void APP_Keypad(int rangohmin, int rangohmax, int estado_cortina, int cortina_manual){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
    BSP_Keypad(rangohmin, rangohmax, estado_cortina, cortina_manual);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7fe fcdb 	bl	8001450 <BSP_Keypad>
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <APP_Show_Movement>:
    DHT_GetData(&DHT22);
    BSP_LCD_Temperature(DHT22.Temperature);
    BSP_LCD_Humidity(DHT22.Humidity);
}

void APP_Show_Movement(){
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	af00      	add	r7, sp, #0
    BSP_Detect_Movement();
 8002aa6:	f7fe fc77 	bl	8001398 <BSP_Detect_Movement>
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_MspInit+0x4c>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	4a0f      	ldr	r2, [pc, #60]	; (8002afc <HAL_MspInit+0x4c>)
 8002ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_MspInit+0x4c>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_MspInit+0x4c>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a08      	ldr	r2, [pc, #32]	; (8002afc <HAL_MspInit+0x4c>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_MspInit+0x4c>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800

08002b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a2e      	ldr	r2, [pc, #184]	; (8002bd8 <HAL_ADC_MspInit+0xd8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d156      	bne.n	8002bd0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_ADC_MspInit+0xdc>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4a2c      	ldr	r2, [pc, #176]	; (8002bdc <HAL_ADC_MspInit+0xdc>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b30:	6453      	str	r3, [r2, #68]	; 0x44
 8002b32:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <HAL_ADC_MspInit+0xdc>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <HAL_ADC_MspInit+0xdc>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a25      	ldr	r2, [pc, #148]	; (8002bdc <HAL_ADC_MspInit+0xdc>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <HAL_ADC_MspInit+0xdc>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8002b5a:	231a      	movs	r3, #26
 8002b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b66:	f107 0314 	add.w	r3, r7, #20
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	481c      	ldr	r0, [pc, #112]	; (8002be0 <HAL_ADC_MspInit+0xe0>)
 8002b6e:	f001 fa25 	bl	8003fbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002b72:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <HAL_ADC_MspInit+0xe4>)
 8002b74:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <HAL_ADC_MspInit+0xe8>)
 8002b76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b78:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_ADC_MspInit+0xe4>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b7e:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_ADC_MspInit+0xe4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b84:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <HAL_ADC_MspInit+0xe4>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b8a:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <HAL_ADC_MspInit+0xe4>)
 8002b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b92:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <HAL_ADC_MspInit+0xe4>)
 8002b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_ADC_MspInit+0xe4>)
 8002b9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ba0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_ADC_MspInit+0xe4>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_ADC_MspInit+0xe4>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_ADC_MspInit+0xe4>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002bb4:	480b      	ldr	r0, [pc, #44]	; (8002be4 <HAL_ADC_MspInit+0xe4>)
 8002bb6:	f000 ff17 	bl	80039e8 <HAL_DMA_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002bc0:	f7ff f9f8 	bl	8001fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <HAL_ADC_MspInit+0xe4>)
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
 8002bca:	4a06      	ldr	r2, [pc, #24]	; (8002be4 <HAL_ADC_MspInit+0xe4>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bd0:	bf00      	nop
 8002bd2:	3728      	adds	r7, #40	; 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40012000 	.word	0x40012000
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40020000 	.word	0x40020000
 8002be4:	20000148 	.word	0x20000148
 8002be8:	40026410 	.word	0x40026410

08002bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <HAL_I2C_MspInit+0x84>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d12c      	bne.n	8002c68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <HAL_I2C_MspInit+0x88>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <HAL_I2C_MspInit+0x88>)
 8002c18:	f043 0302 	orr.w	r3, r3, #2
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <HAL_I2C_MspInit+0x88>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002c2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c30:	2312      	movs	r3, #18
 8002c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c34:	2301      	movs	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4619      	mov	r1, r3
 8002c46:	480c      	ldr	r0, [pc, #48]	; (8002c78 <HAL_I2C_MspInit+0x8c>)
 8002c48:	f001 f9b8 	bl	8003fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_I2C_MspInit+0x88>)
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <HAL_I2C_MspInit+0x88>)
 8002c56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_I2C_MspInit+0x88>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c68:	bf00      	nop
 8002c6a:	3728      	adds	r7, #40	; 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40005400 	.word	0x40005400
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40020400 	.word	0x40020400

08002c7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a08      	ldr	r2, [pc, #32]	; (8002cac <HAL_RTC_MspInit+0x30>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <HAL_RTC_MspInit+0x34>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2100      	movs	r1, #0
 8002c98:	2029      	movs	r0, #41	; 0x29
 8002c9a:	f000 fe7b 	bl	8003994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002c9e:	2029      	movs	r0, #41	; 0x29
 8002ca0:	f000 fe94 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40002800 	.word	0x40002800
 8002cb0:	42470e3c 	.word	0x42470e3c

08002cb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <HAL_TIM_Base_MspInit+0x64>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <HAL_TIM_Base_MspInit+0x64>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_TIM_Base_MspInit+0x64>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ce2:	e012      	b.n	8002d0a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <HAL_TIM_Base_MspInit+0x68>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d10d      	bne.n	8002d0a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_TIM_Base_MspInit+0x64>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <HAL_TIM_Base_MspInit+0x64>)
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_TIM_Base_MspInit+0x64>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
}
 8002d0a:	bf00      	nop
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40000400 	.word	0x40000400

08002d20 <HAL_TIM_MspPostInit>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 030c 	add.w	r3, r7, #12
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d40:	d11d      	bne.n	8002d7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_TIM_MspPostInit+0x68>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <HAL_TIM_MspPostInit+0x68>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_TIM_MspPostInit+0x68>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d72:	f107 030c 	add.w	r3, r7, #12
 8002d76:	4619      	mov	r1, r3
 8002d78:	4804      	ldr	r0, [pc, #16]	; (8002d8c <HAL_TIM_MspPostInit+0x6c>)
 8002d7a:	f001 f91f 	bl	8003fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002d7e:	bf00      	nop
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020000 	.word	0x40020000

08002d90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08c      	sub	sp, #48	; 0x30
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002da0:	2200      	movs	r2, #0
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	2032      	movs	r0, #50	; 0x32
 8002da6:	f000 fdf5 	bl	8003994 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002daa:	2032      	movs	r0, #50	; 0x32
 8002dac:	f000 fe0e 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <HAL_InitTick+0xa4>)
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <HAL_InitTick+0xa4>)
 8002dba:	f043 0308 	orr.w	r3, r3, #8
 8002dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <HAL_InitTick+0xa4>)
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dcc:	f107 0210 	add.w	r2, r7, #16
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f002 fc9a 	bl	8005710 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ddc:	f002 fc84 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8002de0:	4603      	mov	r3, r0
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	4a13      	ldr	r2, [pc, #76]	; (8002e38 <HAL_InitTick+0xa8>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	0c9b      	lsrs	r3, r3, #18
 8002df0:	3b01      	subs	r3, #1
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_InitTick+0xac>)
 8002df6:	4a12      	ldr	r2, [pc, #72]	; (8002e40 <HAL_InitTick+0xb0>)
 8002df8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <HAL_InitTick+0xac>)
 8002dfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e00:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002e02:	4a0e      	ldr	r2, [pc, #56]	; (8002e3c <HAL_InitTick+0xac>)
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <HAL_InitTick+0xac>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_InitTick+0xac>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002e14:	4809      	ldr	r0, [pc, #36]	; (8002e3c <HAL_InitTick+0xac>)
 8002e16:	f003 f997 	bl	8006148 <HAL_TIM_Base_Init>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d104      	bne.n	8002e2a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8002e20:	4806      	ldr	r0, [pc, #24]	; (8002e3c <HAL_InitTick+0xac>)
 8002e22:	f003 f9e0 	bl	80061e6 <HAL_TIM_Base_Start_IT>
 8002e26:	4603      	mov	r3, r0
 8002e28:	e000      	b.n	8002e2c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3730      	adds	r7, #48	; 0x30
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40023800 	.word	0x40023800
 8002e38:	431bde83 	.word	0x431bde83
 8002e3c:	20000700 	.word	0x20000700
 8002e40:	40000c00 	.word	0x40000c00

08002e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e56:	e7fe      	b.n	8002e56 <HardFault_Handler+0x4>

08002e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <MemManage_Handler+0x4>

08002e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e62:	e7fe      	b.n	8002e62 <BusFault_Handler+0x4>

08002e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <UsageFault_Handler+0x4>

08002e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002e7c:	4802      	ldr	r0, [pc, #8]	; (8002e88 <RTC_Alarm_IRQHandler+0x10>)
 8002e7e:	f003 f897 	bl	8005fb0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200001fc 	.word	0x200001fc

08002e8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <TIM5_IRQHandler+0x10>)
 8002e92:	f003 fa33 	bl	80062fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000700 	.word	0x20000700

08002ea0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <DMA2_Stream0_IRQHandler+0x10>)
 8002ea6:	f000 fe4d 	bl	8003b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000148 	.word	0x20000148

08002eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <_sbrk+0x5c>)
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <_sbrk+0x60>)
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <_sbrk+0x64>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <_sbrk+0x64>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <_sbrk+0x68>)
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d207      	bcs.n	8002ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ee4:	f005 fa52 	bl	800838c <__errno>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	220c      	movs	r2, #12
 8002eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	e009      	b.n	8002f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ef4:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <_sbrk+0x64>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <_sbrk+0x64>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	4a05      	ldr	r2, [pc, #20]	; (8002f18 <_sbrk+0x64>)
 8002f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20020000 	.word	0x20020000
 8002f14:	00000400 	.word	0x00000400
 8002f18:	20000740 	.word	0x20000740
 8002f1c:	200044a8 	.word	0x200044a8

08002f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f24:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <SystemInit+0x28>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <SystemInit+0x28>)
 8002f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <SystemInit+0x28>)
 8002f36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f3a:	609a      	str	r2, [r3, #8]
#endif
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f52:	e003      	b.n	8002f5c <LoopCopyDataInit>

08002f54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f5a:	3104      	adds	r1, #4

08002f5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f5c:	480b      	ldr	r0, [pc, #44]	; (8002f8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f64:	d3f6      	bcc.n	8002f54 <CopyDataInit>
  ldr  r2, =_sbss
 8002f66:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f68:	e002      	b.n	8002f70 <LoopFillZerobss>

08002f6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f6c:	f842 3b04 	str.w	r3, [r2], #4

08002f70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f74:	d3f9      	bcc.n	8002f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f76:	f7ff ffd3 	bl	8002f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f7a:	f005 fa0d 	bl	8008398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f7e:	f7ff fc6b 	bl	8002858 <main>
  bx  lr    
 8002f82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f88:	08008f60 	.word	0x08008f60
  ldr  r0, =_sdata
 8002f8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f90:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8002f94:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8002f98:	200044a4 	.word	0x200044a4

08002f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f9c:	e7fe      	b.n	8002f9c <ADC_IRQHandler>
	...

08002fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <HAL_Init+0x40>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	; (8002fe0 <HAL_Init+0x40>)
 8002faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_Init+0x40>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <HAL_Init+0x40>)
 8002fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HAL_Init+0x40>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a07      	ldr	r2, [pc, #28]	; (8002fe0 <HAL_Init+0x40>)
 8002fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc8:	2003      	movs	r0, #3
 8002fca:	f000 fcd8 	bl	800397e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7ff fede 	bl	8002d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fd4:	f7ff fd6c 	bl	8002ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023c00 	.word	0x40023c00

08002fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_IncTick+0x20>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_IncTick+0x24>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	4a04      	ldr	r2, [pc, #16]	; (8003008 <HAL_IncTick+0x24>)
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000020 	.word	0x20000020
 8003008:	20000744 	.word	0x20000744

0800300c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return uwTick;
 8003010:	4b03      	ldr	r3, [pc, #12]	; (8003020 <HAL_GetTick+0x14>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20000744 	.word	0x20000744

08003024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800302c:	f7ff ffee 	bl	800300c <HAL_GetTick>
 8003030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d005      	beq.n	800304a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_Delay+0x44>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800304a:	bf00      	nop
 800304c:	f7ff ffde 	bl	800300c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	429a      	cmp	r2, r3
 800305a:	d8f7      	bhi.n	800304c <HAL_Delay+0x28>
  {
  }
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000020 	.word	0x20000020

0800306c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e033      	b.n	80030ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff fd38 	bl	8002b00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d118      	bne.n	80030dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030b2:	f023 0302 	bic.w	r3, r3, #2
 80030b6:	f043 0202 	orr.w	r2, r3, #2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fab4 	bl	800362c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
 80030da:	e001      	b.n	80030e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_ADC_Start+0x1a>
 800310a:	2302      	movs	r3, #2
 800310c:	e08a      	b.n	8003224 <HAL_ADC_Start+0x130>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d018      	beq.n	8003156 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003134:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <HAL_ADC_Start+0x13c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a3e      	ldr	r2, [pc, #248]	; (8003234 <HAL_ADC_Start+0x140>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	0c9a      	lsrs	r2, r3, #18
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003148:	e002      	b.n	8003150 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3b01      	subs	r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f9      	bne.n	800314a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b01      	cmp	r3, #1
 8003162:	d15e      	bne.n	8003222 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800318e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a2:	d106      	bne.n	80031b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	f023 0206 	bic.w	r2, r3, #6
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	645a      	str	r2, [r3, #68]	; 0x44
 80031b0:	e002      	b.n	80031b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_ADC_Start+0x144>)
 80031c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80031cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10f      	bne.n	80031fa <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d11c      	bne.n	8003222 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	e013      	b.n	8003222 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a0f      	ldr	r2, [pc, #60]	; (800323c <HAL_ADC_Start+0x148>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d10e      	bne.n	8003222 <HAL_ADC_Start+0x12e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003220:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	20000018 	.word	0x20000018
 8003234:	431bde83 	.word	0x431bde83
 8003238:	40012300 	.word	0x40012300
 800323c:	40012000 	.word	0x40012000

08003240 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_ADC_Stop+0x16>
 8003252:	2302      	movs	r3, #2
 8003254:	e021      	b.n	800329a <HAL_ADC_Stop+0x5a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c2:	d113      	bne.n	80032ec <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d2:	d10b      	bne.n	80032ec <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e05c      	b.n	80033a6 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80032ec:	f7ff fe8e 	bl	800300c <HAL_GetTick>
 80032f0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032f2:	e01a      	b.n	800332a <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fa:	d016      	beq.n	800332a <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <HAL_ADC_PollForConversion+0x6c>
 8003302:	f7ff fe83 	bl	800300c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d20b      	bcs.n	800332a <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f043 0204 	orr.w	r2, r3, #4
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e03d      	b.n	80033a6 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b02      	cmp	r3, #2
 8003336:	d1dd      	bne.n	80032f4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0212 	mvn.w	r2, #18
 8003340:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d123      	bne.n	80033a4 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11f      	bne.n	80033a4 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800337c:	2b00      	cmp	r3, #0
 800337e:	d111      	bne.n	80033a4 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f043 0201 	orr.w	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x1c>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e113      	b.n	800360c <HAL_ADC_ConfigChannel+0x244>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	d925      	bls.n	8003440 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68d9      	ldr	r1, [r3, #12]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	3b1e      	subs	r3, #30
 800340a:	2207      	movs	r2, #7
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43da      	mvns	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	400a      	ands	r2, r1
 8003418:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68d9      	ldr	r1, [r3, #12]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	4618      	mov	r0, r3
 800342c:	4603      	mov	r3, r0
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4403      	add	r3, r0
 8003432:	3b1e      	subs	r3, #30
 8003434:	409a      	lsls	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	e022      	b.n	8003486 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6919      	ldr	r1, [r3, #16]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	2207      	movs	r2, #7
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43da      	mvns	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	400a      	ands	r2, r1
 8003462:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6919      	ldr	r1, [r3, #16]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	4618      	mov	r0, r3
 8003476:	4603      	mov	r3, r0
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4403      	add	r3, r0
 800347c:	409a      	lsls	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d824      	bhi.n	80034d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	3b05      	subs	r3, #5
 80034a0:	221f      	movs	r2, #31
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	400a      	ands	r2, r1
 80034ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4618      	mov	r0, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	3b05      	subs	r3, #5
 80034ca:	fa00 f203 	lsl.w	r2, r0, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	635a      	str	r2, [r3, #52]	; 0x34
 80034d6:	e04c      	b.n	8003572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	d824      	bhi.n	800352a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	3b23      	subs	r3, #35	; 0x23
 80034f2:	221f      	movs	r2, #31
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43da      	mvns	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	400a      	ands	r2, r1
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	4618      	mov	r0, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	3b23      	subs	r3, #35	; 0x23
 800351c:	fa00 f203 	lsl.w	r2, r0, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
 8003528:	e023      	b.n	8003572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	3b41      	subs	r3, #65	; 0x41
 800353c:	221f      	movs	r2, #31
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	400a      	ands	r2, r1
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	4618      	mov	r0, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	3b41      	subs	r3, #65	; 0x41
 8003566:	fa00 f203 	lsl.w	r2, r0, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003572:	4b29      	ldr	r3, [pc, #164]	; (8003618 <HAL_ADC_ConfigChannel+0x250>)
 8003574:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a28      	ldr	r2, [pc, #160]	; (800361c <HAL_ADC_ConfigChannel+0x254>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10f      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x1d8>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b12      	cmp	r3, #18
 8003586:	d10b      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_ADC_ConfigChannel+0x254>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d12b      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x23a>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1c      	ldr	r2, [pc, #112]	; (8003620 <HAL_ADC_ConfigChannel+0x258>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <HAL_ADC_ConfigChannel+0x1f4>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b11      	cmp	r3, #17
 80035ba:	d122      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a11      	ldr	r2, [pc, #68]	; (8003620 <HAL_ADC_ConfigChannel+0x258>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d111      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_ADC_ConfigChannel+0x25c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a11      	ldr	r2, [pc, #68]	; (8003628 <HAL_ADC_ConfigChannel+0x260>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	0c9a      	lsrs	r2, r3, #18
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035f4:	e002      	b.n	80035fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f9      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	40012300 	.word	0x40012300
 800361c:	40012000 	.word	0x40012000
 8003620:	10000012 	.word	0x10000012
 8003624:	20000018 	.word	0x20000018
 8003628:	431bde83 	.word	0x431bde83

0800362c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003634:	4b79      	ldr	r3, [pc, #484]	; (800381c <ADC_Init+0x1f0>)
 8003636:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	431a      	orrs	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	021a      	lsls	r2, r3, #8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6899      	ldr	r1, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	4a58      	ldr	r2, [pc, #352]	; (8003820 <ADC_Init+0x1f4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d022      	beq.n	800370a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6899      	ldr	r1, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6899      	ldr	r1, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	e00f      	b.n	800372a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003728:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0202 	bic.w	r2, r2, #2
 8003738:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6899      	ldr	r1, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7e1b      	ldrb	r3, [r3, #24]
 8003744:	005a      	lsls	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01b      	beq.n	8003790 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003766:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003776:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6859      	ldr	r1, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	3b01      	subs	r3, #1
 8003784:	035a      	lsls	r2, r3, #13
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e007      	b.n	80037a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800379e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	051a      	lsls	r2, r3, #20
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037e2:	025a      	lsls	r2, r3, #9
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6899      	ldr	r1, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	029a      	lsls	r2, r3, #10
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40012300 	.word	0x40012300
 8003820:	0f000001 	.word	0x0f000001

08003824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <__NVIC_SetPriorityGrouping+0x44>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003840:	4013      	ands	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800384c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003856:	4a04      	ldr	r2, [pc, #16]	; (8003868 <__NVIC_SetPriorityGrouping+0x44>)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	60d3      	str	r3, [r2, #12]
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <__NVIC_GetPriorityGrouping+0x18>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	0a1b      	lsrs	r3, r3, #8
 8003876:	f003 0307 	and.w	r3, r3, #7
}
 800387a:	4618      	mov	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	2b00      	cmp	r3, #0
 8003898:	db0b      	blt.n	80038b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	f003 021f 	and.w	r2, r3, #31
 80038a0:	4907      	ldr	r1, [pc, #28]	; (80038c0 <__NVIC_EnableIRQ+0x38>)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	2001      	movs	r0, #1
 80038aa:	fa00 f202 	lsl.w	r2, r0, r2
 80038ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	e000e100 	.word	0xe000e100

080038c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db0a      	blt.n	80038ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	490c      	ldr	r1, [pc, #48]	; (8003910 <__NVIC_SetPriority+0x4c>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ec:	e00a      	b.n	8003904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4908      	ldr	r1, [pc, #32]	; (8003914 <__NVIC_SetPriority+0x50>)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3b04      	subs	r3, #4
 80038fc:	0112      	lsls	r2, r2, #4
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	440b      	add	r3, r1
 8003902:	761a      	strb	r2, [r3, #24]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000e100 	.word	0xe000e100
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	; 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f1c3 0307 	rsb	r3, r3, #7
 8003932:	2b04      	cmp	r3, #4
 8003934:	bf28      	it	cs
 8003936:	2304      	movcs	r3, #4
 8003938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3304      	adds	r3, #4
 800393e:	2b06      	cmp	r3, #6
 8003940:	d902      	bls.n	8003948 <NVIC_EncodePriority+0x30>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3b03      	subs	r3, #3
 8003946:	e000      	b.n	800394a <NVIC_EncodePriority+0x32>
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	f04f 32ff 	mov.w	r2, #4294967295
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43da      	mvns	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	401a      	ands	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003960:	f04f 31ff 	mov.w	r1, #4294967295
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	43d9      	mvns	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	4313      	orrs	r3, r2
         );
}
 8003972:	4618      	mov	r0, r3
 8003974:	3724      	adds	r7, #36	; 0x24
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff ff4c 	bl	8003824 <__NVIC_SetPriorityGrouping>
}
 800398c:	bf00      	nop
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039a6:	f7ff ff61 	bl	800386c <__NVIC_GetPriorityGrouping>
 80039aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	6978      	ldr	r0, [r7, #20]
 80039b2:	f7ff ffb1 	bl	8003918 <NVIC_EncodePriority>
 80039b6:	4602      	mov	r2, r0
 80039b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff ff80 	bl	80038c4 <__NVIC_SetPriority>
}
 80039c4:	bf00      	nop
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ff54 	bl	8003888 <__NVIC_EnableIRQ>
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039f4:	f7ff fb0a 	bl	800300c <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e099      	b.n	8003b38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a24:	e00f      	b.n	8003a46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a26:	f7ff faf1 	bl	800300c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b05      	cmp	r3, #5
 8003a32:	d908      	bls.n	8003a46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e078      	b.n	8003b38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e8      	bne.n	8003a26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4b38      	ldr	r3, [pc, #224]	; (8003b40 <HAL_DMA_Init+0x158>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d107      	bne.n	8003ab0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0307 	bic.w	r3, r3, #7
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d117      	bne.n	8003b0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f9e9 	bl	8003ec4 <DMA_CheckFifoParam>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2240      	movs	r2, #64	; 0x40
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b06:	2301      	movs	r3, #1
 8003b08:	e016      	b.n	8003b38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f9a0 	bl	8003e58 <DMA_CalcBaseAndBitshift>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	223f      	movs	r2, #63	; 0x3f
 8003b22:	409a      	lsls	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	f010803f 	.word	0xf010803f

08003b44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b50:	4b8e      	ldr	r3, [pc, #568]	; (8003d8c <HAL_DMA_IRQHandler+0x248>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a8e      	ldr	r2, [pc, #568]	; (8003d90 <HAL_DMA_IRQHandler+0x24c>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	0a9b      	lsrs	r3, r3, #10
 8003b5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	2208      	movs	r2, #8
 8003b70:	409a      	lsls	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01a      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d013      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0204 	bic.w	r2, r2, #4
 8003b96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba8:	f043 0201 	orr.w	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d012      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00b      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bde:	f043 0202 	orr.w	r2, r3, #2
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bea:	2204      	movs	r2, #4
 8003bec:	409a      	lsls	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d012      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00b      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	2204      	movs	r2, #4
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	f043 0204 	orr.w	r2, r3, #4
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	2210      	movs	r2, #16
 8003c22:	409a      	lsls	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d043      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d03c      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3e:	2210      	movs	r2, #16
 8003c40:	409a      	lsls	r2, r3
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d018      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d108      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d024      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
 8003c72:	e01f      	b.n	8003cb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01b      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	4798      	blx	r3
 8003c84:	e016      	b.n	8003cb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d107      	bne.n	8003ca4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0208 	bic.w	r2, r2, #8
 8003ca2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	2220      	movs	r2, #32
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 808f 	beq.w	8003de4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8087 	beq.w	8003de4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	2220      	movs	r2, #32
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d136      	bne.n	8003d5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0216 	bic.w	r2, r2, #22
 8003cfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <HAL_DMA_IRQHandler+0x1da>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0208 	bic.w	r2, r2, #8
 8003d2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d32:	223f      	movs	r2, #63	; 0x3f
 8003d34:	409a      	lsls	r2, r3
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d07e      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
        }
        return;
 8003d5a:	e079      	b.n	8003e50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d01d      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10d      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d031      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
 8003d88:	e02c      	b.n	8003de4 <HAL_DMA_IRQHandler+0x2a0>
 8003d8a:	bf00      	nop
 8003d8c:	20000018 	.word	0x20000018
 8003d90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d023      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	4798      	blx	r3
 8003da4:	e01e      	b.n	8003de4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10f      	bne.n	8003dd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0210 	bic.w	r2, r2, #16
 8003dc2:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d032      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d022      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2205      	movs	r2, #5
 8003dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d307      	bcc.n	8003e2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f2      	bne.n	8003e10 <HAL_DMA_IRQHandler+0x2cc>
 8003e2a:	e000      	b.n	8003e2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e2c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
 8003e4e:	e000      	b.n	8003e52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e50:	bf00      	nop
    }
  }
}
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	3b10      	subs	r3, #16
 8003e68:	4a14      	ldr	r2, [pc, #80]	; (8003ebc <DMA_CalcBaseAndBitshift+0x64>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e72:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <DMA_CalcBaseAndBitshift+0x68>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d909      	bls.n	8003e9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e8e:	f023 0303 	bic.w	r3, r3, #3
 8003e92:	1d1a      	adds	r2, r3, #4
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	659a      	str	r2, [r3, #88]	; 0x58
 8003e98:	e007      	b.n	8003eaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	aaaaaaab 	.word	0xaaaaaaab
 8003ec0:	08008f14 	.word	0x08008f14

08003ec4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d11f      	bne.n	8003f1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d856      	bhi.n	8003f92 <DMA_CheckFifoParam+0xce>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <DMA_CheckFifoParam+0x28>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003efd 	.word	0x08003efd
 8003ef0:	08003f0f 	.word	0x08003f0f
 8003ef4:	08003efd 	.word	0x08003efd
 8003ef8:	08003f93 	.word	0x08003f93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d046      	beq.n	8003f96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f0c:	e043      	b.n	8003f96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f16:	d140      	bne.n	8003f9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f1c:	e03d      	b.n	8003f9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f26:	d121      	bne.n	8003f6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d837      	bhi.n	8003f9e <DMA_CheckFifoParam+0xda>
 8003f2e:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <DMA_CheckFifoParam+0x70>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f4b 	.word	0x08003f4b
 8003f3c:	08003f45 	.word	0x08003f45
 8003f40:	08003f5d 	.word	0x08003f5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      break;
 8003f48:	e030      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d025      	beq.n	8003fa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f5a:	e022      	b.n	8003fa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f64:	d11f      	bne.n	8003fa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f6a:	e01c      	b.n	8003fa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d903      	bls.n	8003f7a <DMA_CheckFifoParam+0xb6>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d003      	beq.n	8003f80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f78:	e018      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7e:	e015      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f90:	e00b      	b.n	8003faa <DMA_CheckFifoParam+0xe6>
      break;
 8003f92:	bf00      	nop
 8003f94:	e00a      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003f96:	bf00      	nop
 8003f98:	e008      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e006      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e004      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003fa2:	bf00      	nop
 8003fa4:	e002      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;   
 8003fa6:	bf00      	nop
 8003fa8:	e000      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003faa:	bf00      	nop
    }
  } 
  
  return status; 
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop

08003fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b089      	sub	sp, #36	; 0x24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	e159      	b.n	800428c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fd8:	2201      	movs	r2, #1
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	f040 8148 	bne.w	8004286 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d00b      	beq.n	8004016 <HAL_GPIO_Init+0x5a>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d007      	beq.n	8004016 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800400a:	2b11      	cmp	r3, #17
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b12      	cmp	r3, #18
 8004014:	d130      	bne.n	8004078 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800404c:	2201      	movs	r2, #1
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 0201 	and.w	r2, r3, #1
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	2203      	movs	r2, #3
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d003      	beq.n	80040b8 <HAL_GPIO_Init+0xfc>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b12      	cmp	r3, #18
 80040b6:	d123      	bne.n	8004100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	08da      	lsrs	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3208      	adds	r2, #8
 80040c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	220f      	movs	r2, #15
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	08da      	lsrs	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3208      	adds	r2, #8
 80040fa:	69b9      	ldr	r1, [r7, #24]
 80040fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 0203 	and.w	r2, r3, #3
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80a2 	beq.w	8004286 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	4b57      	ldr	r3, [pc, #348]	; (80042a4 <HAL_GPIO_Init+0x2e8>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	4a56      	ldr	r2, [pc, #344]	; (80042a4 <HAL_GPIO_Init+0x2e8>)
 800414c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004150:	6453      	str	r3, [r2, #68]	; 0x44
 8004152:	4b54      	ldr	r3, [pc, #336]	; (80042a4 <HAL_GPIO_Init+0x2e8>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800415e:	4a52      	ldr	r2, [pc, #328]	; (80042a8 <HAL_GPIO_Init+0x2ec>)
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	089b      	lsrs	r3, r3, #2
 8004164:	3302      	adds	r3, #2
 8004166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	220f      	movs	r2, #15
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a49      	ldr	r2, [pc, #292]	; (80042ac <HAL_GPIO_Init+0x2f0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d019      	beq.n	80041be <HAL_GPIO_Init+0x202>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a48      	ldr	r2, [pc, #288]	; (80042b0 <HAL_GPIO_Init+0x2f4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <HAL_GPIO_Init+0x1fe>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a47      	ldr	r2, [pc, #284]	; (80042b4 <HAL_GPIO_Init+0x2f8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00d      	beq.n	80041b6 <HAL_GPIO_Init+0x1fa>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a46      	ldr	r2, [pc, #280]	; (80042b8 <HAL_GPIO_Init+0x2fc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <HAL_GPIO_Init+0x1f6>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a45      	ldr	r2, [pc, #276]	; (80042bc <HAL_GPIO_Init+0x300>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d101      	bne.n	80041ae <HAL_GPIO_Init+0x1f2>
 80041aa:	2304      	movs	r3, #4
 80041ac:	e008      	b.n	80041c0 <HAL_GPIO_Init+0x204>
 80041ae:	2307      	movs	r3, #7
 80041b0:	e006      	b.n	80041c0 <HAL_GPIO_Init+0x204>
 80041b2:	2303      	movs	r3, #3
 80041b4:	e004      	b.n	80041c0 <HAL_GPIO_Init+0x204>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e002      	b.n	80041c0 <HAL_GPIO_Init+0x204>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <HAL_GPIO_Init+0x204>
 80041be:	2300      	movs	r3, #0
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	f002 0203 	and.w	r2, r2, #3
 80041c6:	0092      	lsls	r2, r2, #2
 80041c8:	4093      	lsls	r3, r2
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041d0:	4935      	ldr	r1, [pc, #212]	; (80042a8 <HAL_GPIO_Init+0x2ec>)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	089b      	lsrs	r3, r3, #2
 80041d6:	3302      	adds	r3, #2
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041de:	4b38      	ldr	r3, [pc, #224]	; (80042c0 <HAL_GPIO_Init+0x304>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4013      	ands	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004202:	4a2f      	ldr	r2, [pc, #188]	; (80042c0 <HAL_GPIO_Init+0x304>)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004208:	4b2d      	ldr	r3, [pc, #180]	; (80042c0 <HAL_GPIO_Init+0x304>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800422c:	4a24      	ldr	r2, [pc, #144]	; (80042c0 <HAL_GPIO_Init+0x304>)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004232:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <HAL_GPIO_Init+0x304>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004256:	4a1a      	ldr	r2, [pc, #104]	; (80042c0 <HAL_GPIO_Init+0x304>)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800425c:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <HAL_GPIO_Init+0x304>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004280:	4a0f      	ldr	r2, [pc, #60]	; (80042c0 <HAL_GPIO_Init+0x304>)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	3301      	adds	r3, #1
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2b0f      	cmp	r3, #15
 8004290:	f67f aea2 	bls.w	8003fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	3724      	adds	r7, #36	; 0x24
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800
 80042a8:	40013800 	.word	0x40013800
 80042ac:	40020000 	.word	0x40020000
 80042b0:	40020400 	.word	0x40020400
 80042b4:	40020800 	.word	0x40020800
 80042b8:	40020c00 	.word	0x40020c00
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40013c00 	.word	0x40013c00

080042c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	887b      	ldrh	r3, [r7, #2]
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
 80042e0:	e001      	b.n	80042e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	807b      	strh	r3, [r7, #2]
 8004300:	4613      	mov	r3, r2
 8004302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004304:	787b      	ldrb	r3, [r7, #1]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800430a:	887a      	ldrh	r2, [r7, #2]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004310:	e003      	b.n	800431a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004312:	887b      	ldrh	r3, [r7, #2]
 8004314:	041a      	lsls	r2, r3, #16
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	619a      	str	r2, [r3, #24]
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e12b      	b.n	8004592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fe fc4c 	bl	8002bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2224      	movs	r2, #36	; 0x24
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0201 	bic.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800437a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800438a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800438c:	f001 f9ac 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8004390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4a81      	ldr	r2, [pc, #516]	; (800459c <HAL_I2C_Init+0x274>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d807      	bhi.n	80043ac <HAL_I2C_Init+0x84>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a80      	ldr	r2, [pc, #512]	; (80045a0 <HAL_I2C_Init+0x278>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	bf94      	ite	ls
 80043a4:	2301      	movls	r3, #1
 80043a6:	2300      	movhi	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e006      	b.n	80043ba <HAL_I2C_Init+0x92>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a7d      	ldr	r2, [pc, #500]	; (80045a4 <HAL_I2C_Init+0x27c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bf94      	ite	ls
 80043b4:	2301      	movls	r3, #1
 80043b6:	2300      	movhi	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e0e7      	b.n	8004592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a78      	ldr	r2, [pc, #480]	; (80045a8 <HAL_I2C_Init+0x280>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	0c9b      	lsrs	r3, r3, #18
 80043cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4a6a      	ldr	r2, [pc, #424]	; (800459c <HAL_I2C_Init+0x274>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d802      	bhi.n	80043fc <HAL_I2C_Init+0xd4>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	3301      	adds	r3, #1
 80043fa:	e009      	b.n	8004410 <HAL_I2C_Init+0xe8>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	4a69      	ldr	r2, [pc, #420]	; (80045ac <HAL_I2C_Init+0x284>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	099b      	lsrs	r3, r3, #6
 800440e:	3301      	adds	r3, #1
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	430b      	orrs	r3, r1
 8004416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004422:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	495c      	ldr	r1, [pc, #368]	; (800459c <HAL_I2C_Init+0x274>)
 800442c:	428b      	cmp	r3, r1
 800442e:	d819      	bhi.n	8004464 <HAL_I2C_Init+0x13c>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1e59      	subs	r1, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	fbb1 f3f3 	udiv	r3, r1, r3
 800443e:	1c59      	adds	r1, r3, #1
 8004440:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004444:	400b      	ands	r3, r1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_I2C_Init+0x138>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1e59      	subs	r1, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	fbb1 f3f3 	udiv	r3, r1, r3
 8004458:	3301      	adds	r3, #1
 800445a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445e:	e051      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 8004460:	2304      	movs	r3, #4
 8004462:	e04f      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d111      	bne.n	8004490 <HAL_I2C_Init+0x168>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1e58      	subs	r0, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	440b      	add	r3, r1
 800447a:	fbb0 f3f3 	udiv	r3, r0, r3
 800447e:	3301      	adds	r3, #1
 8004480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e012      	b.n	80044b6 <HAL_I2C_Init+0x18e>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1e58      	subs	r0, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	0099      	lsls	r1, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a6:	3301      	adds	r3, #1
 80044a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_Init+0x196>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e022      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10e      	bne.n	80044e4 <HAL_I2C_Init+0x1bc>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1e58      	subs	r0, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6859      	ldr	r1, [r3, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	440b      	add	r3, r1
 80044d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e2:	e00f      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	1e58      	subs	r0, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	0099      	lsls	r1, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fa:	3301      	adds	r3, #1
 80044fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	6809      	ldr	r1, [r1, #0]
 8004508:	4313      	orrs	r3, r2
 800450a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004532:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6911      	ldr	r1, [r2, #16]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68d2      	ldr	r2, [r2, #12]
 800453e:	4311      	orrs	r1, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	430b      	orrs	r3, r1
 8004546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	000186a0 	.word	0x000186a0
 80045a0:	001e847f 	.word	0x001e847f
 80045a4:	003d08ff 	.word	0x003d08ff
 80045a8:	431bde83 	.word	0x431bde83
 80045ac:	10624dd3 	.word	0x10624dd3

080045b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	461a      	mov	r2, r3
 80045bc:	460b      	mov	r3, r1
 80045be:	817b      	strh	r3, [r7, #10]
 80045c0:	4613      	mov	r3, r2
 80045c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045c4:	f7fe fd22 	bl	800300c <HAL_GetTick>
 80045c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	f040 80e0 	bne.w	8004798 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2319      	movs	r3, #25
 80045de:	2201      	movs	r2, #1
 80045e0:	4970      	ldr	r1, [pc, #448]	; (80047a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fa92 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
 80045f0:	e0d3      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_I2C_Master_Transmit+0x50>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e0cc      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b01      	cmp	r3, #1
 8004614:	d007      	beq.n	8004626 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0201 	orr.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004634:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2221      	movs	r2, #33	; 0x21
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2210      	movs	r2, #16
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	893a      	ldrh	r2, [r7, #8]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a50      	ldr	r2, [pc, #320]	; (80047a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004666:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004668:	8979      	ldrh	r1, [r7, #10]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f9ca 	bl	8004a08 <I2C_MasterRequestWrite>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e08d      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004694:	e066      	b.n	8004764 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	6a39      	ldr	r1, [r7, #32]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fb0c 	bl	8004cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d107      	bne.n	80046be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e06b      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	781a      	ldrb	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d11b      	bne.n	8004738 <HAL_I2C_Master_Transmit+0x188>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d017      	beq.n	8004738 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	6a39      	ldr	r1, [r7, #32]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fafc 	bl	8004d3a <I2C_WaitOnBTFFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	2b04      	cmp	r3, #4
 800474e:	d107      	bne.n	8004760 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e01a      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004768:	2b00      	cmp	r3, #0
 800476a:	d194      	bne.n	8004696 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	00100002 	.word	0x00100002
 80047a8:	ffff0000 	.word	0xffff0000

080047ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	; 0x28
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	460b      	mov	r3, r1
 80047ba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80047bc:	f7fe fc26 	bl	800300c <HAL_GetTick>
 80047c0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80047c2:	2301      	movs	r3, #1
 80047c4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	f040 8111 	bne.w	80049f6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2319      	movs	r3, #25
 80047da:	2201      	movs	r2, #1
 80047dc:	4988      	ldr	r1, [pc, #544]	; (8004a00 <HAL_I2C_IsDeviceReady+0x254>)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f994 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
 80047ec:	e104      	b.n	80049f8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_I2C_IsDeviceReady+0x50>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e0fd      	b.n	80049f8 <HAL_I2C_IsDeviceReady+0x24c>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b01      	cmp	r3, #1
 8004810:	d007      	beq.n	8004822 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004830:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2224      	movs	r2, #36	; 0x24
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a70      	ldr	r2, [pc, #448]	; (8004a04 <HAL_I2C_IsDeviceReady+0x258>)
 8004844:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004854:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2200      	movs	r2, #0
 800485e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f952 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00d      	beq.n	800488a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800487c:	d103      	bne.n	8004886 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004884:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e0b6      	b.n	80049f8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800488a:	897b      	ldrh	r3, [r7, #10]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004898:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800489a:	f7fe fbb7 	bl	800300c <HAL_GetTick>
 800489e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	bf0c      	ite	eq
 80048ae:	2301      	moveq	r3, #1
 80048b0:	2300      	movne	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c4:	bf0c      	ite	eq
 80048c6:	2301      	moveq	r3, #1
 80048c8:	2300      	movne	r3, #0
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048ce:	e025      	b.n	800491c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048d0:	f7fe fb9c 	bl	800300c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d302      	bcc.n	80048e6 <HAL_I2C_IsDeviceReady+0x13a>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d103      	bne.n	80048ee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	22a0      	movs	r2, #160	; 0xa0
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004912:	bf0c      	ite	eq
 8004914:	2301      	moveq	r3, #1
 8004916:	2300      	movne	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2ba0      	cmp	r3, #160	; 0xa0
 8004926:	d005      	beq.n	8004934 <HAL_I2C_IsDeviceReady+0x188>
 8004928:	7dfb      	ldrb	r3, [r7, #23]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d102      	bne.n	8004934 <HAL_I2C_IsDeviceReady+0x188>
 800492e:	7dbb      	ldrb	r3, [r7, #22]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0cd      	beq.n	80048d0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d129      	bne.n	800499e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004958:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495a:	2300      	movs	r3, #0
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2319      	movs	r3, #25
 8004976:	2201      	movs	r2, #1
 8004978:	4921      	ldr	r1, [pc, #132]	; (8004a00 <HAL_I2C_IsDeviceReady+0x254>)
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f8c6 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e036      	b.n	80049f8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	e02c      	b.n	80049f8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049b6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	2319      	movs	r3, #25
 80049be:	2201      	movs	r2, #1
 80049c0:	490f      	ldr	r1, [pc, #60]	; (8004a00 <HAL_I2C_IsDeviceReady+0x254>)
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f8a2 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e012      	b.n	80049f8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	3301      	adds	r3, #1
 80049d6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	f4ff af32 	bcc.w	8004846 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
  }
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	00100002 	.word	0x00100002
 8004a04:	ffff0000 	.word	0xffff0000

08004a08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	607a      	str	r2, [r7, #4]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	460b      	mov	r3, r1
 8004a16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d006      	beq.n	8004a32 <I2C_MasterRequestWrite+0x2a>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d003      	beq.n	8004a32 <I2C_MasterRequestWrite+0x2a>
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a30:	d108      	bne.n	8004a44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	e00b      	b.n	8004a5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	2b12      	cmp	r3, #18
 8004a4a:	d107      	bne.n	8004a5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f84f 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00d      	beq.n	8004a90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a82:	d103      	bne.n	8004a8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e035      	b.n	8004afc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a98:	d108      	bne.n	8004aac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a9a:	897b      	ldrh	r3, [r7, #10]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004aa8:	611a      	str	r2, [r3, #16]
 8004aaa:	e01b      	b.n	8004ae4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004aac:	897b      	ldrh	r3, [r7, #10]
 8004aae:	11db      	asrs	r3, r3, #7
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f003 0306 	and.w	r3, r3, #6
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f063 030f 	orn	r3, r3, #15
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	490e      	ldr	r1, [pc, #56]	; (8004b04 <I2C_MasterRequestWrite+0xfc>)
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f875 	bl	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e010      	b.n	8004afc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ada:	897b      	ldrh	r3, [r7, #10]
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4907      	ldr	r1, [pc, #28]	; (8004b08 <I2C_MasterRequestWrite+0x100>)
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f865 	bl	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	00010008 	.word	0x00010008
 8004b08:	00010002 	.word	0x00010002

08004b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b1c:	e025      	b.n	8004b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d021      	beq.n	8004b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b26:	f7fe fa71 	bl	800300c <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d116      	bne.n	8004b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f043 0220 	orr.w	r2, r3, #32
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e023      	b.n	8004bb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	0c1b      	lsrs	r3, r3, #16
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d10d      	bne.n	8004b90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	43da      	mvns	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bf0c      	ite	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	2300      	movne	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	e00c      	b.n	8004baa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	43da      	mvns	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bf0c      	ite	eq
 8004ba2:	2301      	moveq	r3, #1
 8004ba4:	2300      	movne	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d0b6      	beq.n	8004b1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bc8:	e051      	b.n	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd8:	d123      	bne.n	8004c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bf2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f043 0204 	orr.w	r2, r3, #4
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e046      	b.n	8004cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d021      	beq.n	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2a:	f7fe f9ef 	bl	800300c <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d302      	bcc.n	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d116      	bne.n	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f043 0220 	orr.w	r2, r3, #32
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e020      	b.n	8004cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	0c1b      	lsrs	r3, r3, #16
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d10c      	bne.n	8004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	43da      	mvns	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4013      	ands	r3, r2
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bf14      	ite	ne
 8004c8a:	2301      	movne	r3, #1
 8004c8c:	2300      	moveq	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	e00b      	b.n	8004caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	43da      	mvns	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bf14      	ite	ne
 8004ca4:	2301      	movne	r3, #1
 8004ca6:	2300      	moveq	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d18d      	bne.n	8004bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cc4:	e02d      	b.n	8004d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f878 	bl	8004dbc <I2C_IsAcknowledgeFailed>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e02d      	b.n	8004d32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cdc:	d021      	beq.n	8004d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cde:	f7fe f995 	bl	800300c <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d302      	bcc.n	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d116      	bne.n	8004d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e007      	b.n	8004d32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2c:	2b80      	cmp	r3, #128	; 0x80
 8004d2e:	d1ca      	bne.n	8004cc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d46:	e02d      	b.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f837 	bl	8004dbc <I2C_IsAcknowledgeFailed>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e02d      	b.n	8004db4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d021      	beq.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d60:	f7fe f954 	bl	800300c <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d302      	bcc.n	8004d76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d116      	bne.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	f043 0220 	orr.w	r2, r3, #32
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e007      	b.n	8004db4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d1ca      	bne.n	8004d48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd2:	d11b      	bne.n	8004e0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ddc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	f043 0204 	orr.w	r2, r3, #4
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e25e      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d075      	beq.n	8004f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e3a:	4b88      	ldr	r3, [pc, #544]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d00c      	beq.n	8004e60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e46:	4b85      	ldr	r3, [pc, #532]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d112      	bne.n	8004e78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e52:	4b82      	ldr	r3, [pc, #520]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e5e:	d10b      	bne.n	8004e78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e60:	4b7e      	ldr	r3, [pc, #504]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d05b      	beq.n	8004f24 <HAL_RCC_OscConfig+0x108>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d157      	bne.n	8004f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e239      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e80:	d106      	bne.n	8004e90 <HAL_RCC_OscConfig+0x74>
 8004e82:	4b76      	ldr	r3, [pc, #472]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a75      	ldr	r2, [pc, #468]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	e01d      	b.n	8004ecc <HAL_RCC_OscConfig+0xb0>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x98>
 8004e9a:	4b70      	ldr	r3, [pc, #448]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a6f      	ldr	r2, [pc, #444]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	4b6d      	ldr	r3, [pc, #436]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a6c      	ldr	r2, [pc, #432]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e00b      	b.n	8004ecc <HAL_RCC_OscConfig+0xb0>
 8004eb4:	4b69      	ldr	r3, [pc, #420]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a68      	ldr	r2, [pc, #416]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	4b66      	ldr	r3, [pc, #408]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a65      	ldr	r2, [pc, #404]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d013      	beq.n	8004efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fe f89a 	bl	800300c <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004edc:	f7fe f896 	bl	800300c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	; 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e1fe      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eee:	4b5b      	ldr	r3, [pc, #364]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0xc0>
 8004efa:	e014      	b.n	8004f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efc:	f7fe f886 	bl	800300c <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f04:	f7fe f882 	bl	800300c <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	; 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e1ea      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f16:	4b51      	ldr	r3, [pc, #324]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0xe8>
 8004f22:	e000      	b.n	8004f26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d063      	beq.n	8004ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f32:	4b4a      	ldr	r3, [pc, #296]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f3e:	4b47      	ldr	r3, [pc, #284]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d11c      	bne.n	8004f84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f4a:	4b44      	ldr	r3, [pc, #272]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d116      	bne.n	8004f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f56:	4b41      	ldr	r3, [pc, #260]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_RCC_OscConfig+0x152>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d001      	beq.n	8004f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e1be      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f6e:	4b3b      	ldr	r3, [pc, #236]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	4937      	ldr	r1, [pc, #220]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f82:	e03a      	b.n	8004ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d020      	beq.n	8004fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f8c:	4b34      	ldr	r3, [pc, #208]	; (8005060 <HAL_RCC_OscConfig+0x244>)
 8004f8e:	2201      	movs	r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f92:	f7fe f83b 	bl	800300c <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f9a:	f7fe f837 	bl	800300c <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e19f      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fac:	4b2b      	ldr	r3, [pc, #172]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0f0      	beq.n	8004f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb8:	4b28      	ldr	r3, [pc, #160]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	4925      	ldr	r1, [pc, #148]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	600b      	str	r3, [r1, #0]
 8004fcc:	e015      	b.n	8004ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fce:	4b24      	ldr	r3, [pc, #144]	; (8005060 <HAL_RCC_OscConfig+0x244>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fe f81a 	bl	800300c <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fdc:	f7fe f816 	bl	800300c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e17e      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fee:	4b1b      	ldr	r3, [pc, #108]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d036      	beq.n	8005074 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d016      	beq.n	800503c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800500e:	4b15      	ldr	r3, [pc, #84]	; (8005064 <HAL_RCC_OscConfig+0x248>)
 8005010:	2201      	movs	r2, #1
 8005012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005014:	f7fd fffa 	bl	800300c <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800501c:	f7fd fff6 	bl	800300c <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e15e      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502e:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_RCC_OscConfig+0x240>)
 8005030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0f0      	beq.n	800501c <HAL_RCC_OscConfig+0x200>
 800503a:	e01b      	b.n	8005074 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800503c:	4b09      	ldr	r3, [pc, #36]	; (8005064 <HAL_RCC_OscConfig+0x248>)
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005042:	f7fd ffe3 	bl	800300c <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005048:	e00e      	b.n	8005068 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800504a:	f7fd ffdf 	bl	800300c <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d907      	bls.n	8005068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e147      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
 800505c:	40023800 	.word	0x40023800
 8005060:	42470000 	.word	0x42470000
 8005064:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005068:	4b88      	ldr	r3, [pc, #544]	; (800528c <HAL_RCC_OscConfig+0x470>)
 800506a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1ea      	bne.n	800504a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8097 	beq.w	80051b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005082:	2300      	movs	r3, #0
 8005084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005086:	4b81      	ldr	r3, [pc, #516]	; (800528c <HAL_RCC_OscConfig+0x470>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10f      	bne.n	80050b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	4b7d      	ldr	r3, [pc, #500]	; (800528c <HAL_RCC_OscConfig+0x470>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	4a7c      	ldr	r2, [pc, #496]	; (800528c <HAL_RCC_OscConfig+0x470>)
 800509c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a0:	6413      	str	r3, [r2, #64]	; 0x40
 80050a2:	4b7a      	ldr	r3, [pc, #488]	; (800528c <HAL_RCC_OscConfig+0x470>)
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ae:	2301      	movs	r3, #1
 80050b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b2:	4b77      	ldr	r3, [pc, #476]	; (8005290 <HAL_RCC_OscConfig+0x474>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d118      	bne.n	80050f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050be:	4b74      	ldr	r3, [pc, #464]	; (8005290 <HAL_RCC_OscConfig+0x474>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a73      	ldr	r2, [pc, #460]	; (8005290 <HAL_RCC_OscConfig+0x474>)
 80050c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ca:	f7fd ff9f 	bl	800300c <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d2:	f7fd ff9b 	bl	800300c <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e103      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e4:	4b6a      	ldr	r3, [pc, #424]	; (8005290 <HAL_RCC_OscConfig+0x474>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d106      	bne.n	8005106 <HAL_RCC_OscConfig+0x2ea>
 80050f8:	4b64      	ldr	r3, [pc, #400]	; (800528c <HAL_RCC_OscConfig+0x470>)
 80050fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fc:	4a63      	ldr	r2, [pc, #396]	; (800528c <HAL_RCC_OscConfig+0x470>)
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	6713      	str	r3, [r2, #112]	; 0x70
 8005104:	e01c      	b.n	8005140 <HAL_RCC_OscConfig+0x324>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b05      	cmp	r3, #5
 800510c:	d10c      	bne.n	8005128 <HAL_RCC_OscConfig+0x30c>
 800510e:	4b5f      	ldr	r3, [pc, #380]	; (800528c <HAL_RCC_OscConfig+0x470>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	4a5e      	ldr	r2, [pc, #376]	; (800528c <HAL_RCC_OscConfig+0x470>)
 8005114:	f043 0304 	orr.w	r3, r3, #4
 8005118:	6713      	str	r3, [r2, #112]	; 0x70
 800511a:	4b5c      	ldr	r3, [pc, #368]	; (800528c <HAL_RCC_OscConfig+0x470>)
 800511c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511e:	4a5b      	ldr	r2, [pc, #364]	; (800528c <HAL_RCC_OscConfig+0x470>)
 8005120:	f043 0301 	orr.w	r3, r3, #1
 8005124:	6713      	str	r3, [r2, #112]	; 0x70
 8005126:	e00b      	b.n	8005140 <HAL_RCC_OscConfig+0x324>
 8005128:	4b58      	ldr	r3, [pc, #352]	; (800528c <HAL_RCC_OscConfig+0x470>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512c:	4a57      	ldr	r2, [pc, #348]	; (800528c <HAL_RCC_OscConfig+0x470>)
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	6713      	str	r3, [r2, #112]	; 0x70
 8005134:	4b55      	ldr	r3, [pc, #340]	; (800528c <HAL_RCC_OscConfig+0x470>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	4a54      	ldr	r2, [pc, #336]	; (800528c <HAL_RCC_OscConfig+0x470>)
 800513a:	f023 0304 	bic.w	r3, r3, #4
 800513e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d015      	beq.n	8005174 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005148:	f7fd ff60 	bl	800300c <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514e:	e00a      	b.n	8005166 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005150:	f7fd ff5c 	bl	800300c <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	; 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e0c2      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005166:	4b49      	ldr	r3, [pc, #292]	; (800528c <HAL_RCC_OscConfig+0x470>)
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0ee      	beq.n	8005150 <HAL_RCC_OscConfig+0x334>
 8005172:	e014      	b.n	800519e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005174:	f7fd ff4a 	bl	800300c <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517a:	e00a      	b.n	8005192 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800517c:	f7fd ff46 	bl	800300c <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	; 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e0ac      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005192:	4b3e      	ldr	r3, [pc, #248]	; (800528c <HAL_RCC_OscConfig+0x470>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1ee      	bne.n	800517c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800519e:	7dfb      	ldrb	r3, [r7, #23]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d105      	bne.n	80051b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a4:	4b39      	ldr	r3, [pc, #228]	; (800528c <HAL_RCC_OscConfig+0x470>)
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	4a38      	ldr	r2, [pc, #224]	; (800528c <HAL_RCC_OscConfig+0x470>)
 80051aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8098 	beq.w	80052ea <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ba:	4b34      	ldr	r3, [pc, #208]	; (800528c <HAL_RCC_OscConfig+0x470>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d05c      	beq.n	8005280 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d141      	bne.n	8005252 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ce:	4b31      	ldr	r3, [pc, #196]	; (8005294 <HAL_RCC_OscConfig+0x478>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7fd ff1a 	bl	800300c <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fd ff16 	bl	800300c <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e07e      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ee:	4b27      	ldr	r3, [pc, #156]	; (800528c <HAL_RCC_OscConfig+0x470>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69da      	ldr	r2, [r3, #28]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	019b      	lsls	r3, r3, #6
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	085b      	lsrs	r3, r3, #1
 8005212:	3b01      	subs	r3, #1
 8005214:	041b      	lsls	r3, r3, #16
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	061b      	lsls	r3, r3, #24
 800521e:	491b      	ldr	r1, [pc, #108]	; (800528c <HAL_RCC_OscConfig+0x470>)
 8005220:	4313      	orrs	r3, r2
 8005222:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <HAL_RCC_OscConfig+0x478>)
 8005226:	2201      	movs	r2, #1
 8005228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522a:	f7fd feef 	bl	800300c <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005232:	f7fd feeb 	bl	800300c <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e053      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005244:	4b11      	ldr	r3, [pc, #68]	; (800528c <HAL_RCC_OscConfig+0x470>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f0      	beq.n	8005232 <HAL_RCC_OscConfig+0x416>
 8005250:	e04b      	b.n	80052ea <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005252:	4b10      	ldr	r3, [pc, #64]	; (8005294 <HAL_RCC_OscConfig+0x478>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005258:	f7fd fed8 	bl	800300c <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005260:	f7fd fed4 	bl	800300c <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e03c      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005272:	4b06      	ldr	r3, [pc, #24]	; (800528c <HAL_RCC_OscConfig+0x470>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0x444>
 800527e:	e034      	b.n	80052ea <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d107      	bne.n	8005298 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e02f      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
 800528c:	40023800 	.word	0x40023800
 8005290:	40007000 	.word	0x40007000
 8005294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005298:	4b16      	ldr	r3, [pc, #88]	; (80052f4 <HAL_RCC_OscConfig+0x4d8>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d11c      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d115      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052c0:	4013      	ands	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d10d      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d106      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d001      	beq.n	80052ea <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40023800 	.word	0x40023800

080052f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0cc      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800530c:	4b68      	ldr	r3, [pc, #416]	; (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d90c      	bls.n	8005334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531a:	4b65      	ldr	r3, [pc, #404]	; (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005322:	4b63      	ldr	r3, [pc, #396]	; (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d001      	beq.n	8005334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0b8      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d020      	beq.n	8005382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800534c:	4b59      	ldr	r3, [pc, #356]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	4a58      	ldr	r2, [pc, #352]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005356:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005364:	4b53      	ldr	r3, [pc, #332]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4a52      	ldr	r2, [pc, #328]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800536e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005370:	4b50      	ldr	r3, [pc, #320]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	494d      	ldr	r1, [pc, #308]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	4313      	orrs	r3, r2
 8005380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d044      	beq.n	8005418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d107      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005396:	4b47      	ldr	r3, [pc, #284]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d119      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e07f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d003      	beq.n	80053b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d107      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b6:	4b3f      	ldr	r3, [pc, #252]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e06f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c6:	4b3b      	ldr	r3, [pc, #236]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e067      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053d6:	4b37      	ldr	r3, [pc, #220]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 0203 	bic.w	r2, r3, #3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4934      	ldr	r1, [pc, #208]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053e8:	f7fd fe10 	bl	800300c <HAL_GetTick>
 80053ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ee:	e00a      	b.n	8005406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f0:	f7fd fe0c 	bl	800300c <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e04f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005406:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 020c 	and.w	r2, r3, #12
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	429a      	cmp	r2, r3
 8005416:	d1eb      	bne.n	80053f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005418:	4b25      	ldr	r3, [pc, #148]	; (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d20c      	bcs.n	8005440 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005426:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800542e:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e032      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800544c:	4b19      	ldr	r3, [pc, #100]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4916      	ldr	r1, [pc, #88]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	4313      	orrs	r3, r2
 800545c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d009      	beq.n	800547e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800546a:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	490e      	ldr	r1, [pc, #56]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800547e:	f000 f821 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8005482:	4602      	mov	r2, r0
 8005484:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	490a      	ldr	r1, [pc, #40]	; (80054b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005490:	5ccb      	ldrb	r3, [r1, r3]
 8005492:	fa22 f303 	lsr.w	r3, r2, r3
 8005496:	4a09      	ldr	r2, [pc, #36]	; (80054bc <HAL_RCC_ClockConfig+0x1c4>)
 8005498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCC_ClockConfig+0x1c8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fd fc76 	bl	8002d90 <HAL_InitTick>

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40023c00 	.word	0x40023c00
 80054b4:	40023800 	.word	0x40023800
 80054b8:	08008efc 	.word	0x08008efc
 80054bc:	20000018 	.word	0x20000018
 80054c0:	2000001c 	.word	0x2000001c

080054c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054c8:	b094      	sub	sp, #80	; 0x50
 80054ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	647b      	str	r3, [r7, #68]	; 0x44
 80054d0:	2300      	movs	r3, #0
 80054d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d4:	2300      	movs	r3, #0
 80054d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054dc:	4b79      	ldr	r3, [pc, #484]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 030c 	and.w	r3, r3, #12
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d00d      	beq.n	8005504 <HAL_RCC_GetSysClockFreq+0x40>
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	f200 80e1 	bhi.w	80056b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0x34>
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d003      	beq.n	80054fe <HAL_RCC_GetSysClockFreq+0x3a>
 80054f6:	e0db      	b.n	80056b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054f8:	4b73      	ldr	r3, [pc, #460]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80054fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80054fc:	e0db      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054fe:	4b73      	ldr	r3, [pc, #460]	; (80056cc <HAL_RCC_GetSysClockFreq+0x208>)
 8005500:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005502:	e0d8      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005504:	4b6f      	ldr	r3, [pc, #444]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800550e:	4b6d      	ldr	r3, [pc, #436]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d063      	beq.n	80055e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800551a:	4b6a      	ldr	r3, [pc, #424]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	099b      	lsrs	r3, r3, #6
 8005520:	2200      	movs	r2, #0
 8005522:	63bb      	str	r3, [r7, #56]	; 0x38
 8005524:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552c:	633b      	str	r3, [r7, #48]	; 0x30
 800552e:	2300      	movs	r3, #0
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
 8005532:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005536:	4622      	mov	r2, r4
 8005538:	462b      	mov	r3, r5
 800553a:	f04f 0000 	mov.w	r0, #0
 800553e:	f04f 0100 	mov.w	r1, #0
 8005542:	0159      	lsls	r1, r3, #5
 8005544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005548:	0150      	lsls	r0, r2, #5
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4621      	mov	r1, r4
 8005550:	1a51      	subs	r1, r2, r1
 8005552:	6139      	str	r1, [r7, #16]
 8005554:	4629      	mov	r1, r5
 8005556:	eb63 0301 	sbc.w	r3, r3, r1
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005568:	4659      	mov	r1, fp
 800556a:	018b      	lsls	r3, r1, #6
 800556c:	4651      	mov	r1, sl
 800556e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005572:	4651      	mov	r1, sl
 8005574:	018a      	lsls	r2, r1, #6
 8005576:	4651      	mov	r1, sl
 8005578:	ebb2 0801 	subs.w	r8, r2, r1
 800557c:	4659      	mov	r1, fp
 800557e:	eb63 0901 	sbc.w	r9, r3, r1
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800558e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005596:	4690      	mov	r8, r2
 8005598:	4699      	mov	r9, r3
 800559a:	4623      	mov	r3, r4
 800559c:	eb18 0303 	adds.w	r3, r8, r3
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	462b      	mov	r3, r5
 80055a4:	eb49 0303 	adc.w	r3, r9, r3
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055b6:	4629      	mov	r1, r5
 80055b8:	024b      	lsls	r3, r1, #9
 80055ba:	4621      	mov	r1, r4
 80055bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055c0:	4621      	mov	r1, r4
 80055c2:	024a      	lsls	r2, r1, #9
 80055c4:	4610      	mov	r0, r2
 80055c6:	4619      	mov	r1, r3
 80055c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ca:	2200      	movs	r2, #0
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055d4:	f7fb fa7a 	bl	8000acc <__aeabi_uldivmod>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4613      	mov	r3, r2
 80055de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e0:	e058      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e2:	4b38      	ldr	r3, [pc, #224]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	099b      	lsrs	r3, r3, #6
 80055e8:	2200      	movs	r2, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	4611      	mov	r1, r2
 80055ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055f2:	623b      	str	r3, [r7, #32]
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
 80055f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055fc:	4642      	mov	r2, r8
 80055fe:	464b      	mov	r3, r9
 8005600:	f04f 0000 	mov.w	r0, #0
 8005604:	f04f 0100 	mov.w	r1, #0
 8005608:	0159      	lsls	r1, r3, #5
 800560a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800560e:	0150      	lsls	r0, r2, #5
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4641      	mov	r1, r8
 8005616:	ebb2 0a01 	subs.w	sl, r2, r1
 800561a:	4649      	mov	r1, r9
 800561c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800562c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005630:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005634:	ebb2 040a 	subs.w	r4, r2, sl
 8005638:	eb63 050b 	sbc.w	r5, r3, fp
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	00eb      	lsls	r3, r5, #3
 8005646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800564a:	00e2      	lsls	r2, r4, #3
 800564c:	4614      	mov	r4, r2
 800564e:	461d      	mov	r5, r3
 8005650:	4643      	mov	r3, r8
 8005652:	18e3      	adds	r3, r4, r3
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	464b      	mov	r3, r9
 8005658:	eb45 0303 	adc.w	r3, r5, r3
 800565c:	607b      	str	r3, [r7, #4]
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800566a:	4629      	mov	r1, r5
 800566c:	028b      	lsls	r3, r1, #10
 800566e:	4621      	mov	r1, r4
 8005670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005674:	4621      	mov	r1, r4
 8005676:	028a      	lsls	r2, r1, #10
 8005678:	4610      	mov	r0, r2
 800567a:	4619      	mov	r1, r3
 800567c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800567e:	2200      	movs	r2, #0
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	61fa      	str	r2, [r7, #28]
 8005684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005688:	f7fb fa20 	bl	8000acc <__aeabi_uldivmod>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4613      	mov	r3, r2
 8005692:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	3301      	adds	r3, #1
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80056a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056ae:	e002      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b0:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80056b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3750      	adds	r7, #80	; 0x50
 80056bc:	46bd      	mov	sp, r7
 80056be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800
 80056c8:	00f42400 	.word	0x00f42400
 80056cc:	007a1200 	.word	0x007a1200

080056d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d4:	4b03      	ldr	r3, [pc, #12]	; (80056e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056d6:	681b      	ldr	r3, [r3, #0]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000018 	.word	0x20000018

080056e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056ec:	f7ff fff0 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	0a9b      	lsrs	r3, r3, #10
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	4903      	ldr	r1, [pc, #12]	; (800570c <HAL_RCC_GetPCLK1Freq+0x24>)
 80056fe:	5ccb      	ldrb	r3, [r1, r3]
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005704:	4618      	mov	r0, r3
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40023800 	.word	0x40023800
 800570c:	08008f0c 	.word	0x08008f0c

08005710 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	220f      	movs	r2, #15
 800571e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005720:	4b12      	ldr	r3, [pc, #72]	; (800576c <HAL_RCC_GetClockConfig+0x5c>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0203 	and.w	r2, r3, #3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <HAL_RCC_GetClockConfig+0x5c>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005738:	4b0c      	ldr	r3, [pc, #48]	; (800576c <HAL_RCC_GetClockConfig+0x5c>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005744:	4b09      	ldr	r3, [pc, #36]	; (800576c <HAL_RCC_GetClockConfig+0x5c>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	08db      	lsrs	r3, r3, #3
 800574a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005752:	4b07      	ldr	r3, [pc, #28]	; (8005770 <HAL_RCC_GetClockConfig+0x60>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 020f 	and.w	r2, r3, #15
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	601a      	str	r2, [r3, #0]
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40023800 	.word	0x40023800
 8005770:	40023c00 	.word	0x40023c00

08005774 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005798:	2b00      	cmp	r3, #0
 800579a:	d038      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800579c:	4b68      	ldr	r3, [pc, #416]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057a2:	f7fd fc33 	bl	800300c <HAL_GetTick>
 80057a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057aa:	f7fd fc2f 	bl	800300c <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e0bd      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057bc:	4b61      	ldr	r3, [pc, #388]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f0      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	019b      	lsls	r3, r3, #6
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	071b      	lsls	r3, r3, #28
 80057da:	495a      	ldr	r1, [pc, #360]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057e2:	4b57      	ldr	r3, [pc, #348]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057e4:	2201      	movs	r2, #1
 80057e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057e8:	f7fd fc10 	bl	800300c <HAL_GetTick>
 80057ec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057f0:	f7fd fc0c 	bl	800300c <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e09a      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005802:	4b50      	ldr	r3, [pc, #320]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 8083 	beq.w	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800581c:	2300      	movs	r3, #0
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	4b48      	ldr	r3, [pc, #288]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	4a47      	ldr	r2, [pc, #284]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800582a:	6413      	str	r3, [r2, #64]	; 0x40
 800582c:	4b45      	ldr	r3, [pc, #276]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005838:	4b43      	ldr	r3, [pc, #268]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a42      	ldr	r2, [pc, #264]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800583e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005842:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005844:	f7fd fbe2 	bl	800300c <HAL_GetTick>
 8005848:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800584a:	e008      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800584c:	f7fd fbde 	bl	800300c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e06c      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800585e:	4b3a      	ldr	r3, [pc, #232]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0f0      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800586a:	4b36      	ldr	r3, [pc, #216]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d02f      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x166>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	429a      	cmp	r2, r3
 8005886:	d028      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005888:	4b2e      	ldr	r3, [pc, #184]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005890:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005892:	4b2e      	ldr	r3, [pc, #184]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005894:	2201      	movs	r2, #1
 8005896:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005898:	4b2c      	ldr	r3, [pc, #176]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800589e:	4a29      	ldr	r2, [pc, #164]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058a4:	4b27      	ldr	r3, [pc, #156]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d114      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058b0:	f7fd fbac 	bl	800300c <HAL_GetTick>
 80058b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b6:	e00a      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058b8:	f7fd fba8 	bl	800300c <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d901      	bls.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e034      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ce:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0ee      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058e6:	d10d      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80058e8:	4b16      	ldr	r3, [pc, #88]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80058f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fc:	4911      	ldr	r1, [pc, #68]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	608b      	str	r3, [r1, #8]
 8005902:	e005      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005904:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4a0e      	ldr	r2, [pc, #56]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800590a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800590e:	6093      	str	r3, [r2, #8]
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005912:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800591c:	4909      	ldr	r1, [pc, #36]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591e:	4313      	orrs	r3, r2
 8005920:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	7d1a      	ldrb	r2, [r3, #20]
 8005932:	4b07      	ldr	r3, [pc, #28]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005934:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	42470068 	.word	0x42470068
 8005944:	40023800 	.word	0x40023800
 8005948:	40007000 	.word	0x40007000
 800594c:	42470e40 	.word	0x42470e40
 8005950:	424711e0 	.word	0x424711e0

08005954 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e083      	b.n	8005a6e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	7f5b      	ldrb	r3, [r3, #29]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d105      	bne.n	800597c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fd f980 	bl	8002c7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	22ca      	movs	r2, #202	; 0xca
 8005988:	625a      	str	r2, [r3, #36]	; 0x24
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2253      	movs	r2, #83	; 0x53
 8005990:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fb84 	bl	80060a0 <RTC_EnterInitMode>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d008      	beq.n	80059b0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	22ff      	movs	r2, #255	; 0xff
 80059a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2204      	movs	r2, #4
 80059aa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e05e      	b.n	8005a6e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6899      	ldr	r1, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68d2      	ldr	r2, [r2, #12]
 80059ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6919      	ldr	r1, [r3, #16]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	041a      	lsls	r2, r3, #16
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a0e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10e      	bne.n	8005a3c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fb16 	bl	8006050 <HAL_RTC_WaitForSynchro>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	22ff      	movs	r2, #255	; 0xff
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2204      	movs	r2, #4
 8005a36:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e018      	b.n	8005a6e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	22ff      	movs	r2, #255	; 0xff
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
  }
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a76:	b590      	push	{r4, r7, lr}
 8005a78:	b087      	sub	sp, #28
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	7f1b      	ldrb	r3, [r3, #28]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_RTC_SetTime+0x1c>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e0aa      	b.n	8005be8 <HAL_RTC_SetTime+0x172>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d126      	bne.n	8005af2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fb1b 	bl	80060f8 <RTC_ByteToBcd2>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fb14 	bl	80060f8 <RTC_ByteToBcd2>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ad4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	789b      	ldrb	r3, [r3, #2]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fb0c 	bl	80060f8 <RTC_ByteToBcd2>
 8005ae0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005ae2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	78db      	ldrb	r3, [r3, #3]
 8005aea:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	e018      	b.n	8005b24 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d102      	bne.n	8005b06 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2200      	movs	r2, #0
 8005b04:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005b12:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005b18:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	78db      	ldrb	r3, [r3, #3]
 8005b1e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	22ca      	movs	r2, #202	; 0xca
 8005b2a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2253      	movs	r2, #83	; 0x53
 8005b32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fab3 	bl	80060a0 <RTC_EnterInitMode>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00b      	beq.n	8005b58 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	22ff      	movs	r2, #255	; 0xff
 8005b46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e047      	b.n	8005be8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b62:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b66:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b76:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6899      	ldr	r1, [r3, #8]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b9e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d111      	bne.n	8005bd2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fa4e 	bl	8006050 <HAL_RTC_WaitForSynchro>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00b      	beq.n	8005bd2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	22ff      	movs	r2, #255	; 0xff
 8005bc0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e00a      	b.n	8005be8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	22ff      	movs	r2, #255	; 0xff
 8005bd8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005be6:	2300      	movs	r3, #0
  }
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd90      	pop	{r4, r7, pc}

08005bf0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005bf0:	b590      	push	{r4, r7, lr}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	7f1b      	ldrb	r3, [r3, #28]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_RTC_SetDate+0x1c>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e094      	b.n	8005d36 <HAL_RTC_SetDate+0x146>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2202      	movs	r2, #2
 8005c16:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10e      	bne.n	8005c3c <HAL_RTC_SetDate+0x4c>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	785b      	ldrb	r3, [r3, #1]
 8005c22:	f003 0310 	and.w	r3, r3, #16
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d008      	beq.n	8005c3c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	785b      	ldrb	r3, [r3, #1]
 8005c2e:	f023 0310 	bic.w	r3, r3, #16
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	330a      	adds	r3, #10
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d11c      	bne.n	8005c7c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	78db      	ldrb	r3, [r3, #3]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fa56 	bl	80060f8 <RTC_ByteToBcd2>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	785b      	ldrb	r3, [r3, #1]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fa4f 	bl	80060f8 <RTC_ByteToBcd2>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c5e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	789b      	ldrb	r3, [r3, #2]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fa47 	bl	80060f8 <RTC_ByteToBcd2>
 8005c6a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c6c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	e00e      	b.n	8005c9a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	78db      	ldrb	r3, [r3, #3]
 8005c80:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	785b      	ldrb	r3, [r3, #1]
 8005c86:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c88:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c8e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	22ca      	movs	r2, #202	; 0xca
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2253      	movs	r2, #83	; 0x53
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 f9f8 	bl	80060a0 <RTC_EnterInitMode>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00b      	beq.n	8005cce <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	22ff      	movs	r2, #255	; 0xff
 8005cbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e033      	b.n	8005d36 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cd8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cdc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d111      	bne.n	8005d20 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f9a7 	bl	8006050 <HAL_RTC_WaitForSynchro>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	22ff      	movs	r2, #255	; 0xff
 8005d0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2204      	movs	r2, #4
 8005d14:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e00a      	b.n	8005d36 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	22ff      	movs	r2, #255	; 0xff
 8005d26:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005d34:	2300      	movs	r3, #0
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd90      	pop	{r4, r7, pc}
	...

08005d40 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005d40:	b590      	push	{r4, r7, lr}
 8005d42:	b089      	sub	sp, #36	; 0x24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61fb      	str	r3, [r7, #28]
 8005d50:	2300      	movs	r3, #0
 8005d52:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8005d54:	4b93      	ldr	r3, [pc, #588]	; (8005fa4 <HAL_RTC_SetAlarm_IT+0x264>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a93      	ldr	r2, [pc, #588]	; (8005fa8 <HAL_RTC_SetAlarm_IT+0x268>)
 8005d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5e:	0adb      	lsrs	r3, r3, #11
 8005d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d64:	fb02 f303 	mul.w	r3, r2, r3
 8005d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	7f1b      	ldrb	r3, [r3, #28]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_RTC_SetAlarm_IT+0x36>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e111      	b.n	8005f9a <HAL_RTC_SetAlarm_IT+0x25a>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d137      	bne.n	8005df8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d102      	bne.n	8005d9c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 f9a9 	bl	80060f8 <RTC_ByteToBcd2>
 8005da6:	4603      	mov	r3, r0
 8005da8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f9a2 	bl	80060f8 <RTC_ByteToBcd2>
 8005db4:	4603      	mov	r3, r0
 8005db6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005db8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	789b      	ldrb	r3, [r3, #2]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f99a 	bl	80060f8 <RTC_ByteToBcd2>
 8005dc4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005dc6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	78db      	ldrb	r3, [r3, #3]
 8005dce:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005dd0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 f98c 	bl	80060f8 <RTC_ByteToBcd2>
 8005de0:	4603      	mov	r3, r0
 8005de2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005de4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005dec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005df2:	4313      	orrs	r3, r2
 8005df4:	61fb      	str	r3, [r7, #28]
 8005df6:	e023      	b.n	8005e40 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d102      	bne.n	8005e0c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e18:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e1e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	78db      	ldrb	r3, [r3, #3]
 8005e24:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005e26:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e2e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e30:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e36:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	22ca      	movs	r2, #202	; 0xca
 8005e52:	625a      	str	r2, [r3, #36]	; 0x24
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2253      	movs	r2, #83	; 0x53
 8005e5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e64:	d141      	bne.n	8005eea <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e74:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005e86:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1e5a      	subs	r2, r3, #1
 8005e8c:	617a      	str	r2, [r7, #20]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	22ff      	movs	r2, #255	; 0xff
 8005e98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e077      	b.n	8005f9a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0e7      	beq.n	8005e88 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ed6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ee6:	609a      	str	r2, [r3, #8]
 8005ee8:	e040      	b.n	8005f6c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ef8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005f0a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	1e5a      	subs	r2, r3, #1
 8005f10:	617a      	str	r2, [r7, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10b      	bne.n	8005f2e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	22ff      	movs	r2, #255	; 0xff
 8005f1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2203      	movs	r2, #3
 8005f22:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e035      	b.n	8005f9a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0e7      	beq.n	8005f0c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f5a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f6a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <HAL_RTC_SetAlarm_IT+0x26c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a0e      	ldr	r2, [pc, #56]	; (8005fac <HAL_RTC_SetAlarm_IT+0x26c>)
 8005f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f76:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8005f78:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <HAL_RTC_SetAlarm_IT+0x26c>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	4a0b      	ldr	r2, [pc, #44]	; (8005fac <HAL_RTC_SetAlarm_IT+0x26c>)
 8005f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f82:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	22ff      	movs	r2, #255	; 0xff
 8005f8a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3724      	adds	r7, #36	; 0x24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd90      	pop	{r4, r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000018 	.word	0x20000018
 8005fa8:	10624dd3 	.word	0x10624dd3
 8005fac:	40013c00 	.word	0x40013c00

08005fb0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d012      	beq.n	8005fec <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f831 	bl	800603c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005fea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d012      	beq.n	8006020 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00b      	beq.n	8006020 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f893 	bl	8006134 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800601e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006022:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006026:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	775a      	strb	r2, [r3, #29]
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40013c00 	.word	0x40013c00

0800603c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800606a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800606c:	f7fc ffce 	bl	800300c <HAL_GetTick>
 8006070:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006072:	e009      	b.n	8006088 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006074:	f7fc ffca 	bl	800300c <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006082:	d901      	bls.n	8006088 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e007      	b.n	8006098 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0ee      	beq.n	8006074 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d119      	bne.n	80060ee <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f04f 32ff 	mov.w	r2, #4294967295
 80060c2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060c4:	f7fc ffa2 	bl	800300c <HAL_GetTick>
 80060c8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060ca:	e009      	b.n	80060e0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060cc:	f7fc ff9e 	bl	800300c <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060da:	d901      	bls.n	80060e0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e007      	b.n	80060f0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0ee      	beq.n	80060cc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006106:	e005      	b.n	8006114 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3301      	adds	r3, #1
 800610c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	3b0a      	subs	r3, #10
 8006112:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	2b09      	cmp	r3, #9
 8006118:	d8f6      	bhi.n	8006108 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	b2da      	uxtb	r2, r3
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	4313      	orrs	r3, r2
 8006126:	b2db      	uxtb	r3, r3
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e01d      	b.n	8006196 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fc fda0 	bl	8002cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f000 fb72 	bl	8006870 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2202      	movs	r2, #2
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b06      	cmp	r3, #6
 80061be:	d007      	beq.n	80061d0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0201 	orr.w	r2, r2, #1
 80061fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b06      	cmp	r3, #6
 800620e:	d007      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e01d      	b.n	800627c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d106      	bne.n	800625a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f815 	bl	8006284 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3304      	adds	r3, #4
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f000 faff 	bl	8006870 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2201      	movs	r2, #1
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fd86 	bl	8006dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a10      	ldr	r2, [pc, #64]	; (80062f8 <HAL_TIM_PWM_Start+0x60>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d107      	bne.n	80062ca <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b06      	cmp	r3, #6
 80062da:	d007      	beq.n	80062ec <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40010000 	.word	0x40010000

080062fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b02      	cmp	r3, #2
 8006310:	d122      	bne.n	8006358 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b02      	cmp	r3, #2
 800631e:	d11b      	bne.n	8006358 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0202 	mvn.w	r2, #2
 8006328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa78 	bl	8006834 <HAL_TIM_IC_CaptureCallback>
 8006344:	e005      	b.n	8006352 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fa6a 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fa7b 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b04      	cmp	r3, #4
 8006364:	d122      	bne.n	80063ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b04      	cmp	r3, #4
 8006372:	d11b      	bne.n	80063ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0204 	mvn.w	r2, #4
 800637c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2202      	movs	r2, #2
 8006382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa4e 	bl	8006834 <HAL_TIM_IC_CaptureCallback>
 8006398:	e005      	b.n	80063a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa40 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fa51 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d122      	bne.n	8006400 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d11b      	bne.n	8006400 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0208 	mvn.w	r2, #8
 80063d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2204      	movs	r2, #4
 80063d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fa24 	bl	8006834 <HAL_TIM_IC_CaptureCallback>
 80063ec:	e005      	b.n	80063fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fa16 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fa27 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	2b10      	cmp	r3, #16
 800640c:	d122      	bne.n	8006454 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	2b10      	cmp	r3, #16
 800641a:	d11b      	bne.n	8006454 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0210 	mvn.w	r2, #16
 8006424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2208      	movs	r2, #8
 800642a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f9fa 	bl	8006834 <HAL_TIM_IC_CaptureCallback>
 8006440:	e005      	b.n	800644e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f9ec 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f9fd 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b01      	cmp	r3, #1
 8006460:	d10e      	bne.n	8006480 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b01      	cmp	r3, #1
 800646e:	d107      	bne.n	8006480 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f06f 0201 	mvn.w	r2, #1
 8006478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fa fecc 	bl	8001218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648a:	2b80      	cmp	r3, #128	; 0x80
 800648c:	d10e      	bne.n	80064ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006498:	2b80      	cmp	r3, #128	; 0x80
 800649a:	d107      	bne.n	80064ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fd26 	bl	8006ef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b6:	2b40      	cmp	r3, #64	; 0x40
 80064b8:	d10e      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c4:	2b40      	cmp	r3, #64	; 0x40
 80064c6:	d107      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f9c2 	bl	800685c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d10e      	bne.n	8006504 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d107      	bne.n	8006504 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0220 	mvn.w	r2, #32
 80064fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fcf0 	bl	8006ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006504:	bf00      	nop
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006522:	2302      	movs	r3, #2
 8006524:	e0b4      	b.n	8006690 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2202      	movs	r2, #2
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b0c      	cmp	r3, #12
 800653a:	f200 809f 	bhi.w	800667c <HAL_TIM_PWM_ConfigChannel+0x170>
 800653e:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	08006579 	.word	0x08006579
 8006548:	0800667d 	.word	0x0800667d
 800654c:	0800667d 	.word	0x0800667d
 8006550:	0800667d 	.word	0x0800667d
 8006554:	080065b9 	.word	0x080065b9
 8006558:	0800667d 	.word	0x0800667d
 800655c:	0800667d 	.word	0x0800667d
 8006560:	0800667d 	.word	0x0800667d
 8006564:	080065fb 	.word	0x080065fb
 8006568:	0800667d 	.word	0x0800667d
 800656c:	0800667d 	.word	0x0800667d
 8006570:	0800667d 	.word	0x0800667d
 8006574:	0800663b 	.word	0x0800663b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	4618      	mov	r0, r3
 8006580:	f000 f9f6 	bl	8006970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0208 	orr.w	r2, r2, #8
 8006592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0204 	bic.w	r2, r2, #4
 80065a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6999      	ldr	r1, [r3, #24]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	619a      	str	r2, [r3, #24]
      break;
 80065b6:	e062      	b.n	800667e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fa3c 	bl	8006a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699a      	ldr	r2, [r3, #24]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6999      	ldr	r1, [r3, #24]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	021a      	lsls	r2, r3, #8
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	619a      	str	r2, [r3, #24]
      break;
 80065f8:	e041      	b.n	800667e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68b9      	ldr	r1, [r7, #8]
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fa87 	bl	8006b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0208 	orr.w	r2, r2, #8
 8006614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69da      	ldr	r2, [r3, #28]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0204 	bic.w	r2, r2, #4
 8006624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69d9      	ldr	r1, [r3, #28]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	61da      	str	r2, [r3, #28]
      break;
 8006638:	e021      	b.n	800667e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fad1 	bl	8006be8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69da      	ldr	r2, [r3, #28]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69d9      	ldr	r1, [r3, #28]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	021a      	lsls	r2, r3, #8
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	61da      	str	r2, [r3, #28]
      break;
 800667a:	e000      	b.n	800667e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800667c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d101      	bne.n	80066b0 <HAL_TIM_ConfigClockSource+0x18>
 80066ac:	2302      	movs	r3, #2
 80066ae:	e0b3      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x180>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e8:	d03e      	beq.n	8006768 <HAL_TIM_ConfigClockSource+0xd0>
 80066ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ee:	f200 8087 	bhi.w	8006800 <HAL_TIM_ConfigClockSource+0x168>
 80066f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f6:	f000 8085 	beq.w	8006804 <HAL_TIM_ConfigClockSource+0x16c>
 80066fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fe:	d87f      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x168>
 8006700:	2b70      	cmp	r3, #112	; 0x70
 8006702:	d01a      	beq.n	800673a <HAL_TIM_ConfigClockSource+0xa2>
 8006704:	2b70      	cmp	r3, #112	; 0x70
 8006706:	d87b      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x168>
 8006708:	2b60      	cmp	r3, #96	; 0x60
 800670a:	d050      	beq.n	80067ae <HAL_TIM_ConfigClockSource+0x116>
 800670c:	2b60      	cmp	r3, #96	; 0x60
 800670e:	d877      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x168>
 8006710:	2b50      	cmp	r3, #80	; 0x50
 8006712:	d03c      	beq.n	800678e <HAL_TIM_ConfigClockSource+0xf6>
 8006714:	2b50      	cmp	r3, #80	; 0x50
 8006716:	d873      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x168>
 8006718:	2b40      	cmp	r3, #64	; 0x40
 800671a:	d058      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x136>
 800671c:	2b40      	cmp	r3, #64	; 0x40
 800671e:	d86f      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x168>
 8006720:	2b30      	cmp	r3, #48	; 0x30
 8006722:	d064      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0x156>
 8006724:	2b30      	cmp	r3, #48	; 0x30
 8006726:	d86b      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x168>
 8006728:	2b20      	cmp	r3, #32
 800672a:	d060      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0x156>
 800672c:	2b20      	cmp	r3, #32
 800672e:	d867      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x168>
 8006730:	2b00      	cmp	r3, #0
 8006732:	d05c      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0x156>
 8006734:	2b10      	cmp	r3, #16
 8006736:	d05a      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006738:	e062      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	6899      	ldr	r1, [r3, #8]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f000 fb17 	bl	8006d7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800675c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	609a      	str	r2, [r3, #8]
      break;
 8006766:	e04e      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6818      	ldr	r0, [r3, #0]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	6899      	ldr	r1, [r3, #8]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f000 fb00 	bl	8006d7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800678a:	609a      	str	r2, [r3, #8]
      break;
 800678c:	e03b      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6818      	ldr	r0, [r3, #0]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6859      	ldr	r1, [r3, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	461a      	mov	r2, r3
 800679c:	f000 fa74 	bl	8006c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2150      	movs	r1, #80	; 0x50
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 facd 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 80067ac:	e02b      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	6859      	ldr	r1, [r3, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f000 fa93 	bl	8006ce6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2160      	movs	r1, #96	; 0x60
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fabd 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 80067cc:	e01b      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	6859      	ldr	r1, [r3, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	461a      	mov	r2, r3
 80067dc:	f000 fa54 	bl	8006c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2140      	movs	r1, #64	; 0x40
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 faad 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 80067ec:	e00b      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4619      	mov	r1, r3
 80067f8:	4610      	mov	r0, r2
 80067fa:	f000 faa4 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 80067fe:	e002      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006800:	bf00      	nop
 8006802:	e000      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006804:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a34      	ldr	r2, [pc, #208]	; (8006954 <TIM_Base_SetConfig+0xe4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00f      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688e:	d00b      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a31      	ldr	r2, [pc, #196]	; (8006958 <TIM_Base_SetConfig+0xe8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d007      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a30      	ldr	r2, [pc, #192]	; (800695c <TIM_Base_SetConfig+0xec>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a2f      	ldr	r2, [pc, #188]	; (8006960 <TIM_Base_SetConfig+0xf0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d108      	bne.n	80068ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a25      	ldr	r2, [pc, #148]	; (8006954 <TIM_Base_SetConfig+0xe4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d01b      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c8:	d017      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a22      	ldr	r2, [pc, #136]	; (8006958 <TIM_Base_SetConfig+0xe8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d013      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a21      	ldr	r2, [pc, #132]	; (800695c <TIM_Base_SetConfig+0xec>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00f      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a20      	ldr	r2, [pc, #128]	; (8006960 <TIM_Base_SetConfig+0xf0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00b      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a1f      	ldr	r2, [pc, #124]	; (8006964 <TIM_Base_SetConfig+0xf4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d007      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a1e      	ldr	r2, [pc, #120]	; (8006968 <TIM_Base_SetConfig+0xf8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d003      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a1d      	ldr	r2, [pc, #116]	; (800696c <TIM_Base_SetConfig+0xfc>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d108      	bne.n	800690c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a08      	ldr	r2, [pc, #32]	; (8006954 <TIM_Base_SetConfig+0xe4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d103      	bne.n	8006940 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	615a      	str	r2, [r3, #20]
}
 8006946:	bf00      	nop
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40010000 	.word	0x40010000
 8006958:	40000400 	.word	0x40000400
 800695c:	40000800 	.word	0x40000800
 8006960:	40000c00 	.word	0x40000c00
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800

08006970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f023 0201 	bic.w	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0303 	bic.w	r3, r3, #3
 80069a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f023 0302 	bic.w	r3, r3, #2
 80069b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a1c      	ldr	r2, [pc, #112]	; (8006a38 <TIM_OC1_SetConfig+0xc8>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d10c      	bne.n	80069e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f023 0308 	bic.w	r3, r3, #8
 80069d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	4313      	orrs	r3, r2
 80069dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f023 0304 	bic.w	r3, r3, #4
 80069e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a13      	ldr	r2, [pc, #76]	; (8006a38 <TIM_OC1_SetConfig+0xc8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d111      	bne.n	8006a12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	621a      	str	r2, [r3, #32]
}
 8006a2c:	bf00      	nop
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	40010000 	.word	0x40010000

08006a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f023 0210 	bic.w	r2, r3, #16
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	021b      	lsls	r3, r3, #8
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f023 0320 	bic.w	r3, r3, #32
 8006a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	011b      	lsls	r3, r3, #4
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1e      	ldr	r2, [pc, #120]	; (8006b10 <TIM_OC2_SetConfig+0xd4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d10d      	bne.n	8006ab8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a15      	ldr	r2, [pc, #84]	; (8006b10 <TIM_OC2_SetConfig+0xd4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d113      	bne.n	8006ae8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	621a      	str	r2, [r3, #32]
}
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40010000 	.word	0x40010000

08006b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a1d      	ldr	r2, [pc, #116]	; (8006be4 <TIM_OC3_SetConfig+0xd0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d10d      	bne.n	8006b8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a14      	ldr	r2, [pc, #80]	; (8006be4 <TIM_OC3_SetConfig+0xd0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d113      	bne.n	8006bbe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	621a      	str	r2, [r3, #32]
}
 8006bd8:	bf00      	nop
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	40010000 	.word	0x40010000

08006be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	031b      	lsls	r3, r3, #12
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a10      	ldr	r2, [pc, #64]	; (8006c84 <TIM_OC4_SetConfig+0x9c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d109      	bne.n	8006c5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	019b      	lsls	r3, r3, #6
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40010000 	.word	0x40010000

08006c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f023 0201 	bic.w	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f023 030a 	bic.w	r3, r3, #10
 8006cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b087      	sub	sp, #28
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f023 0210 	bic.w	r2, r3, #16
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	031b      	lsls	r3, r3, #12
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b085      	sub	sp, #20
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f043 0307 	orr.w	r3, r3, #7
 8006d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	609a      	str	r2, [r3, #8]
}
 8006d70:	bf00      	nop
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	021a      	lsls	r2, r3, #8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	609a      	str	r2, [r3, #8]
}
 8006db0:	bf00      	nop
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	2201      	movs	r2, #1
 8006dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a1a      	ldr	r2, [r3, #32]
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	43db      	mvns	r3, r3
 8006dde:	401a      	ands	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1a      	ldr	r2, [r3, #32]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f003 031f 	and.w	r3, r3, #31
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	fa01 f303 	lsl.w	r3, r1, r3
 8006df4:	431a      	orrs	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e050      	b.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1c      	ldr	r2, [pc, #112]	; (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d018      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6c:	d013      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a18      	ldr	r2, [pc, #96]	; (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00e      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a16      	ldr	r2, [pc, #88]	; (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d009      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a15      	ldr	r2, [pc, #84]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d004      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a13      	ldr	r2, [pc, #76]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d10c      	bne.n	8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40010000 	.word	0x40010000
 8006ed4:	40000400 	.word	0x40000400
 8006ed8:	40000800 	.word	0x40000800
 8006edc:	40000c00 	.word	0x40000c00
 8006ee0:	40014000 	.word	0x40014000

08006ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f1e:	2b84      	cmp	r3, #132	; 0x84
 8006f20:	d005      	beq.n	8006f2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006f22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	3303      	adds	r3, #3
 8006f2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006f40:	f000 fade 	bl	8007500 <vTaskStartScheduler>
  
  return osOK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4c:	b089      	sub	sp, #36	; 0x24
 8006f4e:	af04      	add	r7, sp, #16
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d020      	beq.n	8006f9e <osThreadCreate+0x54>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01c      	beq.n	8006f9e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685c      	ldr	r4, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681d      	ldr	r5, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691e      	ldr	r6, [r3, #16]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff ffc8 	bl	8006f0c <makeFreeRtosPriority>
 8006f7c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f86:	9202      	str	r2, [sp, #8]
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	9100      	str	r1, [sp, #0]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	4632      	mov	r2, r6
 8006f90:	4629      	mov	r1, r5
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 f8ed 	bl	8007172 <xTaskCreateStatic>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	e01c      	b.n	8006fd8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685c      	ldr	r4, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006faa:	b29e      	uxth	r6, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff ffaa 	bl	8006f0c <makeFreeRtosPriority>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	f107 030c 	add.w	r3, r7, #12
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	9200      	str	r2, [sp, #0]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	4632      	mov	r2, r6
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f000 f92f 	bl	800722c <xTaskCreate>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d001      	beq.n	8006fd8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e000      	b.n	8006fda <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fe2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <osDelay+0x16>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	e000      	b.n	8006ffa <osDelay+0x18>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 fa4c 	bl	8007498 <vTaskDelay>
  
  return osOK;
 8007000:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f103 0208 	add.w	r2, r3, #8
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f04f 32ff 	mov.w	r2, #4294967295
 8007022:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f103 0208 	add.w	r2, r3, #8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f103 0208 	add.w	r2, r3, #8
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800703e:	bf00      	nop
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	601a      	str	r2, [r3, #0]
}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c2:	d103      	bne.n	80070cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	e00c      	b.n	80070e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3308      	adds	r3, #8
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	e002      	b.n	80070da <vListInsert+0x2e>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d2f6      	bcs.n	80070d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	601a      	str	r2, [r3, #0]
}
 8007112:	bf00      	nop
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	6892      	ldr	r2, [r2, #8]
 8007134:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6852      	ldr	r2, [r2, #4]
 800713e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	429a      	cmp	r2, r3
 8007148:	d103      	bne.n	8007152 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	689a      	ldr	r2, [r3, #8]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	1e5a      	subs	r2, r3, #1
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007172:	b580      	push	{r7, lr}
 8007174:	b08e      	sub	sp, #56	; 0x38
 8007176:	af04      	add	r7, sp, #16
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	607a      	str	r2, [r7, #4]
 800717e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10a      	bne.n	800719c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007198:	bf00      	nop
 800719a:	e7fe      	b.n	800719a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10a      	bne.n	80071b8 <xTaskCreateStatic+0x46>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	61fb      	str	r3, [r7, #28]
}
 80071b4:	bf00      	nop
 80071b6:	e7fe      	b.n	80071b6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071b8:	2354      	movs	r3, #84	; 0x54
 80071ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2b54      	cmp	r3, #84	; 0x54
 80071c0:	d00a      	beq.n	80071d8 <xTaskCreateStatic+0x66>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	61bb      	str	r3, [r7, #24]
}
 80071d4:	bf00      	nop
 80071d6:	e7fe      	b.n	80071d6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80071d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d01e      	beq.n	800721e <xTaskCreateStatic+0xac>
 80071e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d01b      	beq.n	800721e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071f8:	2300      	movs	r3, #0
 80071fa:	9303      	str	r3, [sp, #12]
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	9302      	str	r3, [sp, #8]
 8007200:	f107 0314 	add.w	r3, r7, #20
 8007204:	9301      	str	r3, [sp, #4]
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	68b9      	ldr	r1, [r7, #8]
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f850 	bl	80072b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007216:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007218:	f000 f8d4 	bl	80073c4 <prvAddNewTaskToReadyList>
 800721c:	e001      	b.n	8007222 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800721e:	2300      	movs	r3, #0
 8007220:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007222:	697b      	ldr	r3, [r7, #20]
	}
 8007224:	4618      	mov	r0, r3
 8007226:	3728      	adds	r7, #40	; 0x28
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08c      	sub	sp, #48	; 0x30
 8007230:	af04      	add	r7, sp, #16
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	4613      	mov	r3, r2
 800723a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fec9 	bl	8007fd8 <pvPortMalloc>
 8007246:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00e      	beq.n	800726c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800724e:	2054      	movs	r0, #84	; 0x54
 8007250:	f000 fec2 	bl	8007fd8 <pvPortMalloc>
 8007254:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	631a      	str	r2, [r3, #48]	; 0x30
 8007262:	e005      	b.n	8007270 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007264:	6978      	ldr	r0, [r7, #20]
 8007266:	f000 ff7b 	bl	8008160 <vPortFree>
 800726a:	e001      	b.n	8007270 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800726c:	2300      	movs	r3, #0
 800726e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d017      	beq.n	80072a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800727e:	88fa      	ldrh	r2, [r7, #6]
 8007280:	2300      	movs	r3, #0
 8007282:	9303      	str	r3, [sp, #12]
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	9302      	str	r3, [sp, #8]
 8007288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728a:	9301      	str	r3, [sp, #4]
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 f80e 	bl	80072b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800729a:	69f8      	ldr	r0, [r7, #28]
 800729c:	f000 f892 	bl	80073c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072a0:	2301      	movs	r3, #1
 80072a2:	61bb      	str	r3, [r7, #24]
 80072a4:	e002      	b.n	80072ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072a6:	f04f 33ff 	mov.w	r3, #4294967295
 80072aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072ac:	69bb      	ldr	r3, [r7, #24]
	}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3720      	adds	r7, #32
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b088      	sub	sp, #32
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	607a      	str	r2, [r7, #4]
 80072c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072ce:	3b01      	subs	r3, #1
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	f023 0307 	bic.w	r3, r3, #7
 80072dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00a      	beq.n	80072fe <prvInitialiseNewTask+0x48>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	617b      	str	r3, [r7, #20]
}
 80072fa:	bf00      	nop
 80072fc:	e7fe      	b.n	80072fc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01f      	beq.n	8007344 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007304:	2300      	movs	r3, #0
 8007306:	61fb      	str	r3, [r7, #28]
 8007308:	e012      	b.n	8007330 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	4413      	add	r3, r2
 8007310:	7819      	ldrb	r1, [r3, #0]
 8007312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	4413      	add	r3, r2
 8007318:	3334      	adds	r3, #52	; 0x34
 800731a:	460a      	mov	r2, r1
 800731c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	4413      	add	r3, r2
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d006      	beq.n	8007338 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	3301      	adds	r3, #1
 800732e:	61fb      	str	r3, [r7, #28]
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	2b0f      	cmp	r3, #15
 8007334:	d9e9      	bls.n	800730a <prvInitialiseNewTask+0x54>
 8007336:	e000      	b.n	800733a <prvInitialiseNewTask+0x84>
			{
				break;
 8007338:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007342:	e003      	b.n	800734c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	2b06      	cmp	r3, #6
 8007350:	d901      	bls.n	8007356 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007352:	2306      	movs	r3, #6
 8007354:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800735a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007360:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	2200      	movs	r2, #0
 8007366:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	3304      	adds	r3, #4
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff fe6c 	bl	800704a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	3318      	adds	r3, #24
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff fe67 	bl	800704a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007380:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	f1c3 0207 	rsb	r2, r3, #7
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007390:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	2200      	movs	r2, #0
 8007396:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	68f9      	ldr	r1, [r7, #12]
 80073a4:	69b8      	ldr	r0, [r7, #24]
 80073a6:	f000 fc05 	bl	8007bb4 <pxPortInitialiseStack>
 80073aa:	4602      	mov	r2, r0
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073bc:	bf00      	nop
 80073be:	3720      	adds	r7, #32
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073cc:	f000 fd22 	bl	8007e14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073d0:	4b2a      	ldr	r3, [pc, #168]	; (800747c <prvAddNewTaskToReadyList+0xb8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3301      	adds	r3, #1
 80073d6:	4a29      	ldr	r2, [pc, #164]	; (800747c <prvAddNewTaskToReadyList+0xb8>)
 80073d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073da:	4b29      	ldr	r3, [pc, #164]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d109      	bne.n	80073f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073e2:	4a27      	ldr	r2, [pc, #156]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073e8:	4b24      	ldr	r3, [pc, #144]	; (800747c <prvAddNewTaskToReadyList+0xb8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d110      	bne.n	8007412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073f0:	f000 fabc 	bl	800796c <prvInitialiseTaskLists>
 80073f4:	e00d      	b.n	8007412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073f6:	4b23      	ldr	r3, [pc, #140]	; (8007484 <prvAddNewTaskToReadyList+0xc0>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d109      	bne.n	8007412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073fe:	4b20      	ldr	r3, [pc, #128]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	429a      	cmp	r2, r3
 800740a:	d802      	bhi.n	8007412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800740c:	4a1c      	ldr	r2, [pc, #112]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007412:	4b1d      	ldr	r3, [pc, #116]	; (8007488 <prvAddNewTaskToReadyList+0xc4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3301      	adds	r3, #1
 8007418:	4a1b      	ldr	r2, [pc, #108]	; (8007488 <prvAddNewTaskToReadyList+0xc4>)
 800741a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	2201      	movs	r2, #1
 8007422:	409a      	lsls	r2, r3
 8007424:	4b19      	ldr	r3, [pc, #100]	; (800748c <prvAddNewTaskToReadyList+0xc8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4313      	orrs	r3, r2
 800742a:	4a18      	ldr	r2, [pc, #96]	; (800748c <prvAddNewTaskToReadyList+0xc8>)
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4a15      	ldr	r2, [pc, #84]	; (8007490 <prvAddNewTaskToReadyList+0xcc>)
 800743c:	441a      	add	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3304      	adds	r3, #4
 8007442:	4619      	mov	r1, r3
 8007444:	4610      	mov	r0, r2
 8007446:	f7ff fe0d 	bl	8007064 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800744a:	f000 fd13 	bl	8007e74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800744e:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <prvAddNewTaskToReadyList+0xc0>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00e      	beq.n	8007474 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	429a      	cmp	r2, r3
 8007462:	d207      	bcs.n	8007474 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007464:	4b0b      	ldr	r3, [pc, #44]	; (8007494 <prvAddNewTaskToReadyList+0xd0>)
 8007466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	20000848 	.word	0x20000848
 8007480:	20000748 	.word	0x20000748
 8007484:	20000854 	.word	0x20000854
 8007488:	20000864 	.word	0x20000864
 800748c:	20000850 	.word	0x20000850
 8007490:	2000074c 	.word	0x2000074c
 8007494:	e000ed04 	.word	0xe000ed04

08007498 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074a0:	2300      	movs	r3, #0
 80074a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d017      	beq.n	80074da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074aa:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <vTaskDelay+0x60>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <vTaskDelay+0x30>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	60bb      	str	r3, [r7, #8]
}
 80074c4:	bf00      	nop
 80074c6:	e7fe      	b.n	80074c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80074c8:	f000 f87a 	bl	80075c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074cc:	2100      	movs	r1, #0
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fb0a 	bl	8007ae8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074d4:	f000 f882 	bl	80075dc <xTaskResumeAll>
 80074d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d107      	bne.n	80074f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80074e0:	4b06      	ldr	r3, [pc, #24]	; (80074fc <vTaskDelay+0x64>)
 80074e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074f0:	bf00      	nop
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20000870 	.word	0x20000870
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08a      	sub	sp, #40	; 0x28
 8007504:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007506:	2300      	movs	r3, #0
 8007508:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800750a:	2300      	movs	r3, #0
 800750c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800750e:	463a      	mov	r2, r7
 8007510:	1d39      	adds	r1, r7, #4
 8007512:	f107 0308 	add.w	r3, r7, #8
 8007516:	4618      	mov	r0, r3
 8007518:	f7fa fd54 	bl	8001fc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	9202      	str	r2, [sp, #8]
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	2300      	movs	r3, #0
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	2300      	movs	r3, #0
 800752c:	460a      	mov	r2, r1
 800752e:	491e      	ldr	r1, [pc, #120]	; (80075a8 <vTaskStartScheduler+0xa8>)
 8007530:	481e      	ldr	r0, [pc, #120]	; (80075ac <vTaskStartScheduler+0xac>)
 8007532:	f7ff fe1e 	bl	8007172 <xTaskCreateStatic>
 8007536:	4603      	mov	r3, r0
 8007538:	4a1d      	ldr	r2, [pc, #116]	; (80075b0 <vTaskStartScheduler+0xb0>)
 800753a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800753c:	4b1c      	ldr	r3, [pc, #112]	; (80075b0 <vTaskStartScheduler+0xb0>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007544:	2301      	movs	r3, #1
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	e001      	b.n	800754e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800754a:	2300      	movs	r3, #0
 800754c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d116      	bne.n	8007582 <vTaskStartScheduler+0x82>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	613b      	str	r3, [r7, #16]
}
 8007566:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007568:	4b12      	ldr	r3, [pc, #72]	; (80075b4 <vTaskStartScheduler+0xb4>)
 800756a:	f04f 32ff 	mov.w	r2, #4294967295
 800756e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007570:	4b11      	ldr	r3, [pc, #68]	; (80075b8 <vTaskStartScheduler+0xb8>)
 8007572:	2201      	movs	r2, #1
 8007574:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007576:	4b11      	ldr	r3, [pc, #68]	; (80075bc <vTaskStartScheduler+0xbc>)
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800757c:	f000 fba8 	bl	8007cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007580:	e00e      	b.n	80075a0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007588:	d10a      	bne.n	80075a0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	60fb      	str	r3, [r7, #12]
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <vTaskStartScheduler+0x9e>
}
 80075a0:	bf00      	nop
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	08008ed4 	.word	0x08008ed4
 80075ac:	0800793d 	.word	0x0800793d
 80075b0:	2000086c 	.word	0x2000086c
 80075b4:	20000868 	.word	0x20000868
 80075b8:	20000854 	.word	0x20000854
 80075bc:	2000084c 	.word	0x2000084c

080075c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075c0:	b480      	push	{r7}
 80075c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80075c4:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <vTaskSuspendAll+0x18>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3301      	adds	r3, #1
 80075ca:	4a03      	ldr	r2, [pc, #12]	; (80075d8 <vTaskSuspendAll+0x18>)
 80075cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80075ce:	bf00      	nop
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	20000870 	.word	0x20000870

080075dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075ea:	4b41      	ldr	r3, [pc, #260]	; (80076f0 <xTaskResumeAll+0x114>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10a      	bne.n	8007608 <xTaskResumeAll+0x2c>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	603b      	str	r3, [r7, #0]
}
 8007604:	bf00      	nop
 8007606:	e7fe      	b.n	8007606 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007608:	f000 fc04 	bl	8007e14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800760c:	4b38      	ldr	r3, [pc, #224]	; (80076f0 <xTaskResumeAll+0x114>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3b01      	subs	r3, #1
 8007612:	4a37      	ldr	r2, [pc, #220]	; (80076f0 <xTaskResumeAll+0x114>)
 8007614:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007616:	4b36      	ldr	r3, [pc, #216]	; (80076f0 <xTaskResumeAll+0x114>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d161      	bne.n	80076e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800761e:	4b35      	ldr	r3, [pc, #212]	; (80076f4 <xTaskResumeAll+0x118>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d05d      	beq.n	80076e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007626:	e02e      	b.n	8007686 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007628:	4b33      	ldr	r3, [pc, #204]	; (80076f8 <xTaskResumeAll+0x11c>)
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3318      	adds	r3, #24
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff fd72 	bl	800711e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3304      	adds	r3, #4
 800763e:	4618      	mov	r0, r3
 8007640:	f7ff fd6d 	bl	800711e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	2201      	movs	r2, #1
 800764a:	409a      	lsls	r2, r3
 800764c:	4b2b      	ldr	r3, [pc, #172]	; (80076fc <xTaskResumeAll+0x120>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4313      	orrs	r3, r2
 8007652:	4a2a      	ldr	r2, [pc, #168]	; (80076fc <xTaskResumeAll+0x120>)
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765a:	4613      	mov	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4a27      	ldr	r2, [pc, #156]	; (8007700 <xTaskResumeAll+0x124>)
 8007664:	441a      	add	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3304      	adds	r3, #4
 800766a:	4619      	mov	r1, r3
 800766c:	4610      	mov	r0, r2
 800766e:	f7ff fcf9 	bl	8007064 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007676:	4b23      	ldr	r3, [pc, #140]	; (8007704 <xTaskResumeAll+0x128>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	429a      	cmp	r2, r3
 800767e:	d302      	bcc.n	8007686 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007680:	4b21      	ldr	r3, [pc, #132]	; (8007708 <xTaskResumeAll+0x12c>)
 8007682:	2201      	movs	r2, #1
 8007684:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007686:	4b1c      	ldr	r3, [pc, #112]	; (80076f8 <xTaskResumeAll+0x11c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1cc      	bne.n	8007628 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007694:	f000 fa08 	bl	8007aa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007698:	4b1c      	ldr	r3, [pc, #112]	; (800770c <xTaskResumeAll+0x130>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d010      	beq.n	80076c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076a4:	f000 f836 	bl	8007714 <xTaskIncrementTick>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80076ae:	4b16      	ldr	r3, [pc, #88]	; (8007708 <xTaskResumeAll+0x12c>)
 80076b0:	2201      	movs	r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1f1      	bne.n	80076a4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80076c0:	4b12      	ldr	r3, [pc, #72]	; (800770c <xTaskResumeAll+0x130>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076c6:	4b10      	ldr	r3, [pc, #64]	; (8007708 <xTaskResumeAll+0x12c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d009      	beq.n	80076e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076ce:	2301      	movs	r3, #1
 80076d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076d2:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <xTaskResumeAll+0x134>)
 80076d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076e2:	f000 fbc7 	bl	8007e74 <vPortExitCritical>

	return xAlreadyYielded;
 80076e6:	68bb      	ldr	r3, [r7, #8]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	20000870 	.word	0x20000870
 80076f4:	20000848 	.word	0x20000848
 80076f8:	20000808 	.word	0x20000808
 80076fc:	20000850 	.word	0x20000850
 8007700:	2000074c 	.word	0x2000074c
 8007704:	20000748 	.word	0x20000748
 8007708:	2000085c 	.word	0x2000085c
 800770c:	20000858 	.word	0x20000858
 8007710:	e000ed04 	.word	0xe000ed04

08007714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800771a:	2300      	movs	r3, #0
 800771c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800771e:	4b4e      	ldr	r3, [pc, #312]	; (8007858 <xTaskIncrementTick+0x144>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f040 8088 	bne.w	8007838 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007728:	4b4c      	ldr	r3, [pc, #304]	; (800785c <xTaskIncrementTick+0x148>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3301      	adds	r3, #1
 800772e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007730:	4a4a      	ldr	r2, [pc, #296]	; (800785c <xTaskIncrementTick+0x148>)
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d120      	bne.n	800777e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800773c:	4b48      	ldr	r3, [pc, #288]	; (8007860 <xTaskIncrementTick+0x14c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <xTaskIncrementTick+0x48>
	__asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	603b      	str	r3, [r7, #0]
}
 8007758:	bf00      	nop
 800775a:	e7fe      	b.n	800775a <xTaskIncrementTick+0x46>
 800775c:	4b40      	ldr	r3, [pc, #256]	; (8007860 <xTaskIncrementTick+0x14c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	4b40      	ldr	r3, [pc, #256]	; (8007864 <xTaskIncrementTick+0x150>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a3e      	ldr	r2, [pc, #248]	; (8007860 <xTaskIncrementTick+0x14c>)
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	4a3e      	ldr	r2, [pc, #248]	; (8007864 <xTaskIncrementTick+0x150>)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	4b3d      	ldr	r3, [pc, #244]	; (8007868 <xTaskIncrementTick+0x154>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3301      	adds	r3, #1
 8007776:	4a3c      	ldr	r2, [pc, #240]	; (8007868 <xTaskIncrementTick+0x154>)
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	f000 f995 	bl	8007aa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800777e:	4b3b      	ldr	r3, [pc, #236]	; (800786c <xTaskIncrementTick+0x158>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	429a      	cmp	r2, r3
 8007786:	d348      	bcc.n	800781a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007788:	4b35      	ldr	r3, [pc, #212]	; (8007860 <xTaskIncrementTick+0x14c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d104      	bne.n	800779c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007792:	4b36      	ldr	r3, [pc, #216]	; (800786c <xTaskIncrementTick+0x158>)
 8007794:	f04f 32ff 	mov.w	r2, #4294967295
 8007798:	601a      	str	r2, [r3, #0]
					break;
 800779a:	e03e      	b.n	800781a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800779c:	4b30      	ldr	r3, [pc, #192]	; (8007860 <xTaskIncrementTick+0x14c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d203      	bcs.n	80077bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077b4:	4a2d      	ldr	r2, [pc, #180]	; (800786c <xTaskIncrementTick+0x158>)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077ba:	e02e      	b.n	800781a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	3304      	adds	r3, #4
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff fcac 	bl	800711e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	3318      	adds	r3, #24
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7ff fca3 	bl	800711e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	2201      	movs	r2, #1
 80077de:	409a      	lsls	r2, r3
 80077e0:	4b23      	ldr	r3, [pc, #140]	; (8007870 <xTaskIncrementTick+0x15c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	4a22      	ldr	r2, [pc, #136]	; (8007870 <xTaskIncrementTick+0x15c>)
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4a1f      	ldr	r2, [pc, #124]	; (8007874 <xTaskIncrementTick+0x160>)
 80077f8:	441a      	add	r2, r3
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	3304      	adds	r3, #4
 80077fe:	4619      	mov	r1, r3
 8007800:	4610      	mov	r0, r2
 8007802:	f7ff fc2f 	bl	8007064 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780a:	4b1b      	ldr	r3, [pc, #108]	; (8007878 <xTaskIncrementTick+0x164>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007810:	429a      	cmp	r2, r3
 8007812:	d3b9      	bcc.n	8007788 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007814:	2301      	movs	r3, #1
 8007816:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007818:	e7b6      	b.n	8007788 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800781a:	4b17      	ldr	r3, [pc, #92]	; (8007878 <xTaskIncrementTick+0x164>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4914      	ldr	r1, [pc, #80]	; (8007874 <xTaskIncrementTick+0x160>)
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	440b      	add	r3, r1
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d907      	bls.n	8007842 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007832:	2301      	movs	r3, #1
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	e004      	b.n	8007842 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007838:	4b10      	ldr	r3, [pc, #64]	; (800787c <xTaskIncrementTick+0x168>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3301      	adds	r3, #1
 800783e:	4a0f      	ldr	r2, [pc, #60]	; (800787c <xTaskIncrementTick+0x168>)
 8007840:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007842:	4b0f      	ldr	r3, [pc, #60]	; (8007880 <xTaskIncrementTick+0x16c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800784a:	2301      	movs	r3, #1
 800784c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800784e:	697b      	ldr	r3, [r7, #20]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20000870 	.word	0x20000870
 800785c:	2000084c 	.word	0x2000084c
 8007860:	20000800 	.word	0x20000800
 8007864:	20000804 	.word	0x20000804
 8007868:	20000860 	.word	0x20000860
 800786c:	20000868 	.word	0x20000868
 8007870:	20000850 	.word	0x20000850
 8007874:	2000074c 	.word	0x2000074c
 8007878:	20000748 	.word	0x20000748
 800787c:	20000858 	.word	0x20000858
 8007880:	2000085c 	.word	0x2000085c

08007884 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800788a:	4b27      	ldr	r3, [pc, #156]	; (8007928 <vTaskSwitchContext+0xa4>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007892:	4b26      	ldr	r3, [pc, #152]	; (800792c <vTaskSwitchContext+0xa8>)
 8007894:	2201      	movs	r2, #1
 8007896:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007898:	e03f      	b.n	800791a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800789a:	4b24      	ldr	r3, [pc, #144]	; (800792c <vTaskSwitchContext+0xa8>)
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a0:	4b23      	ldr	r3, [pc, #140]	; (8007930 <vTaskSwitchContext+0xac>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	fab3 f383 	clz	r3, r3
 80078ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	f1c3 031f 	rsb	r3, r3, #31
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	491f      	ldr	r1, [pc, #124]	; (8007934 <vTaskSwitchContext+0xb0>)
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	4613      	mov	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	440b      	add	r3, r1
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10a      	bne.n	80078e0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	607b      	str	r3, [r7, #4]
}
 80078dc:	bf00      	nop
 80078de:	e7fe      	b.n	80078de <vTaskSwitchContext+0x5a>
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4a12      	ldr	r2, [pc, #72]	; (8007934 <vTaskSwitchContext+0xb0>)
 80078ec:	4413      	add	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	605a      	str	r2, [r3, #4]
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	3308      	adds	r3, #8
 8007902:	429a      	cmp	r2, r3
 8007904:	d104      	bne.n	8007910 <vTaskSwitchContext+0x8c>
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	605a      	str	r2, [r3, #4]
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	4a08      	ldr	r2, [pc, #32]	; (8007938 <vTaskSwitchContext+0xb4>)
 8007918:	6013      	str	r3, [r2, #0]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	20000870 	.word	0x20000870
 800792c:	2000085c 	.word	0x2000085c
 8007930:	20000850 	.word	0x20000850
 8007934:	2000074c 	.word	0x2000074c
 8007938:	20000748 	.word	0x20000748

0800793c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007944:	f000 f852 	bl	80079ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007948:	4b06      	ldr	r3, [pc, #24]	; (8007964 <prvIdleTask+0x28>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d9f9      	bls.n	8007944 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <prvIdleTask+0x2c>)
 8007952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007960:	e7f0      	b.n	8007944 <prvIdleTask+0x8>
 8007962:	bf00      	nop
 8007964:	2000074c 	.word	0x2000074c
 8007968:	e000ed04 	.word	0xe000ed04

0800796c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007972:	2300      	movs	r3, #0
 8007974:	607b      	str	r3, [r7, #4]
 8007976:	e00c      	b.n	8007992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4a12      	ldr	r2, [pc, #72]	; (80079cc <prvInitialiseTaskLists+0x60>)
 8007984:	4413      	add	r3, r2
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff fb3f 	bl	800700a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3301      	adds	r3, #1
 8007990:	607b      	str	r3, [r7, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b06      	cmp	r3, #6
 8007996:	d9ef      	bls.n	8007978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007998:	480d      	ldr	r0, [pc, #52]	; (80079d0 <prvInitialiseTaskLists+0x64>)
 800799a:	f7ff fb36 	bl	800700a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800799e:	480d      	ldr	r0, [pc, #52]	; (80079d4 <prvInitialiseTaskLists+0x68>)
 80079a0:	f7ff fb33 	bl	800700a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079a4:	480c      	ldr	r0, [pc, #48]	; (80079d8 <prvInitialiseTaskLists+0x6c>)
 80079a6:	f7ff fb30 	bl	800700a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079aa:	480c      	ldr	r0, [pc, #48]	; (80079dc <prvInitialiseTaskLists+0x70>)
 80079ac:	f7ff fb2d 	bl	800700a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079b0:	480b      	ldr	r0, [pc, #44]	; (80079e0 <prvInitialiseTaskLists+0x74>)
 80079b2:	f7ff fb2a 	bl	800700a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079b6:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <prvInitialiseTaskLists+0x78>)
 80079b8:	4a05      	ldr	r2, [pc, #20]	; (80079d0 <prvInitialiseTaskLists+0x64>)
 80079ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079bc:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <prvInitialiseTaskLists+0x7c>)
 80079be:	4a05      	ldr	r2, [pc, #20]	; (80079d4 <prvInitialiseTaskLists+0x68>)
 80079c0:	601a      	str	r2, [r3, #0]
}
 80079c2:	bf00      	nop
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	2000074c 	.word	0x2000074c
 80079d0:	200007d8 	.word	0x200007d8
 80079d4:	200007ec 	.word	0x200007ec
 80079d8:	20000808 	.word	0x20000808
 80079dc:	2000081c 	.word	0x2000081c
 80079e0:	20000834 	.word	0x20000834
 80079e4:	20000800 	.word	0x20000800
 80079e8:	20000804 	.word	0x20000804

080079ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079f2:	e019      	b.n	8007a28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079f4:	f000 fa0e 	bl	8007e14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f8:	4b10      	ldr	r3, [pc, #64]	; (8007a3c <prvCheckTasksWaitingTermination+0x50>)
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3304      	adds	r3, #4
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7ff fb8a 	bl	800711e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a0a:	4b0d      	ldr	r3, [pc, #52]	; (8007a40 <prvCheckTasksWaitingTermination+0x54>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	4a0b      	ldr	r2, [pc, #44]	; (8007a40 <prvCheckTasksWaitingTermination+0x54>)
 8007a12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a14:	4b0b      	ldr	r3, [pc, #44]	; (8007a44 <prvCheckTasksWaitingTermination+0x58>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	4a0a      	ldr	r2, [pc, #40]	; (8007a44 <prvCheckTasksWaitingTermination+0x58>)
 8007a1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a1e:	f000 fa29 	bl	8007e74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f810 	bl	8007a48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a28:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <prvCheckTasksWaitingTermination+0x58>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1e1      	bne.n	80079f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	2000081c 	.word	0x2000081c
 8007a40:	20000848 	.word	0x20000848
 8007a44:	20000830 	.word	0x20000830

08007a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d108      	bne.n	8007a6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 fb7e 	bl	8008160 <vPortFree>
				vPortFree( pxTCB );
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fb7b 	bl	8008160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a6a:	e018      	b.n	8007a9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d103      	bne.n	8007a7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fb72 	bl	8008160 <vPortFree>
	}
 8007a7c:	e00f      	b.n	8007a9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d00a      	beq.n	8007a9e <prvDeleteTCB+0x56>
	__asm volatile
 8007a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8c:	f383 8811 	msr	BASEPRI, r3
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	60fb      	str	r3, [r7, #12]
}
 8007a9a:	bf00      	nop
 8007a9c:	e7fe      	b.n	8007a9c <prvDeleteTCB+0x54>
	}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aae:	4b0c      	ldr	r3, [pc, #48]	; (8007ae0 <prvResetNextTaskUnblockTime+0x38>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ab8:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <prvResetNextTaskUnblockTime+0x3c>)
 8007aba:	f04f 32ff 	mov.w	r2, #4294967295
 8007abe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ac0:	e008      	b.n	8007ad4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ac2:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <prvResetNextTaskUnblockTime+0x38>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	4a04      	ldr	r2, [pc, #16]	; (8007ae4 <prvResetNextTaskUnblockTime+0x3c>)
 8007ad2:	6013      	str	r3, [r2, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	20000800 	.word	0x20000800
 8007ae4:	20000868 	.word	0x20000868

08007ae8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007af2:	4b29      	ldr	r3, [pc, #164]	; (8007b98 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007af8:	4b28      	ldr	r3, [pc, #160]	; (8007b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3304      	adds	r3, #4
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff fb0d 	bl	800711e <uxListRemove>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10b      	bne.n	8007b22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007b0a:	4b24      	ldr	r3, [pc, #144]	; (8007b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	2201      	movs	r2, #1
 8007b12:	fa02 f303 	lsl.w	r3, r2, r3
 8007b16:	43da      	mvns	r2, r3
 8007b18:	4b21      	ldr	r3, [pc, #132]	; (8007ba0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	4a20      	ldr	r2, [pc, #128]	; (8007ba0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d10a      	bne.n	8007b40 <prvAddCurrentTaskToDelayedList+0x58>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d007      	beq.n	8007b40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b30:	4b1a      	ldr	r3, [pc, #104]	; (8007b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4619      	mov	r1, r3
 8007b38:	481a      	ldr	r0, [pc, #104]	; (8007ba4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007b3a:	f7ff fa93 	bl	8007064 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b3e:	e026      	b.n	8007b8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4413      	add	r3, r2
 8007b46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b48:	4b14      	ldr	r3, [pc, #80]	; (8007b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d209      	bcs.n	8007b6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b58:	4b13      	ldr	r3, [pc, #76]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	4b0f      	ldr	r3, [pc, #60]	; (8007b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3304      	adds	r3, #4
 8007b62:	4619      	mov	r1, r3
 8007b64:	4610      	mov	r0, r2
 8007b66:	f7ff faa1 	bl	80070ac <vListInsert>
}
 8007b6a:	e010      	b.n	8007b8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b6c:	4b0f      	ldr	r3, [pc, #60]	; (8007bac <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	4b0a      	ldr	r3, [pc, #40]	; (8007b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3304      	adds	r3, #4
 8007b76:	4619      	mov	r1, r3
 8007b78:	4610      	mov	r0, r2
 8007b7a:	f7ff fa97 	bl	80070ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b7e:	4b0c      	ldr	r3, [pc, #48]	; (8007bb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d202      	bcs.n	8007b8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b88:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	6013      	str	r3, [r2, #0]
}
 8007b8e:	bf00      	nop
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	2000084c 	.word	0x2000084c
 8007b9c:	20000748 	.word	0x20000748
 8007ba0:	20000850 	.word	0x20000850
 8007ba4:	20000834 	.word	0x20000834
 8007ba8:	20000804 	.word	0x20000804
 8007bac:	20000800 	.word	0x20000800
 8007bb0:	20000868 	.word	0x20000868

08007bb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3b04      	subs	r3, #4
 8007bc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3b04      	subs	r3, #4
 8007bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f023 0201 	bic.w	r2, r3, #1
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3b04      	subs	r3, #4
 8007be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007be4:	4a0c      	ldr	r2, [pc, #48]	; (8007c18 <pxPortInitialiseStack+0x64>)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3b14      	subs	r3, #20
 8007bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3b04      	subs	r3, #4
 8007bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f06f 0202 	mvn.w	r2, #2
 8007c02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3b20      	subs	r3, #32
 8007c08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	08007c1d 	.word	0x08007c1d

08007c1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c26:	4b12      	ldr	r3, [pc, #72]	; (8007c70 <prvTaskExitError+0x54>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2e:	d00a      	beq.n	8007c46 <prvTaskExitError+0x2a>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	60fb      	str	r3, [r7, #12]
}
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <prvTaskExitError+0x28>
	__asm volatile
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	60bb      	str	r3, [r7, #8]
}
 8007c58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c5a:	bf00      	nop
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0fc      	beq.n	8007c5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c62:	bf00      	nop
 8007c64:	bf00      	nop
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	20000024 	.word	0x20000024
	...

08007c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c80:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <pxCurrentTCBConst2>)
 8007c82:	6819      	ldr	r1, [r3, #0]
 8007c84:	6808      	ldr	r0, [r1, #0]
 8007c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8a:	f380 8809 	msr	PSP, r0
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f04f 0000 	mov.w	r0, #0
 8007c96:	f380 8811 	msr	BASEPRI, r0
 8007c9a:	4770      	bx	lr
 8007c9c:	f3af 8000 	nop.w

08007ca0 <pxCurrentTCBConst2>:
 8007ca0:	20000748 	.word	0x20000748
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop

08007ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ca8:	4808      	ldr	r0, [pc, #32]	; (8007ccc <prvPortStartFirstTask+0x24>)
 8007caa:	6800      	ldr	r0, [r0, #0]
 8007cac:	6800      	ldr	r0, [r0, #0]
 8007cae:	f380 8808 	msr	MSP, r0
 8007cb2:	f04f 0000 	mov.w	r0, #0
 8007cb6:	f380 8814 	msr	CONTROL, r0
 8007cba:	b662      	cpsie	i
 8007cbc:	b661      	cpsie	f
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	df00      	svc	0
 8007cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007cca:	bf00      	nop
 8007ccc:	e000ed08 	.word	0xe000ed08

08007cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007cd6:	4b46      	ldr	r3, [pc, #280]	; (8007df0 <xPortStartScheduler+0x120>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a46      	ldr	r2, [pc, #280]	; (8007df4 <xPortStartScheduler+0x124>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d10a      	bne.n	8007cf6 <xPortStartScheduler+0x26>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	613b      	str	r3, [r7, #16]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007cf6:	4b3e      	ldr	r3, [pc, #248]	; (8007df0 <xPortStartScheduler+0x120>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a3f      	ldr	r2, [pc, #252]	; (8007df8 <xPortStartScheduler+0x128>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d10a      	bne.n	8007d16 <xPortStartScheduler+0x46>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	60fb      	str	r3, [r7, #12]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d16:	4b39      	ldr	r3, [pc, #228]	; (8007dfc <xPortStartScheduler+0x12c>)
 8007d18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	22ff      	movs	r2, #255	; 0xff
 8007d26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	4b31      	ldr	r3, [pc, #196]	; (8007e00 <xPortStartScheduler+0x130>)
 8007d3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d3e:	4b31      	ldr	r3, [pc, #196]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d40:	2207      	movs	r2, #7
 8007d42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d44:	e009      	b.n	8007d5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007d46:	4b2f      	ldr	r3, [pc, #188]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	4a2d      	ldr	r2, [pc, #180]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d62:	2b80      	cmp	r3, #128	; 0x80
 8007d64:	d0ef      	beq.n	8007d46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d66:	4b27      	ldr	r3, [pc, #156]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f1c3 0307 	rsb	r3, r3, #7
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	d00a      	beq.n	8007d88 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	60bb      	str	r3, [r7, #8]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d88:	4b1e      	ldr	r3, [pc, #120]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	021b      	lsls	r3, r3, #8
 8007d8e:	4a1d      	ldr	r2, [pc, #116]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d92:	4b1c      	ldr	r3, [pc, #112]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d9a:	4a1a      	ldr	r2, [pc, #104]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007da6:	4b18      	ldr	r3, [pc, #96]	; (8007e08 <xPortStartScheduler+0x138>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a17      	ldr	r2, [pc, #92]	; (8007e08 <xPortStartScheduler+0x138>)
 8007dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007db0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <xPortStartScheduler+0x138>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a14      	ldr	r2, [pc, #80]	; (8007e08 <xPortStartScheduler+0x138>)
 8007db8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007dbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007dbe:	f000 f8dd 	bl	8007f7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007dc2:	4b12      	ldr	r3, [pc, #72]	; (8007e0c <xPortStartScheduler+0x13c>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007dc8:	f000 f8fc 	bl	8007fc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007dcc:	4b10      	ldr	r3, [pc, #64]	; (8007e10 <xPortStartScheduler+0x140>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a0f      	ldr	r2, [pc, #60]	; (8007e10 <xPortStartScheduler+0x140>)
 8007dd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007dd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007dd8:	f7ff ff66 	bl	8007ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ddc:	f7ff fd52 	bl	8007884 <vTaskSwitchContext>
	prvTaskExitError();
 8007de0:	f7ff ff1c 	bl	8007c1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	e000ed00 	.word	0xe000ed00
 8007df4:	410fc271 	.word	0x410fc271
 8007df8:	410fc270 	.word	0x410fc270
 8007dfc:	e000e400 	.word	0xe000e400
 8007e00:	20000874 	.word	0x20000874
 8007e04:	20000878 	.word	0x20000878
 8007e08:	e000ed20 	.word	0xe000ed20
 8007e0c:	20000024 	.word	0x20000024
 8007e10:	e000ef34 	.word	0xe000ef34

08007e14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	607b      	str	r3, [r7, #4]
}
 8007e2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e2e:	4b0f      	ldr	r3, [pc, #60]	; (8007e6c <vPortEnterCritical+0x58>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3301      	adds	r3, #1
 8007e34:	4a0d      	ldr	r2, [pc, #52]	; (8007e6c <vPortEnterCritical+0x58>)
 8007e36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e38:	4b0c      	ldr	r3, [pc, #48]	; (8007e6c <vPortEnterCritical+0x58>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d10f      	bne.n	8007e60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e40:	4b0b      	ldr	r3, [pc, #44]	; (8007e70 <vPortEnterCritical+0x5c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <vPortEnterCritical+0x4c>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	603b      	str	r3, [r7, #0]
}
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <vPortEnterCritical+0x4a>
	}
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	20000024 	.word	0x20000024
 8007e70:	e000ed04 	.word	0xe000ed04

08007e74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e7a:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <vPortExitCritical+0x50>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10a      	bne.n	8007e98 <vPortExitCritical+0x24>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	607b      	str	r3, [r7, #4]
}
 8007e94:	bf00      	nop
 8007e96:	e7fe      	b.n	8007e96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e98:	4b0a      	ldr	r3, [pc, #40]	; (8007ec4 <vPortExitCritical+0x50>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	4a09      	ldr	r2, [pc, #36]	; (8007ec4 <vPortExitCritical+0x50>)
 8007ea0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ea2:	4b08      	ldr	r3, [pc, #32]	; (8007ec4 <vPortExitCritical+0x50>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d105      	bne.n	8007eb6 <vPortExitCritical+0x42>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007eb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	20000024 	.word	0x20000024
	...

08007ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ed0:	f3ef 8009 	mrs	r0, PSP
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <pxCurrentTCBConst>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	f01e 0f10 	tst.w	lr, #16
 8007ee0:	bf08      	it	eq
 8007ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eea:	6010      	str	r0, [r2, #0]
 8007eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ef4:	f380 8811 	msr	BASEPRI, r0
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f7ff fcc0 	bl	8007884 <vTaskSwitchContext>
 8007f04:	f04f 0000 	mov.w	r0, #0
 8007f08:	f380 8811 	msr	BASEPRI, r0
 8007f0c:	bc09      	pop	{r0, r3}
 8007f0e:	6819      	ldr	r1, [r3, #0]
 8007f10:	6808      	ldr	r0, [r1, #0]
 8007f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f16:	f01e 0f10 	tst.w	lr, #16
 8007f1a:	bf08      	it	eq
 8007f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f20:	f380 8809 	msr	PSP, r0
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	f3af 8000 	nop.w

08007f30 <pxCurrentTCBConst>:
 8007f30:	20000748 	.word	0x20000748
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop

08007f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	607b      	str	r3, [r7, #4]
}
 8007f50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f52:	f7ff fbdf 	bl	8007714 <xTaskIncrementTick>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f5c:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <SysTick_Handler+0x40>)
 8007f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	2300      	movs	r3, #0
 8007f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	f383 8811 	msr	BASEPRI, r3
}
 8007f6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f80:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <vPortSetupTimerInterrupt+0x34>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f86:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <vPortSetupTimerInterrupt+0x38>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <vPortSetupTimerInterrupt+0x3c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a0a      	ldr	r2, [pc, #40]	; (8007fbc <vPortSetupTimerInterrupt+0x40>)
 8007f92:	fba2 2303 	umull	r2, r3, r2, r3
 8007f96:	099b      	lsrs	r3, r3, #6
 8007f98:	4a09      	ldr	r2, [pc, #36]	; (8007fc0 <vPortSetupTimerInterrupt+0x44>)
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f9e:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <vPortSetupTimerInterrupt+0x34>)
 8007fa0:	2207      	movs	r2, #7
 8007fa2:	601a      	str	r2, [r3, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	e000e010 	.word	0xe000e010
 8007fb4:	e000e018 	.word	0xe000e018
 8007fb8:	20000018 	.word	0x20000018
 8007fbc:	10624dd3 	.word	0x10624dd3
 8007fc0:	e000e014 	.word	0xe000e014

08007fc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007fc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007fd4 <vPortEnableVFP+0x10>
 8007fc8:	6801      	ldr	r1, [r0, #0]
 8007fca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fce:	6001      	str	r1, [r0, #0]
 8007fd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007fd2:	bf00      	nop
 8007fd4:	e000ed88 	.word	0xe000ed88

08007fd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	; 0x28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fe4:	f7ff faec 	bl	80075c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fe8:	4b58      	ldr	r3, [pc, #352]	; (800814c <pvPortMalloc+0x174>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ff0:	f000 f910 	bl	8008214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ff4:	4b56      	ldr	r3, [pc, #344]	; (8008150 <pvPortMalloc+0x178>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f040 808e 	bne.w	800811e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01d      	beq.n	8008044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008008:	2208      	movs	r2, #8
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4413      	add	r3, r2
 800800e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	2b00      	cmp	r3, #0
 8008018:	d014      	beq.n	8008044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f023 0307 	bic.w	r3, r3, #7
 8008020:	3308      	adds	r3, #8
 8008022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <pvPortMalloc+0x6c>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	617b      	str	r3, [r7, #20]
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d069      	beq.n	800811e <pvPortMalloc+0x146>
 800804a:	4b42      	ldr	r3, [pc, #264]	; (8008154 <pvPortMalloc+0x17c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d864      	bhi.n	800811e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008054:	4b40      	ldr	r3, [pc, #256]	; (8008158 <pvPortMalloc+0x180>)
 8008056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008058:	4b3f      	ldr	r3, [pc, #252]	; (8008158 <pvPortMalloc+0x180>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800805e:	e004      	b.n	800806a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	429a      	cmp	r2, r3
 8008072:	d903      	bls.n	800807c <pvPortMalloc+0xa4>
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1f1      	bne.n	8008060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800807c:	4b33      	ldr	r3, [pc, #204]	; (800814c <pvPortMalloc+0x174>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008082:	429a      	cmp	r2, r3
 8008084:	d04b      	beq.n	800811e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2208      	movs	r2, #8
 800808c:	4413      	add	r3, r2
 800808e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	2308      	movs	r3, #8
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d91f      	bls.n	80080e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4413      	add	r3, r2
 80080ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <pvPortMalloc+0xf8>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	613b      	str	r3, [r7, #16]
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	1ad2      	subs	r2, r2, r3
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080e2:	69b8      	ldr	r0, [r7, #24]
 80080e4:	f000 f8f8 	bl	80082d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080e8:	4b1a      	ldr	r3, [pc, #104]	; (8008154 <pvPortMalloc+0x17c>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	4a18      	ldr	r2, [pc, #96]	; (8008154 <pvPortMalloc+0x17c>)
 80080f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080f6:	4b17      	ldr	r3, [pc, #92]	; (8008154 <pvPortMalloc+0x17c>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4b18      	ldr	r3, [pc, #96]	; (800815c <pvPortMalloc+0x184>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d203      	bcs.n	800810a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008102:	4b14      	ldr	r3, [pc, #80]	; (8008154 <pvPortMalloc+0x17c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a15      	ldr	r2, [pc, #84]	; (800815c <pvPortMalloc+0x184>)
 8008108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	4b10      	ldr	r3, [pc, #64]	; (8008150 <pvPortMalloc+0x178>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	431a      	orrs	r2, r3
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800811e:	f7ff fa5d 	bl	80075dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <pvPortMalloc+0x16a>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60fb      	str	r3, [r7, #12]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <pvPortMalloc+0x168>
	return pvReturn;
 8008142:	69fb      	ldr	r3, [r7, #28]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3728      	adds	r7, #40	; 0x28
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20004484 	.word	0x20004484
 8008150:	20004490 	.word	0x20004490
 8008154:	20004488 	.word	0x20004488
 8008158:	2000447c 	.word	0x2000447c
 800815c:	2000448c 	.word	0x2000448c

08008160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d048      	beq.n	8008204 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008172:	2308      	movs	r3, #8
 8008174:	425b      	negs	r3, r3
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	4413      	add	r3, r2
 800817a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	4b21      	ldr	r3, [pc, #132]	; (800820c <vPortFree+0xac>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4013      	ands	r3, r2
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10a      	bne.n	80081a4 <vPortFree+0x44>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	60fb      	str	r3, [r7, #12]
}
 80081a0:	bf00      	nop
 80081a2:	e7fe      	b.n	80081a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00a      	beq.n	80081c2 <vPortFree+0x62>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	60bb      	str	r3, [r7, #8]
}
 80081be:	bf00      	nop
 80081c0:	e7fe      	b.n	80081c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	4b11      	ldr	r3, [pc, #68]	; (800820c <vPortFree+0xac>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4013      	ands	r3, r2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d019      	beq.n	8008204 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d115      	bne.n	8008204 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	4b0b      	ldr	r3, [pc, #44]	; (800820c <vPortFree+0xac>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	43db      	mvns	r3, r3
 80081e2:	401a      	ands	r2, r3
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081e8:	f7ff f9ea 	bl	80075c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <vPortFree+0xb0>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4413      	add	r3, r2
 80081f6:	4a06      	ldr	r2, [pc, #24]	; (8008210 <vPortFree+0xb0>)
 80081f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081fa:	6938      	ldr	r0, [r7, #16]
 80081fc:	f000 f86c 	bl	80082d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008200:	f7ff f9ec 	bl	80075dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008204:	bf00      	nop
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	20004490 	.word	0x20004490
 8008210:	20004488 	.word	0x20004488

08008214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800821a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800821e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008220:	4b27      	ldr	r3, [pc, #156]	; (80082c0 <prvHeapInit+0xac>)
 8008222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00c      	beq.n	8008248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3307      	adds	r3, #7
 8008232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 0307 	bic.w	r3, r3, #7
 800823a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	4a1f      	ldr	r2, [pc, #124]	; (80082c0 <prvHeapInit+0xac>)
 8008244:	4413      	add	r3, r2
 8008246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800824c:	4a1d      	ldr	r2, [pc, #116]	; (80082c4 <prvHeapInit+0xb0>)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008252:	4b1c      	ldr	r3, [pc, #112]	; (80082c4 <prvHeapInit+0xb0>)
 8008254:	2200      	movs	r2, #0
 8008256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	4413      	add	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008260:	2208      	movs	r2, #8
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0307 	bic.w	r3, r3, #7
 800826e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4a15      	ldr	r2, [pc, #84]	; (80082c8 <prvHeapInit+0xb4>)
 8008274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008276:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <prvHeapInit+0xb4>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2200      	movs	r2, #0
 800827c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800827e:	4b12      	ldr	r3, [pc, #72]	; (80082c8 <prvHeapInit+0xb4>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	1ad2      	subs	r2, r2, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008294:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <prvHeapInit+0xb4>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	4a0a      	ldr	r2, [pc, #40]	; (80082cc <prvHeapInit+0xb8>)
 80082a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <prvHeapInit+0xbc>)
 80082aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082ac:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <prvHeapInit+0xc0>)
 80082ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082b2:	601a      	str	r2, [r3, #0]
}
 80082b4:	bf00      	nop
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	2000087c 	.word	0x2000087c
 80082c4:	2000447c 	.word	0x2000447c
 80082c8:	20004484 	.word	0x20004484
 80082cc:	2000448c 	.word	0x2000448c
 80082d0:	20004488 	.word	0x20004488
 80082d4:	20004490 	.word	0x20004490

080082d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082e0:	4b28      	ldr	r3, [pc, #160]	; (8008384 <prvInsertBlockIntoFreeList+0xac>)
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	e002      	b.n	80082ec <prvInsertBlockIntoFreeList+0x14>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60fb      	str	r3, [r7, #12]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d8f7      	bhi.n	80082e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	4413      	add	r3, r2
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	429a      	cmp	r2, r3
 8008306:	d108      	bne.n	800831a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	441a      	add	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	441a      	add	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d118      	bne.n	8008360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4b15      	ldr	r3, [pc, #84]	; (8008388 <prvInsertBlockIntoFreeList+0xb0>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d00d      	beq.n	8008356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	441a      	add	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	e008      	b.n	8008368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008356:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <prvInsertBlockIntoFreeList+0xb0>)
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	e003      	b.n	8008368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	429a      	cmp	r2, r3
 800836e:	d002      	beq.n	8008376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008376:	bf00      	nop
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	2000447c 	.word	0x2000447c
 8008388:	20004484 	.word	0x20004484

0800838c <__errno>:
 800838c:	4b01      	ldr	r3, [pc, #4]	; (8008394 <__errno+0x8>)
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	20000028 	.word	0x20000028

08008398 <__libc_init_array>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	4d0d      	ldr	r5, [pc, #52]	; (80083d0 <__libc_init_array+0x38>)
 800839c:	4c0d      	ldr	r4, [pc, #52]	; (80083d4 <__libc_init_array+0x3c>)
 800839e:	1b64      	subs	r4, r4, r5
 80083a0:	10a4      	asrs	r4, r4, #2
 80083a2:	2600      	movs	r6, #0
 80083a4:	42a6      	cmp	r6, r4
 80083a6:	d109      	bne.n	80083bc <__libc_init_array+0x24>
 80083a8:	4d0b      	ldr	r5, [pc, #44]	; (80083d8 <__libc_init_array+0x40>)
 80083aa:	4c0c      	ldr	r4, [pc, #48]	; (80083dc <__libc_init_array+0x44>)
 80083ac:	f000 fc8e 	bl	8008ccc <_init>
 80083b0:	1b64      	subs	r4, r4, r5
 80083b2:	10a4      	asrs	r4, r4, #2
 80083b4:	2600      	movs	r6, #0
 80083b6:	42a6      	cmp	r6, r4
 80083b8:	d105      	bne.n	80083c6 <__libc_init_array+0x2e>
 80083ba:	bd70      	pop	{r4, r5, r6, pc}
 80083bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c0:	4798      	blx	r3
 80083c2:	3601      	adds	r6, #1
 80083c4:	e7ee      	b.n	80083a4 <__libc_init_array+0xc>
 80083c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ca:	4798      	blx	r3
 80083cc:	3601      	adds	r6, #1
 80083ce:	e7f2      	b.n	80083b6 <__libc_init_array+0x1e>
 80083d0:	08008f58 	.word	0x08008f58
 80083d4:	08008f58 	.word	0x08008f58
 80083d8:	08008f58 	.word	0x08008f58
 80083dc:	08008f5c 	.word	0x08008f5c

080083e0 <memcpy>:
 80083e0:	440a      	add	r2, r1
 80083e2:	4291      	cmp	r1, r2
 80083e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083e8:	d100      	bne.n	80083ec <memcpy+0xc>
 80083ea:	4770      	bx	lr
 80083ec:	b510      	push	{r4, lr}
 80083ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f6:	4291      	cmp	r1, r2
 80083f8:	d1f9      	bne.n	80083ee <memcpy+0xe>
 80083fa:	bd10      	pop	{r4, pc}

080083fc <memset>:
 80083fc:	4402      	add	r2, r0
 80083fe:	4603      	mov	r3, r0
 8008400:	4293      	cmp	r3, r2
 8008402:	d100      	bne.n	8008406 <memset+0xa>
 8008404:	4770      	bx	lr
 8008406:	f803 1b01 	strb.w	r1, [r3], #1
 800840a:	e7f9      	b.n	8008400 <memset+0x4>

0800840c <siprintf>:
 800840c:	b40e      	push	{r1, r2, r3}
 800840e:	b500      	push	{lr}
 8008410:	b09c      	sub	sp, #112	; 0x70
 8008412:	ab1d      	add	r3, sp, #116	; 0x74
 8008414:	9002      	str	r0, [sp, #8]
 8008416:	9006      	str	r0, [sp, #24]
 8008418:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800841c:	4809      	ldr	r0, [pc, #36]	; (8008444 <siprintf+0x38>)
 800841e:	9107      	str	r1, [sp, #28]
 8008420:	9104      	str	r1, [sp, #16]
 8008422:	4909      	ldr	r1, [pc, #36]	; (8008448 <siprintf+0x3c>)
 8008424:	f853 2b04 	ldr.w	r2, [r3], #4
 8008428:	9105      	str	r1, [sp, #20]
 800842a:	6800      	ldr	r0, [r0, #0]
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	a902      	add	r1, sp, #8
 8008430:	f000 f868 	bl	8008504 <_svfiprintf_r>
 8008434:	9b02      	ldr	r3, [sp, #8]
 8008436:	2200      	movs	r2, #0
 8008438:	701a      	strb	r2, [r3, #0]
 800843a:	b01c      	add	sp, #112	; 0x70
 800843c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008440:	b003      	add	sp, #12
 8008442:	4770      	bx	lr
 8008444:	20000028 	.word	0x20000028
 8008448:	ffff0208 	.word	0xffff0208

0800844c <__ssputs_r>:
 800844c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008450:	688e      	ldr	r6, [r1, #8]
 8008452:	429e      	cmp	r6, r3
 8008454:	4682      	mov	sl, r0
 8008456:	460c      	mov	r4, r1
 8008458:	4690      	mov	r8, r2
 800845a:	461f      	mov	r7, r3
 800845c:	d838      	bhi.n	80084d0 <__ssputs_r+0x84>
 800845e:	898a      	ldrh	r2, [r1, #12]
 8008460:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008464:	d032      	beq.n	80084cc <__ssputs_r+0x80>
 8008466:	6825      	ldr	r5, [r4, #0]
 8008468:	6909      	ldr	r1, [r1, #16]
 800846a:	eba5 0901 	sub.w	r9, r5, r1
 800846e:	6965      	ldr	r5, [r4, #20]
 8008470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008474:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008478:	3301      	adds	r3, #1
 800847a:	444b      	add	r3, r9
 800847c:	106d      	asrs	r5, r5, #1
 800847e:	429d      	cmp	r5, r3
 8008480:	bf38      	it	cc
 8008482:	461d      	movcc	r5, r3
 8008484:	0553      	lsls	r3, r2, #21
 8008486:	d531      	bpl.n	80084ec <__ssputs_r+0xa0>
 8008488:	4629      	mov	r1, r5
 800848a:	f000 fb55 	bl	8008b38 <_malloc_r>
 800848e:	4606      	mov	r6, r0
 8008490:	b950      	cbnz	r0, 80084a8 <__ssputs_r+0x5c>
 8008492:	230c      	movs	r3, #12
 8008494:	f8ca 3000 	str.w	r3, [sl]
 8008498:	89a3      	ldrh	r3, [r4, #12]
 800849a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800849e:	81a3      	strh	r3, [r4, #12]
 80084a0:	f04f 30ff 	mov.w	r0, #4294967295
 80084a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a8:	6921      	ldr	r1, [r4, #16]
 80084aa:	464a      	mov	r2, r9
 80084ac:	f7ff ff98 	bl	80083e0 <memcpy>
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ba:	81a3      	strh	r3, [r4, #12]
 80084bc:	6126      	str	r6, [r4, #16]
 80084be:	6165      	str	r5, [r4, #20]
 80084c0:	444e      	add	r6, r9
 80084c2:	eba5 0509 	sub.w	r5, r5, r9
 80084c6:	6026      	str	r6, [r4, #0]
 80084c8:	60a5      	str	r5, [r4, #8]
 80084ca:	463e      	mov	r6, r7
 80084cc:	42be      	cmp	r6, r7
 80084ce:	d900      	bls.n	80084d2 <__ssputs_r+0x86>
 80084d0:	463e      	mov	r6, r7
 80084d2:	6820      	ldr	r0, [r4, #0]
 80084d4:	4632      	mov	r2, r6
 80084d6:	4641      	mov	r1, r8
 80084d8:	f000 faa8 	bl	8008a2c <memmove>
 80084dc:	68a3      	ldr	r3, [r4, #8]
 80084de:	1b9b      	subs	r3, r3, r6
 80084e0:	60a3      	str	r3, [r4, #8]
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	4433      	add	r3, r6
 80084e6:	6023      	str	r3, [r4, #0]
 80084e8:	2000      	movs	r0, #0
 80084ea:	e7db      	b.n	80084a4 <__ssputs_r+0x58>
 80084ec:	462a      	mov	r2, r5
 80084ee:	f000 fb97 	bl	8008c20 <_realloc_r>
 80084f2:	4606      	mov	r6, r0
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d1e1      	bne.n	80084bc <__ssputs_r+0x70>
 80084f8:	6921      	ldr	r1, [r4, #16]
 80084fa:	4650      	mov	r0, sl
 80084fc:	f000 fab0 	bl	8008a60 <_free_r>
 8008500:	e7c7      	b.n	8008492 <__ssputs_r+0x46>
	...

08008504 <_svfiprintf_r>:
 8008504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008508:	4698      	mov	r8, r3
 800850a:	898b      	ldrh	r3, [r1, #12]
 800850c:	061b      	lsls	r3, r3, #24
 800850e:	b09d      	sub	sp, #116	; 0x74
 8008510:	4607      	mov	r7, r0
 8008512:	460d      	mov	r5, r1
 8008514:	4614      	mov	r4, r2
 8008516:	d50e      	bpl.n	8008536 <_svfiprintf_r+0x32>
 8008518:	690b      	ldr	r3, [r1, #16]
 800851a:	b963      	cbnz	r3, 8008536 <_svfiprintf_r+0x32>
 800851c:	2140      	movs	r1, #64	; 0x40
 800851e:	f000 fb0b 	bl	8008b38 <_malloc_r>
 8008522:	6028      	str	r0, [r5, #0]
 8008524:	6128      	str	r0, [r5, #16]
 8008526:	b920      	cbnz	r0, 8008532 <_svfiprintf_r+0x2e>
 8008528:	230c      	movs	r3, #12
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	e0d1      	b.n	80086d6 <_svfiprintf_r+0x1d2>
 8008532:	2340      	movs	r3, #64	; 0x40
 8008534:	616b      	str	r3, [r5, #20]
 8008536:	2300      	movs	r3, #0
 8008538:	9309      	str	r3, [sp, #36]	; 0x24
 800853a:	2320      	movs	r3, #32
 800853c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008540:	f8cd 800c 	str.w	r8, [sp, #12]
 8008544:	2330      	movs	r3, #48	; 0x30
 8008546:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086f0 <_svfiprintf_r+0x1ec>
 800854a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800854e:	f04f 0901 	mov.w	r9, #1
 8008552:	4623      	mov	r3, r4
 8008554:	469a      	mov	sl, r3
 8008556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800855a:	b10a      	cbz	r2, 8008560 <_svfiprintf_r+0x5c>
 800855c:	2a25      	cmp	r2, #37	; 0x25
 800855e:	d1f9      	bne.n	8008554 <_svfiprintf_r+0x50>
 8008560:	ebba 0b04 	subs.w	fp, sl, r4
 8008564:	d00b      	beq.n	800857e <_svfiprintf_r+0x7a>
 8008566:	465b      	mov	r3, fp
 8008568:	4622      	mov	r2, r4
 800856a:	4629      	mov	r1, r5
 800856c:	4638      	mov	r0, r7
 800856e:	f7ff ff6d 	bl	800844c <__ssputs_r>
 8008572:	3001      	adds	r0, #1
 8008574:	f000 80aa 	beq.w	80086cc <_svfiprintf_r+0x1c8>
 8008578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800857a:	445a      	add	r2, fp
 800857c:	9209      	str	r2, [sp, #36]	; 0x24
 800857e:	f89a 3000 	ldrb.w	r3, [sl]
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 80a2 	beq.w	80086cc <_svfiprintf_r+0x1c8>
 8008588:	2300      	movs	r3, #0
 800858a:	f04f 32ff 	mov.w	r2, #4294967295
 800858e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008592:	f10a 0a01 	add.w	sl, sl, #1
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	9307      	str	r3, [sp, #28]
 800859a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800859e:	931a      	str	r3, [sp, #104]	; 0x68
 80085a0:	4654      	mov	r4, sl
 80085a2:	2205      	movs	r2, #5
 80085a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a8:	4851      	ldr	r0, [pc, #324]	; (80086f0 <_svfiprintf_r+0x1ec>)
 80085aa:	f7f7 fe21 	bl	80001f0 <memchr>
 80085ae:	9a04      	ldr	r2, [sp, #16]
 80085b0:	b9d8      	cbnz	r0, 80085ea <_svfiprintf_r+0xe6>
 80085b2:	06d0      	lsls	r0, r2, #27
 80085b4:	bf44      	itt	mi
 80085b6:	2320      	movmi	r3, #32
 80085b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085bc:	0711      	lsls	r1, r2, #28
 80085be:	bf44      	itt	mi
 80085c0:	232b      	movmi	r3, #43	; 0x2b
 80085c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c6:	f89a 3000 	ldrb.w	r3, [sl]
 80085ca:	2b2a      	cmp	r3, #42	; 0x2a
 80085cc:	d015      	beq.n	80085fa <_svfiprintf_r+0xf6>
 80085ce:	9a07      	ldr	r2, [sp, #28]
 80085d0:	4654      	mov	r4, sl
 80085d2:	2000      	movs	r0, #0
 80085d4:	f04f 0c0a 	mov.w	ip, #10
 80085d8:	4621      	mov	r1, r4
 80085da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085de:	3b30      	subs	r3, #48	; 0x30
 80085e0:	2b09      	cmp	r3, #9
 80085e2:	d94e      	bls.n	8008682 <_svfiprintf_r+0x17e>
 80085e4:	b1b0      	cbz	r0, 8008614 <_svfiprintf_r+0x110>
 80085e6:	9207      	str	r2, [sp, #28]
 80085e8:	e014      	b.n	8008614 <_svfiprintf_r+0x110>
 80085ea:	eba0 0308 	sub.w	r3, r0, r8
 80085ee:	fa09 f303 	lsl.w	r3, r9, r3
 80085f2:	4313      	orrs	r3, r2
 80085f4:	9304      	str	r3, [sp, #16]
 80085f6:	46a2      	mov	sl, r4
 80085f8:	e7d2      	b.n	80085a0 <_svfiprintf_r+0x9c>
 80085fa:	9b03      	ldr	r3, [sp, #12]
 80085fc:	1d19      	adds	r1, r3, #4
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	9103      	str	r1, [sp, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	bfbb      	ittet	lt
 8008606:	425b      	neglt	r3, r3
 8008608:	f042 0202 	orrlt.w	r2, r2, #2
 800860c:	9307      	strge	r3, [sp, #28]
 800860e:	9307      	strlt	r3, [sp, #28]
 8008610:	bfb8      	it	lt
 8008612:	9204      	strlt	r2, [sp, #16]
 8008614:	7823      	ldrb	r3, [r4, #0]
 8008616:	2b2e      	cmp	r3, #46	; 0x2e
 8008618:	d10c      	bne.n	8008634 <_svfiprintf_r+0x130>
 800861a:	7863      	ldrb	r3, [r4, #1]
 800861c:	2b2a      	cmp	r3, #42	; 0x2a
 800861e:	d135      	bne.n	800868c <_svfiprintf_r+0x188>
 8008620:	9b03      	ldr	r3, [sp, #12]
 8008622:	1d1a      	adds	r2, r3, #4
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	9203      	str	r2, [sp, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	bfb8      	it	lt
 800862c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008630:	3402      	adds	r4, #2
 8008632:	9305      	str	r3, [sp, #20]
 8008634:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008700 <_svfiprintf_r+0x1fc>
 8008638:	7821      	ldrb	r1, [r4, #0]
 800863a:	2203      	movs	r2, #3
 800863c:	4650      	mov	r0, sl
 800863e:	f7f7 fdd7 	bl	80001f0 <memchr>
 8008642:	b140      	cbz	r0, 8008656 <_svfiprintf_r+0x152>
 8008644:	2340      	movs	r3, #64	; 0x40
 8008646:	eba0 000a 	sub.w	r0, r0, sl
 800864a:	fa03 f000 	lsl.w	r0, r3, r0
 800864e:	9b04      	ldr	r3, [sp, #16]
 8008650:	4303      	orrs	r3, r0
 8008652:	3401      	adds	r4, #1
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865a:	4826      	ldr	r0, [pc, #152]	; (80086f4 <_svfiprintf_r+0x1f0>)
 800865c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008660:	2206      	movs	r2, #6
 8008662:	f7f7 fdc5 	bl	80001f0 <memchr>
 8008666:	2800      	cmp	r0, #0
 8008668:	d038      	beq.n	80086dc <_svfiprintf_r+0x1d8>
 800866a:	4b23      	ldr	r3, [pc, #140]	; (80086f8 <_svfiprintf_r+0x1f4>)
 800866c:	bb1b      	cbnz	r3, 80086b6 <_svfiprintf_r+0x1b2>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	3307      	adds	r3, #7
 8008672:	f023 0307 	bic.w	r3, r3, #7
 8008676:	3308      	adds	r3, #8
 8008678:	9303      	str	r3, [sp, #12]
 800867a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800867c:	4433      	add	r3, r6
 800867e:	9309      	str	r3, [sp, #36]	; 0x24
 8008680:	e767      	b.n	8008552 <_svfiprintf_r+0x4e>
 8008682:	fb0c 3202 	mla	r2, ip, r2, r3
 8008686:	460c      	mov	r4, r1
 8008688:	2001      	movs	r0, #1
 800868a:	e7a5      	b.n	80085d8 <_svfiprintf_r+0xd4>
 800868c:	2300      	movs	r3, #0
 800868e:	3401      	adds	r4, #1
 8008690:	9305      	str	r3, [sp, #20]
 8008692:	4619      	mov	r1, r3
 8008694:	f04f 0c0a 	mov.w	ip, #10
 8008698:	4620      	mov	r0, r4
 800869a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800869e:	3a30      	subs	r2, #48	; 0x30
 80086a0:	2a09      	cmp	r2, #9
 80086a2:	d903      	bls.n	80086ac <_svfiprintf_r+0x1a8>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d0c5      	beq.n	8008634 <_svfiprintf_r+0x130>
 80086a8:	9105      	str	r1, [sp, #20]
 80086aa:	e7c3      	b.n	8008634 <_svfiprintf_r+0x130>
 80086ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b0:	4604      	mov	r4, r0
 80086b2:	2301      	movs	r3, #1
 80086b4:	e7f0      	b.n	8008698 <_svfiprintf_r+0x194>
 80086b6:	ab03      	add	r3, sp, #12
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	462a      	mov	r2, r5
 80086bc:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <_svfiprintf_r+0x1f8>)
 80086be:	a904      	add	r1, sp, #16
 80086c0:	4638      	mov	r0, r7
 80086c2:	f3af 8000 	nop.w
 80086c6:	1c42      	adds	r2, r0, #1
 80086c8:	4606      	mov	r6, r0
 80086ca:	d1d6      	bne.n	800867a <_svfiprintf_r+0x176>
 80086cc:	89ab      	ldrh	r3, [r5, #12]
 80086ce:	065b      	lsls	r3, r3, #25
 80086d0:	f53f af2c 	bmi.w	800852c <_svfiprintf_r+0x28>
 80086d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086d6:	b01d      	add	sp, #116	; 0x74
 80086d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086dc:	ab03      	add	r3, sp, #12
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	462a      	mov	r2, r5
 80086e2:	4b06      	ldr	r3, [pc, #24]	; (80086fc <_svfiprintf_r+0x1f8>)
 80086e4:	a904      	add	r1, sp, #16
 80086e6:	4638      	mov	r0, r7
 80086e8:	f000 f87a 	bl	80087e0 <_printf_i>
 80086ec:	e7eb      	b.n	80086c6 <_svfiprintf_r+0x1c2>
 80086ee:	bf00      	nop
 80086f0:	08008f1c 	.word	0x08008f1c
 80086f4:	08008f26 	.word	0x08008f26
 80086f8:	00000000 	.word	0x00000000
 80086fc:	0800844d 	.word	0x0800844d
 8008700:	08008f22 	.word	0x08008f22

08008704 <_printf_common>:
 8008704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008708:	4616      	mov	r6, r2
 800870a:	4699      	mov	r9, r3
 800870c:	688a      	ldr	r2, [r1, #8]
 800870e:	690b      	ldr	r3, [r1, #16]
 8008710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008714:	4293      	cmp	r3, r2
 8008716:	bfb8      	it	lt
 8008718:	4613      	movlt	r3, r2
 800871a:	6033      	str	r3, [r6, #0]
 800871c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008720:	4607      	mov	r7, r0
 8008722:	460c      	mov	r4, r1
 8008724:	b10a      	cbz	r2, 800872a <_printf_common+0x26>
 8008726:	3301      	adds	r3, #1
 8008728:	6033      	str	r3, [r6, #0]
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	0699      	lsls	r1, r3, #26
 800872e:	bf42      	ittt	mi
 8008730:	6833      	ldrmi	r3, [r6, #0]
 8008732:	3302      	addmi	r3, #2
 8008734:	6033      	strmi	r3, [r6, #0]
 8008736:	6825      	ldr	r5, [r4, #0]
 8008738:	f015 0506 	ands.w	r5, r5, #6
 800873c:	d106      	bne.n	800874c <_printf_common+0x48>
 800873e:	f104 0a19 	add.w	sl, r4, #25
 8008742:	68e3      	ldr	r3, [r4, #12]
 8008744:	6832      	ldr	r2, [r6, #0]
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	42ab      	cmp	r3, r5
 800874a:	dc26      	bgt.n	800879a <_printf_common+0x96>
 800874c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008750:	1e13      	subs	r3, r2, #0
 8008752:	6822      	ldr	r2, [r4, #0]
 8008754:	bf18      	it	ne
 8008756:	2301      	movne	r3, #1
 8008758:	0692      	lsls	r2, r2, #26
 800875a:	d42b      	bmi.n	80087b4 <_printf_common+0xb0>
 800875c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008760:	4649      	mov	r1, r9
 8008762:	4638      	mov	r0, r7
 8008764:	47c0      	blx	r8
 8008766:	3001      	adds	r0, #1
 8008768:	d01e      	beq.n	80087a8 <_printf_common+0xa4>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	68e5      	ldr	r5, [r4, #12]
 800876e:	6832      	ldr	r2, [r6, #0]
 8008770:	f003 0306 	and.w	r3, r3, #6
 8008774:	2b04      	cmp	r3, #4
 8008776:	bf08      	it	eq
 8008778:	1aad      	subeq	r5, r5, r2
 800877a:	68a3      	ldr	r3, [r4, #8]
 800877c:	6922      	ldr	r2, [r4, #16]
 800877e:	bf0c      	ite	eq
 8008780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008784:	2500      	movne	r5, #0
 8008786:	4293      	cmp	r3, r2
 8008788:	bfc4      	itt	gt
 800878a:	1a9b      	subgt	r3, r3, r2
 800878c:	18ed      	addgt	r5, r5, r3
 800878e:	2600      	movs	r6, #0
 8008790:	341a      	adds	r4, #26
 8008792:	42b5      	cmp	r5, r6
 8008794:	d11a      	bne.n	80087cc <_printf_common+0xc8>
 8008796:	2000      	movs	r0, #0
 8008798:	e008      	b.n	80087ac <_printf_common+0xa8>
 800879a:	2301      	movs	r3, #1
 800879c:	4652      	mov	r2, sl
 800879e:	4649      	mov	r1, r9
 80087a0:	4638      	mov	r0, r7
 80087a2:	47c0      	blx	r8
 80087a4:	3001      	adds	r0, #1
 80087a6:	d103      	bne.n	80087b0 <_printf_common+0xac>
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b0:	3501      	adds	r5, #1
 80087b2:	e7c6      	b.n	8008742 <_printf_common+0x3e>
 80087b4:	18e1      	adds	r1, r4, r3
 80087b6:	1c5a      	adds	r2, r3, #1
 80087b8:	2030      	movs	r0, #48	; 0x30
 80087ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087be:	4422      	add	r2, r4
 80087c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087c8:	3302      	adds	r3, #2
 80087ca:	e7c7      	b.n	800875c <_printf_common+0x58>
 80087cc:	2301      	movs	r3, #1
 80087ce:	4622      	mov	r2, r4
 80087d0:	4649      	mov	r1, r9
 80087d2:	4638      	mov	r0, r7
 80087d4:	47c0      	blx	r8
 80087d6:	3001      	adds	r0, #1
 80087d8:	d0e6      	beq.n	80087a8 <_printf_common+0xa4>
 80087da:	3601      	adds	r6, #1
 80087dc:	e7d9      	b.n	8008792 <_printf_common+0x8e>
	...

080087e0 <_printf_i>:
 80087e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087e4:	7e0f      	ldrb	r7, [r1, #24]
 80087e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087e8:	2f78      	cmp	r7, #120	; 0x78
 80087ea:	4691      	mov	r9, r2
 80087ec:	4680      	mov	r8, r0
 80087ee:	460c      	mov	r4, r1
 80087f0:	469a      	mov	sl, r3
 80087f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087f6:	d807      	bhi.n	8008808 <_printf_i+0x28>
 80087f8:	2f62      	cmp	r7, #98	; 0x62
 80087fa:	d80a      	bhi.n	8008812 <_printf_i+0x32>
 80087fc:	2f00      	cmp	r7, #0
 80087fe:	f000 80d8 	beq.w	80089b2 <_printf_i+0x1d2>
 8008802:	2f58      	cmp	r7, #88	; 0x58
 8008804:	f000 80a3 	beq.w	800894e <_printf_i+0x16e>
 8008808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800880c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008810:	e03a      	b.n	8008888 <_printf_i+0xa8>
 8008812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008816:	2b15      	cmp	r3, #21
 8008818:	d8f6      	bhi.n	8008808 <_printf_i+0x28>
 800881a:	a101      	add	r1, pc, #4	; (adr r1, 8008820 <_printf_i+0x40>)
 800881c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008820:	08008879 	.word	0x08008879
 8008824:	0800888d 	.word	0x0800888d
 8008828:	08008809 	.word	0x08008809
 800882c:	08008809 	.word	0x08008809
 8008830:	08008809 	.word	0x08008809
 8008834:	08008809 	.word	0x08008809
 8008838:	0800888d 	.word	0x0800888d
 800883c:	08008809 	.word	0x08008809
 8008840:	08008809 	.word	0x08008809
 8008844:	08008809 	.word	0x08008809
 8008848:	08008809 	.word	0x08008809
 800884c:	08008999 	.word	0x08008999
 8008850:	080088bd 	.word	0x080088bd
 8008854:	0800897b 	.word	0x0800897b
 8008858:	08008809 	.word	0x08008809
 800885c:	08008809 	.word	0x08008809
 8008860:	080089bb 	.word	0x080089bb
 8008864:	08008809 	.word	0x08008809
 8008868:	080088bd 	.word	0x080088bd
 800886c:	08008809 	.word	0x08008809
 8008870:	08008809 	.word	0x08008809
 8008874:	08008983 	.word	0x08008983
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	1d1a      	adds	r2, r3, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	602a      	str	r2, [r5, #0]
 8008880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008888:	2301      	movs	r3, #1
 800888a:	e0a3      	b.n	80089d4 <_printf_i+0x1f4>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	6829      	ldr	r1, [r5, #0]
 8008890:	0606      	lsls	r6, r0, #24
 8008892:	f101 0304 	add.w	r3, r1, #4
 8008896:	d50a      	bpl.n	80088ae <_printf_i+0xce>
 8008898:	680e      	ldr	r6, [r1, #0]
 800889a:	602b      	str	r3, [r5, #0]
 800889c:	2e00      	cmp	r6, #0
 800889e:	da03      	bge.n	80088a8 <_printf_i+0xc8>
 80088a0:	232d      	movs	r3, #45	; 0x2d
 80088a2:	4276      	negs	r6, r6
 80088a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a8:	485e      	ldr	r0, [pc, #376]	; (8008a24 <_printf_i+0x244>)
 80088aa:	230a      	movs	r3, #10
 80088ac:	e019      	b.n	80088e2 <_printf_i+0x102>
 80088ae:	680e      	ldr	r6, [r1, #0]
 80088b0:	602b      	str	r3, [r5, #0]
 80088b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088b6:	bf18      	it	ne
 80088b8:	b236      	sxthne	r6, r6
 80088ba:	e7ef      	b.n	800889c <_printf_i+0xbc>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	6820      	ldr	r0, [r4, #0]
 80088c0:	1d19      	adds	r1, r3, #4
 80088c2:	6029      	str	r1, [r5, #0]
 80088c4:	0601      	lsls	r1, r0, #24
 80088c6:	d501      	bpl.n	80088cc <_printf_i+0xec>
 80088c8:	681e      	ldr	r6, [r3, #0]
 80088ca:	e002      	b.n	80088d2 <_printf_i+0xf2>
 80088cc:	0646      	lsls	r6, r0, #25
 80088ce:	d5fb      	bpl.n	80088c8 <_printf_i+0xe8>
 80088d0:	881e      	ldrh	r6, [r3, #0]
 80088d2:	4854      	ldr	r0, [pc, #336]	; (8008a24 <_printf_i+0x244>)
 80088d4:	2f6f      	cmp	r7, #111	; 0x6f
 80088d6:	bf0c      	ite	eq
 80088d8:	2308      	moveq	r3, #8
 80088da:	230a      	movne	r3, #10
 80088dc:	2100      	movs	r1, #0
 80088de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088e2:	6865      	ldr	r5, [r4, #4]
 80088e4:	60a5      	str	r5, [r4, #8]
 80088e6:	2d00      	cmp	r5, #0
 80088e8:	bfa2      	ittt	ge
 80088ea:	6821      	ldrge	r1, [r4, #0]
 80088ec:	f021 0104 	bicge.w	r1, r1, #4
 80088f0:	6021      	strge	r1, [r4, #0]
 80088f2:	b90e      	cbnz	r6, 80088f8 <_printf_i+0x118>
 80088f4:	2d00      	cmp	r5, #0
 80088f6:	d04d      	beq.n	8008994 <_printf_i+0x1b4>
 80088f8:	4615      	mov	r5, r2
 80088fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80088fe:	fb03 6711 	mls	r7, r3, r1, r6
 8008902:	5dc7      	ldrb	r7, [r0, r7]
 8008904:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008908:	4637      	mov	r7, r6
 800890a:	42bb      	cmp	r3, r7
 800890c:	460e      	mov	r6, r1
 800890e:	d9f4      	bls.n	80088fa <_printf_i+0x11a>
 8008910:	2b08      	cmp	r3, #8
 8008912:	d10b      	bne.n	800892c <_printf_i+0x14c>
 8008914:	6823      	ldr	r3, [r4, #0]
 8008916:	07de      	lsls	r6, r3, #31
 8008918:	d508      	bpl.n	800892c <_printf_i+0x14c>
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	6861      	ldr	r1, [r4, #4]
 800891e:	4299      	cmp	r1, r3
 8008920:	bfde      	ittt	le
 8008922:	2330      	movle	r3, #48	; 0x30
 8008924:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008928:	f105 35ff 	addle.w	r5, r5, #4294967295
 800892c:	1b52      	subs	r2, r2, r5
 800892e:	6122      	str	r2, [r4, #16]
 8008930:	f8cd a000 	str.w	sl, [sp]
 8008934:	464b      	mov	r3, r9
 8008936:	aa03      	add	r2, sp, #12
 8008938:	4621      	mov	r1, r4
 800893a:	4640      	mov	r0, r8
 800893c:	f7ff fee2 	bl	8008704 <_printf_common>
 8008940:	3001      	adds	r0, #1
 8008942:	d14c      	bne.n	80089de <_printf_i+0x1fe>
 8008944:	f04f 30ff 	mov.w	r0, #4294967295
 8008948:	b004      	add	sp, #16
 800894a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894e:	4835      	ldr	r0, [pc, #212]	; (8008a24 <_printf_i+0x244>)
 8008950:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008954:	6829      	ldr	r1, [r5, #0]
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	f851 6b04 	ldr.w	r6, [r1], #4
 800895c:	6029      	str	r1, [r5, #0]
 800895e:	061d      	lsls	r5, r3, #24
 8008960:	d514      	bpl.n	800898c <_printf_i+0x1ac>
 8008962:	07df      	lsls	r7, r3, #31
 8008964:	bf44      	itt	mi
 8008966:	f043 0320 	orrmi.w	r3, r3, #32
 800896a:	6023      	strmi	r3, [r4, #0]
 800896c:	b91e      	cbnz	r6, 8008976 <_printf_i+0x196>
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	f023 0320 	bic.w	r3, r3, #32
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	2310      	movs	r3, #16
 8008978:	e7b0      	b.n	80088dc <_printf_i+0xfc>
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	f043 0320 	orr.w	r3, r3, #32
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	2378      	movs	r3, #120	; 0x78
 8008984:	4828      	ldr	r0, [pc, #160]	; (8008a28 <_printf_i+0x248>)
 8008986:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800898a:	e7e3      	b.n	8008954 <_printf_i+0x174>
 800898c:	0659      	lsls	r1, r3, #25
 800898e:	bf48      	it	mi
 8008990:	b2b6      	uxthmi	r6, r6
 8008992:	e7e6      	b.n	8008962 <_printf_i+0x182>
 8008994:	4615      	mov	r5, r2
 8008996:	e7bb      	b.n	8008910 <_printf_i+0x130>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	6826      	ldr	r6, [r4, #0]
 800899c:	6961      	ldr	r1, [r4, #20]
 800899e:	1d18      	adds	r0, r3, #4
 80089a0:	6028      	str	r0, [r5, #0]
 80089a2:	0635      	lsls	r5, r6, #24
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	d501      	bpl.n	80089ac <_printf_i+0x1cc>
 80089a8:	6019      	str	r1, [r3, #0]
 80089aa:	e002      	b.n	80089b2 <_printf_i+0x1d2>
 80089ac:	0670      	lsls	r0, r6, #25
 80089ae:	d5fb      	bpl.n	80089a8 <_printf_i+0x1c8>
 80089b0:	8019      	strh	r1, [r3, #0]
 80089b2:	2300      	movs	r3, #0
 80089b4:	6123      	str	r3, [r4, #16]
 80089b6:	4615      	mov	r5, r2
 80089b8:	e7ba      	b.n	8008930 <_printf_i+0x150>
 80089ba:	682b      	ldr	r3, [r5, #0]
 80089bc:	1d1a      	adds	r2, r3, #4
 80089be:	602a      	str	r2, [r5, #0]
 80089c0:	681d      	ldr	r5, [r3, #0]
 80089c2:	6862      	ldr	r2, [r4, #4]
 80089c4:	2100      	movs	r1, #0
 80089c6:	4628      	mov	r0, r5
 80089c8:	f7f7 fc12 	bl	80001f0 <memchr>
 80089cc:	b108      	cbz	r0, 80089d2 <_printf_i+0x1f2>
 80089ce:	1b40      	subs	r0, r0, r5
 80089d0:	6060      	str	r0, [r4, #4]
 80089d2:	6863      	ldr	r3, [r4, #4]
 80089d4:	6123      	str	r3, [r4, #16]
 80089d6:	2300      	movs	r3, #0
 80089d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089dc:	e7a8      	b.n	8008930 <_printf_i+0x150>
 80089de:	6923      	ldr	r3, [r4, #16]
 80089e0:	462a      	mov	r2, r5
 80089e2:	4649      	mov	r1, r9
 80089e4:	4640      	mov	r0, r8
 80089e6:	47d0      	blx	sl
 80089e8:	3001      	adds	r0, #1
 80089ea:	d0ab      	beq.n	8008944 <_printf_i+0x164>
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	079b      	lsls	r3, r3, #30
 80089f0:	d413      	bmi.n	8008a1a <_printf_i+0x23a>
 80089f2:	68e0      	ldr	r0, [r4, #12]
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	4298      	cmp	r0, r3
 80089f8:	bfb8      	it	lt
 80089fa:	4618      	movlt	r0, r3
 80089fc:	e7a4      	b.n	8008948 <_printf_i+0x168>
 80089fe:	2301      	movs	r3, #1
 8008a00:	4632      	mov	r2, r6
 8008a02:	4649      	mov	r1, r9
 8008a04:	4640      	mov	r0, r8
 8008a06:	47d0      	blx	sl
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d09b      	beq.n	8008944 <_printf_i+0x164>
 8008a0c:	3501      	adds	r5, #1
 8008a0e:	68e3      	ldr	r3, [r4, #12]
 8008a10:	9903      	ldr	r1, [sp, #12]
 8008a12:	1a5b      	subs	r3, r3, r1
 8008a14:	42ab      	cmp	r3, r5
 8008a16:	dcf2      	bgt.n	80089fe <_printf_i+0x21e>
 8008a18:	e7eb      	b.n	80089f2 <_printf_i+0x212>
 8008a1a:	2500      	movs	r5, #0
 8008a1c:	f104 0619 	add.w	r6, r4, #25
 8008a20:	e7f5      	b.n	8008a0e <_printf_i+0x22e>
 8008a22:	bf00      	nop
 8008a24:	08008f2d 	.word	0x08008f2d
 8008a28:	08008f3e 	.word	0x08008f3e

08008a2c <memmove>:
 8008a2c:	4288      	cmp	r0, r1
 8008a2e:	b510      	push	{r4, lr}
 8008a30:	eb01 0402 	add.w	r4, r1, r2
 8008a34:	d902      	bls.n	8008a3c <memmove+0x10>
 8008a36:	4284      	cmp	r4, r0
 8008a38:	4623      	mov	r3, r4
 8008a3a:	d807      	bhi.n	8008a4c <memmove+0x20>
 8008a3c:	1e43      	subs	r3, r0, #1
 8008a3e:	42a1      	cmp	r1, r4
 8008a40:	d008      	beq.n	8008a54 <memmove+0x28>
 8008a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a4a:	e7f8      	b.n	8008a3e <memmove+0x12>
 8008a4c:	4402      	add	r2, r0
 8008a4e:	4601      	mov	r1, r0
 8008a50:	428a      	cmp	r2, r1
 8008a52:	d100      	bne.n	8008a56 <memmove+0x2a>
 8008a54:	bd10      	pop	{r4, pc}
 8008a56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a5e:	e7f7      	b.n	8008a50 <memmove+0x24>

08008a60 <_free_r>:
 8008a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a62:	2900      	cmp	r1, #0
 8008a64:	d044      	beq.n	8008af0 <_free_r+0x90>
 8008a66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a6a:	9001      	str	r0, [sp, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a72:	bfb8      	it	lt
 8008a74:	18e4      	addlt	r4, r4, r3
 8008a76:	f000 f913 	bl	8008ca0 <__malloc_lock>
 8008a7a:	4a1e      	ldr	r2, [pc, #120]	; (8008af4 <_free_r+0x94>)
 8008a7c:	9801      	ldr	r0, [sp, #4]
 8008a7e:	6813      	ldr	r3, [r2, #0]
 8008a80:	b933      	cbnz	r3, 8008a90 <_free_r+0x30>
 8008a82:	6063      	str	r3, [r4, #4]
 8008a84:	6014      	str	r4, [r2, #0]
 8008a86:	b003      	add	sp, #12
 8008a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a8c:	f000 b90e 	b.w	8008cac <__malloc_unlock>
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	d908      	bls.n	8008aa6 <_free_r+0x46>
 8008a94:	6825      	ldr	r5, [r4, #0]
 8008a96:	1961      	adds	r1, r4, r5
 8008a98:	428b      	cmp	r3, r1
 8008a9a:	bf01      	itttt	eq
 8008a9c:	6819      	ldreq	r1, [r3, #0]
 8008a9e:	685b      	ldreq	r3, [r3, #4]
 8008aa0:	1949      	addeq	r1, r1, r5
 8008aa2:	6021      	streq	r1, [r4, #0]
 8008aa4:	e7ed      	b.n	8008a82 <_free_r+0x22>
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	b10b      	cbz	r3, 8008ab0 <_free_r+0x50>
 8008aac:	42a3      	cmp	r3, r4
 8008aae:	d9fa      	bls.n	8008aa6 <_free_r+0x46>
 8008ab0:	6811      	ldr	r1, [r2, #0]
 8008ab2:	1855      	adds	r5, r2, r1
 8008ab4:	42a5      	cmp	r5, r4
 8008ab6:	d10b      	bne.n	8008ad0 <_free_r+0x70>
 8008ab8:	6824      	ldr	r4, [r4, #0]
 8008aba:	4421      	add	r1, r4
 8008abc:	1854      	adds	r4, r2, r1
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	6011      	str	r1, [r2, #0]
 8008ac2:	d1e0      	bne.n	8008a86 <_free_r+0x26>
 8008ac4:	681c      	ldr	r4, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	6053      	str	r3, [r2, #4]
 8008aca:	4421      	add	r1, r4
 8008acc:	6011      	str	r1, [r2, #0]
 8008ace:	e7da      	b.n	8008a86 <_free_r+0x26>
 8008ad0:	d902      	bls.n	8008ad8 <_free_r+0x78>
 8008ad2:	230c      	movs	r3, #12
 8008ad4:	6003      	str	r3, [r0, #0]
 8008ad6:	e7d6      	b.n	8008a86 <_free_r+0x26>
 8008ad8:	6825      	ldr	r5, [r4, #0]
 8008ada:	1961      	adds	r1, r4, r5
 8008adc:	428b      	cmp	r3, r1
 8008ade:	bf04      	itt	eq
 8008ae0:	6819      	ldreq	r1, [r3, #0]
 8008ae2:	685b      	ldreq	r3, [r3, #4]
 8008ae4:	6063      	str	r3, [r4, #4]
 8008ae6:	bf04      	itt	eq
 8008ae8:	1949      	addeq	r1, r1, r5
 8008aea:	6021      	streq	r1, [r4, #0]
 8008aec:	6054      	str	r4, [r2, #4]
 8008aee:	e7ca      	b.n	8008a86 <_free_r+0x26>
 8008af0:	b003      	add	sp, #12
 8008af2:	bd30      	pop	{r4, r5, pc}
 8008af4:	20004494 	.word	0x20004494

08008af8 <sbrk_aligned>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	4e0e      	ldr	r6, [pc, #56]	; (8008b34 <sbrk_aligned+0x3c>)
 8008afc:	460c      	mov	r4, r1
 8008afe:	6831      	ldr	r1, [r6, #0]
 8008b00:	4605      	mov	r5, r0
 8008b02:	b911      	cbnz	r1, 8008b0a <sbrk_aligned+0x12>
 8008b04:	f000 f8bc 	bl	8008c80 <_sbrk_r>
 8008b08:	6030      	str	r0, [r6, #0]
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f000 f8b7 	bl	8008c80 <_sbrk_r>
 8008b12:	1c43      	adds	r3, r0, #1
 8008b14:	d00a      	beq.n	8008b2c <sbrk_aligned+0x34>
 8008b16:	1cc4      	adds	r4, r0, #3
 8008b18:	f024 0403 	bic.w	r4, r4, #3
 8008b1c:	42a0      	cmp	r0, r4
 8008b1e:	d007      	beq.n	8008b30 <sbrk_aligned+0x38>
 8008b20:	1a21      	subs	r1, r4, r0
 8008b22:	4628      	mov	r0, r5
 8008b24:	f000 f8ac 	bl	8008c80 <_sbrk_r>
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d101      	bne.n	8008b30 <sbrk_aligned+0x38>
 8008b2c:	f04f 34ff 	mov.w	r4, #4294967295
 8008b30:	4620      	mov	r0, r4
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	20004498 	.word	0x20004498

08008b38 <_malloc_r>:
 8008b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3c:	1ccd      	adds	r5, r1, #3
 8008b3e:	f025 0503 	bic.w	r5, r5, #3
 8008b42:	3508      	adds	r5, #8
 8008b44:	2d0c      	cmp	r5, #12
 8008b46:	bf38      	it	cc
 8008b48:	250c      	movcc	r5, #12
 8008b4a:	2d00      	cmp	r5, #0
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	db01      	blt.n	8008b54 <_malloc_r+0x1c>
 8008b50:	42a9      	cmp	r1, r5
 8008b52:	d905      	bls.n	8008b60 <_malloc_r+0x28>
 8008b54:	230c      	movs	r3, #12
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	2600      	movs	r6, #0
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b60:	4e2e      	ldr	r6, [pc, #184]	; (8008c1c <_malloc_r+0xe4>)
 8008b62:	f000 f89d 	bl	8008ca0 <__malloc_lock>
 8008b66:	6833      	ldr	r3, [r6, #0]
 8008b68:	461c      	mov	r4, r3
 8008b6a:	bb34      	cbnz	r4, 8008bba <_malloc_r+0x82>
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	4638      	mov	r0, r7
 8008b70:	f7ff ffc2 	bl	8008af8 <sbrk_aligned>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	4604      	mov	r4, r0
 8008b78:	d14d      	bne.n	8008c16 <_malloc_r+0xde>
 8008b7a:	6834      	ldr	r4, [r6, #0]
 8008b7c:	4626      	mov	r6, r4
 8008b7e:	2e00      	cmp	r6, #0
 8008b80:	d140      	bne.n	8008c04 <_malloc_r+0xcc>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	4631      	mov	r1, r6
 8008b86:	4638      	mov	r0, r7
 8008b88:	eb04 0803 	add.w	r8, r4, r3
 8008b8c:	f000 f878 	bl	8008c80 <_sbrk_r>
 8008b90:	4580      	cmp	r8, r0
 8008b92:	d13a      	bne.n	8008c0a <_malloc_r+0xd2>
 8008b94:	6821      	ldr	r1, [r4, #0]
 8008b96:	3503      	adds	r5, #3
 8008b98:	1a6d      	subs	r5, r5, r1
 8008b9a:	f025 0503 	bic.w	r5, r5, #3
 8008b9e:	3508      	adds	r5, #8
 8008ba0:	2d0c      	cmp	r5, #12
 8008ba2:	bf38      	it	cc
 8008ba4:	250c      	movcc	r5, #12
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	4638      	mov	r0, r7
 8008baa:	f7ff ffa5 	bl	8008af8 <sbrk_aligned>
 8008bae:	3001      	adds	r0, #1
 8008bb0:	d02b      	beq.n	8008c0a <_malloc_r+0xd2>
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	442b      	add	r3, r5
 8008bb6:	6023      	str	r3, [r4, #0]
 8008bb8:	e00e      	b.n	8008bd8 <_malloc_r+0xa0>
 8008bba:	6822      	ldr	r2, [r4, #0]
 8008bbc:	1b52      	subs	r2, r2, r5
 8008bbe:	d41e      	bmi.n	8008bfe <_malloc_r+0xc6>
 8008bc0:	2a0b      	cmp	r2, #11
 8008bc2:	d916      	bls.n	8008bf2 <_malloc_r+0xba>
 8008bc4:	1961      	adds	r1, r4, r5
 8008bc6:	42a3      	cmp	r3, r4
 8008bc8:	6025      	str	r5, [r4, #0]
 8008bca:	bf18      	it	ne
 8008bcc:	6059      	strne	r1, [r3, #4]
 8008bce:	6863      	ldr	r3, [r4, #4]
 8008bd0:	bf08      	it	eq
 8008bd2:	6031      	streq	r1, [r6, #0]
 8008bd4:	5162      	str	r2, [r4, r5]
 8008bd6:	604b      	str	r3, [r1, #4]
 8008bd8:	4638      	mov	r0, r7
 8008bda:	f104 060b 	add.w	r6, r4, #11
 8008bde:	f000 f865 	bl	8008cac <__malloc_unlock>
 8008be2:	f026 0607 	bic.w	r6, r6, #7
 8008be6:	1d23      	adds	r3, r4, #4
 8008be8:	1af2      	subs	r2, r6, r3
 8008bea:	d0b6      	beq.n	8008b5a <_malloc_r+0x22>
 8008bec:	1b9b      	subs	r3, r3, r6
 8008bee:	50a3      	str	r3, [r4, r2]
 8008bf0:	e7b3      	b.n	8008b5a <_malloc_r+0x22>
 8008bf2:	6862      	ldr	r2, [r4, #4]
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	bf0c      	ite	eq
 8008bf8:	6032      	streq	r2, [r6, #0]
 8008bfa:	605a      	strne	r2, [r3, #4]
 8008bfc:	e7ec      	b.n	8008bd8 <_malloc_r+0xa0>
 8008bfe:	4623      	mov	r3, r4
 8008c00:	6864      	ldr	r4, [r4, #4]
 8008c02:	e7b2      	b.n	8008b6a <_malloc_r+0x32>
 8008c04:	4634      	mov	r4, r6
 8008c06:	6876      	ldr	r6, [r6, #4]
 8008c08:	e7b9      	b.n	8008b7e <_malloc_r+0x46>
 8008c0a:	230c      	movs	r3, #12
 8008c0c:	603b      	str	r3, [r7, #0]
 8008c0e:	4638      	mov	r0, r7
 8008c10:	f000 f84c 	bl	8008cac <__malloc_unlock>
 8008c14:	e7a1      	b.n	8008b5a <_malloc_r+0x22>
 8008c16:	6025      	str	r5, [r4, #0]
 8008c18:	e7de      	b.n	8008bd8 <_malloc_r+0xa0>
 8008c1a:	bf00      	nop
 8008c1c:	20004494 	.word	0x20004494

08008c20 <_realloc_r>:
 8008c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c24:	4680      	mov	r8, r0
 8008c26:	4614      	mov	r4, r2
 8008c28:	460e      	mov	r6, r1
 8008c2a:	b921      	cbnz	r1, 8008c36 <_realloc_r+0x16>
 8008c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c30:	4611      	mov	r1, r2
 8008c32:	f7ff bf81 	b.w	8008b38 <_malloc_r>
 8008c36:	b92a      	cbnz	r2, 8008c44 <_realloc_r+0x24>
 8008c38:	f7ff ff12 	bl	8008a60 <_free_r>
 8008c3c:	4625      	mov	r5, r4
 8008c3e:	4628      	mov	r0, r5
 8008c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c44:	f000 f838 	bl	8008cb8 <_malloc_usable_size_r>
 8008c48:	4284      	cmp	r4, r0
 8008c4a:	4607      	mov	r7, r0
 8008c4c:	d802      	bhi.n	8008c54 <_realloc_r+0x34>
 8008c4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c52:	d812      	bhi.n	8008c7a <_realloc_r+0x5a>
 8008c54:	4621      	mov	r1, r4
 8008c56:	4640      	mov	r0, r8
 8008c58:	f7ff ff6e 	bl	8008b38 <_malloc_r>
 8008c5c:	4605      	mov	r5, r0
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d0ed      	beq.n	8008c3e <_realloc_r+0x1e>
 8008c62:	42bc      	cmp	r4, r7
 8008c64:	4622      	mov	r2, r4
 8008c66:	4631      	mov	r1, r6
 8008c68:	bf28      	it	cs
 8008c6a:	463a      	movcs	r2, r7
 8008c6c:	f7ff fbb8 	bl	80083e0 <memcpy>
 8008c70:	4631      	mov	r1, r6
 8008c72:	4640      	mov	r0, r8
 8008c74:	f7ff fef4 	bl	8008a60 <_free_r>
 8008c78:	e7e1      	b.n	8008c3e <_realloc_r+0x1e>
 8008c7a:	4635      	mov	r5, r6
 8008c7c:	e7df      	b.n	8008c3e <_realloc_r+0x1e>
	...

08008c80 <_sbrk_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4d06      	ldr	r5, [pc, #24]	; (8008c9c <_sbrk_r+0x1c>)
 8008c84:	2300      	movs	r3, #0
 8008c86:	4604      	mov	r4, r0
 8008c88:	4608      	mov	r0, r1
 8008c8a:	602b      	str	r3, [r5, #0]
 8008c8c:	f7fa f912 	bl	8002eb4 <_sbrk>
 8008c90:	1c43      	adds	r3, r0, #1
 8008c92:	d102      	bne.n	8008c9a <_sbrk_r+0x1a>
 8008c94:	682b      	ldr	r3, [r5, #0]
 8008c96:	b103      	cbz	r3, 8008c9a <_sbrk_r+0x1a>
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	2000449c 	.word	0x2000449c

08008ca0 <__malloc_lock>:
 8008ca0:	4801      	ldr	r0, [pc, #4]	; (8008ca8 <__malloc_lock+0x8>)
 8008ca2:	f000 b811 	b.w	8008cc8 <__retarget_lock_acquire_recursive>
 8008ca6:	bf00      	nop
 8008ca8:	200044a0 	.word	0x200044a0

08008cac <__malloc_unlock>:
 8008cac:	4801      	ldr	r0, [pc, #4]	; (8008cb4 <__malloc_unlock+0x8>)
 8008cae:	f000 b80c 	b.w	8008cca <__retarget_lock_release_recursive>
 8008cb2:	bf00      	nop
 8008cb4:	200044a0 	.word	0x200044a0

08008cb8 <_malloc_usable_size_r>:
 8008cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cbc:	1f18      	subs	r0, r3, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bfbc      	itt	lt
 8008cc2:	580b      	ldrlt	r3, [r1, r0]
 8008cc4:	18c0      	addlt	r0, r0, r3
 8008cc6:	4770      	bx	lr

08008cc8 <__retarget_lock_acquire_recursive>:
 8008cc8:	4770      	bx	lr

08008cca <__retarget_lock_release_recursive>:
 8008cca:	4770      	bx	lr

08008ccc <_init>:
 8008ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cce:	bf00      	nop
 8008cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cd2:	bc08      	pop	{r3}
 8008cd4:	469e      	mov	lr, r3
 8008cd6:	4770      	bx	lr

08008cd8 <_fini>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	bf00      	nop
 8008cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cde:	bc08      	pop	{r3}
 8008ce0:	469e      	mov	lr, r3
 8008ce2:	4770      	bx	lr

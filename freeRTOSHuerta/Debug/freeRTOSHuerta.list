
freeRTOSHuerta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08009b44  08009b44  00019b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e7c  08009e7c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e7c  08009e7c  00019e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e84  08009e84  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e84  08009e84  00019e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e88  08009e88  00019e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004414  2000008c  08009f18  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044a0  08009f18  000244a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019eb0  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000411f  00000000  00000000  00039f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  0003e090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001650  00000000  00000000  0003f8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae47  00000000  00000000  00040ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001befd  00000000  00000000  0005bd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a17a1  00000000  00000000  00077c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001193d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a8  00000000  00000000  00119428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b2c 	.word	0x08009b2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08009b2c 	.word	0x08009b2c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <delay>:
uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

__STATIC_INLINE void delay(volatile uint16_t microseconds) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
    delay_us(microseconds);
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f9aa 	bl	80010d8 <delay_us>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4619      	mov	r1, r3
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f003 fa04 	bl	80041c8 <HAL_GPIO_Init>
}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000de4:	887b      	ldrh	r3, [r7, #2]
 8000de6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	4619      	mov	r1, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f003 f9e6 	bl	80041c8 <HAL_GPIO_Init>
}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <DHT_Start>:

/**
 * Iniciamos el proceso de lectura del sensor DHT22
 **/
void DHT_Start (void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    /********  Tbe  ********/
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000e08:	2101      	movs	r1, #1
 8000e0a:	480a      	ldr	r0, [pc, #40]	; (8000e34 <DHT_Start+0x30>)
 8000e0c:	f7ff ffbe 	bl	8000d8c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000e10:	2200      	movs	r2, #0
 8000e12:	2101      	movs	r1, #1
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <DHT_Start+0x30>)
 8000e16:	f003 fb73 	bl	8004500 <HAL_GPIO_WritePin>
	delay (1200);  // >1ms delay
 8000e1a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000e1e:	f7ff ffa7 	bl	8000d70 <delay>

    /********  Tgo  ********/
    Set_Pin_Input(DHT_PORT, DHT_PIN);
 8000e22:	2101      	movs	r1, #1
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <DHT_Start+0x30>)
 8000e26:	f7ff ffcf 	bl	8000dc8 <Set_Pin_Input>
    delay (30);   // wait for 30us
 8000e2a:	201e      	movs	r0, #30
 8000e2c:	f7ff ffa0 	bl	8000d70 <delay>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40020000 	.word	0x40020000

08000e38 <DHT_Check_Response>:


/**
 * Esperamos la respuesta inicial del sensor DHT22
 **/
uint8_t DHT_Check_Response (void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	71fb      	strb	r3, [r7, #7]
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000e42:	2101      	movs	r1, #1
 8000e44:	4810      	ldr	r0, [pc, #64]	; (8000e88 <DHT_Check_Response+0x50>)
 8000e46:	f003 fb43 	bl	80044d0 <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10e      	bne.n	8000e6e <DHT_Check_Response+0x36>
	{
		delay (80);
 8000e50:	2050      	movs	r0, #80	; 0x50
 8000e52:	f7ff ff8d 	bl	8000d70 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000e56:	2101      	movs	r1, #1
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <DHT_Check_Response+0x50>)
 8000e5a:	f003 fb39 	bl	80044d0 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <DHT_Check_Response+0x32>
 8000e64:	2301      	movs	r3, #1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	e001      	b.n	8000e6e <DHT_Check_Response+0x36>
		else Response = -1;
 8000e6a:	23ff      	movs	r3, #255	; 0xff
 8000e6c:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000e6e:	bf00      	nop
 8000e70:	2101      	movs	r1, #1
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <DHT_Check_Response+0x50>)
 8000e74:	f003 fb2c 	bl	80044d0 <HAL_GPIO_ReadPin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f8      	bne.n	8000e70 <DHT_Check_Response+0x38>

	return Response;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40020000 	.word	0x40020000

08000e8c <DHT_Read>:


/**
 * Leemos la respuesta del sensor DHT22
 **/
uint8_t DHT_Read (void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	71bb      	strb	r3, [r7, #6]
 8000e96:	e037      	b.n	8000f08 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000e98:	bf00      	nop
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	481e      	ldr	r0, [pc, #120]	; (8000f18 <DHT_Read+0x8c>)
 8000e9e:	f003 fb17 	bl	80044d0 <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f8      	beq.n	8000e9a <DHT_Read+0xe>
		delay (35);   // wait for 40 us
 8000ea8:	2023      	movs	r0, #35	; 0x23
 8000eaa:	f7ff ff61 	bl	8000d70 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4819      	ldr	r0, [pc, #100]	; (8000f18 <DHT_Read+0x8c>)
 8000eb2:	f003 fb0d 	bl	80044d0 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d10e      	bne.n	8000eda <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	b25a      	sxtb	r2, r3
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	e00b      	b.n	8000ef2 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000eda:	79bb      	ldrb	r3, [r7, #6]
 8000edc:	f1c3 0307 	rsb	r3, r3, #7
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	b25a      	sxtb	r2, r3
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000ef2:	bf00      	nop
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4808      	ldr	r0, [pc, #32]	; (8000f18 <DHT_Read+0x8c>)
 8000ef8:	f003 faea 	bl	80044d0 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f8      	bne.n	8000ef4 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	3301      	adds	r3, #1
 8000f06:	71bb      	strb	r3, [r7, #6]
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	d9c4      	bls.n	8000e98 <DHT_Read+0xc>
	}
	return i;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020000 	.word	0x40020000

08000f1c <DHT_GetData>:

/**
 * Iniciamos la toma de datos y la almacenamos en nuestra estructura basica
 **/
void
DHT_GetData (DHT_DataTypeDef *DHT_Data) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000f24:	f7ff ff6e 	bl	8000e04 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000f28:	f7ff ff86 	bl	8000e38 <DHT_Check_Response>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <DHT_GetData+0xe0>)
 8000f32:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000f34:	f7ff ffaa 	bl	8000e8c <DHT_Read>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b30      	ldr	r3, [pc, #192]	; (8001000 <DHT_GetData+0xe4>)
 8000f3e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000f40:	f7ff ffa4 	bl	8000e8c <DHT_Read>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <DHT_GetData+0xe8>)
 8000f4a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000f4c:	f7ff ff9e 	bl	8000e8c <DHT_Read>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <DHT_GetData+0xec>)
 8000f56:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000f58:	f7ff ff98 	bl	8000e8c <DHT_Read>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b2a      	ldr	r3, [pc, #168]	; (800100c <DHT_GetData+0xf0>)
 8000f62:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000f64:	f7ff ff92 	bl	8000e8c <DHT_Read>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <DHT_GetData+0xf4>)
 8000f6e:	801a      	strh	r2, [r3, #0]

	if (SUM == (uint8_t)(Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2)){
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <DHT_GetData+0xe4>)
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <DHT_GetData+0xe8>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <DHT_GetData+0xec>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b21      	ldr	r3, [pc, #132]	; (800100c <DHT_GetData+0xf0>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4413      	add	r3, r2
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <DHT_GetData+0xf4>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d12d      	bne.n	8000ff2 <DHT_GetData+0xd6>
        DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2) / 10.0;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <DHT_GetData+0xec>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	4a1b      	ldr	r2, [pc, #108]	; (800100c <DHT_GetData+0xf0>)
 8000f9e:	7812      	ldrb	r2, [r2, #0]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fac6 	bl	8000534 <__aeabi_i2d>
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <DHT_GetData+0xf8>)
 8000fae:	f7ff fc55 	bl	800085c <__aeabi_ddiv>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff fd37 	bl	8000a2c <__aeabi_d2uiz>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	601a      	str	r2, [r3, #0]
        DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2) / 10.0;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <DHT_GetData+0xe4>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <DHT_GetData+0xe8>)
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff faaf 	bl	8000534 <__aeabi_i2d>
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <DHT_GetData+0xf8>)
 8000fdc:	f7ff fc3e 	bl	800085c <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fd20 	bl	8000a2c <__aeabi_d2uiz>
 8000fec:	4602      	mov	r2, r0
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	605a      	str	r2, [r3, #4]
	}
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200000ae 	.word	0x200000ae
 8001000:	200000a8 	.word	0x200000a8
 8001004:	200000a9 	.word	0x200000a9
 8001008:	200000aa 	.word	0x200000aa
 800100c:	200000ab 	.word	0x200000ab
 8001010:	200000ac 	.word	0x200000ac
 8001014:	40240000 	.word	0x40240000

08001018 <TimerDelay_Init>:
volatile static uint32_t gu32_ticks = 0;

void Error_Handler();

void TimerDelay_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
	gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 800101e:	f004 fc5d 	bl	80058dc <HAL_RCC_GetHCLKFreq>
 8001022:	4603      	mov	r3, r0
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <TimerDelay_Init+0xb0>)
 8001026:	fba2 2303 	umull	r2, r3, r2, r3
 800102a:	0c9b      	lsrs	r3, r3, #18
 800102c:	4a27      	ldr	r2, [pc, #156]	; (80010cc <TimerDelay_Init+0xb4>)
 800102e:	6013      	str	r3, [r2, #0]
	HTIMx.Instance = TIMER;
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <TimerDelay_Init+0xb8>)
 8001032:	4a28      	ldr	r2, [pc, #160]	; (80010d4 <TimerDelay_Init+0xbc>)
 8001034:	601a      	str	r2, [r3, #0]

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]


    HTIMx.Init.Prescaler = gu32_ticks-1;
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <TimerDelay_Init+0xb4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3b01      	subs	r3, #1
 8001052:	4a1f      	ldr	r2, [pc, #124]	; (80010d0 <TimerDelay_Init+0xb8>)
 8001054:	6053      	str	r3, [r2, #4]
    HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <TimerDelay_Init+0xb8>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
    HTIMx.Init.Period = 65535;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <TimerDelay_Init+0xb8>)
 800105e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001062:	60da      	str	r2, [r3, #12]
    HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <TimerDelay_Init+0xb8>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
    HTIMx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <TimerDelay_Init+0xb8>)
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&HTIMx) != HAL_OK)
 8001070:	4817      	ldr	r0, [pc, #92]	; (80010d0 <TimerDelay_Init+0xb8>)
 8001072:	f005 f96f 	bl	8006354 <HAL_TIM_Base_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <TimerDelay_Init+0x68>
    {
      Error_Handler();
 800107c:	f000 fd24 	bl	8001ac8 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001084:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&HTIMx, &sClockSourceConfig) != HAL_OK)
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	4619      	mov	r1, r3
 800108c:	4810      	ldr	r0, [pc, #64]	; (80010d0 <TimerDelay_Init+0xb8>)
 800108e:	f005 fc09 	bl	80068a4 <HAL_TIM_ConfigClockSource>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <TimerDelay_Init+0x84>
    {
      Error_Handler();
 8001098:	f000 fd16 	bl	8001ac8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&HTIMx, &sMasterConfig) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	4619      	mov	r1, r3
 80010a8:	4809      	ldr	r0, [pc, #36]	; (80010d0 <TimerDelay_Init+0xb8>)
 80010aa:	f005 ffb3 	bl	8007014 <HAL_TIMEx_MasterConfigSynchronization>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <TimerDelay_Init+0xa0>
    {
      Error_Handler();
 80010b4:	f000 fd08 	bl	8001ac8 <Error_Handler>
    }

    HAL_TIM_Base_Start(&HTIMx);
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <TimerDelay_Init+0xb8>)
 80010ba:	f005 f976 	bl	80063aa <HAL_TIM_Base_Start>

}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	431bde83 	.word	0x431bde83
 80010cc:	200000f0 	.word	0x200000f0
 80010d0:	200000b0 	.word	0x200000b0
 80010d4:	40000400 	.word	0x40000400

080010d8 <delay_us>:

void delay_us(volatile uint16_t au16_us)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
	HTIMx.Instance->CNT = 0;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <delay_us+0x30>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
	while (HTIMx.Instance->CNT < au16_us);
 80010ea:	bf00      	nop
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <delay_us+0x30>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	88fa      	ldrh	r2, [r7, #6]
 80010f4:	b292      	uxth	r2, r2
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d3f8      	bcc.n	80010ec <delay_us+0x14>
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	200000b0 	.word	0x200000b0

0800110c <delay_ms>:

void delay_ms(volatile uint16_t au16_ms)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
	while(au16_ms > 0)
 8001116:	e00f      	b.n	8001138 <delay_ms+0x2c>
	{
		HTIMx.Instance->CNT = 0;
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <delay_ms+0x44>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
		au16_ms--;
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	b29b      	uxth	r3, r3
 8001124:	3b01      	subs	r3, #1
 8001126:	b29b      	uxth	r3, r3
 8001128:	80fb      	strh	r3, [r7, #6]
		while (HTIMx.Instance->CNT < 1000);
 800112a:	bf00      	nop
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <delay_ms+0x44>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001136:	d3f9      	bcc.n	800112c <delay_ms+0x20>
	while(au16_ms > 0)
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	b29b      	uxth	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1eb      	bne.n	8001118 <delay_ms+0xc>
	}
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	200000b0 	.word	0x200000b0

08001154 <BSP_Init>:
static void MX_TIM3_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
static void MX_RTC_Init(void);

void BSP_Init() {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    HAL_Init();
 8001158:	f002 f828 	bl	80031ac <HAL_Init>
    SystemClock_Config();
 800115c:	f000 f940 	bl	80013e0 <SystemClock_Config>
    MX_GPIO_Init();
 8001160:	f000 fbb2 	bl	80018c8 <MX_GPIO_Init>
    MX_DMA_Init();
 8001164:	f000 fb90 	bl	8001888 <MX_DMA_Init>
    MX_I2C1_Init();
 8001168:	f000 fa10 	bl	800158c <MX_I2C1_Init>
    MX_TIM3_Init();
 800116c:	f000 fb3e 	bl	80017ec <MX_TIM3_Init>
    MX_ADC1_Init();
 8001170:	f000 f9ba 	bl	80014e8 <MX_ADC1_Init>
    MX_TIM2_Init();
 8001174:	f000 fac4 	bl	8001700 <MX_TIM2_Init>
    MX_RTC_Init();
 8001178:	f000 fa36 	bl	80015e8 <MX_RTC_Init>
    TimerDelay_Init();
 800117c:	f7ff ff4c 	bl	8001018 <TimerDelay_Init>
    LCD_Init();
 8001180:	f001 f8cc 	bl	800231c <LCD_Init>
    keypad_init();
 8001184:	f000 fcc2 	bl	8001b0c <keypad_init>
    //BSP_Output_Init();

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Init PWM
 8001188:	2100      	movs	r1, #0
 800118a:	4808      	ldr	r0, [pc, #32]	; (80011ac <BSP_Init+0x58>)
 800118c:	f005 f98a 	bl	80064a4 <HAL_TIM_PWM_Start>

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); //  ENA1
 8001190:	2200      	movs	r2, #0
 8001192:	2110      	movs	r1, #16
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <BSP_Init+0x5c>)
 8001196:	f003 f9b3 	bl	8004500 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); //  ENA2
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a0:	4804      	ldr	r0, [pc, #16]	; (80011b4 <BSP_Init+0x60>)
 80011a2:	f003 f9ad 	bl	8004500 <HAL_GPIO_WritePin>
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000210 	.word	0x20000210
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40020800 	.word	0x40020800

080011b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){  //Duda si anda este callback
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    static uint32_t App_1000msTimeout = 1000;
    static uint32_t App_100msTimeout = 100;
    static uint32_t App_10msTimeout = 10;
    static uint32_t App_10sTimeout = 10000;

    if(htim->Instance == TIM5){
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a25      	ldr	r2, [pc, #148]	; (800125c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d10c      	bne.n	80011e4 <HAL_TIM_PeriodElapsedCallback+0x2c>
    	HAL_IncTick();
 80011ca:	f002 f811 	bl	80031f0 <HAL_IncTick>
        if(App_100msTimeout){
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_TIM_PeriodElapsedCallback+0x2c>
            App_100msTimeout--;
 80011d6:	4b22      	ldr	r3, [pc, #136]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3b01      	subs	r3, #1
 80011dc:	4a20      	ldr	r2, [pc, #128]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011de:	6013      	str	r3, [r2, #0]
            APP_Timer100ms();
 80011e0:	f001 fd31 	bl	8002c46 <APP_Timer100ms>

            //codigo
        }
    }
    if(App_10msTimeout){
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00d      	beq.n	8001208 <HAL_TIM_PeriodElapsedCallback+0x50>
        App_10msTimeout--;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011f4:	6013      	str	r3, [r2, #0]
        if(App_10msTimeout == 0){
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d104      	bne.n	8001208 <HAL_TIM_PeriodElapsedCallback+0x50>
            App_10msTimeout = 10;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001200:	220a      	movs	r2, #10
 8001202:	601a      	str	r2, [r3, #0]
            APP_Timer10ms();
 8001204:	f001 fd18 	bl	8002c38 <APP_Timer10ms>
        }
    }
    if(App_1000msTimeout){
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00e      	beq.n	800122e <HAL_TIM_PeriodElapsedCallback+0x76>
        App_1000msTimeout--;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	4a14      	ldr	r2, [pc, #80]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001218:	6013      	str	r3, [r2, #0]
        if(App_1000msTimeout == 0){
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d105      	bne.n	800122e <HAL_TIM_PeriodElapsedCallback+0x76>
            App_1000msTimeout = 1000;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001228:	601a      	str	r2, [r3, #0]
            APP_Timer1000ms();
 800122a:	f001 fd13 	bl	8002c54 <APP_Timer1000ms>
        }
    }
    if(App_10sTimeout){
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00e      	beq.n	8001254 <HAL_TIM_PeriodElapsedCallback+0x9c>
        App_10sTimeout--;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3b01      	subs	r3, #1
 800123c:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800123e:	6013      	str	r3, [r2, #0]
        if(App_10sTimeout == 0){
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d105      	bne.n	8001254 <HAL_TIM_PeriodElapsedCallback+0x9c>
            App_10sTimeout = 10000;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800124a:	f242 7210 	movw	r2, #10000	; 0x2710
 800124e:	601a      	str	r2, [r3, #0]
            APP_Timer10s();
 8001250:	f001 fd07 	bl	8002c62 <APP_Timer10s>
        }
    }
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40000c00 	.word	0x40000c00
 8001260:	20000000 	.word	0x20000000
 8001264:	20000004 	.word	0x20000004
 8001268:	20000008 	.word	0x20000008
 800126c:	2000000c 	.word	0x2000000c

08001270 <BSP_Delay>:

void BSP_Delay(uint16_t Delay){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
    delay_ms(Delay);
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff45 	bl	800110c <delay_ms>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <BSP_LCD_Temperature>:

void BSP_LCD_Temperature(uint32_t temperatura) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    LCD_SetCursor(1, 4);
 8001294:	2104      	movs	r1, #4
 8001296:	2001      	movs	r0, #1
 8001298:	f000 ff26 	bl	80020e8 <LCD_SetCursor>
    LCD_Print("Grados:%1uC", temperatura);
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4803      	ldr	r0, [pc, #12]	; (80012ac <BSP_LCD_Temperature+0x20>)
 80012a0:	f001 f808 	bl	80022b4 <LCD_Print>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	08009b44 	.word	0x08009b44

080012b0 <BSP_LCD_Humidity>:

void BSP_LCD_Humidity(uint32_t humedad) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
    LCD_SetCursor(2, 1);
 80012b8:	2101      	movs	r1, #1
 80012ba:	2002      	movs	r0, #2
 80012bc:	f000 ff14 	bl	80020e8 <LCD_SetCursor>
    LCD_Print("HA:%1u%%", humedad);
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4803      	ldr	r0, [pc, #12]	; (80012d0 <BSP_LCD_Humidity+0x20>)
 80012c4:	f000 fff6 	bl	80022b4 <LCD_Print>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	08009b50 	.word	0x08009b50

080012d4 <BSP_LCD_SoilHumidity>:

void BSP_LCD_SoilHumidity(uint32_t soilHumidity){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	LCD_SetCursor(2, 10);
 80012dc:	210a      	movs	r1, #10
 80012de:	2002      	movs	r0, #2
 80012e0:	f000 ff02 	bl	80020e8 <LCD_SetCursor>
	LCD_Print("HS:%1u%%", soilHumidity);
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <BSP_LCD_SoilHumidity+0x20>)
 80012e8:	f000 ffe4 	bl	80022b4 <LCD_Print>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	08009b5c 	.word	0x08009b5c

080012f8 <BSP_Get_percentageHS>:


uint32_t BSP_Get_percentageHS(uint32_t value){
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    int hummin = 4095;                      //REVISAR TIPO DE DATO
 8001300:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001304:	617b      	str	r3, [r7, #20]
    int hummax = 2300;                      //REVISAR Maximo y Minimo en especial maximo
 8001306:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800130a:	613b      	str	r3, [r7, #16]
//#define humminp = 0
    int hummaxp = 100;
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	60fb      	str	r3, [r7, #12]
    if (value > hummin)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	d901      	bls.n	800131c <BSP_Get_percentageHS+0x24>
        value = hummin;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	607b      	str	r3, [r7, #4]
    if (value <= hummax)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	d802      	bhi.n	800132a <BSP_Get_percentageHS+0x32>
        value = hummax + 1;
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	3301      	adds	r3, #1
 8001328:	607b      	str	r3, [r7, #4]
    value = value - hummax;
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	607b      	str	r3, [r7, #4]
    return 100 - ((value * hummaxp) / (hummin - hummax));
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	6979      	ldr	r1, [r7, #20]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	1a8a      	subs	r2, r1, r2
 8001340:	fbb3 f3f2 	udiv	r3, r3, r2
 8001344:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
}
 8001348:	4618      	mov	r0, r3
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <BSP_SoilHumidity>:
            estado_cortina = 0;                                                    //cambio de estado
        }
    }
}

uint32_t BSP_SoilHumidity(){
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
	uint32_t value_adc[3];
    HAL_ADC_Start(&hadc1);
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <BSP_SoilHumidity+0x40>)
 800135c:	f001 ffd0 	bl	8003300 <HAL_ADC_Start>
    if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK){     //incilur esta parte en el solenoide para hecr while?
 8001360:	2105      	movs	r1, #5
 8001362:	480c      	ldr	r0, [pc, #48]	; (8001394 <BSP_SoilHumidity+0x40>)
 8001364:	f002 f8a5 	bl	80034b2 <HAL_ADC_PollForConversion>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10d      	bne.n	800138a <BSP_SoilHumidity+0x36>
        value_adc[0] = HAL_ADC_GetValue(&hadc1);
 800136e:	4809      	ldr	r0, [pc, #36]	; (8001394 <BSP_SoilHumidity+0x40>)
 8001370:	f002 f923 	bl	80035ba <HAL_ADC_GetValue>
 8001374:	4603      	mov	r3, r0
 8001376:	607b      	str	r3, [r7, #4]
        value_adc[0] = BSP_Get_percentageHS(value_adc[0]);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ffbc 	bl	80012f8 <BSP_Get_percentageHS>
 8001380:	4603      	mov	r3, r0
 8001382:	607b      	str	r3, [r7, #4]
        HAL_ADC_Stop(&hadc1);
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <BSP_SoilHumidity+0x40>)
 8001386:	f002 f861 	bl	800344c <HAL_ADC_Stop>
    }
    return value_adc[0];
 800138a:	687b      	ldr	r3, [r7, #4]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200000f4 	.word	0x200000f4

08001398 <BSP_TurnOn_Valve>:
    }
    while (value_adc[0] <= rangohmax && value_adc[0] >= rangohmin);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); //  ENA
}

void BSP_TurnOn_Valve(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);   //  ENA
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a2:	4808      	ldr	r0, [pc, #32]	; (80013c4 <BSP_TurnOn_Valve+0x2c>)
 80013a4:	f003 f8ac 	bl	8004500 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);   //  IN1
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <BSP_TurnOn_Valve+0x2c>)
 80013b0:	f003 f8a6 	bl	8004500 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); //  IN2
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ba:	4802      	ldr	r0, [pc, #8]	; (80013c4 <BSP_TurnOn_Valve+0x2c>)
 80013bc:	f003 f8a0 	bl	8004500 <HAL_GPIO_WritePin>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40020800 	.word	0x40020800

080013c8 <BSP_TurnOff_Valve>:

void BSP_TurnOff_Valve(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); //  ENA
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d2:	4802      	ldr	r0, [pc, #8]	; (80013dc <BSP_TurnOff_Valve+0x14>)
 80013d4:	f003 f894 	bl	8004500 <HAL_GPIO_WritePin>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40020800 	.word	0x40020800

080013e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b09a      	sub	sp, #104	; 0x68
 80013e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013ea:	2230      	movs	r2, #48	; 0x30
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f007 ff34 	bl	800925c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <SystemClock_Config+0x100>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a30      	ldr	r2, [pc, #192]	; (80014e0 <SystemClock_Config+0x100>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <SystemClock_Config+0x100>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <SystemClock_Config+0x104>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a2a      	ldr	r2, [pc, #168]	; (80014e4 <SystemClock_Config+0x104>)
 800143c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <SystemClock_Config+0x104>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800144e:	230a      	movs	r3, #10
 8001450:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001452:	2301      	movs	r3, #1
 8001454:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001456:	2310      	movs	r3, #16
 8001458:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800145a:	2301      	movs	r3, #1
 800145c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145e:	2302      	movs	r3, #2
 8001460:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001462:	2300      	movs	r3, #0
 8001464:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001466:	2308      	movs	r3, #8
 8001468:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 100;
 800146a:	2364      	movs	r3, #100	; 0x64
 800146c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800146e:	2302      	movs	r3, #2
 8001470:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001472:	2308      	movs	r3, #8
 8001474:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001476:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fdd4 	bl	8005028 <HAL_RCC_OscConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001486:	f000 fb1f 	bl	8001ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148a:	230f      	movs	r3, #15
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148e:	2302      	movs	r3, #2
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001496:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800149c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	2103      	movs	r1, #3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 f82b 	bl	8005504 <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80014b4:	f000 fb08 	bl	8001ac8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014b8:	2302      	movs	r3, #2
 80014ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 fa5a 	bl	8005980 <HAL_RCCEx_PeriphCLKConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80014d2:	f000 faf9 	bl	8001ac8 <Error_Handler>
  }
}
 80014d6:	bf00      	nop
 80014d8:	3768      	adds	r7, #104	; 0x68
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000

080014e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <MX_ADC1_Init+0x98>)
 80014fc:	4a21      	ldr	r2, [pc, #132]	; (8001584 <MX_ADC1_Init+0x9c>)
 80014fe:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <MX_ADC1_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <MX_ADC1_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <MX_ADC1_Init+0x98>)
 800150e:	2201      	movs	r2, #1
 8001510:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <MX_ADC1_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <MX_ADC1_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_ADC1_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_ADC1_Init+0x98>)
 8001528:	4a17      	ldr	r2, [pc, #92]	; (8001588 <MX_ADC1_Init+0xa0>)
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_ADC1_Init+0x98>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <MX_ADC1_Init+0x98>)
 8001534:	2201      	movs	r2, #1
 8001536:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_ADC1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_ADC1_Init+0x98>)
 8001542:	2201      	movs	r2, #1
 8001544:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <MX_ADC1_Init+0x98>)
 8001548:	f001 fe96 	bl	8003278 <HAL_ADC_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC1_Init+0x6e>
    {
        Error_Handler();
 8001552:	f000 fab9 	bl	8001ac8 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_1;
 8001556:	2301      	movs	r3, #1
 8001558:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800155a:	2301      	movs	r3, #1
 800155c:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	4619      	mov	r1, r3
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <MX_ADC1_Init+0x98>)
 8001568:	f002 f834 	bl	80035d4 <HAL_ADC_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC1_Init+0x8e>
    {
        Error_Handler();
 8001572:	f000 faa9 	bl	8001ac8 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200000f4 	.word	0x200000f4
 8001584:	40012000 	.word	0x40012000
 8001588:	0f000001 	.word	0x0f000001

0800158c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_I2C1_Init+0x50>)
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <MX_I2C1_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_I2C1_Init+0x50>)
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_I2C1_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_I2C1_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_I2C1_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_I2C1_Init+0x50>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_I2C1_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_I2C1_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_I2C1_Init+0x50>)
 80015ca:	f002 ffb3 	bl	8004534 <HAL_I2C_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 80015d4:	f000 fa78 	bl	8001ac8 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000019c 	.word	0x2000019c
 80015e0:	40005400 	.word	0x40005400
 80015e4:	000186a0 	.word	0x000186a0

080015e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b090      	sub	sp, #64	; 0x40
 80015ec:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN RTC_Init 0 */

    /* USER CODE END RTC_Init 0 */

    RTC_TimeTypeDef sTime = {0};
 80015ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
    RTC_AlarmTypeDef sAlarm = {0};
 8001602:	463b      	mov	r3, r7
 8001604:	2228      	movs	r2, #40	; 0x28
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f007 fe27 	bl	800925c <memset>
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
    */
    hrtc.Instance = RTC;
 800160e:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <MX_RTC_Init+0x110>)
 8001610:	4a3a      	ldr	r2, [pc, #232]	; (80016fc <MX_RTC_Init+0x114>)
 8001612:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001614:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <MX_RTC_Init+0x110>)
 8001616:	2200      	movs	r2, #0
 8001618:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 800161a:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <MX_RTC_Init+0x110>)
 800161c:	227f      	movs	r2, #127	; 0x7f
 800161e:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8001620:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <MX_RTC_Init+0x110>)
 8001622:	22ff      	movs	r2, #255	; 0xff
 8001624:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001626:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <MX_RTC_Init+0x110>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800162c:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <MX_RTC_Init+0x110>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001632:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <MX_RTC_Init+0x110>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001638:	482f      	ldr	r0, [pc, #188]	; (80016f8 <MX_RTC_Init+0x110>)
 800163a:	f004 fa91 	bl	8005b60 <HAL_RTC_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_RTC_Init+0x60>
    {
        Error_Handler();
 8001644:	f000 fa40 	bl	8001ac8 <Error_Handler>

    /* USER CODE END Check_RTC_BKUP */

    /** Initialize RTC and set the Time and Date
    */
    sTime.Hours = 23;
 8001648:	2317      	movs	r3, #23
 800164a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    sTime.Minutes = 59;
 800164e:	233b      	movs	r3, #59	; 0x3b
 8001650:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    sTime.Seconds = 45;
 8001654:	232d      	movs	r3, #45	; 0x2d
 8001656:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800165a:	2300      	movs	r3, #0
 800165c:	63bb      	str	r3, [r7, #56]	; 0x38
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001662:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001666:	2200      	movs	r2, #0
 8001668:	4619      	mov	r1, r3
 800166a:	4823      	ldr	r0, [pc, #140]	; (80016f8 <MX_RTC_Init+0x110>)
 800166c:	f004 fb09 	bl	8005c82 <HAL_RTC_SetTime>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_RTC_Init+0x92>
    {
        Error_Handler();
 8001676:	f000 fa27 	bl	8001ac8 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800167a:	2303      	movs	r3, #3
 800167c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    sDate.Month = RTC_MONTH_OCTOBER;
 8001680:	2310      	movs	r3, #16
 8001682:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    sDate.Date = 28;
 8001686:	231c      	movs	r3, #28
 8001688:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    sDate.Year = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001696:	2200      	movs	r2, #0
 8001698:	4619      	mov	r1, r3
 800169a:	4817      	ldr	r0, [pc, #92]	; (80016f8 <MX_RTC_Init+0x110>)
 800169c:	f004 fbae 	bl	8005dfc <HAL_RTC_SetDate>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_RTC_Init+0xc2>
    {
        Error_Handler();
 80016a6:	f000 fa0f 	bl	8001ac8 <Error_Handler>
    }
    /** Enable the Alarm A
    */
    sAlarm.AlarmTime.Hours = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	703b      	strb	r3, [r7, #0]
    sAlarm.AlarmTime.Minutes = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	707b      	strb	r3, [r7, #1]
    sAlarm.AlarmTime.Seconds = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	70bb      	strb	r3, [r7, #2]
    sAlarm.AlarmTime.SubSeconds = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
    sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
    sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
    sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmDateWeekDay = 1;
 80016ce:	2301      	movs	r3, #1
 80016d0:	f887 3020 	strb.w	r3, [r7, #32]
    sAlarm.Alarm = RTC_ALARM_A;
 80016d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80016da:	463b      	mov	r3, r7
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_RTC_Init+0x110>)
 80016e2:	f004 fc33 	bl	8005f4c <HAL_RTC_SetAlarm_IT>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_RTC_Init+0x108>
    {
        Error_Handler();
 80016ec:	f000 f9ec 	bl	8001ac8 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3740      	adds	r7, #64	; 0x40
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200001f0 	.word	0x200001f0
 80016fc:	40002800 	.word	0x40002800

08001700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08e      	sub	sp, #56	; 0x38
 8001704:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	f107 0320 	add.w	r3, r7, #32
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	615a      	str	r2, [r3, #20]
 800172e:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <MX_TIM2_Init+0xe8>)
 8001732:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001736:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 1000-1;
 8001738:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <MX_TIM2_Init+0xe8>)
 800173a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800173e:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <MX_TIM2_Init+0xe8>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 1000-1;
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <MX_TIM2_Init+0xe8>)
 8001748:	f240 32e7 	movw	r2, #999	; 0x3e7
 800174c:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <MX_TIM2_Init+0xe8>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001754:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <MX_TIM2_Init+0xe8>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800175a:	4823      	ldr	r0, [pc, #140]	; (80017e8 <MX_TIM2_Init+0xe8>)
 800175c:	f004 fdfa 	bl	8006354 <HAL_TIM_Base_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM2_Init+0x6a>
    {
        Error_Handler();
 8001766:	f000 f9af 	bl	8001ac8 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001774:	4619      	mov	r1, r3
 8001776:	481c      	ldr	r0, [pc, #112]	; (80017e8 <MX_TIM2_Init+0xe8>)
 8001778:	f005 f894 	bl	80068a4 <HAL_TIM_ConfigClockSource>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM2_Init+0x86>
    {
        Error_Handler();
 8001782:	f000 f9a1 	bl	8001ac8 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001786:	4818      	ldr	r0, [pc, #96]	; (80017e8 <MX_TIM2_Init+0xe8>)
 8001788:	f004 fe57 	bl	800643a <HAL_TIM_PWM_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x96>
    {
        Error_Handler();
 8001792:	f000 f999 	bl	8001ac8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800179e:	f107 0320 	add.w	r3, r7, #32
 80017a2:	4619      	mov	r1, r3
 80017a4:	4810      	ldr	r0, [pc, #64]	; (80017e8 <MX_TIM2_Init+0xe8>)
 80017a6:	f005 fc35 	bl	8007014 <HAL_TIMEx_MasterConfigSynchronization>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0xb4>
    {
        Error_Handler();
 80017b0:	f000 f98a 	bl	8001ac8 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b4:	2360      	movs	r3, #96	; 0x60
 80017b6:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2200      	movs	r2, #0
 80017c8:	4619      	mov	r1, r3
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <MX_TIM2_Init+0xe8>)
 80017cc:	f004 ffa4 	bl	8006718 <HAL_TIM_PWM_ConfigChannel>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM2_Init+0xda>
    {
        Error_Handler();
 80017d6:	f000 f977 	bl	8001ac8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <MX_TIM2_Init+0xe8>)
 80017dc:	f001 fba6 	bl	8002f2c <HAL_TIM_MspPostInit>

}
 80017e0:	bf00      	nop
 80017e2:	3738      	adds	r7, #56	; 0x38
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000210 	.word	0x20000210

080017ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001800:	463b      	mov	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <MX_TIM3_Init+0x94>)
 800180a:	4a1e      	ldr	r2, [pc, #120]	; (8001884 <MX_TIM3_Init+0x98>)
 800180c:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_TIM3_Init+0x94>)
 8001810:	2200      	movs	r2, #0
 8001812:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_TIM3_Init+0x94>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <MX_TIM3_Init+0x94>)
 800181c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001820:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_TIM3_Init+0x94>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_TIM3_Init+0x94>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800182e:	4814      	ldr	r0, [pc, #80]	; (8001880 <MX_TIM3_Init+0x94>)
 8001830:	f004 fd90 	bl	8006354 <HAL_TIM_Base_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM3_Init+0x52>
    {
        Error_Handler();
 800183a:	f000 f945 	bl	8001ac8 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001842:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4619      	mov	r1, r3
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <MX_TIM3_Init+0x94>)
 800184c:	f005 f82a 	bl	80068a4 <HAL_TIM_ConfigClockSource>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM3_Init+0x6e>
    {
        Error_Handler();
 8001856:	f000 f937 	bl	8001ac8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001862:	463b      	mov	r3, r7
 8001864:	4619      	mov	r1, r3
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <MX_TIM3_Init+0x94>)
 8001868:	f005 fbd4 	bl	8007014 <HAL_TIMEx_MasterConfigSynchronization>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM3_Init+0x8a>
    {
        Error_Handler();
 8001872:	f000 f929 	bl	8001ac8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000250 	.word	0x20000250
 8001884:	40000400 	.word	0x40000400

08001888 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_DMA_Init+0x3c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <MX_DMA_Init+0x3c>)
 8001898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_DMA_Init+0x3c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	2038      	movs	r0, #56	; 0x38
 80018b0:	f002 f976 	bl	8003ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018b4:	2038      	movs	r0, #56	; 0x38
 80018b6:	f002 f98f 	bl	8003bd8 <HAL_NVIC_EnableIRQ>

}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	; 0x30
 80018cc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	4b73      	ldr	r3, [pc, #460]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a72      	ldr	r2, [pc, #456]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 80018e8:	f043 0310 	orr.w	r3, r3, #16
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b70      	ldr	r3, [pc, #448]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	4b6c      	ldr	r3, [pc, #432]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a6b      	ldr	r2, [pc, #428]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 8001904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b69      	ldr	r3, [pc, #420]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b65      	ldr	r3, [pc, #404]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a64      	ldr	r2, [pc, #400]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b62      	ldr	r3, [pc, #392]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b5e      	ldr	r3, [pc, #376]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a5d      	ldr	r2, [pc, #372]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b5b      	ldr	r3, [pc, #364]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a56      	ldr	r2, [pc, #344]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b54      	ldr	r3, [pc, #336]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a4f      	ldr	r2, [pc, #316]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b4d      	ldr	r3, [pc, #308]	; (8001ab0 <MX_GPIO_Init+0x1e8>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	f641 4108 	movw	r1, #7176	; 0x1c08
 800198c:	4849      	ldr	r0, [pc, #292]	; (8001ab4 <MX_GPIO_Init+0x1ec>)
 800198e:	f002 fdb7 	bl	8004500 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8001998:	4847      	ldr	r0, [pc, #284]	; (8001ab8 <MX_GPIO_Init+0x1f0>)
 800199a:	f002 fdb1 	bl	8004500 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a4:	4845      	ldr	r0, [pc, #276]	; (8001abc <MX_GPIO_Init+0x1f4>)
 80019a6:	f002 fdab 	bl	8004500 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, LD4_Pin|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f241 011c 	movw	r1, #4124	; 0x101c
 80019b0:	4843      	ldr	r0, [pc, #268]	; (8001ac0 <MX_GPIO_Init+0x1f8>)
 80019b2:	f002 fda5 	bl	8004500 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PE3 PE5 */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80019b6:	2328      	movs	r3, #40	; 0x28
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	483b      	ldr	r0, [pc, #236]	; (8001ab8 <MX_GPIO_Init+0x1f0>)
 80019ca:	f002 fbfd 	bl	80041c8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC3 PC10 PC11 PC12 */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019ce:	f641 4308 	movw	r3, #7176	; 0x1c08
 80019d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	4833      	ldr	r0, [pc, #204]	; (8001ab4 <MX_GPIO_Init+0x1ec>)
 80019e8:	f002 fbee 	bl	80041c8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA0 PA2 */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80019ec:	2305      	movs	r3, #5
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4619      	mov	r1, r3
 80019fe:	4831      	ldr	r0, [pc, #196]	; (8001ac4 <MX_GPIO_Init+0x1fc>)
 8001a00:	f002 fbe2 	bl	80041c8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PC4 */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a04:	2310      	movs	r3, #16
 8001a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	4619      	mov	r1, r3
 8001a16:	4827      	ldr	r0, [pc, #156]	; (8001ab4 <MX_GPIO_Init+0x1ec>)
 8001a18:	f002 fbd6 	bl	80041c8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB0 PB2 */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001a1c:	2305      	movs	r3, #5
 8001a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4823      	ldr	r0, [pc, #140]	; (8001abc <MX_GPIO_Init+0x1f4>)
 8001a30:	f002 fbca 	bl	80041c8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PE8 */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	481b      	ldr	r0, [pc, #108]	; (8001ab8 <MX_GPIO_Init+0x1f0>)
 8001a4a:	f002 fbbd 	bl	80041c8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PE10 PE12 PE14 */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8001a4e:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4619      	mov	r1, r3
 8001a66:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <MX_GPIO_Init+0x1f0>)
 8001a68:	f002 fbae 	bl	80041c8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB10 */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_GPIO_Init+0x1f4>)
 8001a86:	f002 fb9f 	bl	80041c8 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD4_Pin PD2 PD3 PD4 */
    GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001a8a:	f241 031c 	movw	r3, #4124	; 0x101c
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <MX_GPIO_Init+0x1f8>)
 8001aa4:	f002 fb90 	bl	80041c8 <HAL_GPIO_Init>

}
 8001aa8:	bf00      	nop
 8001aaa:	3730      	adds	r7, #48	; 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40020000 	.word	0x40020000

08001ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ae8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <vApplicationGetIdleTaskMemory+0x30>)
 8001aee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000290 	.word	0x20000290
 8001b08:	200002e4 	.word	0x200002e4

08001b0c <keypad_init>:
#include "stm32f4xx_hal.h"
#include "keypad.h"

void keypad_init(void){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	4b51      	ldr	r3, [pc, #324]	; (8001c5c <keypad_init+0x150>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a50      	ldr	r2, [pc, #320]	; (8001c5c <keypad_init+0x150>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <keypad_init+0x150>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <keypad_init+0x150>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a49      	ldr	r2, [pc, #292]	; (8001c5c <keypad_init+0x150>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <keypad_init+0x150>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
	
	
  GPIO_InitStruct.Pin 	= ROW1_PIN;
 8001b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW1_PORT, &GPIO_InitStruct);
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4619      	mov	r1, r3
 8001b62:	483f      	ldr	r0, [pc, #252]	; (8001c60 <keypad_init+0x154>)
 8001b64:	f002 fb30 	bl	80041c8 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW2_PIN;
 8001b68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW2_PORT, &GPIO_InitStruct);
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4838      	ldr	r0, [pc, #224]	; (8001c64 <keypad_init+0x158>)
 8001b82:	f002 fb21 	bl	80041c8 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW3_PIN;
 8001b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW3_PORT, &GPIO_InitStruct);
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4831      	ldr	r0, [pc, #196]	; (8001c64 <keypad_init+0x158>)
 8001ba0:	f002 fb12 	bl	80041c8 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW4_PIN;
 8001ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROW4_PORT, &GPIO_InitStruct);
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4829      	ldr	r0, [pc, #164]	; (8001c64 <keypad_init+0x158>)
 8001bbe:	f002 fb03 	bl	80041c8 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc8:	4825      	ldr	r0, [pc, #148]	; (8001c60 <keypad_init+0x154>)
 8001bca:	f002 fc99 	bl	8004500 <HAL_GPIO_WritePin>
	
  HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bd4:	4823      	ldr	r0, [pc, #140]	; (8001c64 <keypad_init+0x158>)
 8001bd6:	f002 fc93 	bl	8004500 <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be0:	4820      	ldr	r0, [pc, #128]	; (8001c64 <keypad_init+0x158>)
 8001be2:	f002 fc8d 	bl	8004500 <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bec:	481d      	ldr	r0, [pc, #116]	; (8001c64 <keypad_init+0x158>)
 8001bee:	f002 fc87 	bl	8004500 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 	= COL1_PIN;
 8001bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL1_PORT, &GPIO_InitStruct);
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	4619      	mov	r1, r3
 8001c06:	4817      	ldr	r0, [pc, #92]	; (8001c64 <keypad_init+0x158>)
 8001c08:	f002 fade 	bl	80041c8 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL2_PIN;
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL2_PORT, &GPIO_InitStruct);
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4810      	ldr	r0, [pc, #64]	; (8001c60 <keypad_init+0x154>)
 8001c20:	f002 fad2 	bl	80041c8 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL3_PIN;
 8001c24:	2301      	movs	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL3_PORT, &GPIO_InitStruct);
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	4619      	mov	r1, r3
 8001c36:	480a      	ldr	r0, [pc, #40]	; (8001c60 <keypad_init+0x154>)
 8001c38:	f002 fac6 	bl	80041c8 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL4_PIN;
 8001c3c:	2310      	movs	r3, #16
 8001c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL4_PORT, &GPIO_InitStruct);
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4806      	ldr	r0, [pc, #24]	; (8001c68 <keypad_init+0x15c>)
 8001c50:	f002 faba 	bl	80041c8 <HAL_GPIO_Init>
		
}
 8001c54:	bf00      	nop
 8001c56:	3720      	adds	r7, #32
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020400 	.word	0x40020400
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40020800 	.word	0x40020800

08001c6c <keypad_read>:

char keypad_read(void){
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
	char letras[4][4]={	{'1','2','3','A'},
 8001c72:	4b9a      	ldr	r3, [pc, #616]	; (8001edc <keypad_read+0x270>)
 8001c74:	463c      	mov	r4, r7
 8001c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                      {'4','5','6','B'},
                      {'7','8','9','C'},
                      {'*','0','#','D'}};
	int  i=0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
	char valor=0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	74fb      	strb	r3, [r7, #19]


	for(i=0;i<4;i++){
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	e11e      	b.n	8001ec8 <keypad_read+0x25c>
		if(i==0){
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d143      	bne.n	8001d18 <keypad_read+0xac>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_SET);
 8001c90:	2201      	movs	r2, #1
 8001c92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c96:	4892      	ldr	r0, [pc, #584]	; (8001ee0 <keypad_read+0x274>)
 8001c98:	f002 fc32 	bl	8004500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca2:	488f      	ldr	r0, [pc, #572]	; (8001ee0 <keypad_read+0x274>)
 8001ca4:	f002 fc2c 	bl	8004500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cae:	488c      	ldr	r0, [pc, #560]	; (8001ee0 <keypad_read+0x274>)
 8001cb0:	f002 fc26 	bl	8004500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cba:	488a      	ldr	r0, [pc, #552]	; (8001ee4 <keypad_read+0x278>)
 8001cbc:	f002 fc20 	bl	8004500 <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 8001cc0:	200a      	movs	r0, #10
 8001cc2:	f001 fab5 	bl	8003230 <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[0][0];}	//1
 8001cc6:	e001      	b.n	8001ccc <keypad_read+0x60>
 8001cc8:	783b      	ldrb	r3, [r7, #0]
 8001cca:	74fb      	strb	r3, [r7, #19]
 8001ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd0:	4883      	ldr	r0, [pc, #524]	; (8001ee0 <keypad_read+0x274>)
 8001cd2:	f002 fbfd 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f5      	beq.n	8001cc8 <keypad_read+0x5c>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[0][1];}	//2
 8001cdc:	e001      	b.n	8001ce2 <keypad_read+0x76>
 8001cde:	787b      	ldrb	r3, [r7, #1]
 8001ce0:	74fb      	strb	r3, [r7, #19]
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	487f      	ldr	r0, [pc, #508]	; (8001ee4 <keypad_read+0x278>)
 8001ce6:	f002 fbf3 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f6      	beq.n	8001cde <keypad_read+0x72>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[0][2];}	//3
 8001cf0:	e001      	b.n	8001cf6 <keypad_read+0x8a>
 8001cf2:	78bb      	ldrb	r3, [r7, #2]
 8001cf4:	74fb      	strb	r3, [r7, #19]
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	487a      	ldr	r0, [pc, #488]	; (8001ee4 <keypad_read+0x278>)
 8001cfa:	f002 fbe9 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f6      	beq.n	8001cf2 <keypad_read+0x86>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[0][3];}	//A
 8001d04:	e001      	b.n	8001d0a <keypad_read+0x9e>
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	74fb      	strb	r3, [r7, #19]
 8001d0a:	2110      	movs	r1, #16
 8001d0c:	4876      	ldr	r0, [pc, #472]	; (8001ee8 <keypad_read+0x27c>)
 8001d0e:	f002 fbdf 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f6      	beq.n	8001d06 <keypad_read+0x9a>
		}

		if(i==1){
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d143      	bne.n	8001da6 <keypad_read+0x13a>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d24:	486f      	ldr	r0, [pc, #444]	; (8001ee4 <keypad_read+0x278>)
 8001d26:	f002 fbeb 	bl	8004500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d30:	486b      	ldr	r0, [pc, #428]	; (8001ee0 <keypad_read+0x274>)
 8001d32:	f002 fbe5 	bl	8004500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8001d36:	2201      	movs	r2, #1
 8001d38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d3c:	4868      	ldr	r0, [pc, #416]	; (8001ee0 <keypad_read+0x274>)
 8001d3e:	f002 fbdf 	bl	8004500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d48:	4865      	ldr	r0, [pc, #404]	; (8001ee0 <keypad_read+0x274>)
 8001d4a:	f002 fbd9 	bl	8004500 <HAL_GPIO_WritePin>

			HAL_Delay(10);
 8001d4e:	200a      	movs	r0, #10
 8001d50:	f001 fa6e 	bl	8003230 <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[1][0];}	//4
 8001d54:	e001      	b.n	8001d5a <keypad_read+0xee>
 8001d56:	793b      	ldrb	r3, [r7, #4]
 8001d58:	74fb      	strb	r3, [r7, #19]
 8001d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d5e:	4860      	ldr	r0, [pc, #384]	; (8001ee0 <keypad_read+0x274>)
 8001d60:	f002 fbb6 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f5      	beq.n	8001d56 <keypad_read+0xea>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[1][1];}	//5
 8001d6a:	e001      	b.n	8001d70 <keypad_read+0x104>
 8001d6c:	797b      	ldrb	r3, [r7, #5]
 8001d6e:	74fb      	strb	r3, [r7, #19]
 8001d70:	2104      	movs	r1, #4
 8001d72:	485c      	ldr	r0, [pc, #368]	; (8001ee4 <keypad_read+0x278>)
 8001d74:	f002 fbac 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f6      	beq.n	8001d6c <keypad_read+0x100>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[1][2];}	//6
 8001d7e:	e001      	b.n	8001d84 <keypad_read+0x118>
 8001d80:	79bb      	ldrb	r3, [r7, #6]
 8001d82:	74fb      	strb	r3, [r7, #19]
 8001d84:	2101      	movs	r1, #1
 8001d86:	4857      	ldr	r0, [pc, #348]	; (8001ee4 <keypad_read+0x278>)
 8001d88:	f002 fba2 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f6      	beq.n	8001d80 <keypad_read+0x114>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[1][3];}	//B
 8001d92:	e001      	b.n	8001d98 <keypad_read+0x12c>
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	74fb      	strb	r3, [r7, #19]
 8001d98:	2110      	movs	r1, #16
 8001d9a:	4853      	ldr	r0, [pc, #332]	; (8001ee8 <keypad_read+0x27c>)
 8001d9c:	f002 fb98 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f6      	beq.n	8001d94 <keypad_read+0x128>
		}

		if(i==2){
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d143      	bne.n	8001e34 <keypad_read+0x1c8>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 8001dac:	2201      	movs	r2, #1
 8001dae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001db2:	484c      	ldr	r0, [pc, #304]	; (8001ee4 <keypad_read+0x278>)
 8001db4:	f002 fba4 	bl	8004500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dbe:	4848      	ldr	r0, [pc, #288]	; (8001ee0 <keypad_read+0x274>)
 8001dc0:	f002 fb9e 	bl	8004500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dca:	4845      	ldr	r0, [pc, #276]	; (8001ee0 <keypad_read+0x274>)
 8001dcc:	f002 fb98 	bl	8004500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd6:	4842      	ldr	r0, [pc, #264]	; (8001ee0 <keypad_read+0x274>)
 8001dd8:	f002 fb92 	bl	8004500 <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 8001ddc:	200a      	movs	r0, #10
 8001dde:	f001 fa27 	bl	8003230 <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[2][0];}	//7
 8001de2:	e001      	b.n	8001de8 <keypad_read+0x17c>
 8001de4:	7a3b      	ldrb	r3, [r7, #8]
 8001de6:	74fb      	strb	r3, [r7, #19]
 8001de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dec:	483c      	ldr	r0, [pc, #240]	; (8001ee0 <keypad_read+0x274>)
 8001dee:	f002 fb6f 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f5      	beq.n	8001de4 <keypad_read+0x178>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[2][1];}	//8
 8001df8:	e001      	b.n	8001dfe <keypad_read+0x192>
 8001dfa:	7a7b      	ldrb	r3, [r7, #9]
 8001dfc:	74fb      	strb	r3, [r7, #19]
 8001dfe:	2104      	movs	r1, #4
 8001e00:	4838      	ldr	r0, [pc, #224]	; (8001ee4 <keypad_read+0x278>)
 8001e02:	f002 fb65 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f6      	beq.n	8001dfa <keypad_read+0x18e>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[2][2];}	//9
 8001e0c:	e001      	b.n	8001e12 <keypad_read+0x1a6>
 8001e0e:	7abb      	ldrb	r3, [r7, #10]
 8001e10:	74fb      	strb	r3, [r7, #19]
 8001e12:	2101      	movs	r1, #1
 8001e14:	4833      	ldr	r0, [pc, #204]	; (8001ee4 <keypad_read+0x278>)
 8001e16:	f002 fb5b 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f6      	beq.n	8001e0e <keypad_read+0x1a2>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[2][3];}	//C
 8001e20:	e001      	b.n	8001e26 <keypad_read+0x1ba>
 8001e22:	7afb      	ldrb	r3, [r7, #11]
 8001e24:	74fb      	strb	r3, [r7, #19]
 8001e26:	2110      	movs	r1, #16
 8001e28:	482f      	ldr	r0, [pc, #188]	; (8001ee8 <keypad_read+0x27c>)
 8001e2a:	f002 fb51 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f6      	beq.n	8001e22 <keypad_read+0x1b6>
		}

		if(i==3){
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d143      	bne.n	8001ec2 <keypad_read+0x256>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e40:	4828      	ldr	r0, [pc, #160]	; (8001ee4 <keypad_read+0x278>)
 8001e42:	f002 fb5d 	bl	8004500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e4c:	4824      	ldr	r0, [pc, #144]	; (8001ee0 <keypad_read+0x274>)
 8001e4e:	f002 fb57 	bl	8004500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e58:	4821      	ldr	r0, [pc, #132]	; (8001ee0 <keypad_read+0x274>)
 8001e5a:	f002 fb51 	bl	8004500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e64:	481e      	ldr	r0, [pc, #120]	; (8001ee0 <keypad_read+0x274>)
 8001e66:	f002 fb4b 	bl	8004500 <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 8001e6a:	200a      	movs	r0, #10
 8001e6c:	f001 f9e0 	bl	8003230 <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[3][0];}	//*
 8001e70:	e001      	b.n	8001e76 <keypad_read+0x20a>
 8001e72:	7b3b      	ldrb	r3, [r7, #12]
 8001e74:	74fb      	strb	r3, [r7, #19]
 8001e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e7a:	4819      	ldr	r0, [pc, #100]	; (8001ee0 <keypad_read+0x274>)
 8001e7c:	f002 fb28 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f5      	beq.n	8001e72 <keypad_read+0x206>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[3][1];}	//0
 8001e86:	e001      	b.n	8001e8c <keypad_read+0x220>
 8001e88:	7b7b      	ldrb	r3, [r7, #13]
 8001e8a:	74fb      	strb	r3, [r7, #19]
 8001e8c:	2104      	movs	r1, #4
 8001e8e:	4815      	ldr	r0, [pc, #84]	; (8001ee4 <keypad_read+0x278>)
 8001e90:	f002 fb1e 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f6      	beq.n	8001e88 <keypad_read+0x21c>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[3][2];}	//+
 8001e9a:	e001      	b.n	8001ea0 <keypad_read+0x234>
 8001e9c:	7bbb      	ldrb	r3, [r7, #14]
 8001e9e:	74fb      	strb	r3, [r7, #19]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	4810      	ldr	r0, [pc, #64]	; (8001ee4 <keypad_read+0x278>)
 8001ea4:	f002 fb14 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f6      	beq.n	8001e9c <keypad_read+0x230>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[3][3];}	//D
 8001eae:	e001      	b.n	8001eb4 <keypad_read+0x248>
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	74fb      	strb	r3, [r7, #19]
 8001eb4:	2110      	movs	r1, #16
 8001eb6:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <keypad_read+0x27c>)
 8001eb8:	f002 fb0a 	bl	80044d0 <HAL_GPIO_ReadPin>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f6      	beq.n	8001eb0 <keypad_read+0x244>
	for(i=0;i<4;i++){
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	f77f aedd 	ble.w	8001c8a <keypad_read+0x1e>
		}
	}
	
	return valor;
 8001ed0:	7cfb      	ldrb	r3, [r7, #19]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd90      	pop	{r4, r7, pc}
 8001eda:	bf00      	nop
 8001edc:	08009c50 	.word	0x08009c50
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40020800 	.word	0x40020800

08001eec <hi2cx_define>:
*/
I2C_HandleTypeDef hi2cx;
extern I2C_HandleTypeDef hi2c1; //* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type(i2c1,i2c2...) you use, default is hi2c1.
                                //That I2C_HandleTypeDef hi2c1 comes from main.c*.
static void hi2cx_define(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	hi2cx = hi2c1;	//* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type you use, default is hi2c1.
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <hi2cx_define+0x18>)
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <hi2cx_define+0x1c>)
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	2354      	movs	r3, #84	; 0x54
 8001efa:	461a      	mov	r2, r3
 8001efc:	f007 f9a0 	bl	8009240 <memcpy>
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	200004e4 	.word	0x200004e4
 8001f08:	2000019c 	.word	0x2000019c

08001f0c <LCD_i2cDeviceCheck>:
/**
*@brief: Lcd i2c device check.
*@retval: none
*/
void LCD_i2cDeviceCheck(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	/* Checks if target device is ready for communication. */
	/* 3 is number of trials, 1000ms is timeout */
	HAL_Delay(50);
 8001f10:	2032      	movs	r0, #50	; 0x32
 8001f12:	f001 f98d 	bl	8003230 <HAL_Delay>
	hi2cx_define();
 8001f16:	f7ff ffe9 	bl	8001eec <hi2cx_define>
	while (HAL_I2C_IsDeviceReady(&hi2cx, i2cDeviceAddr, 3, 1000) != HAL_OK) 
 8001f1a:	bf00      	nop
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <LCD_i2cDeviceCheck+0x30>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b299      	uxth	r1, r3
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	2203      	movs	r2, #3
 8001f28:	4805      	ldr	r0, [pc, #20]	; (8001f40 <LCD_i2cDeviceCheck+0x34>)
 8001f2a:	f002 fd45 	bl	80049b8 <HAL_I2C_IsDeviceReady>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f3      	bne.n	8001f1c <LCD_i2cDeviceCheck+0x10>
	{	
		
	}
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000010 	.word	0x20000010
 8001f40:	200004e4 	.word	0x200004e4

08001f44 <LCD_Set_Command>:
/**
*@brief: Send commands to lcd.
*@retval: none
*/
void LCD_Set_Command(uint8_t cmd)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
	data_M = cmd & Mask_Data;        //Most significant bit
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <LCD_Set_Command+0x9c>)
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	4013      	ands	r3, r2
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <LCD_Set_Command+0xa0>)
 8001f5a:	701a      	strb	r2, [r3, #0]
	data_L = (cmd << 4) & Mask_Data; //Least significant bit
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	b25a      	sxtb	r2, r3
 8001f62:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <LCD_Set_Command+0x9c>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	b25b      	sxtb	r3, r3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	b25b      	sxtb	r3, r3
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <LCD_Set_Command+0xa4>)
 8001f70:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <LCD_Set_Command+0xa0>)
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <LCD_Set_Command+0xa8>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <LCD_Set_Command+0xa0>)
 8001f80:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <LCD_Set_Command+0xa4>)
 8001f84:	781a      	ldrb	r2, [r3, #0]
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <LCD_Set_Command+0xa8>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <LCD_Set_Command+0xa4>)
 8001f90:	701a      	strb	r2, [r3, #0]
	
	data[0] = data_M | LCD_E;  //Enable E pin, RS=0
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <LCD_Set_Command+0xa0>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <LCD_Set_Command+0xac>)
 8001f9e:	701a      	strb	r2, [r3, #0]
	data[1] = data_M;          //Disable E pin, RS=0
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <LCD_Set_Command+0xa0>)
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <LCD_Set_Command+0xac>)
 8001fa6:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E;
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <LCD_Set_Command+0xa4>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <LCD_Set_Command+0xac>)
 8001fb4:	709a      	strb	r2, [r3, #2]
  data[3] = data_L;
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <LCD_Set_Command+0xa4>)
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <LCD_Set_Command+0xac>)
 8001fbc:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();	
 8001fbe:	f7ff ff95 	bl	8001eec <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <LCD_Set_Command+0xb0>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b299      	uxth	r1, r3
 8001fc8:	23c8      	movs	r3, #200	; 0xc8
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2304      	movs	r3, #4
 8001fce:	4a08      	ldr	r2, [pc, #32]	; (8001ff0 <LCD_Set_Command+0xac>)
 8001fd0:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <LCD_Set_Command+0xb4>)
 8001fd2:	f002 fbf3 	bl	80047bc <HAL_I2C_Master_Transmit>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000011 	.word	0x20000011
 8001fe4:	2000053c 	.word	0x2000053c
 8001fe8:	2000053d 	.word	0x2000053d
 8001fec:	2000053e 	.word	0x2000053e
 8001ff0:	20000538 	.word	0x20000538
 8001ff4:	20000010 	.word	0x20000010
 8001ff8:	200004e4 	.word	0x200004e4

08001ffc <LCD_Write_Data>:
/**
*@brief: Write data to lcd.
*@retval: none
*/
void LCD_Write_Data(uint8_t datax)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af02      	add	r7, sp, #8
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
	data_M = datax & Mask_Data;        //Most significant bit
 8002006:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <LCD_Write_Data+0xa8>)
 8002008:	781a      	ldrb	r2, [r3, #0]
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	4013      	ands	r3, r2
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <LCD_Write_Data+0xac>)
 8002012:	701a      	strb	r2, [r3, #0]
	data_L = (datax << 4) & Mask_Data; //Least significant bit
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	b25a      	sxtb	r2, r3
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <LCD_Write_Data+0xa8>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b25b      	sxtb	r3, r3
 8002020:	4013      	ands	r3, r2
 8002022:	b25b      	sxtb	r3, r3
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b21      	ldr	r3, [pc, #132]	; (80020ac <LCD_Write_Data+0xb0>)
 8002028:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 800202a:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <LCD_Write_Data+0xac>)
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <LCD_Write_Data+0xb4>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <LCD_Write_Data+0xac>)
 8002038:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <LCD_Write_Data+0xb0>)
 800203c:	781a      	ldrb	r2, [r3, #0]
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <LCD_Write_Data+0xb4>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <LCD_Write_Data+0xb0>)
 8002048:	701a      	strb	r2, [r3, #0]
	 	
	data[0] = data_M | LCD_E|LCD_RS;  //Enable E pin, RS=1
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <LCD_Write_Data+0xac>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	f043 0305 	orr.w	r3, r3, #5
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <LCD_Write_Data+0xb8>)
 8002056:	701a      	strb	r2, [r3, #0]
	data[1] = data_M | LCD_RS;        //Disable E pin, RS=1
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <LCD_Write_Data+0xac>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <LCD_Write_Data+0xb8>)
 8002064:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E|LCD_RS;
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <LCD_Write_Data+0xb0>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	f043 0305 	orr.w	r3, r3, #5
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <LCD_Write_Data+0xb8>)
 8002072:	709a      	strb	r2, [r3, #2]
  data[3] = data_L | LCD_RS;  
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <LCD_Write_Data+0xb0>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <LCD_Write_Data+0xb8>)
 8002080:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();
 8002082:	f7ff ff33 	bl	8001eec <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <LCD_Write_Data+0xbc>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b299      	uxth	r1, r3
 800208c:	23c8      	movs	r3, #200	; 0xc8
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	2304      	movs	r3, #4
 8002092:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <LCD_Write_Data+0xb8>)
 8002094:	4809      	ldr	r0, [pc, #36]	; (80020bc <LCD_Write_Data+0xc0>)
 8002096:	f002 fb91 	bl	80047bc <HAL_I2C_Master_Transmit>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000011 	.word	0x20000011
 80020a8:	2000053c 	.word	0x2000053c
 80020ac:	2000053d 	.word	0x2000053d
 80020b0:	2000053e 	.word	0x2000053e
 80020b4:	20000538 	.word	0x20000538
 80020b8:	20000010 	.word	0x20000010
 80020bc:	200004e4 	.word	0x200004e4

080020c0 <LCD_Clear>:
/**
*@brief: Clear lcd display.
*@retval: none
*/
void LCD_Clear(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 80020c4:	2001      	movs	r0, #1
 80020c6:	f7ff ff3d 	bl	8001f44 <LCD_Set_Command>
	HAL_Delay(10);
 80020ca:	200a      	movs	r0, #10
 80020cc:	f001 f8b0 	bl	8003230 <HAL_Delay>
	str_len = 0;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <LCD_Clear+0x20>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
	line_pos = 1;
 80020d6:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <LCD_Clear+0x24>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	2000053f 	.word	0x2000053f
 80020e4:	20000012 	.word	0x20000012

080020e8 <LCD_SetCursor>:
*@brief: Set lcd cursor position.
*@param: line_x: line no, chr_x: character no.
*@retval: none
*/
void LCD_SetCursor(int line_x, int chr_x)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  line_pos = line_x; //hold line position.	
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <LCD_SetCursor+0x58>)
 80020f8:	701a      	strb	r2, [r3, #0]
	
	if(((line_x >=1 && line_x <= line_MAX) && (chr_x >=1 && chr_x <= chr_MAX)))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	dd1b      	ble.n	8002138 <LCD_SetCursor+0x50>
 8002100:	2302      	movs	r3, #2
 8002102:	461a      	mov	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4293      	cmp	r3, r2
 8002108:	dc16      	bgt.n	8002138 <LCD_SetCursor+0x50>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	dd13      	ble.n	8002138 <LCD_SetCursor+0x50>
 8002110:	2310      	movs	r3, #16
 8002112:	461a      	mov	r2, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4293      	cmp	r3, r2
 8002118:	dc0e      	bgt.n	8002138 <LCD_SetCursor+0x50>
	{		
		LCD_Set_Command(LCD_SET_DDRAMADDR | Cursor_Data[line_x - 1][chr_x - 1]);		
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	3b01      	subs	r3, #1
 8002122:	4908      	ldr	r1, [pc, #32]	; (8002144 <LCD_SetCursor+0x5c>)
 8002124:	0112      	lsls	r2, r2, #4
 8002126:	440a      	add	r2, r1
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff06 	bl	8001f44 <LCD_Set_Command>
	}
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000012 	.word	0x20000012
 8002144:	08009e08 	.word	0x08009e08

08002148 <LCD_Send_String>:
*@brief: Send string data to lcd.
*@param: str[]: string array, mode: str slide/noslide.
*@retval: none
*/
void LCD_Send_String(char str[], uint8_t mode)
{	 
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
	static char *buffer[100];
	static uint8_t i[4] = {chr_MAX,chr_MAX,chr_MAX,chr_MAX}; //i follows the ch position while sliding.
  static uint8_t c[4] = {0, 0, 0, 0}; //c follows the each ch of the str buffer while sliding.
  static uint8_t ch_len = 0; //follow the string lenght.
  str_len = 0;
 8002154:	4b51      	ldr	r3, [pc, #324]	; (800229c <LCD_Send_String+0x154>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
	

	switch(mode)
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01e      	beq.n	800219e <LCD_Send_String+0x56>
 8002160:	2b01      	cmp	r3, #1
 8002162:	d021      	beq.n	80021a8 <LCD_Send_String+0x60>
					}												
			}
		 			
			break;	 
	}	
}
 8002164:	e096      	b.n	8002294 <LCD_Send_String+0x14c>
				LCD_Write_Data (*str++);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff44 	bl	8001ffc <LCD_Write_Data>
				str_len++;
 8002174:	4b49      	ldr	r3, [pc, #292]	; (800229c <LCD_Send_String+0x154>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	3301      	adds	r3, #1
 800217a:	b2da      	uxtb	r2, r3
 800217c:	4b47      	ldr	r3, [pc, #284]	; (800229c <LCD_Send_String+0x154>)
 800217e:	701a      	strb	r2, [r3, #0]
				if(str_len == chr_MAX)
 8002180:	4b46      	ldr	r3, [pc, #280]	; (800229c <LCD_Send_String+0x154>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2210      	movs	r2, #16
 8002186:	4293      	cmp	r3, r2
 8002188:	d109      	bne.n	800219e <LCD_Send_String+0x56>
					LCD_SetCursor(line_pos + 1, 1);
 800218a:	4b45      	ldr	r3, [pc, #276]	; (80022a0 <LCD_Send_String+0x158>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	2101      	movs	r1, #1
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ffa8 	bl	80020e8 <LCD_SetCursor>
					str_len = 0;
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <LCD_Send_String+0x154>)
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
			while (*str) 
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1df      	bne.n	8002166 <LCD_Send_String+0x1e>
			break;
 80021a6:	e075      	b.n	8002294 <LCD_Send_String+0x14c>
		  for(int a = 0; a < BFR_MAX; a++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e009      	b.n	80021c2 <LCD_Send_String+0x7a>
		  buffer[a]=str++;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	493b      	ldr	r1, [pc, #236]	; (80022a4 <LCD_Send_String+0x15c>)
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		  for(int a = 0; a < BFR_MAX; a++)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	3301      	adds	r3, #1
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	2364      	movs	r3, #100	; 0x64
 80021c4:	461a      	mov	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4293      	cmp	r3, r2
 80021ca:	dbf0      	blt.n	80021ae <LCD_Send_String+0x66>
			ch_len = strlen(*buffer);
 80021cc:	4b35      	ldr	r3, [pc, #212]	; (80022a4 <LCD_Send_String+0x15c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f805 	bl	80001e0 <strlen>
 80021d6:	4603      	mov	r3, r0
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <LCD_Send_String+0x160>)
 80021dc:	701a      	strb	r2, [r3, #0]
			LCD_SetCursor(line_pos, i[line_pos - 1]);	
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <LCD_Send_String+0x158>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <LCD_Send_String+0x158>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	4a30      	ldr	r2, [pc, #192]	; (80022ac <LCD_Send_String+0x164>)
 80021ec:	5cd3      	ldrb	r3, [r2, r3]
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7ff ff7a 	bl	80020e8 <LCD_SetCursor>
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <LCD_Send_String+0x158>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	4a2d      	ldr	r2, [pc, #180]	; (80022b0 <LCD_Send_String+0x168>)
 80021fc:	5cd3      	ldrb	r3, [r2, r3]
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	e00a      	b.n	8002218 <LCD_Send_String+0xd0>
			LCD_Write_Data (*buffer[k]);
 8002202:	4a28      	ldr	r2, [pc, #160]	; (80022a4 <LCD_Send_String+0x15c>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fef5 	bl	8001ffc <LCD_Write_Data>
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3301      	adds	r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <LCD_Send_String+0x160>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	4293      	cmp	r3, r2
 8002222:	dbee      	blt.n	8002202 <LCD_Send_String+0xba>
			i[line_pos - 1]--;
 8002224:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <LCD_Send_String+0x158>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	3b01      	subs	r3, #1
 800222a:	4a20      	ldr	r2, [pc, #128]	; (80022ac <LCD_Send_String+0x164>)
 800222c:	5cd2      	ldrb	r2, [r2, r3]
 800222e:	3a01      	subs	r2, #1
 8002230:	b2d1      	uxtb	r1, r2
 8002232:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <LCD_Send_String+0x164>)
 8002234:	54d1      	strb	r1, [r2, r3]
			if(i[line_pos -1] == 0)
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <LCD_Send_String+0x158>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	3b01      	subs	r3, #1
 800223c:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <LCD_Send_String+0x164>)
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d126      	bne.n	8002292 <LCD_Send_String+0x14a>
				i[line_pos - 1] = 1;
 8002244:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <LCD_Send_String+0x158>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3b01      	subs	r3, #1
 800224a:	4a18      	ldr	r2, [pc, #96]	; (80022ac <LCD_Send_String+0x164>)
 800224c:	2101      	movs	r1, #1
 800224e:	54d1      	strb	r1, [r2, r3]
				c[line_pos - 1]++;
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <LCD_Send_String+0x158>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3b01      	subs	r3, #1
 8002256:	4a16      	ldr	r2, [pc, #88]	; (80022b0 <LCD_Send_String+0x168>)
 8002258:	5cd2      	ldrb	r2, [r2, r3]
 800225a:	3201      	adds	r2, #1
 800225c:	b2d1      	uxtb	r1, r2
 800225e:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <LCD_Send_String+0x168>)
 8002260:	54d1      	strb	r1, [r2, r3]
        if(c[line_pos - 1] == ch_len)
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <LCD_Send_String+0x158>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	3b01      	subs	r3, #1
 8002268:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <LCD_Send_String+0x168>)
 800226a:	5cd2      	ldrb	r2, [r2, r3]
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <LCD_Send_String+0x160>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d10e      	bne.n	8002292 <LCD_Send_String+0x14a>
						i[line_pos - 1] = chr_MAX;
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <LCD_Send_String+0x158>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	3b01      	subs	r3, #1
 800227a:	2110      	movs	r1, #16
 800227c:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <LCD_Send_String+0x164>)
 800227e:	54d1      	strb	r1, [r2, r3]
						c[line_pos - 1] = 0;
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <LCD_Send_String+0x158>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	3b01      	subs	r3, #1
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <LCD_Send_String+0x168>)
 8002288:	2100      	movs	r1, #0
 800228a:	54d1      	strb	r1, [r2, r3]
						ch_len = 0;						
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <LCD_Send_String+0x160>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
			break;	 
 8002292:	bf00      	nop
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	2000053f 	.word	0x2000053f
 80022a0:	20000012 	.word	0x20000012
 80022a4:	20000540 	.word	0x20000540
 80022a8:	200006d0 	.word	0x200006d0
 80022ac:	20000014 	.word	0x20000014
 80022b0:	200006d4 	.word	0x200006d4

080022b4 <LCD_Print>:
*@brief: Print value, ch to lcd.
*@param: *ch: "string + %f", value: float data variable
*@retval: none
*/
void LCD_Print(char const *ch, uint32_t value)       //antes estaba en float lo cambie
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b09c      	sub	sp, #112	; 0x70
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
	char data_ch[100]; //default data size:100.
	
	sprintf(data_ch, ch, value);
 80022be:	f107 030c 	add.w	r3, r7, #12
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f006 ffd0 	bl	800926c <siprintf>
	LCD_Send_String(data_ch, STR_NOSLIDE);	
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ff38 	bl	8002148 <LCD_Send_String>
}
 80022d8:	bf00      	nop
 80022da:	3770      	adds	r7, #112	; 0x70
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <LCD_BackLight>:
*@brief: Backlight control
*@param: light_state: BL on/off
*@retval: none
*/
void LCD_BackLight(uint8_t light_state)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
	if(light_state == LCD_BL_ON)
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d106      	bne.n	80022fe <LCD_BackLight+0x1e>
	{
    data_BL = LCD_BL_ON;		
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <LCD_BackLight+0x38>)
 80022f2:	2208      	movs	r2, #8
 80022f4:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20); //Empty character
 80022f6:	2020      	movs	r0, #32
 80022f8:	f7ff fe80 	bl	8001ffc <LCD_Write_Data>
	else if (light_state == LCD_BL_OFF)
	{
		data_BL = LCD_BL_OFF;
		LCD_Write_Data(0x20);
	}
}
 80022fc:	e008      	b.n	8002310 <LCD_BackLight+0x30>
	else if (light_state == LCD_BL_OFF)
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <LCD_BackLight+0x30>
		data_BL = LCD_BL_OFF;
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <LCD_BackLight+0x38>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20);
 800230a:	2020      	movs	r0, #32
 800230c:	f7ff fe76 	bl	8001ffc <LCD_Write_Data>
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2000053e 	.word	0x2000053e

0800231c <LCD_Init>:
/**
*@brief: Lcd initiliazing settings.
*@retval: none
*/
void LCD_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 8002320:	2001      	movs	r0, #1
 8002322:	f7ff fe0f 	bl	8001f44 <LCD_Set_Command>
	HAL_Delay(1000);
 8002326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800232a:	f000 ff81 	bl	8003230 <HAL_Delay>
	LCD_Set_Command(LCD_RETURN_HOME);
 800232e:	2002      	movs	r0, #2
 8002330:	f7ff fe08 	bl	8001f44 <LCD_Set_Command>
	HAL_Delay(5);
 8002334:	2005      	movs	r0, #5
 8002336:	f000 ff7b 	bl	8003230 <HAL_Delay>
	LCD_Set_Command(LCD_FUNCTION_SET|MODE_4B|MODE_2L|MODE_5X8_DOTS);
 800233a:	2028      	movs	r0, #40	; 0x28
 800233c:	f7ff fe02 	bl	8001f44 <LCD_Set_Command>
	HAL_Delay(5);
 8002340:	2005      	movs	r0, #5
 8002342:	f000 ff75 	bl	8003230 <HAL_Delay>
	LCD_Set_Command(LCD_DISPLAY_CONTROL|DISPLAY_ON|CURSOR_OFF|BLINK_OFF);
 8002346:	200c      	movs	r0, #12
 8002348:	f7ff fdfc 	bl	8001f44 <LCD_Set_Command>
	HAL_Delay(5);
 800234c:	2005      	movs	r0, #5
 800234e:	f000 ff6f 	bl	8003230 <HAL_Delay>
	LCD_Set_Command(LCD_SET_DDRAMADDR);
 8002352:	2080      	movs	r0, #128	; 0x80
 8002354:	f7ff fdf6 	bl	8001f44 <LCD_Set_Command>
	HAL_Delay(500);
 8002358:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800235c:	f000 ff68 	bl	8003230 <HAL_Delay>
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <main>:
void AutomaticControlTask(void const * argument);



int main(void)
{
 8002364:	b5b0      	push	{r4, r5, r7, lr}
 8002366:	b09c      	sub	sp, #112	; 0x70
 8002368:	af00      	add	r7, sp, #0

    BSP_Init();
 800236a:	f7fe fef3 	bl	8001154 <BSP_Init>
    APP_Show_SystemIntro();
 800236e:	f000 fc7f 	bl	8002c70 <APP_Show_SystemIntro>


  Queue1Handle = xQueueCreate(3, sizeof(LCD_DataTypeDef));
 8002372:	2200      	movs	r2, #0
 8002374:	210c      	movs	r1, #12
 8002376:	2003      	movs	r0, #3
 8002378:	f005 f86a 	bl	8007450 <xQueueGenericCreate>
 800237c:	4603      	mov	r3, r0
 800237e:	4a3e      	ldr	r2, [pc, #248]	; (8002478 <main+0x114>)
 8002380:	6013      	str	r3, [r2, #0]
  Queue3Handle = xQueueCreate(3, sizeof(int));
 8002382:	2200      	movs	r2, #0
 8002384:	2104      	movs	r1, #4
 8002386:	2003      	movs	r0, #3
 8002388:	f005 f862 	bl	8007450 <xQueueGenericCreate>
 800238c:	4603      	mov	r3, r0
 800238e:	4a3b      	ldr	r2, [pc, #236]	; (800247c <main+0x118>)
 8002390:	6013      	str	r3, [r2, #0]
  Queue4Handle = xQueueCreate(3, sizeof(Output_DataTypeDef));
 8002392:	2200      	movs	r2, #0
 8002394:	210c      	movs	r1, #12
 8002396:	2003      	movs	r0, #3
 8002398:	f005 f85a 	bl	8007450 <xQueueGenericCreate>
 800239c:	4603      	mov	r3, r0
 800239e:	4a38      	ldr	r2, [pc, #224]	; (8002480 <main+0x11c>)
 80023a0:	6013      	str	r3, [r2, #0]
  Queue5Handle = xQueueCreate(3, sizeof(uint32_t));
 80023a2:	2200      	movs	r2, #0
 80023a4:	2104      	movs	r1, #4
 80023a6:	2003      	movs	r0, #3
 80023a8:	f005 f852 	bl	8007450 <xQueueGenericCreate>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4a35      	ldr	r2, [pc, #212]	; (8002484 <main+0x120>)
 80023b0:	6013      	str	r3, [r2, #0]

  QueueSetHandle = xQueueCreateSet(6); // revisar si no es mucho
 80023b2:	2006      	movs	r0, #6
 80023b4:	f005 fbc8 	bl	8007b48 <xQueueCreateSet>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4a33      	ldr	r2, [pc, #204]	; (8002488 <main+0x124>)
 80023bc:	6013      	str	r3, [r2, #0]

  xQueueAddToSet(Queue1Handle, QueueSetHandle);
 80023be:	4b2e      	ldr	r3, [pc, #184]	; (8002478 <main+0x114>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a31      	ldr	r2, [pc, #196]	; (8002488 <main+0x124>)
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f005 fbcc 	bl	8007b66 <xQueueAddToSet>
  xQueueAddToSet(Queue3Handle, QueueSetHandle);
 80023ce:	4b2b      	ldr	r3, [pc, #172]	; (800247c <main+0x118>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a2d      	ldr	r2, [pc, #180]	; (8002488 <main+0x124>)
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f005 fbc4 	bl	8007b66 <xQueueAddToSet>

  osThreadDef(KeypadTask, KeypadTask, osPriorityLow, 0, 128);
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <main+0x128>)
 80023e0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80023e4:	461d      	mov	r5, r3
 80023e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KeypadTaskHandle = osThreadCreate(osThread(KeypadTask), NULL);
 80023f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f004 feac 	bl	8007156 <osThreadCreate>
 80023fe:	4603      	mov	r3, r0
 8002400:	4a23      	ldr	r2, [pc, #140]	; (8002490 <main+0x12c>)
 8002402:	6013      	str	r3, [r2, #0]


  osThreadDef(SensorsTask, SensorsTask, osPriorityBelowNormal, 0, 128);
 8002404:	4b23      	ldr	r3, [pc, #140]	; (8002494 <main+0x130>)
 8002406:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800240a:	461d      	mov	r5, r3
 800240c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800240e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002410:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002414:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorsTaskHandle = osThreadCreate(osThread(SensorsTask), NULL);
 8002418:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f004 fe99 	bl	8007156 <osThreadCreate>
 8002424:	4603      	mov	r3, r0
 8002426:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <main+0x134>)
 8002428:	6013      	str	r3, [r2, #0]

  osThreadDef(UserInterfaceTask, UserInterfaceTask, osPriorityNormal, 0, 128);
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <main+0x138>)
 800242c:	f107 041c 	add.w	r4, r7, #28
 8002430:	461d      	mov	r5, r3
 8002432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800243a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UserInterfaceTaskHandle = osThreadCreate(osThread(UserInterfaceTask), NULL);
 800243e:	f107 031c 	add.w	r3, r7, #28
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f004 fe86 	bl	8007156 <osThreadCreate>
 800244a:	4603      	mov	r3, r0
 800244c:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <main+0x13c>)
 800244e:	6013      	str	r3, [r2, #0]

  osThreadDef(AutomaticControlTask, AutomaticControlTask, osPriorityHigh, 0, 128);
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <main+0x140>)
 8002452:	463c      	mov	r4, r7
 8002454:	461d      	mov	r5, r3
 8002456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800245e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AutomaticControlTaskHandle = osThreadCreate(osThread(AutomaticControlTask), NULL);
 8002462:	463b      	mov	r3, r7
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f004 fe75 	bl	8007156 <osThreadCreate>
 800246c:	4603      	mov	r3, r0
 800246e:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <main+0x144>)
 8002470:	6013      	str	r3, [r2, #0]



  osKernelStart();
 8002472:	f004 fe69 	bl	8007148 <osKernelStart>


  while (1)
 8002476:	e7fe      	b.n	8002476 <main+0x112>
 8002478:	200006e8 	.word	0x200006e8
 800247c:	200006ec 	.word	0x200006ec
 8002480:	200006f0 	.word	0x200006f0
 8002484:	200006f4 	.word	0x200006f4
 8002488:	200006f8 	.word	0x200006f8
 800248c:	08009ca4 	.word	0x08009ca4
 8002490:	200006d8 	.word	0x200006d8
 8002494:	08009cc0 	.word	0x08009cc0
 8002498:	200006dc 	.word	0x200006dc
 800249c:	08009cdc 	.word	0x08009cdc
 80024a0:	200006e0 	.word	0x200006e0
 80024a4:	08009cf8 	.word	0x08009cf8
 80024a8:	200006e4 	.word	0x200006e4

080024ac <KeypadTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void KeypadTask(void const * argument)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

	 int key;

  for(;;)
  {
	  key = keypad_read();
 80024b4:	f7ff fbda 	bl	8001c6c <keypad_read>
 80024b8:	4603      	mov	r3, r0
 80024ba:	60fb      	str	r3, [r7, #12]

	if(key != 0){
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <KeypadTask+0x28>

		xQueueSend(Queue3Handle, &key, 5000);  // sacar pormax_delay que es puro bloqueante
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <KeypadTask+0x30>)
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	f107 010c 	add.w	r1, r7, #12
 80024ca:	2300      	movs	r3, #0
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	f005 f820 	bl	8007514 <xQueueGenericSend>
	}

    osDelay(10);
 80024d4:	200a      	movs	r0, #10
 80024d6:	f004 fe8a 	bl	80071ee <osDelay>
	  key = keypad_read();
 80024da:	e7eb      	b.n	80024b4 <KeypadTask+0x8>
 80024dc:	200006ec 	.word	0x200006ec

080024e0 <SensorsTask>:

  }

}

void SensorsTask(void const * argument){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	LCD_DataTypeDef LCD_Data;


	while(1){

		DHT_GetData(&DHT22);
 80024e8:	f107 0318 	add.w	r3, r7, #24
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fd15 	bl	8000f1c <DHT_GetData>
		LCD_Data.humidity = DHT22.Humidity;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	613b      	str	r3, [r7, #16]
		LCD_Data.temperature = DHT22.Temperature;
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	60fb      	str	r3, [r7, #12]
		LCD_Data.soilHumidity = APP_SoilHumidity();
 80024fa:	f000 fbd3 	bl	8002ca4 <APP_SoilHumidity>
 80024fe:	4603      	mov	r3, r0
 8002500:	617b      	str	r3, [r7, #20]




		xQueueSend(Queue1Handle, &LCD_Data, 0);
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <SensorsTask+0x50>)
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	f107 010c 	add.w	r1, r7, #12
 800250a:	2300      	movs	r3, #0
 800250c:	2200      	movs	r2, #0
 800250e:	f005 f801 	bl	8007514 <xQueueGenericSend>
		xQueueSend(Queue5Handle, &LCD_Data.soilHumidity, 0);
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <SensorsTask+0x54>)
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	f103 0108 	add.w	r1, r3, #8
 800251e:	2300      	movs	r3, #0
 8002520:	2200      	movs	r2, #0
 8002522:	f004 fff7 	bl	8007514 <xQueueGenericSend>


		osDelay(1000);                //Bajar para testear
 8002526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800252a:	f004 fe60 	bl	80071ee <osDelay>
		DHT_GetData(&DHT22);
 800252e:	e7db      	b.n	80024e8 <SensorsTask+0x8>
 8002530:	200006e8 	.word	0x200006e8
 8002534:	200006f4 	.word	0x200006f4

08002538 <UserInterfaceTask>:
	}
}

void UserInterfaceTask(void const * argument){
 8002538:	b580      	push	{r7, lr}
 800253a:	b08e      	sub	sp, #56	; 0x38
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

	int rx_key;
	LCD_DataTypeDef LCD_Data;
	Output_DataTypeDef Output_Data;
	uint32_t rangohmin = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t rangohmax = 30;
 8002544:	231e      	movs	r3, #30
 8002546:	633b      	str	r3, [r7, #48]	; 0x30
	int cortina_manual;

	while(1){


		QueueSetMemberHandle_t who_unblocked = xQueueSelectFromSet(QueueSetHandle, 0); //si no es 0 es se rompe con Hard_Falut interrupt
 8002548:	4bb6      	ldr	r3, [pc, #728]	; (8002824 <UserInterfaceTask+0x2ec>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f005 fb2a 	bl	8007ba8 <xQueueSelectFromSet>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24
		if(who_unblocked == Queue1Handle){
 8002556:	4bb4      	ldr	r3, [pc, #720]	; (8002828 <UserInterfaceTask+0x2f0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255c:	429a      	cmp	r2, r3
 800255e:	d11a      	bne.n	8002596 <UserInterfaceTask+0x5e>
			if(xQueueReceive(Queue1Handle, &LCD_Data, 0)){
 8002560:	4bb1      	ldr	r3, [pc, #708]	; (8002828 <UserInterfaceTask+0x2f0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f107 0114 	add.w	r1, r7, #20
 8002568:	2200      	movs	r2, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f005 f8ee 	bl	800774c <xQueueReceive>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 82ee 	beq.w	8002b54 <UserInterfaceTask+0x61c>

				LCD_Clear();
 8002578:	f7ff fda2 	bl	80020c0 <LCD_Clear>
				BSP_LCD_Humidity(LCD_Data.humidity);
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fe96 	bl	80012b0 <BSP_LCD_Humidity>
				BSP_LCD_Temperature(LCD_Data.temperature);
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fe80 	bl	800128c <BSP_LCD_Temperature>
				BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fea0 	bl	80012d4 <BSP_LCD_SoilHumidity>
 8002594:	e2de      	b.n	8002b54 <UserInterfaceTask+0x61c>


			}
		}
		else if(who_unblocked == Queue3Handle){
 8002596:	4ba5      	ldr	r3, [pc, #660]	; (800282c <UserInterfaceTask+0x2f4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259c:	429a      	cmp	r2, r3
 800259e:	f040 82d8 	bne.w	8002b52 <UserInterfaceTask+0x61a>
			if(xQueueReceive(Queue3Handle, &rx_key, 0) == pdTRUE){
 80025a2:	4ba2      	ldr	r3, [pc, #648]	; (800282c <UserInterfaceTask+0x2f4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f107 0120 	add.w	r1, r7, #32
 80025aa:	2200      	movs	r2, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f005 f8cd 	bl	800774c <xQueueReceive>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	f040 82cc 	bne.w	8002b52 <UserInterfaceTask+0x61a>
				switch (rx_key) {
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	3b30      	subs	r3, #48	; 0x30
 80025be:	2b14      	cmp	r3, #20
 80025c0:	f200 82c8 	bhi.w	8002b54 <UserInterfaceTask+0x61c>
 80025c4:	a201      	add	r2, pc, #4	; (adr r2, 80025cc <UserInterfaceTask+0x94>)
 80025c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ca:	bf00      	nop
 80025cc:	08002b19 	.word	0x08002b19
 80025d0:	080027eb 	.word	0x080027eb
 80025d4:	08002845 	.word	0x08002845
 80025d8:	0800287f 	.word	0x0800287f
 80025dc:	080028b9 	.word	0x080028b9
 80025e0:	080028f3 	.word	0x080028f3
 80025e4:	0800292d 	.word	0x0800292d
 80025e8:	08002967 	.word	0x08002967
 80025ec:	080029a1 	.word	0x080029a1
 80025f0:	080029db 	.word	0x080029db
 80025f4:	08002b55 	.word	0x08002b55
 80025f8:	08002b55 	.word	0x08002b55
 80025fc:	08002b55 	.word	0x08002b55
 8002600:	08002b55 	.word	0x08002b55
 8002604:	08002b55 	.word	0x08002b55
 8002608:	08002b55 	.word	0x08002b55
 800260c:	08002b55 	.word	0x08002b55
 8002610:	08002621 	.word	0x08002621
 8002614:	08002b55 	.word	0x08002b55
 8002618:	08002a15 	.word	0x08002a15
 800261c:	08002a4f 	.word	0x08002a4f
				            case 65:
				                LCD_Clear();
 8002620:	f7ff fd4e 	bl	80020c0 <LCD_Clear>
				                LCD_SetCursor(1, 5);
 8002624:	2105      	movs	r1, #5
 8002626:	2001      	movs	r0, #1
 8002628:	f7ff fd5e 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("MINIMO:", 1);
 800262c:	2101      	movs	r1, #1
 800262e:	4880      	ldr	r0, [pc, #512]	; (8002830 <UserInterfaceTask+0x2f8>)
 8002630:	f7ff fe40 	bl	80022b4 <LCD_Print>
				                HAL_Delay(2000);
 8002634:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002638:	f000 fdfa 	bl	8003230 <HAL_Delay>

				                who_unblocked = xQueueSelectFromSet(QueueSetHandle, portMAX_DELAY);
 800263c:	4b79      	ldr	r3, [pc, #484]	; (8002824 <UserInterfaceTask+0x2ec>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	4618      	mov	r0, r3
 8002646:	f005 faaf 	bl	8007ba8 <xQueueSelectFromSet>
 800264a:	6278      	str	r0, [r7, #36]	; 0x24
				                if(who_unblocked == Queue3Handle){
 800264c:	4b77      	ldr	r3, [pc, #476]	; (800282c <UserInterfaceTask+0x2f4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	429a      	cmp	r2, r3
 8002654:	d147      	bne.n	80026e6 <UserInterfaceTask+0x1ae>

				                	if(xQueueReceive(Queue3Handle, &rx_key, 0) == pdTRUE) {
 8002656:	4b75      	ldr	r3, [pc, #468]	; (800282c <UserInterfaceTask+0x2f4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f107 0120 	add.w	r1, r7, #32
 800265e:	2200      	movs	r2, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f005 f873 	bl	800774c <xQueueReceive>
 8002666:	4603      	mov	r3, r0
 8002668:	2b01      	cmp	r3, #1
 800266a:	d13c      	bne.n	80026e6 <UserInterfaceTask+0x1ae>
				                		switch (rx_key) {
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	3b30      	subs	r3, #48	; 0x30
 8002670:	2b09      	cmp	r3, #9
 8002672:	d835      	bhi.n	80026e0 <UserInterfaceTask+0x1a8>
 8002674:	a201      	add	r2, pc, #4	; (adr r2, 800267c <UserInterfaceTask+0x144>)
 8002676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267a:	bf00      	nop
 800267c:	080026db 	.word	0x080026db
 8002680:	080026a5 	.word	0x080026a5
 8002684:	080026ab 	.word	0x080026ab
 8002688:	080026b1 	.word	0x080026b1
 800268c:	080026b7 	.word	0x080026b7
 8002690:	080026bd 	.word	0x080026bd
 8002694:	080026c3 	.word	0x080026c3
 8002698:	080026c9 	.word	0x080026c9
 800269c:	080026cf 	.word	0x080026cf
 80026a0:	080026d5 	.word	0x080026d5
				                			case 49: rangohmin = 10; break;
 80026a4:	230a      	movs	r3, #10
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
 80026a8:	e01e      	b.n	80026e8 <UserInterfaceTask+0x1b0>
				                			case 50: rangohmin = 20; break;
 80026aa:	2314      	movs	r3, #20
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
 80026ae:	e01b      	b.n	80026e8 <UserInterfaceTask+0x1b0>
				                			case 51: rangohmin = 30; break;
 80026b0:	231e      	movs	r3, #30
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
 80026b4:	e018      	b.n	80026e8 <UserInterfaceTask+0x1b0>
				                			case 52: rangohmin = 40; break;
 80026b6:	2328      	movs	r3, #40	; 0x28
 80026b8:	637b      	str	r3, [r7, #52]	; 0x34
 80026ba:	e015      	b.n	80026e8 <UserInterfaceTask+0x1b0>
				                			case 53: rangohmin = 50; break;
 80026bc:	2332      	movs	r3, #50	; 0x32
 80026be:	637b      	str	r3, [r7, #52]	; 0x34
 80026c0:	e012      	b.n	80026e8 <UserInterfaceTask+0x1b0>
				                			case 54: rangohmin = 60; break;
 80026c2:	233c      	movs	r3, #60	; 0x3c
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
 80026c6:	e00f      	b.n	80026e8 <UserInterfaceTask+0x1b0>
				                			case 55: rangohmin = 70; break;
 80026c8:	2346      	movs	r3, #70	; 0x46
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
 80026cc:	e00c      	b.n	80026e8 <UserInterfaceTask+0x1b0>
				                			case 56: rangohmin = 80; break;
 80026ce:	2350      	movs	r3, #80	; 0x50
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
 80026d2:	e009      	b.n	80026e8 <UserInterfaceTask+0x1b0>
				                			case 57: rangohmin = 90; break;
 80026d4:	235a      	movs	r3, #90	; 0x5a
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
 80026d8:	e006      	b.n	80026e8 <UserInterfaceTask+0x1b0>
				                			case 48: rangohmin =  0; break;
 80026da:	2300      	movs	r3, #0
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
 80026de:	e003      	b.n	80026e8 <UserInterfaceTask+0x1b0>
				                			default: rangohmin = 100;              //FALTA CASO 100
 80026e0:	2364      	movs	r3, #100	; 0x64
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
 80026e4:	e000      	b.n	80026e8 <UserInterfaceTask+0x1b0>
				                		}
				                	}//revisar corchete
 80026e6:	bf00      	nop
				                }
				                LCD_SetCursor(1, 5);
 80026e8:	2105      	movs	r1, #5
 80026ea:	2001      	movs	r0, #1
 80026ec:	f7ff fcfc 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("MINIMO:%1u", rangohmin);
 80026f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026f2:	4850      	ldr	r0, [pc, #320]	; (8002834 <UserInterfaceTask+0x2fc>)
 80026f4:	f7ff fdde 	bl	80022b4 <LCD_Print>
				                LCD_SetCursor(2, 5);
 80026f8:	2105      	movs	r1, #5
 80026fa:	2002      	movs	r0, #2
 80026fc:	f7ff fcf4 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("MAXIMO:", 1);
 8002700:	2101      	movs	r1, #1
 8002702:	484d      	ldr	r0, [pc, #308]	; (8002838 <UserInterfaceTask+0x300>)
 8002704:	f7ff fdd6 	bl	80022b4 <LCD_Print>


				                who_unblocked = xQueueSelectFromSet(QueueSetHandle, portMAX_DELAY);
 8002708:	4b46      	ldr	r3, [pc, #280]	; (8002824 <UserInterfaceTask+0x2ec>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	4618      	mov	r0, r3
 8002712:	f005 fa49 	bl	8007ba8 <xQueueSelectFromSet>
 8002716:	6278      	str	r0, [r7, #36]	; 0x24
				                if(who_unblocked == Queue3Handle){
 8002718:	4b44      	ldr	r3, [pc, #272]	; (800282c <UserInterfaceTask+0x2f4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271e:	429a      	cmp	r2, r3
 8002720:	d147      	bne.n	80027b2 <UserInterfaceTask+0x27a>

				                	if(xQueueReceive(Queue3Handle, &rx_key, 0) == pdTRUE) {
 8002722:	4b42      	ldr	r3, [pc, #264]	; (800282c <UserInterfaceTask+0x2f4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f107 0120 	add.w	r1, r7, #32
 800272a:	2200      	movs	r2, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f005 f80d 	bl	800774c <xQueueReceive>
 8002732:	4603      	mov	r3, r0
 8002734:	2b01      	cmp	r3, #1
 8002736:	d13c      	bne.n	80027b2 <UserInterfaceTask+0x27a>
				                		switch (rx_key) {
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	3b30      	subs	r3, #48	; 0x30
 800273c:	2b09      	cmp	r3, #9
 800273e:	d835      	bhi.n	80027ac <UserInterfaceTask+0x274>
 8002740:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <UserInterfaceTask+0x210>)
 8002742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002746:	bf00      	nop
 8002748:	080027a7 	.word	0x080027a7
 800274c:	08002771 	.word	0x08002771
 8002750:	08002777 	.word	0x08002777
 8002754:	0800277d 	.word	0x0800277d
 8002758:	08002783 	.word	0x08002783
 800275c:	08002789 	.word	0x08002789
 8002760:	0800278f 	.word	0x0800278f
 8002764:	08002795 	.word	0x08002795
 8002768:	0800279b 	.word	0x0800279b
 800276c:	080027a1 	.word	0x080027a1
				                			case 49: rangohmax = 10; break;
 8002770:	230a      	movs	r3, #10
 8002772:	633b      	str	r3, [r7, #48]	; 0x30
 8002774:	e01e      	b.n	80027b4 <UserInterfaceTask+0x27c>
				                			case 50: rangohmax = 20; break;
 8002776:	2314      	movs	r3, #20
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
 800277a:	e01b      	b.n	80027b4 <UserInterfaceTask+0x27c>
				                			case 51: rangohmax = 30; break;
 800277c:	231e      	movs	r3, #30
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
 8002780:	e018      	b.n	80027b4 <UserInterfaceTask+0x27c>
				                			case 52: rangohmax = 40; break;
 8002782:	2328      	movs	r3, #40	; 0x28
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
 8002786:	e015      	b.n	80027b4 <UserInterfaceTask+0x27c>
				                			case 53: rangohmax = 50; break;
 8002788:	2332      	movs	r3, #50	; 0x32
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
 800278c:	e012      	b.n	80027b4 <UserInterfaceTask+0x27c>
				                			case 54: rangohmax = 60; break;
 800278e:	233c      	movs	r3, #60	; 0x3c
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
 8002792:	e00f      	b.n	80027b4 <UserInterfaceTask+0x27c>
				                			case 55: rangohmax = 70; break;
 8002794:	2346      	movs	r3, #70	; 0x46
 8002796:	633b      	str	r3, [r7, #48]	; 0x30
 8002798:	e00c      	b.n	80027b4 <UserInterfaceTask+0x27c>
				                			case 56: rangohmax = 80; break;
 800279a:	2350      	movs	r3, #80	; 0x50
 800279c:	633b      	str	r3, [r7, #48]	; 0x30
 800279e:	e009      	b.n	80027b4 <UserInterfaceTask+0x27c>
				                			case 57: rangohmax = 90; break;
 80027a0:	235a      	movs	r3, #90	; 0x5a
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
 80027a4:	e006      	b.n	80027b4 <UserInterfaceTask+0x27c>
				                			case 48: rangohmax =  0; break;
 80027a6:	2300      	movs	r3, #0
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
 80027aa:	e003      	b.n	80027b4 <UserInterfaceTask+0x27c>
				                			default: rangohmax = 100;
 80027ac:	2364      	movs	r3, #100	; 0x64
 80027ae:	633b      	str	r3, [r7, #48]	; 0x30
 80027b0:	e000      	b.n	80027b4 <UserInterfaceTask+0x27c>
				                		}                                           //FALTA CASO ERROR QUE SEA MENOR AL MÍNIMO
				                	}
 80027b2:	bf00      	nop
				                }
				                LCD_SetCursor(2, 5);
 80027b4:	2105      	movs	r1, #5
 80027b6:	2002      	movs	r0, #2
 80027b8:	f7ff fc96 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("MAXIMO:%1u", rangohmax);
 80027bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027be:	481f      	ldr	r0, [pc, #124]	; (800283c <UserInterfaceTask+0x304>)
 80027c0:	f7ff fd78 	bl	80022b4 <LCD_Print>
				                HAL_Delay(4000);
 80027c4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80027c8:	f000 fd32 	bl	8003230 <HAL_Delay>
				                LCD_Clear();
 80027cc:	f7ff fc78 	bl	80020c0 <LCD_Clear>

				                BSP_LCD_Humidity(LCD_Data.humidity);
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fd6c 	bl	80012b0 <BSP_LCD_Humidity>
				               	BSP_LCD_Temperature(LCD_Data.temperature);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fd56 	bl	800128c <BSP_LCD_Temperature>
				                BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fd76 	bl	80012d4 <BSP_LCD_SoilHumidity>

				                break;
 80027e8:	e1b4      	b.n	8002b54 <UserInterfaceTask+0x61c>
				            case 49:
				            	LCD_Clear();
 80027ea:	f7ff fc69 	bl	80020c0 <LCD_Clear>
				                LCD_SetCursor(2, 1);
 80027ee:	2101      	movs	r1, #1
 80027f0:	2002      	movs	r0, #2
 80027f2:	f7ff fc79 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("Ingreso 1", 1);
 80027f6:	2101      	movs	r1, #1
 80027f8:	4811      	ldr	r0, [pc, #68]	; (8002840 <UserInterfaceTask+0x308>)
 80027fa:	f7ff fd5b 	bl	80022b4 <LCD_Print>
				                HAL_Delay(2000);
 80027fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002802:	f000 fd15 	bl	8003230 <HAL_Delay>
				                LCD_Clear();
 8002806:	f7ff fc5b 	bl	80020c0 <LCD_Clear>

				                BSP_LCD_Humidity(LCD_Data.humidity);
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fd4f 	bl	80012b0 <BSP_LCD_Humidity>
				               	BSP_LCD_Temperature(LCD_Data.temperature);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe fd39 	bl	800128c <BSP_LCD_Temperature>
				                BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fd59 	bl	80012d4 <BSP_LCD_SoilHumidity>
				                break;
 8002822:	e197      	b.n	8002b54 <UserInterfaceTask+0x61c>
 8002824:	200006f8 	.word	0x200006f8
 8002828:	200006e8 	.word	0x200006e8
 800282c:	200006ec 	.word	0x200006ec
 8002830:	08009d14 	.word	0x08009d14
 8002834:	08009d1c 	.word	0x08009d1c
 8002838:	08009d28 	.word	0x08009d28
 800283c:	08009d30 	.word	0x08009d30
 8002840:	08009d3c 	.word	0x08009d3c
				            case 50:
				            	LCD_Clear();
 8002844:	f7ff fc3c 	bl	80020c0 <LCD_Clear>
				                LCD_SetCursor(2, 1);
 8002848:	2101      	movs	r1, #1
 800284a:	2002      	movs	r0, #2
 800284c:	f7ff fc4c 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("Ingreso 2", 1);
 8002850:	2101      	movs	r1, #1
 8002852:	48ca      	ldr	r0, [pc, #808]	; (8002b7c <UserInterfaceTask+0x644>)
 8002854:	f7ff fd2e 	bl	80022b4 <LCD_Print>
				                HAL_Delay(2000);
 8002858:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800285c:	f000 fce8 	bl	8003230 <HAL_Delay>
				                LCD_Clear();
 8002860:	f7ff fc2e 	bl	80020c0 <LCD_Clear>

				                BSP_LCD_Humidity(LCD_Data.humidity);
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fd22 	bl	80012b0 <BSP_LCD_Humidity>
				                BSP_LCD_Temperature(LCD_Data.temperature);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fd0c 	bl	800128c <BSP_LCD_Temperature>
				                BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fd2c 	bl	80012d4 <BSP_LCD_SoilHumidity>
				                break;
 800287c:	e16a      	b.n	8002b54 <UserInterfaceTask+0x61c>
				            case 51:
				            	LCD_Clear();
 800287e:	f7ff fc1f 	bl	80020c0 <LCD_Clear>
				                LCD_SetCursor(2, 1);
 8002882:	2101      	movs	r1, #1
 8002884:	2002      	movs	r0, #2
 8002886:	f7ff fc2f 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("Ingreso 3", 1);
 800288a:	2101      	movs	r1, #1
 800288c:	48bc      	ldr	r0, [pc, #752]	; (8002b80 <UserInterfaceTask+0x648>)
 800288e:	f7ff fd11 	bl	80022b4 <LCD_Print>
				                HAL_Delay(2000);
 8002892:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002896:	f000 fccb 	bl	8003230 <HAL_Delay>
				                LCD_Clear();
 800289a:	f7ff fc11 	bl	80020c0 <LCD_Clear>

				                BSP_LCD_Humidity(LCD_Data.humidity);
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fd05 	bl	80012b0 <BSP_LCD_Humidity>
				                BSP_LCD_Temperature(LCD_Data.temperature);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe fcef 	bl	800128c <BSP_LCD_Temperature>
				                BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe fd0f 	bl	80012d4 <BSP_LCD_SoilHumidity>
				                break;
 80028b6:	e14d      	b.n	8002b54 <UserInterfaceTask+0x61c>
				            case 52:
				            	LCD_Clear();
 80028b8:	f7ff fc02 	bl	80020c0 <LCD_Clear>
				                LCD_SetCursor(2, 1);
 80028bc:	2101      	movs	r1, #1
 80028be:	2002      	movs	r0, #2
 80028c0:	f7ff fc12 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("Ingreso 4", 1);
 80028c4:	2101      	movs	r1, #1
 80028c6:	48af      	ldr	r0, [pc, #700]	; (8002b84 <UserInterfaceTask+0x64c>)
 80028c8:	f7ff fcf4 	bl	80022b4 <LCD_Print>
				                HAL_Delay(2000);
 80028cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028d0:	f000 fcae 	bl	8003230 <HAL_Delay>
				                LCD_Clear();
 80028d4:	f7ff fbf4 	bl	80020c0 <LCD_Clear>

				                BSP_LCD_Humidity(LCD_Data.humidity);
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fce8 	bl	80012b0 <BSP_LCD_Humidity>
				                BSP_LCD_Temperature(LCD_Data.temperature);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fcd2 	bl	800128c <BSP_LCD_Temperature>
				                BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fcf2 	bl	80012d4 <BSP_LCD_SoilHumidity>
				                break;
 80028f0:	e130      	b.n	8002b54 <UserInterfaceTask+0x61c>
				            case 53:
				            	LCD_Clear();
 80028f2:	f7ff fbe5 	bl	80020c0 <LCD_Clear>
				                LCD_SetCursor(2, 1);
 80028f6:	2101      	movs	r1, #1
 80028f8:	2002      	movs	r0, #2
 80028fa:	f7ff fbf5 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("Ingreso 5", 1);
 80028fe:	2101      	movs	r1, #1
 8002900:	48a1      	ldr	r0, [pc, #644]	; (8002b88 <UserInterfaceTask+0x650>)
 8002902:	f7ff fcd7 	bl	80022b4 <LCD_Print>
				                HAL_Delay(2000);
 8002906:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800290a:	f000 fc91 	bl	8003230 <HAL_Delay>
				                LCD_Clear();
 800290e:	f7ff fbd7 	bl	80020c0 <LCD_Clear>

				                BSP_LCD_Humidity(LCD_Data.humidity);
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fccb 	bl	80012b0 <BSP_LCD_Humidity>
				                BSP_LCD_Temperature(LCD_Data.temperature);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe fcb5 	bl	800128c <BSP_LCD_Temperature>
				                BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe fcd5 	bl	80012d4 <BSP_LCD_SoilHumidity>
				                break;
 800292a:	e113      	b.n	8002b54 <UserInterfaceTask+0x61c>
				            case 54:
				            	LCD_Clear();
 800292c:	f7ff fbc8 	bl	80020c0 <LCD_Clear>
				                LCD_SetCursor(2, 1);
 8002930:	2101      	movs	r1, #1
 8002932:	2002      	movs	r0, #2
 8002934:	f7ff fbd8 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("Ingreso 6", 1);
 8002938:	2101      	movs	r1, #1
 800293a:	4894      	ldr	r0, [pc, #592]	; (8002b8c <UserInterfaceTask+0x654>)
 800293c:	f7ff fcba 	bl	80022b4 <LCD_Print>
				                HAL_Delay(2000);
 8002940:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002944:	f000 fc74 	bl	8003230 <HAL_Delay>
				                LCD_Clear();
 8002948:	f7ff fbba 	bl	80020c0 <LCD_Clear>

				                BSP_LCD_Humidity(LCD_Data.humidity);
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fcae 	bl	80012b0 <BSP_LCD_Humidity>
				                BSP_LCD_Temperature(LCD_Data.temperature);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fc98 	bl	800128c <BSP_LCD_Temperature>
				                BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fcb8 	bl	80012d4 <BSP_LCD_SoilHumidity>
				                break;
 8002964:	e0f6      	b.n	8002b54 <UserInterfaceTask+0x61c>
				//                if (AMoPM == 2){

				//                }
				                break;
				            case 55:
				            	LCD_Clear();
 8002966:	f7ff fbab 	bl	80020c0 <LCD_Clear>
				                LCD_SetCursor(2, 1);
 800296a:	2101      	movs	r1, #1
 800296c:	2002      	movs	r0, #2
 800296e:	f7ff fbbb 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("Ingreso 7", 1);
 8002972:	2101      	movs	r1, #1
 8002974:	4886      	ldr	r0, [pc, #536]	; (8002b90 <UserInterfaceTask+0x658>)
 8002976:	f7ff fc9d 	bl	80022b4 <LCD_Print>
				                HAL_Delay(2000);
 800297a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800297e:	f000 fc57 	bl	8003230 <HAL_Delay>

				                LCD_Clear();
 8002982:	f7ff fb9d 	bl	80020c0 <LCD_Clear>

				                BSP_LCD_Humidity(LCD_Data.humidity);
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe fc91 	bl	80012b0 <BSP_LCD_Humidity>
				                BSP_LCD_Temperature(LCD_Data.temperature);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fc7b 	bl	800128c <BSP_LCD_Temperature>
				                BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe fc9b 	bl	80012d4 <BSP_LCD_SoilHumidity>
				                break;
 800299e:	e0d9      	b.n	8002b54 <UserInterfaceTask+0x61c>
				            case 56:
				            	LCD_Clear();
 80029a0:	f7ff fb8e 	bl	80020c0 <LCD_Clear>
				                LCD_SetCursor(2, 1);
 80029a4:	2101      	movs	r1, #1
 80029a6:	2002      	movs	r0, #2
 80029a8:	f7ff fb9e 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("Ingreso 8", 1);
 80029ac:	2101      	movs	r1, #1
 80029ae:	4879      	ldr	r0, [pc, #484]	; (8002b94 <UserInterfaceTask+0x65c>)
 80029b0:	f7ff fc80 	bl	80022b4 <LCD_Print>
				                HAL_Delay(2000);
 80029b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029b8:	f000 fc3a 	bl	8003230 <HAL_Delay>
				                LCD_Clear();
 80029bc:	f7ff fb80 	bl	80020c0 <LCD_Clear>

				                BSP_LCD_Humidity(LCD_Data.humidity);
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fc74 	bl	80012b0 <BSP_LCD_Humidity>
				                BSP_LCD_Temperature(LCD_Data.temperature);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fc5e 	bl	800128c <BSP_LCD_Temperature>
				                BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fc7e 	bl	80012d4 <BSP_LCD_SoilHumidity>
				                break;
 80029d8:	e0bc      	b.n	8002b54 <UserInterfaceTask+0x61c>
				            case 57:
				            	LCD_Clear();
 80029da:	f7ff fb71 	bl	80020c0 <LCD_Clear>
				                LCD_SetCursor(2, 1);
 80029de:	2101      	movs	r1, #1
 80029e0:	2002      	movs	r0, #2
 80029e2:	f7ff fb81 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("Ingreso 9", 1);
 80029e6:	2101      	movs	r1, #1
 80029e8:	486b      	ldr	r0, [pc, #428]	; (8002b98 <UserInterfaceTask+0x660>)
 80029ea:	f7ff fc63 	bl	80022b4 <LCD_Print>
				                HAL_Delay(2000);
 80029ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029f2:	f000 fc1d 	bl	8003230 <HAL_Delay>
				                LCD_Clear();
 80029f6:	f7ff fb63 	bl	80020c0 <LCD_Clear>

				                BSP_LCD_Humidity(LCD_Data.humidity);
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fc57 	bl	80012b0 <BSP_LCD_Humidity>
				                BSP_LCD_Temperature(LCD_Data.temperature);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fc41 	bl	800128c <BSP_LCD_Temperature>
				                BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fc61 	bl	80012d4 <BSP_LCD_SoilHumidity>
				                break;
 8002a12:	e09f      	b.n	8002b54 <UserInterfaceTask+0x61c>
				            case 67:                                             //TECLA 'C'
				            	LCD_Clear();
 8002a14:	f7ff fb54 	bl	80020c0 <LCD_Clear>
				                LCD_SetCursor(2, 5);
 8002a18:	2105      	movs	r1, #5
 8002a1a:	2002      	movs	r0, #2
 8002a1c:	f7ff fb64 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("PESTICIDA", 1);
 8002a20:	2101      	movs	r1, #1
 8002a22:	485e      	ldr	r0, [pc, #376]	; (8002b9c <UserInterfaceTask+0x664>)
 8002a24:	f7ff fc46 	bl	80022b4 <LCD_Print>
				              //  htim2.Instance->CCR1 = 75; //ANGULO 90 GRADOS
				                HAL_Delay(4000);
 8002a28:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002a2c:	f000 fc00 	bl	8003230 <HAL_Delay>
				                LCD_Clear();
 8002a30:	f7ff fb46 	bl	80020c0 <LCD_Clear>

				                BSP_LCD_Humidity(LCD_Data.humidity);
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fc3a 	bl	80012b0 <BSP_LCD_Humidity>
				                BSP_LCD_Temperature(LCD_Data.temperature);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fc24 	bl	800128c <BSP_LCD_Temperature>
				                BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fc44 	bl	80012d4 <BSP_LCD_SoilHumidity>
				                break;
 8002a4c:	e082      	b.n	8002b54 <UserInterfaceTask+0x61c>
				            case 68:                                             //TECLA 'D'
				                if(estado_cortina == 0) {       //flag para ver si la cortina esta abierta o cerrada
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d130      	bne.n	8002ab6 <UserInterfaceTask+0x57e>
				                    LCD_Clear();
 8002a54:	f7ff fb34 	bl	80020c0 <LCD_Clear>
				                	LCD_SetCursor(2, 1);
 8002a58:	2101      	movs	r1, #1
 8002a5a:	2002      	movs	r0, #2
 8002a5c:	f7ff fb44 	bl	80020e8 <LCD_SetCursor>
				                    LCD_Print("CERRANDO CORTINA", 1);
 8002a60:	2101      	movs	r1, #1
 8002a62:	484f      	ldr	r0, [pc, #316]	; (8002ba0 <UserInterfaceTask+0x668>)
 8002a64:	f7ff fc26 	bl	80022b4 <LCD_Print>
				                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET); //  ENA
 8002a68:	2201      	movs	r2, #1
 8002a6a:	2110      	movs	r1, #16
 8002a6c:	484d      	ldr	r0, [pc, #308]	; (8002ba4 <UserInterfaceTask+0x66c>)
 8002a6e:	f001 fd47 	bl	8004500 <HAL_GPIO_WritePin>
				                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); //  IN1
 8002a72:	2201      	movs	r2, #1
 8002a74:	2108      	movs	r1, #8
 8002a76:	484b      	ldr	r0, [pc, #300]	; (8002ba4 <UserInterfaceTask+0x66c>)
 8002a78:	f001 fd42 	bl	8004500 <HAL_GPIO_WritePin>
				                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //  IN2
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2104      	movs	r1, #4
 8002a80:	4848      	ldr	r0, [pc, #288]	; (8002ba4 <UserInterfaceTask+0x66c>)
 8002a82:	f001 fd3d 	bl	8004500 <HAL_GPIO_WritePin>
				                    while (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5));   //espera hasta que la cortina toque fin de carrera con pull up
 8002a86:	bf00      	nop
 8002a88:	2120      	movs	r1, #32
 8002a8a:	4847      	ldr	r0, [pc, #284]	; (8002ba8 <UserInterfaceTask+0x670>)
 8002a8c:	f001 fd20 	bl	80044d0 <HAL_GPIO_ReadPin>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f8      	beq.n	8002a88 <UserInterfaceTask+0x550>
				                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); //  ENA
 8002a96:	2200      	movs	r2, #0
 8002a98:	2110      	movs	r1, #16
 8002a9a:	4842      	ldr	r0, [pc, #264]	; (8002ba4 <UserInterfaceTask+0x66c>)
 8002a9c:	f001 fd30 	bl	8004500 <HAL_GPIO_WritePin>
				                    estado_cortina = 1;                                                  //cambio de estado
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
				                    if (cortina_manual == 0)   //revisar
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d102      	bne.n	8002ab0 <UserInterfaceTask+0x578>
				                        cortina_manual = 1;        //bandera para saber si se quiere de manera manual la cortina abierta
 8002aaa:	2301      	movs	r3, #1
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
				                    if (cortina_manual == 0)   //revisar
				                        cortina_manual = 1;
				                    else
				                        cortina_manual = 0;    //bandera para saber si se quiere de manera manual la cortina abierta
				                }
				                break;
 8002aae:	e051      	b.n	8002b54 <UserInterfaceTask+0x61c>
				                        cortina_manual = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
				                break;
 8002ab4:	e04e      	b.n	8002b54 <UserInterfaceTask+0x61c>
				                	LCD_Clear();
 8002ab6:	f7ff fb03 	bl	80020c0 <LCD_Clear>
				                    LCD_SetCursor(2, 1);
 8002aba:	2101      	movs	r1, #1
 8002abc:	2002      	movs	r0, #2
 8002abe:	f7ff fb13 	bl	80020e8 <LCD_SetCursor>
				                    LCD_Print("ABRIENDO CORTINA", 1);
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4839      	ldr	r0, [pc, #228]	; (8002bac <UserInterfaceTask+0x674>)
 8002ac6:	f7ff fbf5 	bl	80022b4 <LCD_Print>
				                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET); //  ENA
 8002aca:	2201      	movs	r2, #1
 8002acc:	2110      	movs	r1, #16
 8002ace:	4835      	ldr	r0, [pc, #212]	; (8002ba4 <UserInterfaceTask+0x66c>)
 8002ad0:	f001 fd16 	bl	8004500 <HAL_GPIO_WritePin>
				                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); //  IN1
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2108      	movs	r1, #8
 8002ad8:	4832      	ldr	r0, [pc, #200]	; (8002ba4 <UserInterfaceTask+0x66c>)
 8002ada:	f001 fd11 	bl	8004500 <HAL_GPIO_WritePin>
				                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //  IN2
 8002ade:	2201      	movs	r2, #1
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	4830      	ldr	r0, [pc, #192]	; (8002ba4 <UserInterfaceTask+0x66c>)
 8002ae4:	f001 fd0c 	bl	8004500 <HAL_GPIO_WritePin>
				                    while (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3));   //espera hasta que la cortina toque fin de carrera con pull up
 8002ae8:	bf00      	nop
 8002aea:	2108      	movs	r1, #8
 8002aec:	482e      	ldr	r0, [pc, #184]	; (8002ba8 <UserInterfaceTask+0x670>)
 8002aee:	f001 fcef 	bl	80044d0 <HAL_GPIO_ReadPin>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f8      	beq.n	8002aea <UserInterfaceTask+0x5b2>
				                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); //  ENA
 8002af8:	2200      	movs	r2, #0
 8002afa:	2110      	movs	r1, #16
 8002afc:	4829      	ldr	r0, [pc, #164]	; (8002ba4 <UserInterfaceTask+0x66c>)
 8002afe:	f001 fcff 	bl	8004500 <HAL_GPIO_WritePin>
				                    estado_cortina = 0;                                           //cambio de estado
 8002b02:	2300      	movs	r3, #0
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
				                    if (cortina_manual == 0)   //revisar
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <UserInterfaceTask+0x5da>
				                        cortina_manual = 1;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
				                break;
 8002b10:	e020      	b.n	8002b54 <UserInterfaceTask+0x61c>
				                        cortina_manual = 0;    //bandera para saber si se quiere de manera manual la cortina abierta
 8002b12:	2300      	movs	r3, #0
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28
				                break;
 8002b16:	e01d      	b.n	8002b54 <UserInterfaceTask+0x61c>
				            case 48:
				            	LCD_Clear();
 8002b18:	f7ff fad2 	bl	80020c0 <LCD_Clear>
				                LCD_SetCursor(2, 1);
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	2002      	movs	r0, #2
 8002b20:	f7ff fae2 	bl	80020e8 <LCD_SetCursor>
				                LCD_Print("Ingreso 0", 1);
 8002b24:	2101      	movs	r1, #1
 8002b26:	4822      	ldr	r0, [pc, #136]	; (8002bb0 <UserInterfaceTask+0x678>)
 8002b28:	f7ff fbc4 	bl	80022b4 <LCD_Print>
				                HAL_Delay(2000);
 8002b2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b30:	f000 fb7e 	bl	8003230 <HAL_Delay>
				                LCD_Clear();
 8002b34:	f7ff fac4 	bl	80020c0 <LCD_Clear>

				                BSP_LCD_Humidity(LCD_Data.humidity);
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe fbb8 	bl	80012b0 <BSP_LCD_Humidity>
				                BSP_LCD_Temperature(LCD_Data.temperature);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe fba2 	bl	800128c <BSP_LCD_Temperature>
				                BSP_LCD_SoilHumidity(LCD_Data.soilHumidity);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fbc2 	bl	80012d4 <BSP_LCD_SoilHumidity>
				                break;
 8002b50:	e000      	b.n	8002b54 <UserInterfaceTask+0x61c>
				        }
			}
 8002b52:	bf00      	nop
		}

		Output_Data.rangohmin = rangohmin;
 8002b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b56:	60bb      	str	r3, [r7, #8]
		Output_Data.rangohmax = rangohmax;
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	60fb      	str	r3, [r7, #12]
		Output_Data.soilHumidity = LCD_Data.soilHumidity;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	613b      	str	r3, [r7, #16]

		xQueueSend(Queue4Handle, &Output_Data, 3000);
 8002b60:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <UserInterfaceTask+0x67c>)
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	f107 0108 	add.w	r1, r7, #8
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b6e:	f004 fcd1 	bl	8007514 <xQueueGenericSend>


		osDelay(5000);
 8002b72:	f241 3088 	movw	r0, #5000	; 0x1388
 8002b76:	f004 fb3a 	bl	80071ee <osDelay>
	while(1){
 8002b7a:	e4e5      	b.n	8002548 <UserInterfaceTask+0x10>
 8002b7c:	08009d48 	.word	0x08009d48
 8002b80:	08009d54 	.word	0x08009d54
 8002b84:	08009d60 	.word	0x08009d60
 8002b88:	08009d6c 	.word	0x08009d6c
 8002b8c:	08009d78 	.word	0x08009d78
 8002b90:	08009d84 	.word	0x08009d84
 8002b94:	08009d90 	.word	0x08009d90
 8002b98:	08009d9c 	.word	0x08009d9c
 8002b9c:	08009da8 	.word	0x08009da8
 8002ba0:	08009db4 	.word	0x08009db4
 8002ba4:	40020c00 	.word	0x40020c00
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	08009dc8 	.word	0x08009dc8
 8002bb0:	08009ddc 	.word	0x08009ddc
 8002bb4:	200006f0 	.word	0x200006f0

08002bb8 <AutomaticControlTask>:

	}

}

void AutomaticControlTask(void const * argument){
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

	Output_DataTypeDef Output_Data;
	uint32_t irrigationHumidity;

	while(1){
		if(xQueueReceive(Queue4Handle, &Output_Data, portMAX_DELAY) == pdTRUE){
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <AutomaticControlTask+0x74>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f107 010c 	add.w	r1, r7, #12
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 fdbd 	bl	800774c <xQueueReceive>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d1f3      	bne.n	8002bc0 <AutomaticControlTask+0x8>



					if (Output_Data.soilHumidity < Output_Data.rangohmax && Output_Data.soilHumidity > Output_Data.rangohmin){
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d2ef      	bcs.n	8002bc0 <AutomaticControlTask+0x8>
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d9eb      	bls.n	8002bc0 <AutomaticControlTask+0x8>


						LCD_Clear();
 8002be8:	f7ff fa6a 	bl	80020c0 <LCD_Clear>

						do {

			            	LCD_SetCursor(2, 5);
 8002bec:	2105      	movs	r1, #5
 8002bee:	2002      	movs	r0, #2
 8002bf0:	f7ff fa7a 	bl	80020e8 <LCD_SetCursor>
							LCD_Print("REGANDO", 1);
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	480e      	ldr	r0, [pc, #56]	; (8002c30 <AutomaticControlTask+0x78>)
 8002bf8:	f7ff fb5c 	bl	80022b4 <LCD_Print>
							BSP_TurnOn_Valve();
 8002bfc:	f7fe fbcc 	bl	8001398 <BSP_TurnOn_Valve>
							xQueueReceive(Queue5Handle, &irrigationHumidity, 2000);
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <AutomaticControlTask+0x7c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f107 0108 	add.w	r1, r7, #8
 8002c08:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f004 fd9d 	bl	800774c <xQueueReceive>

						}
						while (irrigationHumidity <= Output_Data.rangohmax && irrigationHumidity >= Output_Data.rangohmin);
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d303      	bcc.n	8002c22 <AutomaticControlTask+0x6a>
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d9e4      	bls.n	8002bec <AutomaticControlTask+0x34>
						BSP_TurnOff_Valve();
 8002c22:	f7fe fbd1 	bl	80013c8 <BSP_TurnOff_Valve>
						LCD_Clear();
 8002c26:	f7ff fa4b 	bl	80020c0 <LCD_Clear>
		if(xQueueReceive(Queue4Handle, &Output_Data, portMAX_DELAY) == pdTRUE){
 8002c2a:	e7c9      	b.n	8002bc0 <AutomaticControlTask+0x8>
 8002c2c:	200006f0 	.word	0x200006f0
 8002c30:	08009de8 	.word	0x08009de8
 8002c34:	200006f4 	.word	0x200006f4

08002c38 <APP_Timer10ms>:
}




void APP_Timer10ms(){ //Borrar
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0

}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <APP_Timer100ms>:
void APP_Timer100ms(){
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0

}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <APP_Timer1000ms>:
void APP_Timer1000ms(){
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0

}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <APP_Timer10s>:
void APP_Timer10s(){
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0

}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <APP_Show_SystemIntro>:
void APP_Show_SystemIntro(){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
    LCD_i2cDeviceCheck();
 8002c74:	f7ff f94a 	bl	8001f0c <LCD_i2cDeviceCheck>
    LCD_BackLight(LCD_BL_ON);
 8002c78:	2008      	movs	r0, #8
 8002c7a:	f7ff fb31 	bl	80022e0 <LCD_BackLight>
    LCD_SetCursor(1,1);
 8002c7e:	2101      	movs	r1, #1
 8002c80:	2001      	movs	r0, #1
 8002c82:	f7ff fa31 	bl	80020e8 <LCD_SetCursor>
    LCD_Clear();
 8002c86:	f7ff fa1b 	bl	80020c0 <LCD_Clear>
    LCD_Print("Cargando Datos",1);
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4804      	ldr	r0, [pc, #16]	; (8002ca0 <APP_Show_SystemIntro+0x30>)
 8002c8e:	f7ff fb11 	bl	80022b4 <LCD_Print>
    BSP_Delay(2000);
 8002c92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c96:	f7fe faeb 	bl	8001270 <BSP_Delay>
    //LCD_Clear();
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	08009df0 	.word	0x08009df0

08002ca4 <APP_SoilHumidity>:

void APP_CoverFromTemperature(int estado_cortina, int cortina_manual){
    BSP_CoverFromTemperature(estado_cortina, cortina_manual);
}

uint32_t APP_SoilHumidity(){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
	int SoilHumidity;
	SoilHumidity = BSP_SoilHumidity();
 8002caa:	f7fe fb53 	bl	8001354 <BSP_SoilHumidity>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	607b      	str	r3, [r7, #4]
	return SoilHumidity;
 8002cb2:	687b      	ldr	r3, [r7, #4]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_MspInit+0x4c>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	4a0f      	ldr	r2, [pc, #60]	; (8002d08 <HAL_MspInit+0x4c>)
 8002ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_MspInit+0x4c>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_MspInit+0x4c>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <HAL_MspInit+0x4c>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_MspInit+0x4c>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800

08002d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <HAL_ADC_MspInit+0xd8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d156      	bne.n	8002ddc <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <HAL_ADC_MspInit+0xdc>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <HAL_ADC_MspInit+0xdc>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <HAL_ADC_MspInit+0xdc>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_ADC_MspInit+0xdc>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <HAL_ADC_MspInit+0xdc>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <HAL_ADC_MspInit+0xdc>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8002d66:	231a      	movs	r3, #26
 8002d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d72:	f107 0314 	add.w	r3, r7, #20
 8002d76:	4619      	mov	r1, r3
 8002d78:	481c      	ldr	r0, [pc, #112]	; (8002dec <HAL_ADC_MspInit+0xe0>)
 8002d7a:	f001 fa25 	bl	80041c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <HAL_ADC_MspInit+0xe4>)
 8002d80:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <HAL_ADC_MspInit+0xe8>)
 8002d82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002d84:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_ADC_MspInit+0xe4>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d8a:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_ADC_MspInit+0xe4>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d90:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <HAL_ADC_MspInit+0xe4>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <HAL_ADC_MspInit+0xe4>)
 8002d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_ADC_MspInit+0xe4>)
 8002da0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002da4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_ADC_MspInit+0xe4>)
 8002da8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <HAL_ADC_MspInit+0xe4>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_ADC_MspInit+0xe4>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_ADC_MspInit+0xe4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002dc0:	480b      	ldr	r0, [pc, #44]	; (8002df0 <HAL_ADC_MspInit+0xe4>)
 8002dc2:	f000 ff17 	bl	8003bf4 <HAL_DMA_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002dcc:	f7fe fe7c 	bl	8001ac8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <HAL_ADC_MspInit+0xe4>)
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8002dd6:	4a06      	ldr	r2, [pc, #24]	; (8002df0 <HAL_ADC_MspInit+0xe4>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ddc:	bf00      	nop
 8002dde:	3728      	adds	r7, #40	; 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40012000 	.word	0x40012000
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40020000 	.word	0x40020000
 8002df0:	2000013c 	.word	0x2000013c
 8002df4:	40026410 	.word	0x40026410

08002df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_I2C_MspInit+0x84>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d12c      	bne.n	8002e74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_I2C_MspInit+0x88>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <HAL_I2C_MspInit+0x88>)
 8002e24:	f043 0302 	orr.w	r3, r3, #2
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_I2C_MspInit+0x88>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002e36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e3c:	2312      	movs	r3, #18
 8002e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e40:	2301      	movs	r3, #1
 8002e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e48:	2304      	movs	r3, #4
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4619      	mov	r1, r3
 8002e52:	480c      	ldr	r0, [pc, #48]	; (8002e84 <HAL_I2C_MspInit+0x8c>)
 8002e54:	f001 f9b8 	bl	80041c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_I2C_MspInit+0x88>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <HAL_I2C_MspInit+0x88>)
 8002e62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e66:	6413      	str	r3, [r2, #64]	; 0x40
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_I2C_MspInit+0x88>)
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e74:	bf00      	nop
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40005400 	.word	0x40005400
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020400 	.word	0x40020400

08002e88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <HAL_RTC_MspInit+0x30>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10a      	bne.n	8002eb0 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <HAL_RTC_MspInit+0x34>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	2029      	movs	r0, #41	; 0x29
 8002ea6:	f000 fe7b 	bl	8003ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002eaa:	2029      	movs	r0, #41	; 0x29
 8002eac:	f000 fe94 	bl	8003bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40002800 	.word	0x40002800
 8002ebc:	42470e3c 	.word	0x42470e3c

08002ec0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_TIM_Base_MspInit+0x64>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <HAL_TIM_Base_MspInit+0x64>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_TIM_Base_MspInit+0x64>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002eee:	e012      	b.n	8002f16 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <HAL_TIM_Base_MspInit+0x68>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10d      	bne.n	8002f16 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_TIM_Base_MspInit+0x64>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <HAL_TIM_Base_MspInit+0x64>)
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_TIM_Base_MspInit+0x64>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40000400 	.word	0x40000400

08002f2c <HAL_TIM_MspPostInit>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 030c 	add.w	r3, r7, #12
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4c:	d11d      	bne.n	8002f8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <HAL_TIM_MspPostInit+0x68>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a0f      	ldr	r2, [pc, #60]	; (8002f94 <HAL_TIM_MspPostInit+0x68>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <HAL_TIM_MspPostInit+0x68>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f6a:	2320      	movs	r3, #32
 8002f6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7e:	f107 030c 	add.w	r3, r7, #12
 8002f82:	4619      	mov	r1, r3
 8002f84:	4804      	ldr	r0, [pc, #16]	; (8002f98 <HAL_TIM_MspPostInit+0x6c>)
 8002f86:	f001 f91f 	bl	80041c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002f8a:	bf00      	nop
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020000 	.word	0x40020000

08002f9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08c      	sub	sp, #48	; 0x30
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002fac:	2200      	movs	r2, #0
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	2032      	movs	r0, #50	; 0x32
 8002fb2:	f000 fdf5 	bl	8003ba0 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002fb6:	2032      	movs	r0, #50	; 0x32
 8002fb8:	f000 fe0e 	bl	8003bd8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <HAL_InitTick+0xa4>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <HAL_InitTick+0xa4>)
 8002fc6:	f043 0308 	orr.w	r3, r3, #8
 8002fca:	6413      	str	r3, [r2, #64]	; 0x40
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <HAL_InitTick+0xa4>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fd8:	f107 0210 	add.w	r2, r7, #16
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f002 fc9a 	bl	800591c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002fe8:	f002 fc84 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 8002fec:	4603      	mov	r3, r0
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	4a13      	ldr	r2, [pc, #76]	; (8003044 <HAL_InitTick+0xa8>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0c9b      	lsrs	r3, r3, #18
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003000:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_InitTick+0xac>)
 8003002:	4a12      	ldr	r2, [pc, #72]	; (800304c <HAL_InitTick+0xb0>)
 8003004:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8003006:	4b10      	ldr	r3, [pc, #64]	; (8003048 <HAL_InitTick+0xac>)
 8003008:	f240 32e7 	movw	r2, #999	; 0x3e7
 800300c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800300e:	4a0e      	ldr	r2, [pc, #56]	; (8003048 <HAL_InitTick+0xac>)
 8003010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003012:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <HAL_InitTick+0xac>)
 8003016:	2200      	movs	r2, #0
 8003018:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_InitTick+0xac>)
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8003020:	4809      	ldr	r0, [pc, #36]	; (8003048 <HAL_InitTick+0xac>)
 8003022:	f003 f997 	bl	8006354 <HAL_TIM_Base_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d104      	bne.n	8003036 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 800302c:	4806      	ldr	r0, [pc, #24]	; (8003048 <HAL_InitTick+0xac>)
 800302e:	f003 f9e0 	bl	80063f2 <HAL_TIM_Base_Start_IT>
 8003032:	4603      	mov	r3, r0
 8003034:	e000      	b.n	8003038 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
}
 8003038:	4618      	mov	r0, r3
 800303a:	3730      	adds	r7, #48	; 0x30
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	431bde83 	.word	0x431bde83
 8003048:	200006fc 	.word	0x200006fc
 800304c:	40000c00 	.word	0x40000c00

08003050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003062:	e7fe      	b.n	8003062 <HardFault_Handler+0x4>

08003064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003068:	e7fe      	b.n	8003068 <MemManage_Handler+0x4>

0800306a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800306e:	e7fe      	b.n	800306e <BusFault_Handler+0x4>

08003070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003074:	e7fe      	b.n	8003074 <UsageFault_Handler+0x4>

08003076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <RTC_Alarm_IRQHandler+0x10>)
 800308a:	f003 f897 	bl	80061bc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200001f0 	.word	0x200001f0

08003098 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800309c:	4802      	ldr	r0, [pc, #8]	; (80030a8 <TIM5_IRQHandler+0x10>)
 800309e:	f003 fa33 	bl	8006508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200006fc 	.word	0x200006fc

080030ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030b0:	4802      	ldr	r0, [pc, #8]	; (80030bc <DMA2_Stream0_IRQHandler+0x10>)
 80030b2:	f000 fe4d 	bl	8003d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	2000013c 	.word	0x2000013c

080030c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030c8:	4a14      	ldr	r2, [pc, #80]	; (800311c <_sbrk+0x5c>)
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <_sbrk+0x60>)
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d4:	4b13      	ldr	r3, [pc, #76]	; (8003124 <_sbrk+0x64>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <_sbrk+0x64>)
 80030de:	4a12      	ldr	r2, [pc, #72]	; (8003128 <_sbrk+0x68>)
 80030e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <_sbrk+0x64>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d207      	bcs.n	8003100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f0:	f006 f87c 	bl	80091ec <__errno>
 80030f4:	4603      	mov	r3, r0
 80030f6:	220c      	movs	r2, #12
 80030f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
 80030fe:	e009      	b.n	8003114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <_sbrk+0x64>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <_sbrk+0x64>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	4a05      	ldr	r2, [pc, #20]	; (8003124 <_sbrk+0x64>)
 8003110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003112:	68fb      	ldr	r3, [r7, #12]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20020000 	.word	0x20020000
 8003120:	00000400 	.word	0x00000400
 8003124:	2000073c 	.word	0x2000073c
 8003128:	200044a0 	.word	0x200044a0

0800312c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <SystemInit+0x28>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	4a07      	ldr	r2, [pc, #28]	; (8003154 <SystemInit+0x28>)
 8003138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800313c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <SystemInit+0x28>)
 8003142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003146:	609a      	str	r2, [r3, #8]
#endif
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003190 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800315c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800315e:	e003      	b.n	8003168 <LoopCopyDataInit>

08003160 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003160:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003162:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003164:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003166:	3104      	adds	r1, #4

08003168 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003168:	480b      	ldr	r0, [pc, #44]	; (8003198 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800316a:	4b0c      	ldr	r3, [pc, #48]	; (800319c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800316c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800316e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003170:	d3f6      	bcc.n	8003160 <CopyDataInit>
  ldr  r2, =_sbss
 8003172:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003174:	e002      	b.n	800317c <LoopFillZerobss>

08003176 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003176:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003178:	f842 3b04 	str.w	r3, [r2], #4

0800317c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800317e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003180:	d3f9      	bcc.n	8003176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003182:	f7ff ffd3 	bl	800312c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003186:	f006 f837 	bl	80091f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800318a:	f7ff f8eb 	bl	8002364 <main>
  bx  lr    
 800318e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003190:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003194:	08009e8c 	.word	0x08009e8c
  ldr  r0, =_sdata
 8003198:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800319c:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80031a0:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 80031a4:	200044a0 	.word	0x200044a0

080031a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a8:	e7fe      	b.n	80031a8 <ADC_IRQHandler>
	...

080031ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031b0:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <HAL_Init+0x40>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0d      	ldr	r2, [pc, #52]	; (80031ec <HAL_Init+0x40>)
 80031b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_Init+0x40>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <HAL_Init+0x40>)
 80031c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <HAL_Init+0x40>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a07      	ldr	r2, [pc, #28]	; (80031ec <HAL_Init+0x40>)
 80031ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d4:	2003      	movs	r0, #3
 80031d6:	f000 fcd8 	bl	8003b8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031da:	2000      	movs	r0, #0
 80031dc:	f7ff fede 	bl	8002f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031e0:	f7ff fd6c 	bl	8002cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023c00 	.word	0x40023c00

080031f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_IncTick+0x20>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_IncTick+0x24>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4413      	add	r3, r2
 8003200:	4a04      	ldr	r2, [pc, #16]	; (8003214 <HAL_IncTick+0x24>)
 8003202:	6013      	str	r3, [r2, #0]
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000020 	.word	0x20000020
 8003214:	20000740 	.word	0x20000740

08003218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return uwTick;
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <HAL_GetTick+0x14>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000740 	.word	0x20000740

08003230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003238:	f7ff ffee 	bl	8003218 <HAL_GetTick>
 800323c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d005      	beq.n	8003256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_Delay+0x44>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003256:	bf00      	nop
 8003258:	f7ff ffde 	bl	8003218 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	429a      	cmp	r2, r3
 8003266:	d8f7      	bhi.n	8003258 <HAL_Delay+0x28>
  {
  }
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000020 	.word	0x20000020

08003278 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e033      	b.n	80032f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fd38 	bl	8002d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d118      	bne.n	80032e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032be:	f023 0302 	bic.w	r3, r3, #2
 80032c2:	f043 0202 	orr.w	r2, r3, #2
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fab4 	bl	8003838 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
 80032e6:	e001      	b.n	80032ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_ADC_Start+0x1a>
 8003316:	2302      	movs	r3, #2
 8003318:	e08a      	b.n	8003430 <HAL_ADC_Start+0x130>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d018      	beq.n	8003362 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003340:	4b3e      	ldr	r3, [pc, #248]	; (800343c <HAL_ADC_Start+0x13c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a3e      	ldr	r2, [pc, #248]	; (8003440 <HAL_ADC_Start+0x140>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0c9a      	lsrs	r2, r3, #18
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003354:	e002      	b.n	800335c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	3b01      	subs	r3, #1
 800335a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f9      	bne.n	8003356 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b01      	cmp	r3, #1
 800336e:	d15e      	bne.n	800342e <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800339a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ae:	d106      	bne.n	80033be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f023 0206 	bic.w	r2, r3, #6
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
 80033bc:	e002      	b.n	80033c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033cc:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_ADC_Start+0x144>)
 80033ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10f      	bne.n	8003406 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d11c      	bne.n	800342e <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	e013      	b.n	800342e <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <HAL_ADC_Start+0x148>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d10e      	bne.n	800342e <HAL_ADC_Start+0x12e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800342c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	20000018 	.word	0x20000018
 8003440:	431bde83 	.word	0x431bde83
 8003444:	40012300 	.word	0x40012300
 8003448:	40012000 	.word	0x40012000

0800344c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_ADC_Stop+0x16>
 800345e:	2302      	movs	r3, #2
 8003460:	e021      	b.n	80034a6 <HAL_ADC_Stop+0x5a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d113      	bne.n	80034f8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034de:	d10b      	bne.n	80034f8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e05c      	b.n	80035b2 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80034f8:	f7ff fe8e 	bl	8003218 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034fe:	e01a      	b.n	8003536 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d016      	beq.n	8003536 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_ADC_PollForConversion+0x6c>
 800350e:	f7ff fe83 	bl	8003218 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d20b      	bcs.n	8003536 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f043 0204 	orr.w	r2, r3, #4
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e03d      	b.n	80035b2 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b02      	cmp	r3, #2
 8003542:	d1dd      	bne.n	8003500 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0212 	mvn.w	r2, #18
 800354c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d123      	bne.n	80035b0 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11f      	bne.n	80035b0 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800357a:	2b00      	cmp	r3, #0
 800357c:	d006      	beq.n	800358c <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003588:	2b00      	cmp	r3, #0
 800358a:	d111      	bne.n	80035b0 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d105      	bne.n	80035b0 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f043 0201 	orr.w	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x1c>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e113      	b.n	8003818 <HAL_ADC_ConfigChannel+0x244>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b09      	cmp	r3, #9
 80035fe:	d925      	bls.n	800364c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68d9      	ldr	r1, [r3, #12]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	b29b      	uxth	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	3b1e      	subs	r3, #30
 8003616:	2207      	movs	r2, #7
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43da      	mvns	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	400a      	ands	r2, r1
 8003624:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68d9      	ldr	r1, [r3, #12]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	b29b      	uxth	r3, r3
 8003636:	4618      	mov	r0, r3
 8003638:	4603      	mov	r3, r0
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4403      	add	r3, r0
 800363e:	3b1e      	subs	r3, #30
 8003640:	409a      	lsls	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	e022      	b.n	8003692 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6919      	ldr	r1, [r3, #16]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	2207      	movs	r2, #7
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	400a      	ands	r2, r1
 800366e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6919      	ldr	r1, [r3, #16]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	b29b      	uxth	r3, r3
 8003680:	4618      	mov	r0, r3
 8003682:	4603      	mov	r3, r0
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4403      	add	r3, r0
 8003688:	409a      	lsls	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b06      	cmp	r3, #6
 8003698:	d824      	bhi.n	80036e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	3b05      	subs	r3, #5
 80036ac:	221f      	movs	r2, #31
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	400a      	ands	r2, r1
 80036ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	4618      	mov	r0, r3
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	3b05      	subs	r3, #5
 80036d6:	fa00 f203 	lsl.w	r2, r0, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	635a      	str	r2, [r3, #52]	; 0x34
 80036e2:	e04c      	b.n	800377e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b0c      	cmp	r3, #12
 80036ea:	d824      	bhi.n	8003736 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	3b23      	subs	r3, #35	; 0x23
 80036fe:	221f      	movs	r2, #31
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43da      	mvns	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	400a      	ands	r2, r1
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	b29b      	uxth	r3, r3
 800371a:	4618      	mov	r0, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	3b23      	subs	r3, #35	; 0x23
 8003728:	fa00 f203 	lsl.w	r2, r0, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
 8003734:	e023      	b.n	800377e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	3b41      	subs	r3, #65	; 0x41
 8003748:	221f      	movs	r2, #31
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43da      	mvns	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	400a      	ands	r2, r1
 8003756:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	4618      	mov	r0, r3
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	3b41      	subs	r3, #65	; 0x41
 8003772:	fa00 f203 	lsl.w	r2, r0, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800377e:	4b29      	ldr	r3, [pc, #164]	; (8003824 <HAL_ADC_ConfigChannel+0x250>)
 8003780:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a28      	ldr	r2, [pc, #160]	; (8003828 <HAL_ADC_ConfigChannel+0x254>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d10f      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x1d8>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b12      	cmp	r3, #18
 8003792:	d10b      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <HAL_ADC_ConfigChannel+0x254>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d12b      	bne.n	800380e <HAL_ADC_ConfigChannel+0x23a>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1c      	ldr	r2, [pc, #112]	; (800382c <HAL_ADC_ConfigChannel+0x258>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <HAL_ADC_ConfigChannel+0x1f4>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b11      	cmp	r3, #17
 80037c6:	d122      	bne.n	800380e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a11      	ldr	r2, [pc, #68]	; (800382c <HAL_ADC_ConfigChannel+0x258>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d111      	bne.n	800380e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037ea:	4b11      	ldr	r3, [pc, #68]	; (8003830 <HAL_ADC_ConfigChannel+0x25c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a11      	ldr	r2, [pc, #68]	; (8003834 <HAL_ADC_ConfigChannel+0x260>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	0c9a      	lsrs	r2, r3, #18
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003800:	e002      	b.n	8003808 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3b01      	subs	r3, #1
 8003806:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f9      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40012300 	.word	0x40012300
 8003828:	40012000 	.word	0x40012000
 800382c:	10000012 	.word	0x10000012
 8003830:	20000018 	.word	0x20000018
 8003834:	431bde83 	.word	0x431bde83

08003838 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003840:	4b79      	ldr	r3, [pc, #484]	; (8003a28 <ADC_Init+0x1f0>)
 8003842:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	431a      	orrs	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800386c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6859      	ldr	r1, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	021a      	lsls	r2, r3, #8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003890:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6859      	ldr	r1, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6899      	ldr	r1, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	4a58      	ldr	r2, [pc, #352]	; (8003a2c <ADC_Init+0x1f4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d022      	beq.n	8003916 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6899      	ldr	r1, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003900:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6899      	ldr	r1, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	e00f      	b.n	8003936 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003924:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003934:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0202 	bic.w	r2, r2, #2
 8003944:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6899      	ldr	r1, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	7e1b      	ldrb	r3, [r3, #24]
 8003950:	005a      	lsls	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01b      	beq.n	800399c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003972:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003982:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6859      	ldr	r1, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	3b01      	subs	r3, #1
 8003990:	035a      	lsls	r2, r3, #13
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	e007      	b.n	80039ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	051a      	lsls	r2, r3, #20
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6899      	ldr	r1, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039ee:	025a      	lsls	r2, r3, #9
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6899      	ldr	r1, [r3, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	029a      	lsls	r2, r3, #10
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40012300 	.word	0x40012300
 8003a2c:	0f000001 	.word	0x0f000001

08003a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <__NVIC_SetPriorityGrouping+0x44>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a62:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <__NVIC_SetPriorityGrouping+0x44>)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	60d3      	str	r3, [r2, #12]
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a7c:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <__NVIC_GetPriorityGrouping+0x18>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	0a1b      	lsrs	r3, r3, #8
 8003a82:	f003 0307 	and.w	r3, r3, #7
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	db0b      	blt.n	8003abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	f003 021f 	and.w	r2, r3, #31
 8003aac:	4907      	ldr	r1, [pc, #28]	; (8003acc <__NVIC_EnableIRQ+0x38>)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000e100 	.word	0xe000e100

08003ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	6039      	str	r1, [r7, #0]
 8003ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	db0a      	blt.n	8003afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	490c      	ldr	r1, [pc, #48]	; (8003b1c <__NVIC_SetPriority+0x4c>)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	0112      	lsls	r2, r2, #4
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	440b      	add	r3, r1
 8003af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003af8:	e00a      	b.n	8003b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	4908      	ldr	r1, [pc, #32]	; (8003b20 <__NVIC_SetPriority+0x50>)
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	3b04      	subs	r3, #4
 8003b08:	0112      	lsls	r2, r2, #4
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	761a      	strb	r2, [r3, #24]
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000e100 	.word	0xe000e100
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	; 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f1c3 0307 	rsb	r3, r3, #7
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	bf28      	it	cs
 8003b42:	2304      	movcs	r3, #4
 8003b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d902      	bls.n	8003b54 <NVIC_EncodePriority+0x30>
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3b03      	subs	r3, #3
 8003b52:	e000      	b.n	8003b56 <NVIC_EncodePriority+0x32>
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43da      	mvns	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	401a      	ands	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	43d9      	mvns	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	4313      	orrs	r3, r2
         );
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3724      	adds	r7, #36	; 0x24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ff4c 	bl	8003a30 <__NVIC_SetPriorityGrouping>
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bb2:	f7ff ff61 	bl	8003a78 <__NVIC_GetPriorityGrouping>
 8003bb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	6978      	ldr	r0, [r7, #20]
 8003bbe:	f7ff ffb1 	bl	8003b24 <NVIC_EncodePriority>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff ff80 	bl	8003ad0 <__NVIC_SetPriority>
}
 8003bd0:	bf00      	nop
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff ff54 	bl	8003a94 <__NVIC_EnableIRQ>
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c00:	f7ff fb0a 	bl	8003218 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e099      	b.n	8003d44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c30:	e00f      	b.n	8003c52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c32:	f7ff faf1 	bl	8003218 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b05      	cmp	r3, #5
 8003c3e:	d908      	bls.n	8003c52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e078      	b.n	8003d44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e8      	bne.n	8003c32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4b38      	ldr	r3, [pc, #224]	; (8003d4c <HAL_DMA_Init+0x158>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d107      	bne.n	8003cbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0307 	bic.w	r3, r3, #7
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d117      	bne.n	8003d16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00e      	beq.n	8003d16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f9e9 	bl	80040d0 <DMA_CheckFifoParam>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2240      	movs	r2, #64	; 0x40
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d12:	2301      	movs	r3, #1
 8003d14:	e016      	b.n	8003d44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f9a0 	bl	8004064 <DMA_CalcBaseAndBitshift>
 8003d24:	4603      	mov	r3, r0
 8003d26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	223f      	movs	r2, #63	; 0x3f
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	f010803f 	.word	0xf010803f

08003d50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d5c:	4b8e      	ldr	r3, [pc, #568]	; (8003f98 <HAL_DMA_IRQHandler+0x248>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a8e      	ldr	r2, [pc, #568]	; (8003f9c <HAL_DMA_IRQHandler+0x24c>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0a9b      	lsrs	r3, r3, #10
 8003d68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01a      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0204 	bic.w	r2, r2, #4
 8003da2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	2208      	movs	r2, #8
 8003daa:	409a      	lsls	r2, r3
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	f043 0201 	orr.w	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d012      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00b      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	2201      	movs	r2, #1
 8003de0:	409a      	lsls	r2, r3
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dea:	f043 0202 	orr.w	r2, r3, #2
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df6:	2204      	movs	r2, #4
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d012      	beq.n	8003e28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00b      	beq.n	8003e28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e14:	2204      	movs	r2, #4
 8003e16:	409a      	lsls	r2, r3
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e20:	f043 0204 	orr.w	r2, r3, #4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d043      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d03c      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4a:	2210      	movs	r2, #16
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d018      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d108      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d024      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
 8003e7e:	e01f      	b.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d01b      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
 8003e90:	e016      	b.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d107      	bne.n	8003eb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0208 	bic.w	r2, r2, #8
 8003eae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 808f 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8087 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b05      	cmp	r3, #5
 8003ef8:	d136      	bne.n	8003f68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0216 	bic.w	r2, r2, #22
 8003f08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d103      	bne.n	8003f2a <HAL_DMA_IRQHandler+0x1da>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0208 	bic.w	r2, r2, #8
 8003f38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3e:	223f      	movs	r2, #63	; 0x3f
 8003f40:	409a      	lsls	r2, r3
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d07e      	beq.n	800405c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
        }
        return;
 8003f66:	e079      	b.n	800405c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01d      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10d      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d031      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
 8003f94:	e02c      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
 8003f96:	bf00      	nop
 8003f98:	20000018 	.word	0x20000018
 8003f9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d023      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
 8003fb0:	e01e      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10f      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0210 	bic.w	r2, r2, #16
 8003fce:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d032      	beq.n	800405e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d022      	beq.n	800404a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2205      	movs	r2, #5
 8004008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	3301      	adds	r3, #1
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	429a      	cmp	r2, r3
 8004026:	d307      	bcc.n	8004038 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f2      	bne.n	800401c <HAL_DMA_IRQHandler+0x2cc>
 8004036:	e000      	b.n	800403a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004038:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
 800405a:	e000      	b.n	800405e <HAL_DMA_IRQHandler+0x30e>
        return;
 800405c:	bf00      	nop
    }
  }
}
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	3b10      	subs	r3, #16
 8004074:	4a14      	ldr	r2, [pc, #80]	; (80040c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800407e:	4a13      	ldr	r2, [pc, #76]	; (80040cc <DMA_CalcBaseAndBitshift+0x68>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d909      	bls.n	80040a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800409a:	f023 0303 	bic.w	r3, r3, #3
 800409e:	1d1a      	adds	r2, r3, #4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	659a      	str	r2, [r3, #88]	; 0x58
 80040a4:	e007      	b.n	80040b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ae:	f023 0303 	bic.w	r3, r3, #3
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	aaaaaaab 	.word	0xaaaaaaab
 80040cc:	08009e40 	.word	0x08009e40

080040d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d11f      	bne.n	800412a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d856      	bhi.n	800419e <DMA_CheckFifoParam+0xce>
 80040f0:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <DMA_CheckFifoParam+0x28>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	08004109 	.word	0x08004109
 80040fc:	0800411b 	.word	0x0800411b
 8004100:	08004109 	.word	0x08004109
 8004104:	0800419f 	.word	0x0800419f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d046      	beq.n	80041a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004118:	e043      	b.n	80041a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004122:	d140      	bne.n	80041a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004128:	e03d      	b.n	80041a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004132:	d121      	bne.n	8004178 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d837      	bhi.n	80041aa <DMA_CheckFifoParam+0xda>
 800413a:	a201      	add	r2, pc, #4	; (adr r2, 8004140 <DMA_CheckFifoParam+0x70>)
 800413c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004140:	08004151 	.word	0x08004151
 8004144:	08004157 	.word	0x08004157
 8004148:	08004151 	.word	0x08004151
 800414c:	08004169 	.word	0x08004169
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      break;
 8004154:	e030      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d025      	beq.n	80041ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004166:	e022      	b.n	80041ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004170:	d11f      	bne.n	80041b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004176:	e01c      	b.n	80041b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d903      	bls.n	8004186 <DMA_CheckFifoParam+0xb6>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d003      	beq.n	800418c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004184:	e018      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
      break;
 800418a:	e015      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00e      	beq.n	80041b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      break;
 800419c:	e00b      	b.n	80041b6 <DMA_CheckFifoParam+0xe6>
      break;
 800419e:	bf00      	nop
 80041a0:	e00a      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041a2:	bf00      	nop
 80041a4:	e008      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041a6:	bf00      	nop
 80041a8:	e006      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041aa:	bf00      	nop
 80041ac:	e004      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041b6:	bf00      	nop
    }
  } 
  
  return status; 
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop

080041c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b089      	sub	sp, #36	; 0x24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	e159      	b.n	8004498 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041e4:	2201      	movs	r2, #1
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	f040 8148 	bne.w	8004492 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d00b      	beq.n	8004222 <HAL_GPIO_Init+0x5a>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d007      	beq.n	8004222 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004216:	2b11      	cmp	r3, #17
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b12      	cmp	r3, #18
 8004220:	d130      	bne.n	8004284 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	2203      	movs	r2, #3
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4013      	ands	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	4313      	orrs	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004258:	2201      	movs	r2, #1
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f003 0201 	and.w	r2, r3, #1
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4313      	orrs	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	2203      	movs	r2, #3
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d003      	beq.n	80042c4 <HAL_GPIO_Init+0xfc>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b12      	cmp	r3, #18
 80042c2:	d123      	bne.n	800430c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	08da      	lsrs	r2, r3, #3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3208      	adds	r2, #8
 80042cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	220f      	movs	r2, #15
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4013      	ands	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	08da      	lsrs	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3208      	adds	r2, #8
 8004306:	69b9      	ldr	r1, [r7, #24]
 8004308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2203      	movs	r2, #3
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0203 	and.w	r2, r3, #3
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80a2 	beq.w	8004492 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	4b57      	ldr	r3, [pc, #348]	; (80044b0 <HAL_GPIO_Init+0x2e8>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	4a56      	ldr	r2, [pc, #344]	; (80044b0 <HAL_GPIO_Init+0x2e8>)
 8004358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800435c:	6453      	str	r3, [r2, #68]	; 0x44
 800435e:	4b54      	ldr	r3, [pc, #336]	; (80044b0 <HAL_GPIO_Init+0x2e8>)
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800436a:	4a52      	ldr	r2, [pc, #328]	; (80044b4 <HAL_GPIO_Init+0x2ec>)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	089b      	lsrs	r3, r3, #2
 8004370:	3302      	adds	r3, #2
 8004372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	220f      	movs	r2, #15
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a49      	ldr	r2, [pc, #292]	; (80044b8 <HAL_GPIO_Init+0x2f0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d019      	beq.n	80043ca <HAL_GPIO_Init+0x202>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a48      	ldr	r2, [pc, #288]	; (80044bc <HAL_GPIO_Init+0x2f4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <HAL_GPIO_Init+0x1fe>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a47      	ldr	r2, [pc, #284]	; (80044c0 <HAL_GPIO_Init+0x2f8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00d      	beq.n	80043c2 <HAL_GPIO_Init+0x1fa>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a46      	ldr	r2, [pc, #280]	; (80044c4 <HAL_GPIO_Init+0x2fc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <HAL_GPIO_Init+0x1f6>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a45      	ldr	r2, [pc, #276]	; (80044c8 <HAL_GPIO_Init+0x300>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d101      	bne.n	80043ba <HAL_GPIO_Init+0x1f2>
 80043b6:	2304      	movs	r3, #4
 80043b8:	e008      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043ba:	2307      	movs	r3, #7
 80043bc:	e006      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043be:	2303      	movs	r3, #3
 80043c0:	e004      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e002      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043ca:	2300      	movs	r3, #0
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	f002 0203 	and.w	r2, r2, #3
 80043d2:	0092      	lsls	r2, r2, #2
 80043d4:	4093      	lsls	r3, r2
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043dc:	4935      	ldr	r1, [pc, #212]	; (80044b4 <HAL_GPIO_Init+0x2ec>)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	089b      	lsrs	r3, r3, #2
 80043e2:	3302      	adds	r3, #2
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043ea:	4b38      	ldr	r3, [pc, #224]	; (80044cc <HAL_GPIO_Init+0x304>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4013      	ands	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800440e:	4a2f      	ldr	r2, [pc, #188]	; (80044cc <HAL_GPIO_Init+0x304>)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004414:	4b2d      	ldr	r3, [pc, #180]	; (80044cc <HAL_GPIO_Init+0x304>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004438:	4a24      	ldr	r2, [pc, #144]	; (80044cc <HAL_GPIO_Init+0x304>)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800443e:	4b23      	ldr	r3, [pc, #140]	; (80044cc <HAL_GPIO_Init+0x304>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004462:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <HAL_GPIO_Init+0x304>)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004468:	4b18      	ldr	r3, [pc, #96]	; (80044cc <HAL_GPIO_Init+0x304>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800448c:	4a0f      	ldr	r2, [pc, #60]	; (80044cc <HAL_GPIO_Init+0x304>)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3301      	adds	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b0f      	cmp	r3, #15
 800449c:	f67f aea2 	bls.w	80041e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	3724      	adds	r7, #36	; 0x24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40013800 	.word	0x40013800
 80044b8:	40020000 	.word	0x40020000
 80044bc:	40020400 	.word	0x40020400
 80044c0:	40020800 	.word	0x40020800
 80044c4:	40020c00 	.word	0x40020c00
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40013c00 	.word	0x40013c00

080044d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	887b      	ldrh	r3, [r7, #2]
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
 80044ec:	e001      	b.n	80044f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	807b      	strh	r3, [r7, #2]
 800450c:	4613      	mov	r3, r2
 800450e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004510:	787b      	ldrb	r3, [r7, #1]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004516:	887a      	ldrh	r2, [r7, #2]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800451c:	e003      	b.n	8004526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800451e:	887b      	ldrh	r3, [r7, #2]
 8004520:	041a      	lsls	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	619a      	str	r2, [r3, #24]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e12b      	b.n	800479e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fe fc4c 	bl	8002df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	; 0x24
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004586:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004596:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004598:	f001 f9ac 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 800459c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4a81      	ldr	r2, [pc, #516]	; (80047a8 <HAL_I2C_Init+0x274>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d807      	bhi.n	80045b8 <HAL_I2C_Init+0x84>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a80      	ldr	r2, [pc, #512]	; (80047ac <HAL_I2C_Init+0x278>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	bf94      	ite	ls
 80045b0:	2301      	movls	r3, #1
 80045b2:	2300      	movhi	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	e006      	b.n	80045c6 <HAL_I2C_Init+0x92>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a7d      	ldr	r2, [pc, #500]	; (80047b0 <HAL_I2C_Init+0x27c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	bf94      	ite	ls
 80045c0:	2301      	movls	r3, #1
 80045c2:	2300      	movhi	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0e7      	b.n	800479e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a78      	ldr	r2, [pc, #480]	; (80047b4 <HAL_I2C_Init+0x280>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	0c9b      	lsrs	r3, r3, #18
 80045d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4a6a      	ldr	r2, [pc, #424]	; (80047a8 <HAL_I2C_Init+0x274>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d802      	bhi.n	8004608 <HAL_I2C_Init+0xd4>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3301      	adds	r3, #1
 8004606:	e009      	b.n	800461c <HAL_I2C_Init+0xe8>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	4a69      	ldr	r2, [pc, #420]	; (80047b8 <HAL_I2C_Init+0x284>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	099b      	lsrs	r3, r3, #6
 800461a:	3301      	adds	r3, #1
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	430b      	orrs	r3, r1
 8004622:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800462e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	495c      	ldr	r1, [pc, #368]	; (80047a8 <HAL_I2C_Init+0x274>)
 8004638:	428b      	cmp	r3, r1
 800463a:	d819      	bhi.n	8004670 <HAL_I2C_Init+0x13c>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1e59      	subs	r1, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fbb1 f3f3 	udiv	r3, r1, r3
 800464a:	1c59      	adds	r1, r3, #1
 800464c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004650:	400b      	ands	r3, r1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_I2C_Init+0x138>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1e59      	subs	r1, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	fbb1 f3f3 	udiv	r3, r1, r3
 8004664:	3301      	adds	r3, #1
 8004666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466a:	e051      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 800466c:	2304      	movs	r3, #4
 800466e:	e04f      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d111      	bne.n	800469c <HAL_I2C_Init+0x168>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1e58      	subs	r0, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6859      	ldr	r1, [r3, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	440b      	add	r3, r1
 8004686:	fbb0 f3f3 	udiv	r3, r0, r3
 800468a:	3301      	adds	r3, #1
 800468c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	e012      	b.n	80046c2 <HAL_I2C_Init+0x18e>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e58      	subs	r0, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	0099      	lsls	r1, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b2:	3301      	adds	r3, #1
 80046b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf0c      	ite	eq
 80046bc:	2301      	moveq	r3, #1
 80046be:	2300      	movne	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_I2C_Init+0x196>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e022      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10e      	bne.n	80046f0 <HAL_I2C_Init+0x1bc>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1e58      	subs	r0, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6859      	ldr	r1, [r3, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	440b      	add	r3, r1
 80046e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e4:	3301      	adds	r3, #1
 80046e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ee:	e00f      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1e58      	subs	r0, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	0099      	lsls	r1, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	fbb0 f3f3 	udiv	r3, r0, r3
 8004706:	3301      	adds	r3, #1
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	6809      	ldr	r1, [r1, #0]
 8004714:	4313      	orrs	r3, r2
 8004716:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800473e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6911      	ldr	r1, [r2, #16]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68d2      	ldr	r2, [r2, #12]
 800474a:	4311      	orrs	r1, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	430b      	orrs	r3, r1
 8004752:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	000186a0 	.word	0x000186a0
 80047ac:	001e847f 	.word	0x001e847f
 80047b0:	003d08ff 	.word	0x003d08ff
 80047b4:	431bde83 	.word	0x431bde83
 80047b8:	10624dd3 	.word	0x10624dd3

080047bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	461a      	mov	r2, r3
 80047c8:	460b      	mov	r3, r1
 80047ca:	817b      	strh	r3, [r7, #10]
 80047cc:	4613      	mov	r3, r2
 80047ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047d0:	f7fe fd22 	bl	8003218 <HAL_GetTick>
 80047d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	f040 80e0 	bne.w	80049a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	2319      	movs	r3, #25
 80047ea:	2201      	movs	r2, #1
 80047ec:	4970      	ldr	r1, [pc, #448]	; (80049b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 fa92 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047fa:	2302      	movs	r3, #2
 80047fc:	e0d3      	b.n	80049a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_I2C_Master_Transmit+0x50>
 8004808:	2302      	movs	r3, #2
 800480a:	e0cc      	b.n	80049a6 <HAL_I2C_Master_Transmit+0x1ea>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b01      	cmp	r3, #1
 8004820:	d007      	beq.n	8004832 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004840:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2221      	movs	r2, #33	; 0x21
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2210      	movs	r2, #16
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	893a      	ldrh	r2, [r7, #8]
 8004862:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4a50      	ldr	r2, [pc, #320]	; (80049b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004872:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004874:	8979      	ldrh	r1, [r7, #10]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	6a3a      	ldr	r2, [r7, #32]
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f9ca 	bl	8004c14 <I2C_MasterRequestWrite>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e08d      	b.n	80049a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80048a0:	e066      	b.n	8004970 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	6a39      	ldr	r1, [r7, #32]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 fb0c 	bl	8004ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00d      	beq.n	80048ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d107      	bne.n	80048ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e06b      	b.n	80049a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	781a      	ldrb	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b04      	cmp	r3, #4
 800490a:	d11b      	bne.n	8004944 <HAL_I2C_Master_Transmit+0x188>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004910:	2b00      	cmp	r3, #0
 8004912:	d017      	beq.n	8004944 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	781a      	ldrb	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	6a39      	ldr	r1, [r7, #32]
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fafc 	bl	8004f46 <I2C_WaitOnBTFFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	2b04      	cmp	r3, #4
 800495a:	d107      	bne.n	800496c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e01a      	b.n	80049a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004974:	2b00      	cmp	r3, #0
 8004976:	d194      	bne.n	80048a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e000      	b.n	80049a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
  }
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	00100002 	.word	0x00100002
 80049b4:	ffff0000 	.word	0xffff0000

080049b8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	460b      	mov	r3, r1
 80049c6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80049c8:	f7fe fc26 	bl	8003218 <HAL_GetTick>
 80049cc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80049ce:	2301      	movs	r3, #1
 80049d0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b20      	cmp	r3, #32
 80049dc:	f040 8111 	bne.w	8004c02 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	2319      	movs	r3, #25
 80049e6:	2201      	movs	r2, #1
 80049e8:	4988      	ldr	r1, [pc, #544]	; (8004c0c <HAL_I2C_IsDeviceReady+0x254>)
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f994 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
 80049f8:	e104      	b.n	8004c04 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_I2C_IsDeviceReady+0x50>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e0fd      	b.n	8004c04 <HAL_I2C_IsDeviceReady+0x24c>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d007      	beq.n	8004a2e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2224      	movs	r2, #36	; 0x24
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4a70      	ldr	r2, [pc, #448]	; (8004c10 <HAL_I2C_IsDeviceReady+0x258>)
 8004a50:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a60:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f952 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00d      	beq.n	8004a96 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a88:	d103      	bne.n	8004a92 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e0b6      	b.n	8004c04 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a96:	897b      	ldrh	r3, [r7, #10]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004aa4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004aa6:	f7fe fbb7 	bl	8003218 <HAL_GetTick>
 8004aaa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	bf0c      	ite	eq
 8004aba:	2301      	moveq	r3, #1
 8004abc:	2300      	movne	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad0:	bf0c      	ite	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	2300      	movne	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004ada:	e025      	b.n	8004b28 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004adc:	f7fe fb9c 	bl	8003218 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d302      	bcc.n	8004af2 <HAL_I2C_IsDeviceReady+0x13a>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d103      	bne.n	8004afa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	22a0      	movs	r2, #160	; 0xa0
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	bf0c      	ite	eq
 8004b08:	2301      	moveq	r3, #1
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1e:	bf0c      	ite	eq
 8004b20:	2301      	moveq	r3, #1
 8004b22:	2300      	movne	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2ba0      	cmp	r3, #160	; 0xa0
 8004b32:	d005      	beq.n	8004b40 <HAL_I2C_IsDeviceReady+0x188>
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <HAL_I2C_IsDeviceReady+0x188>
 8004b3a:	7dbb      	ldrb	r3, [r7, #22]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0cd      	beq.n	8004adc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d129      	bne.n	8004baa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b64:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	2319      	movs	r3, #25
 8004b82:	2201      	movs	r2, #1
 8004b84:	4921      	ldr	r1, [pc, #132]	; (8004c0c <HAL_I2C_IsDeviceReady+0x254>)
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f8c6 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e036      	b.n	8004c04 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	e02c      	b.n	8004c04 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bc2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	2319      	movs	r3, #25
 8004bca:	2201      	movs	r2, #1
 8004bcc:	490f      	ldr	r1, [pc, #60]	; (8004c0c <HAL_I2C_IsDeviceReady+0x254>)
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f8a2 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e012      	b.n	8004c04 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	3301      	adds	r3, #1
 8004be2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	f4ff af32 	bcc.w	8004a52 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3720      	adds	r7, #32
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	00100002 	.word	0x00100002
 8004c10:	ffff0000 	.word	0xffff0000

08004c14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	460b      	mov	r3, r1
 8004c22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d006      	beq.n	8004c3e <I2C_MasterRequestWrite+0x2a>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d003      	beq.n	8004c3e <I2C_MasterRequestWrite+0x2a>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c3c:	d108      	bne.n	8004c50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e00b      	b.n	8004c68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	2b12      	cmp	r3, #18
 8004c56:	d107      	bne.n	8004c68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f84f 	bl	8004d18 <I2C_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00d      	beq.n	8004c9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c8e:	d103      	bne.n	8004c98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e035      	b.n	8004d08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca4:	d108      	bne.n	8004cb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ca6:	897b      	ldrh	r3, [r7, #10]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cb4:	611a      	str	r2, [r3, #16]
 8004cb6:	e01b      	b.n	8004cf0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cb8:	897b      	ldrh	r3, [r7, #10]
 8004cba:	11db      	asrs	r3, r3, #7
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f003 0306 	and.w	r3, r3, #6
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f063 030f 	orn	r3, r3, #15
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	490e      	ldr	r1, [pc, #56]	; (8004d10 <I2C_MasterRequestWrite+0xfc>)
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f875 	bl	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e010      	b.n	8004d08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ce6:	897b      	ldrh	r3, [r7, #10]
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4907      	ldr	r1, [pc, #28]	; (8004d14 <I2C_MasterRequestWrite+0x100>)
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f865 	bl	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	00010008 	.word	0x00010008
 8004d14:	00010002 	.word	0x00010002

08004d18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	4613      	mov	r3, r2
 8004d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d28:	e025      	b.n	8004d76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d021      	beq.n	8004d76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d32:	f7fe fa71 	bl	8003218 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d302      	bcc.n	8004d48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d116      	bne.n	8004d76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f043 0220 	orr.w	r2, r3, #32
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e023      	b.n	8004dbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	0c1b      	lsrs	r3, r3, #16
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d10d      	bne.n	8004d9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	43da      	mvns	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	e00c      	b.n	8004db6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	43da      	mvns	r2, r3
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4013      	ands	r3, r2
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bf0c      	ite	eq
 8004dae:	2301      	moveq	r3, #1
 8004db0:	2300      	movne	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d0b6      	beq.n	8004d2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	607a      	str	r2, [r7, #4]
 8004dd2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dd4:	e051      	b.n	8004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de4:	d123      	bne.n	8004e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dfe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f043 0204 	orr.w	r2, r3, #4
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e046      	b.n	8004ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d021      	beq.n	8004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e36:	f7fe f9ef 	bl	8003218 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d116      	bne.n	8004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e020      	b.n	8004ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d10c      	bne.n	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	43da      	mvns	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bf14      	ite	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	2300      	moveq	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	e00b      	b.n	8004eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	43da      	mvns	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bf14      	ite	ne
 8004eb0:	2301      	movne	r3, #1
 8004eb2:	2300      	moveq	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d18d      	bne.n	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ed0:	e02d      	b.n	8004f2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f878 	bl	8004fc8 <I2C_IsAcknowledgeFailed>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e02d      	b.n	8004f3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d021      	beq.n	8004f2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eea:	f7fe f995 	bl	8003218 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d302      	bcc.n	8004f00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d116      	bne.n	8004f2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f043 0220 	orr.w	r2, r3, #32
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e007      	b.n	8004f3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f38:	2b80      	cmp	r3, #128	; 0x80
 8004f3a:	d1ca      	bne.n	8004ed2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f52:	e02d      	b.n	8004fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f837 	bl	8004fc8 <I2C_IsAcknowledgeFailed>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e02d      	b.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6a:	d021      	beq.n	8004fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f6c:	f7fe f954 	bl	8003218 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d302      	bcc.n	8004f82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d116      	bne.n	8004fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	f043 0220 	orr.w	r2, r3, #32
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e007      	b.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d1ca      	bne.n	8004f54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fde:	d11b      	bne.n	8005018 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fe8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	f043 0204 	orr.w	r2, r3, #4
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e25e      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d075      	beq.n	8005132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005046:	4b88      	ldr	r3, [pc, #544]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	2b04      	cmp	r3, #4
 8005050:	d00c      	beq.n	800506c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005052:	4b85      	ldr	r3, [pc, #532]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800505a:	2b08      	cmp	r3, #8
 800505c:	d112      	bne.n	8005084 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800505e:	4b82      	ldr	r3, [pc, #520]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800506a:	d10b      	bne.n	8005084 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506c:	4b7e      	ldr	r3, [pc, #504]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d05b      	beq.n	8005130 <HAL_RCC_OscConfig+0x108>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d157      	bne.n	8005130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e239      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508c:	d106      	bne.n	800509c <HAL_RCC_OscConfig+0x74>
 800508e:	4b76      	ldr	r3, [pc, #472]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a75      	ldr	r2, [pc, #468]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 8005094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e01d      	b.n	80050d8 <HAL_RCC_OscConfig+0xb0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050a4:	d10c      	bne.n	80050c0 <HAL_RCC_OscConfig+0x98>
 80050a6:	4b70      	ldr	r3, [pc, #448]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a6f      	ldr	r2, [pc, #444]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 80050ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	4b6d      	ldr	r3, [pc, #436]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a6c      	ldr	r2, [pc, #432]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 80050b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	e00b      	b.n	80050d8 <HAL_RCC_OscConfig+0xb0>
 80050c0:	4b69      	ldr	r3, [pc, #420]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a68      	ldr	r2, [pc, #416]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 80050c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	4b66      	ldr	r3, [pc, #408]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a65      	ldr	r2, [pc, #404]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 80050d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d013      	beq.n	8005108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e0:	f7fe f89a 	bl	8003218 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e8:	f7fe f896 	bl	8003218 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	; 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e1fe      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fa:	4b5b      	ldr	r3, [pc, #364]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCC_OscConfig+0xc0>
 8005106:	e014      	b.n	8005132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005108:	f7fe f886 	bl	8003218 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005110:	f7fe f882 	bl	8003218 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	; 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e1ea      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005122:	4b51      	ldr	r3, [pc, #324]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0xe8>
 800512e:	e000      	b.n	8005132 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d063      	beq.n	8005206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800513e:	4b4a      	ldr	r3, [pc, #296]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00b      	beq.n	8005162 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800514a:	4b47      	ldr	r3, [pc, #284]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005152:	2b08      	cmp	r3, #8
 8005154:	d11c      	bne.n	8005190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005156:	4b44      	ldr	r3, [pc, #272]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d116      	bne.n	8005190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005162:	4b41      	ldr	r3, [pc, #260]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <HAL_RCC_OscConfig+0x152>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d001      	beq.n	800517a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e1be      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517a:	4b3b      	ldr	r3, [pc, #236]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4937      	ldr	r1, [pc, #220]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 800518a:	4313      	orrs	r3, r2
 800518c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518e:	e03a      	b.n	8005206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d020      	beq.n	80051da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005198:	4b34      	ldr	r3, [pc, #208]	; (800526c <HAL_RCC_OscConfig+0x244>)
 800519a:	2201      	movs	r2, #1
 800519c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519e:	f7fe f83b 	bl	8003218 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a6:	f7fe f837 	bl	8003218 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e19f      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b8:	4b2b      	ldr	r3, [pc, #172]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c4:	4b28      	ldr	r3, [pc, #160]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4925      	ldr	r1, [pc, #148]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	600b      	str	r3, [r1, #0]
 80051d8:	e015      	b.n	8005206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051da:	4b24      	ldr	r3, [pc, #144]	; (800526c <HAL_RCC_OscConfig+0x244>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fe f81a 	bl	8003218 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051e8:	f7fe f816 	bl	8003218 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e17e      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051fa:	4b1b      	ldr	r3, [pc, #108]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d036      	beq.n	8005280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d016      	beq.n	8005248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800521a:	4b15      	ldr	r3, [pc, #84]	; (8005270 <HAL_RCC_OscConfig+0x248>)
 800521c:	2201      	movs	r2, #1
 800521e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005220:	f7fd fffa 	bl	8003218 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005228:	f7fd fff6 	bl	8003218 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e15e      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800523a:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <HAL_RCC_OscConfig+0x240>)
 800523c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0f0      	beq.n	8005228 <HAL_RCC_OscConfig+0x200>
 8005246:	e01b      	b.n	8005280 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005248:	4b09      	ldr	r3, [pc, #36]	; (8005270 <HAL_RCC_OscConfig+0x248>)
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800524e:	f7fd ffe3 	bl	8003218 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005254:	e00e      	b.n	8005274 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005256:	f7fd ffdf 	bl	8003218 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d907      	bls.n	8005274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e147      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
 8005268:	40023800 	.word	0x40023800
 800526c:	42470000 	.word	0x42470000
 8005270:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005274:	4b88      	ldr	r3, [pc, #544]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 8005276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1ea      	bne.n	8005256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8097 	beq.w	80053bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005292:	4b81      	ldr	r3, [pc, #516]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10f      	bne.n	80052be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	60bb      	str	r3, [r7, #8]
 80052a2:	4b7d      	ldr	r3, [pc, #500]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	4a7c      	ldr	r2, [pc, #496]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 80052a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ac:	6413      	str	r3, [r2, #64]	; 0x40
 80052ae:	4b7a      	ldr	r3, [pc, #488]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b6:	60bb      	str	r3, [r7, #8]
 80052b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ba:	2301      	movs	r3, #1
 80052bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052be:	4b77      	ldr	r3, [pc, #476]	; (800549c <HAL_RCC_OscConfig+0x474>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d118      	bne.n	80052fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ca:	4b74      	ldr	r3, [pc, #464]	; (800549c <HAL_RCC_OscConfig+0x474>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a73      	ldr	r2, [pc, #460]	; (800549c <HAL_RCC_OscConfig+0x474>)
 80052d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052d6:	f7fd ff9f 	bl	8003218 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052dc:	e008      	b.n	80052f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052de:	f7fd ff9b 	bl	8003218 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e103      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f0:	4b6a      	ldr	r3, [pc, #424]	; (800549c <HAL_RCC_OscConfig+0x474>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f0      	beq.n	80052de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d106      	bne.n	8005312 <HAL_RCC_OscConfig+0x2ea>
 8005304:	4b64      	ldr	r3, [pc, #400]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005308:	4a63      	ldr	r2, [pc, #396]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	6713      	str	r3, [r2, #112]	; 0x70
 8005310:	e01c      	b.n	800534c <HAL_RCC_OscConfig+0x324>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	2b05      	cmp	r3, #5
 8005318:	d10c      	bne.n	8005334 <HAL_RCC_OscConfig+0x30c>
 800531a:	4b5f      	ldr	r3, [pc, #380]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	4a5e      	ldr	r2, [pc, #376]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 8005320:	f043 0304 	orr.w	r3, r3, #4
 8005324:	6713      	str	r3, [r2, #112]	; 0x70
 8005326:	4b5c      	ldr	r3, [pc, #368]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 8005328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532a:	4a5b      	ldr	r2, [pc, #364]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 800532c:	f043 0301 	orr.w	r3, r3, #1
 8005330:	6713      	str	r3, [r2, #112]	; 0x70
 8005332:	e00b      	b.n	800534c <HAL_RCC_OscConfig+0x324>
 8005334:	4b58      	ldr	r3, [pc, #352]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 8005336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005338:	4a57      	ldr	r2, [pc, #348]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 800533a:	f023 0301 	bic.w	r3, r3, #1
 800533e:	6713      	str	r3, [r2, #112]	; 0x70
 8005340:	4b55      	ldr	r3, [pc, #340]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 8005342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005344:	4a54      	ldr	r2, [pc, #336]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 8005346:	f023 0304 	bic.w	r3, r3, #4
 800534a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d015      	beq.n	8005380 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005354:	f7fd ff60 	bl	8003218 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535a:	e00a      	b.n	8005372 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800535c:	f7fd ff5c 	bl	8003218 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	f241 3288 	movw	r2, #5000	; 0x1388
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e0c2      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005372:	4b49      	ldr	r3, [pc, #292]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0ee      	beq.n	800535c <HAL_RCC_OscConfig+0x334>
 800537e:	e014      	b.n	80053aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005380:	f7fd ff4a 	bl	8003218 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005386:	e00a      	b.n	800539e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005388:	f7fd ff46 	bl	8003218 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	; 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e0ac      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800539e:	4b3e      	ldr	r3, [pc, #248]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1ee      	bne.n	8005388 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053aa:	7dfb      	ldrb	r3, [r7, #23]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d105      	bne.n	80053bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b0:	4b39      	ldr	r3, [pc, #228]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	4a38      	ldr	r2, [pc, #224]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 80053b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8098 	beq.w	80054f6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053c6:	4b34      	ldr	r3, [pc, #208]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d05c      	beq.n	800548c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d141      	bne.n	800545e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053da:	4b31      	ldr	r3, [pc, #196]	; (80054a0 <HAL_RCC_OscConfig+0x478>)
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e0:	f7fd ff1a 	bl	8003218 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e8:	f7fd ff16 	bl	8003218 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e07e      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fa:	4b27      	ldr	r3, [pc, #156]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69da      	ldr	r2, [r3, #28]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	019b      	lsls	r3, r3, #6
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541c:	085b      	lsrs	r3, r3, #1
 800541e:	3b01      	subs	r3, #1
 8005420:	041b      	lsls	r3, r3, #16
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	061b      	lsls	r3, r3, #24
 800542a:	491b      	ldr	r1, [pc, #108]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 800542c:	4313      	orrs	r3, r2
 800542e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005430:	4b1b      	ldr	r3, [pc, #108]	; (80054a0 <HAL_RCC_OscConfig+0x478>)
 8005432:	2201      	movs	r2, #1
 8005434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005436:	f7fd feef 	bl	8003218 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800543e:	f7fd feeb 	bl	8003218 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e053      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005450:	4b11      	ldr	r3, [pc, #68]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0f0      	beq.n	800543e <HAL_RCC_OscConfig+0x416>
 800545c:	e04b      	b.n	80054f6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545e:	4b10      	ldr	r3, [pc, #64]	; (80054a0 <HAL_RCC_OscConfig+0x478>)
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005464:	f7fd fed8 	bl	8003218 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800546c:	f7fd fed4 	bl	8003218 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e03c      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <HAL_RCC_OscConfig+0x470>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <HAL_RCC_OscConfig+0x444>
 800548a:	e034      	b.n	80054f6 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d107      	bne.n	80054a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e02f      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
 8005498:	40023800 	.word	0x40023800
 800549c:	40007000 	.word	0x40007000
 80054a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054a4:	4b16      	ldr	r3, [pc, #88]	; (8005500 <HAL_RCC_OscConfig+0x4d8>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d11c      	bne.n	80054f2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d115      	bne.n	80054f2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054cc:	4013      	ands	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d10d      	bne.n	80054f2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d106      	bne.n	80054f2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d001      	beq.n	80054f6 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40023800 	.word	0x40023800

08005504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0cc      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005518:	4b68      	ldr	r3, [pc, #416]	; (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d90c      	bls.n	8005540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b65      	ldr	r3, [pc, #404]	; (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800552e:	4b63      	ldr	r3, [pc, #396]	; (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d001      	beq.n	8005540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0b8      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d020      	beq.n	800558e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005558:	4b59      	ldr	r3, [pc, #356]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a58      	ldr	r2, [pc, #352]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005562:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005570:	4b53      	ldr	r3, [pc, #332]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4a52      	ldr	r2, [pc, #328]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800557a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557c:	4b50      	ldr	r3, [pc, #320]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	494d      	ldr	r1, [pc, #308]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d044      	beq.n	8005624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d107      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a2:	4b47      	ldr	r3, [pc, #284]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d119      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e07f      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d003      	beq.n	80055c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d107      	bne.n	80055d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c2:	4b3f      	ldr	r3, [pc, #252]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e06f      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d2:	4b3b      	ldr	r3, [pc, #236]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e067      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055e2:	4b37      	ldr	r3, [pc, #220]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f023 0203 	bic.w	r2, r3, #3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	4934      	ldr	r1, [pc, #208]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055f4:	f7fd fe10 	bl	8003218 <HAL_GetTick>
 80055f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fa:	e00a      	b.n	8005612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055fc:	f7fd fe0c 	bl	8003218 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	f241 3288 	movw	r2, #5000	; 0x1388
 800560a:	4293      	cmp	r3, r2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e04f      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005612:	4b2b      	ldr	r3, [pc, #172]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 020c 	and.w	r2, r3, #12
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	429a      	cmp	r2, r3
 8005622:	d1eb      	bne.n	80055fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005624:	4b25      	ldr	r3, [pc, #148]	; (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d20c      	bcs.n	800564c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005632:	4b22      	ldr	r3, [pc, #136]	; (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800563a:	4b20      	ldr	r3, [pc, #128]	; (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d001      	beq.n	800564c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e032      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005658:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4916      	ldr	r1, [pc, #88]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005666:	4313      	orrs	r3, r2
 8005668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005676:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	490e      	ldr	r1, [pc, #56]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800568a:	f000 f821 	bl	80056d0 <HAL_RCC_GetSysClockFreq>
 800568e:	4602      	mov	r2, r0
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	490a      	ldr	r1, [pc, #40]	; (80056c4 <HAL_RCC_ClockConfig+0x1c0>)
 800569c:	5ccb      	ldrb	r3, [r1, r3]
 800569e:	fa22 f303 	lsr.w	r3, r2, r3
 80056a2:	4a09      	ldr	r2, [pc, #36]	; (80056c8 <HAL_RCC_ClockConfig+0x1c4>)
 80056a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056a6:	4b09      	ldr	r3, [pc, #36]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fd fc76 	bl	8002f9c <HAL_InitTick>

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40023c00 	.word	0x40023c00
 80056c0:	40023800 	.word	0x40023800
 80056c4:	08009e28 	.word	0x08009e28
 80056c8:	20000018 	.word	0x20000018
 80056cc:	2000001c 	.word	0x2000001c

080056d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d4:	b094      	sub	sp, #80	; 0x50
 80056d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	647b      	str	r3, [r7, #68]	; 0x44
 80056dc:	2300      	movs	r3, #0
 80056de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e0:	2300      	movs	r3, #0
 80056e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056e8:	4b79      	ldr	r3, [pc, #484]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 030c 	and.w	r3, r3, #12
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d00d      	beq.n	8005710 <HAL_RCC_GetSysClockFreq+0x40>
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	f200 80e1 	bhi.w	80058bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_RCC_GetSysClockFreq+0x34>
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d003      	beq.n	800570a <HAL_RCC_GetSysClockFreq+0x3a>
 8005702:	e0db      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005704:	4b73      	ldr	r3, [pc, #460]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005706:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005708:	e0db      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800570a:	4b73      	ldr	r3, [pc, #460]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800570c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800570e:	e0d8      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005710:	4b6f      	ldr	r3, [pc, #444]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005718:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800571a:	4b6d      	ldr	r3, [pc, #436]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d063      	beq.n	80057ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005726:	4b6a      	ldr	r3, [pc, #424]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	099b      	lsrs	r3, r3, #6
 800572c:	2200      	movs	r2, #0
 800572e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005730:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005738:	633b      	str	r3, [r7, #48]	; 0x30
 800573a:	2300      	movs	r3, #0
 800573c:	637b      	str	r3, [r7, #52]	; 0x34
 800573e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005742:	4622      	mov	r2, r4
 8005744:	462b      	mov	r3, r5
 8005746:	f04f 0000 	mov.w	r0, #0
 800574a:	f04f 0100 	mov.w	r1, #0
 800574e:	0159      	lsls	r1, r3, #5
 8005750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005754:	0150      	lsls	r0, r2, #5
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4621      	mov	r1, r4
 800575c:	1a51      	subs	r1, r2, r1
 800575e:	6139      	str	r1, [r7, #16]
 8005760:	4629      	mov	r1, r5
 8005762:	eb63 0301 	sbc.w	r3, r3, r1
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005774:	4659      	mov	r1, fp
 8005776:	018b      	lsls	r3, r1, #6
 8005778:	4651      	mov	r1, sl
 800577a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800577e:	4651      	mov	r1, sl
 8005780:	018a      	lsls	r2, r1, #6
 8005782:	4651      	mov	r1, sl
 8005784:	ebb2 0801 	subs.w	r8, r2, r1
 8005788:	4659      	mov	r1, fp
 800578a:	eb63 0901 	sbc.w	r9, r3, r1
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800579a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800579e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057a2:	4690      	mov	r8, r2
 80057a4:	4699      	mov	r9, r3
 80057a6:	4623      	mov	r3, r4
 80057a8:	eb18 0303 	adds.w	r3, r8, r3
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	462b      	mov	r3, r5
 80057b0:	eb49 0303 	adc.w	r3, r9, r3
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057c2:	4629      	mov	r1, r5
 80057c4:	024b      	lsls	r3, r1, #9
 80057c6:	4621      	mov	r1, r4
 80057c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057cc:	4621      	mov	r1, r4
 80057ce:	024a      	lsls	r2, r1, #9
 80057d0:	4610      	mov	r0, r2
 80057d2:	4619      	mov	r1, r3
 80057d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d6:	2200      	movs	r2, #0
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057e0:	f7fb f944 	bl	8000a6c <__aeabi_uldivmod>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4613      	mov	r3, r2
 80057ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ec:	e058      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ee:	4b38      	ldr	r3, [pc, #224]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	099b      	lsrs	r3, r3, #6
 80057f4:	2200      	movs	r2, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	4611      	mov	r1, r2
 80057fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057fe:	623b      	str	r3, [r7, #32]
 8005800:	2300      	movs	r3, #0
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
 8005804:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005808:	4642      	mov	r2, r8
 800580a:	464b      	mov	r3, r9
 800580c:	f04f 0000 	mov.w	r0, #0
 8005810:	f04f 0100 	mov.w	r1, #0
 8005814:	0159      	lsls	r1, r3, #5
 8005816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800581a:	0150      	lsls	r0, r2, #5
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4641      	mov	r1, r8
 8005822:	ebb2 0a01 	subs.w	sl, r2, r1
 8005826:	4649      	mov	r1, r9
 8005828:	eb63 0b01 	sbc.w	fp, r3, r1
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005838:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800583c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005840:	ebb2 040a 	subs.w	r4, r2, sl
 8005844:	eb63 050b 	sbc.w	r5, r3, fp
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	00eb      	lsls	r3, r5, #3
 8005852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005856:	00e2      	lsls	r2, r4, #3
 8005858:	4614      	mov	r4, r2
 800585a:	461d      	mov	r5, r3
 800585c:	4643      	mov	r3, r8
 800585e:	18e3      	adds	r3, r4, r3
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	464b      	mov	r3, r9
 8005864:	eb45 0303 	adc.w	r3, r5, r3
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005876:	4629      	mov	r1, r5
 8005878:	028b      	lsls	r3, r1, #10
 800587a:	4621      	mov	r1, r4
 800587c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005880:	4621      	mov	r1, r4
 8005882:	028a      	lsls	r2, r1, #10
 8005884:	4610      	mov	r0, r2
 8005886:	4619      	mov	r1, r3
 8005888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800588a:	2200      	movs	r2, #0
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	61fa      	str	r2, [r7, #28]
 8005890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005894:	f7fb f8ea 	bl	8000a6c <__aeabi_uldivmod>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4613      	mov	r3, r2
 800589e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	3301      	adds	r3, #1
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80058b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058ba:	e002      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80058be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3750      	adds	r7, #80	; 0x50
 80058c8:	46bd      	mov	sp, r7
 80058ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ce:	bf00      	nop
 80058d0:	40023800 	.word	0x40023800
 80058d4:	00f42400 	.word	0x00f42400
 80058d8:	007a1200 	.word	0x007a1200

080058dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20000018 	.word	0x20000018

080058f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058f8:	f7ff fff0 	bl	80058dc <HAL_RCC_GetHCLKFreq>
 80058fc:	4602      	mov	r2, r0
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	0a9b      	lsrs	r3, r3, #10
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	4903      	ldr	r1, [pc, #12]	; (8005918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800590a:	5ccb      	ldrb	r3, [r1, r3]
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40023800 	.word	0x40023800
 8005918:	08009e38 	.word	0x08009e38

0800591c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	220f      	movs	r2, #15
 800592a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800592c:	4b12      	ldr	r3, [pc, #72]	; (8005978 <HAL_RCC_GetClockConfig+0x5c>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 0203 	and.w	r2, r3, #3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <HAL_RCC_GetClockConfig+0x5c>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <HAL_RCC_GetClockConfig+0x5c>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <HAL_RCC_GetClockConfig+0x5c>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	08db      	lsrs	r3, r3, #3
 8005956:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800595e:	4b07      	ldr	r3, [pc, #28]	; (800597c <HAL_RCC_GetClockConfig+0x60>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 020f 	and.w	r2, r3, #15
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	601a      	str	r2, [r3, #0]
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800
 800597c:	40023c00 	.word	0x40023c00

08005980 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d038      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059a8:	4b68      	ldr	r3, [pc, #416]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059ae:	f7fd fc33 	bl	8003218 <HAL_GetTick>
 80059b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059b4:	e008      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059b6:	f7fd fc2f 	bl	8003218 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e0bd      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059c8:	4b61      	ldr	r3, [pc, #388]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f0      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	019b      	lsls	r3, r3, #6
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	071b      	lsls	r3, r3, #28
 80059e6:	495a      	ldr	r1, [pc, #360]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059ee:	4b57      	ldr	r3, [pc, #348]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059f0:	2201      	movs	r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059f4:	f7fd fc10 	bl	8003218 <HAL_GetTick>
 80059f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059fc:	f7fd fc0c 	bl	8003218 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e09a      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a0e:	4b50      	ldr	r3, [pc, #320]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0f0      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 8083 	beq.w	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	4b48      	ldr	r3, [pc, #288]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	4a47      	ldr	r2, [pc, #284]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a36:	6413      	str	r3, [r2, #64]	; 0x40
 8005a38:	4b45      	ldr	r3, [pc, #276]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a44:	4b43      	ldr	r3, [pc, #268]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a42      	ldr	r2, [pc, #264]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a50:	f7fd fbe2 	bl	8003218 <HAL_GetTick>
 8005a54:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a56:	e008      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a58:	f7fd fbde 	bl	8003218 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e06c      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a6a:	4b3a      	ldr	r3, [pc, #232]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a76:	4b36      	ldr	r3, [pc, #216]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d02f      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d028      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a94:	4b2e      	ldr	r3, [pc, #184]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a9c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a9e:	4b2e      	ldr	r3, [pc, #184]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005aa4:	4b2c      	ldr	r3, [pc, #176]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005aaa:	4a29      	ldr	r2, [pc, #164]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ab0:	4b27      	ldr	r3, [pc, #156]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d114      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005abc:	f7fd fbac 	bl	8003218 <HAL_GetTick>
 8005ac0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac2:	e00a      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ac4:	f7fd fba8 	bl	8003218 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e034      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ada:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0ee      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af2:	d10d      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005af4:	4b16      	ldr	r3, [pc, #88]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b08:	4911      	ldr	r1, [pc, #68]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	608b      	str	r3, [r1, #8]
 8005b0e:	e005      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005b10:	4b0f      	ldr	r3, [pc, #60]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4a0e      	ldr	r2, [pc, #56]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b1a:	6093      	str	r3, [r2, #8]
 8005b1c:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b28:	4909      	ldr	r1, [pc, #36]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	7d1a      	ldrb	r2, [r3, #20]
 8005b3e:	4b07      	ldr	r3, [pc, #28]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005b40:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	42470068 	.word	0x42470068
 8005b50:	40023800 	.word	0x40023800
 8005b54:	40007000 	.word	0x40007000
 8005b58:	42470e40 	.word	0x42470e40
 8005b5c:	424711e0 	.word	0x424711e0

08005b60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e083      	b.n	8005c7a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	7f5b      	ldrb	r3, [r3, #29]
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d105      	bne.n	8005b88 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fd f980 	bl	8002e88 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	22ca      	movs	r2, #202	; 0xca
 8005b94:	625a      	str	r2, [r3, #36]	; 0x24
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2253      	movs	r2, #83	; 0x53
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fb84 	bl	80062ac <RTC_EnterInitMode>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d008      	beq.n	8005bbc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	22ff      	movs	r2, #255	; 0xff
 8005bb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e05e      	b.n	8005c7a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bce:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6899      	ldr	r1, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	68d2      	ldr	r2, [r2, #12]
 8005bf6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6919      	ldr	r1, [r3, #16]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	041a      	lsls	r2, r3, #16
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c1a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10e      	bne.n	8005c48 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fb16 	bl	800625c <HAL_RTC_WaitForSynchro>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d008      	beq.n	8005c48 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	22ff      	movs	r2, #255	; 0xff
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2204      	movs	r2, #4
 8005c42:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e018      	b.n	8005c7a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c56:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	22ff      	movs	r2, #255	; 0xff
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005c78:	2300      	movs	r3, #0
  }
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c82:	b590      	push	{r4, r7, lr}
 8005c84:	b087      	sub	sp, #28
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	7f1b      	ldrb	r3, [r3, #28]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d101      	bne.n	8005c9e <HAL_RTC_SetTime+0x1c>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e0aa      	b.n	8005df4 <HAL_RTC_SetTime+0x172>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d126      	bne.n	8005cfe <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d102      	bne.n	8005cc4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fb1b 	bl	8006304 <RTC_ByteToBcd2>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fb14 	bl	8006304 <RTC_ByteToBcd2>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ce0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	789b      	ldrb	r3, [r3, #2]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fb0c 	bl	8006304 <RTC_ByteToBcd2>
 8005cec:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005cee:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	78db      	ldrb	r3, [r3, #3]
 8005cf6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e018      	b.n	8005d30 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005d1e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005d24:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	78db      	ldrb	r3, [r3, #3]
 8005d2a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	22ca      	movs	r2, #202	; 0xca
 8005d36:	625a      	str	r2, [r3, #36]	; 0x24
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2253      	movs	r2, #83	; 0x53
 8005d3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 fab3 	bl	80062ac <RTC_EnterInitMode>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00b      	beq.n	8005d64 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	22ff      	movs	r2, #255	; 0xff
 8005d52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2204      	movs	r2, #4
 8005d58:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e047      	b.n	8005df4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d6e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d72:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d82:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6899      	ldr	r1, [r3, #8]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005daa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d111      	bne.n	8005dde <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fa4e 	bl	800625c <HAL_RTC_WaitForSynchro>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00b      	beq.n	8005dde <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	22ff      	movs	r2, #255	; 0xff
 8005dcc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e00a      	b.n	8005df4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	22ff      	movs	r2, #255	; 0xff
 8005de4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005df2:	2300      	movs	r3, #0
  }
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd90      	pop	{r4, r7, pc}

08005dfc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005dfc:	b590      	push	{r4, r7, lr}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	7f1b      	ldrb	r3, [r3, #28]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_RTC_SetDate+0x1c>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e094      	b.n	8005f42 <HAL_RTC_SetDate+0x146>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2202      	movs	r2, #2
 8005e22:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10e      	bne.n	8005e48 <HAL_RTC_SetDate+0x4c>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	f003 0310 	and.w	r3, r3, #16
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	f023 0310 	bic.w	r3, r3, #16
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	330a      	adds	r3, #10
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d11c      	bne.n	8005e88 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	78db      	ldrb	r3, [r3, #3]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fa56 	bl	8006304 <RTC_ByteToBcd2>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	785b      	ldrb	r3, [r3, #1]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fa4f 	bl	8006304 <RTC_ByteToBcd2>
 8005e66:	4603      	mov	r3, r0
 8005e68:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005e6a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	789b      	ldrb	r3, [r3, #2]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fa47 	bl	8006304 <RTC_ByteToBcd2>
 8005e76:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005e78:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	e00e      	b.n	8005ea6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	78db      	ldrb	r3, [r3, #3]
 8005e8c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e94:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005e9a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	22ca      	movs	r2, #202	; 0xca
 8005eac:	625a      	str	r2, [r3, #36]	; 0x24
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2253      	movs	r2, #83	; 0x53
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f9f8 	bl	80062ac <RTC_EnterInitMode>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	22ff      	movs	r2, #255	; 0xff
 8005ec8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2204      	movs	r2, #4
 8005ece:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e033      	b.n	8005f42 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ee4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ee8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ef8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d111      	bne.n	8005f2c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f9a7 	bl	800625c <HAL_RTC_WaitForSynchro>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	22ff      	movs	r2, #255	; 0xff
 8005f1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2204      	movs	r2, #4
 8005f20:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e00a      	b.n	8005f42 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	22ff      	movs	r2, #255	; 0xff
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005f40:	2300      	movs	r3, #0
  }
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd90      	pop	{r4, r7, pc}
	...

08005f4c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005f4c:	b590      	push	{r4, r7, lr}
 8005f4e:	b089      	sub	sp, #36	; 0x24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8005f60:	4b93      	ldr	r3, [pc, #588]	; (80061b0 <HAL_RTC_SetAlarm_IT+0x264>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a93      	ldr	r2, [pc, #588]	; (80061b4 <HAL_RTC_SetAlarm_IT+0x268>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	0adb      	lsrs	r3, r3, #11
 8005f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	7f1b      	ldrb	r3, [r3, #28]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_RTC_SetAlarm_IT+0x36>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e111      	b.n	80061a6 <HAL_RTC_SetAlarm_IT+0x25a>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d137      	bne.n	8006004 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d102      	bne.n	8005fa8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 f9a9 	bl	8006304 <RTC_ByteToBcd2>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 f9a2 	bl	8006304 <RTC_ByteToBcd2>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005fc4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	789b      	ldrb	r3, [r3, #2]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 f99a 	bl	8006304 <RTC_ByteToBcd2>
 8005fd0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005fd2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	78db      	ldrb	r3, [r3, #3]
 8005fda:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005fdc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f98c 	bl	8006304 <RTC_ByteToBcd2>
 8005fec:	4603      	mov	r3, r0
 8005fee:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005ff0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005ff8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005ffe:	4313      	orrs	r3, r2
 8006000:	61fb      	str	r3, [r7, #28]
 8006002:	e023      	b.n	800604c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	d102      	bne.n	8006018 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2200      	movs	r2, #0
 8006016:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006024:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800602a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	78db      	ldrb	r3, [r3, #3]
 8006030:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006032:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800603a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800603c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006042:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006048:	4313      	orrs	r3, r2
 800604a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	4313      	orrs	r3, r2
 8006056:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	22ca      	movs	r2, #202	; 0xca
 800605e:	625a      	str	r2, [r3, #36]	; 0x24
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2253      	movs	r2, #83	; 0x53
 8006066:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006070:	d141      	bne.n	80060f6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006080:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	b2da      	uxtb	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006092:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	1e5a      	subs	r2, r3, #1
 8006098:	617a      	str	r2, [r7, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10b      	bne.n	80060b6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	22ff      	movs	r2, #255	; 0xff
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2203      	movs	r2, #3
 80060aa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e077      	b.n	80061a6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0e7      	beq.n	8006094 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060e2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060f2:	609a      	str	r2, [r3, #8]
 80060f4:	e040      	b.n	8006178 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006104:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	b2da      	uxtb	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006116:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	1e5a      	subs	r2, r3, #1
 800611c:	617a      	str	r2, [r7, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10b      	bne.n	800613a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	22ff      	movs	r2, #255	; 0xff
 8006128:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2203      	movs	r2, #3
 800612e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e035      	b.n	80061a6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0e7      	beq.n	8006118 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69fa      	ldr	r2, [r7, #28]
 800614e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006166:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006176:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006178:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a0e      	ldr	r2, [pc, #56]	; (80061b8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800617e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006182:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8006184:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	4a0b      	ldr	r2, [pc, #44]	; (80061b8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800618a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800618e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	22ff      	movs	r2, #255	; 0xff
 8006196:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3724      	adds	r7, #36	; 0x24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd90      	pop	{r4, r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000018 	.word	0x20000018
 80061b4:	10624dd3 	.word	0x10624dd3
 80061b8:	40013c00 	.word	0x40013c00

080061bc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d012      	beq.n	80061f8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00b      	beq.n	80061f8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f831 	bl	8006248 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80061f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d012      	beq.n	800622c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f893 	bl	8006340 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f462 7220 	orn	r2, r2, #640	; 0x280
 800622a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800622c:	4b05      	ldr	r3, [pc, #20]	; (8006244 <HAL_RTC_AlarmIRQHandler+0x88>)
 800622e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006232:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	775a      	strb	r2, [r3, #29]
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	40013c00 	.word	0x40013c00

08006248 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006276:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006278:	f7fc ffce 	bl	8003218 <HAL_GetTick>
 800627c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800627e:	e009      	b.n	8006294 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006280:	f7fc ffca 	bl	8003218 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800628e:	d901      	bls.n	8006294 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e007      	b.n	80062a4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0ee      	beq.n	8006280 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d119      	bne.n	80062fa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f04f 32ff 	mov.w	r2, #4294967295
 80062ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062d0:	f7fc ffa2 	bl	8003218 <HAL_GetTick>
 80062d4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062d6:	e009      	b.n	80062ec <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062d8:	f7fc ff9e 	bl	8003218 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062e6:	d901      	bls.n	80062ec <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e007      	b.n	80062fc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0ee      	beq.n	80062d8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006312:	e005      	b.n	8006320 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3301      	adds	r3, #1
 8006318:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	3b0a      	subs	r3, #10
 800631e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	2b09      	cmp	r3, #9
 8006324:	d8f6      	bhi.n	8006314 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	b2db      	uxtb	r3, r3
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	b2da      	uxtb	r2, r3
 800632e:	79fb      	ldrb	r3, [r7, #7]
 8006330:	4313      	orrs	r3, r2
 8006332:	b2db      	uxtb	r3, r3
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e01d      	b.n	80063a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fc fda0 	bl	8002ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3304      	adds	r3, #4
 8006390:	4619      	mov	r1, r3
 8006392:	4610      	mov	r0, r2
 8006394:	f000 fb72 	bl	8006a7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2202      	movs	r2, #2
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b06      	cmp	r3, #6
 80063ca:	d007      	beq.n	80063dc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0201 	orr.w	r2, r2, #1
 8006408:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b06      	cmp	r3, #6
 800641a:	d007      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e01d      	b.n	8006488 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d106      	bne.n	8006466 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f815 	bl	8006490 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2202      	movs	r2, #2
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3304      	adds	r3, #4
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f000 faff 	bl	8006a7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2201      	movs	r2, #1
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fd86 	bl	8006fc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a10      	ldr	r2, [pc, #64]	; (8006504 <HAL_TIM_PWM_Start+0x60>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d107      	bne.n	80064d6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2b06      	cmp	r3, #6
 80064e6:	d007      	beq.n	80064f8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0201 	orr.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40010000 	.word	0x40010000

08006508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b02      	cmp	r3, #2
 800651c:	d122      	bne.n	8006564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b02      	cmp	r3, #2
 800652a:	d11b      	bne.n	8006564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0202 	mvn.w	r2, #2
 8006534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa78 	bl	8006a40 <HAL_TIM_IC_CaptureCallback>
 8006550:	e005      	b.n	800655e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fa6a 	bl	8006a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fa7b 	bl	8006a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b04      	cmp	r3, #4
 8006570:	d122      	bne.n	80065b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b04      	cmp	r3, #4
 800657e:	d11b      	bne.n	80065b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0204 	mvn.w	r2, #4
 8006588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2202      	movs	r2, #2
 800658e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa4e 	bl	8006a40 <HAL_TIM_IC_CaptureCallback>
 80065a4:	e005      	b.n	80065b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fa40 	bl	8006a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fa51 	bl	8006a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d122      	bne.n	800660c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d11b      	bne.n	800660c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0208 	mvn.w	r2, #8
 80065dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2204      	movs	r2, #4
 80065e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa24 	bl	8006a40 <HAL_TIM_IC_CaptureCallback>
 80065f8:	e005      	b.n	8006606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa16 	bl	8006a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fa27 	bl	8006a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	2b10      	cmp	r3, #16
 8006618:	d122      	bne.n	8006660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b10      	cmp	r3, #16
 8006626:	d11b      	bne.n	8006660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0210 	mvn.w	r2, #16
 8006630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2208      	movs	r2, #8
 8006636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9fa 	bl	8006a40 <HAL_TIM_IC_CaptureCallback>
 800664c:	e005      	b.n	800665a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f9ec 	bl	8006a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f9fd 	bl	8006a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b01      	cmp	r3, #1
 800666c:	d10e      	bne.n	800668c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b01      	cmp	r3, #1
 800667a:	d107      	bne.n	800668c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f06f 0201 	mvn.w	r2, #1
 8006684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fa fd96 	bl	80011b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b80      	cmp	r3, #128	; 0x80
 8006698:	d10e      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a4:	2b80      	cmp	r3, #128	; 0x80
 80066a6:	d107      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fd26 	bl	8007104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c2:	2b40      	cmp	r3, #64	; 0x40
 80066c4:	d10e      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d107      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f9c2 	bl	8006a68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	d10e      	bne.n	8006710 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f003 0320 	and.w	r3, r3, #32
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	d107      	bne.n	8006710 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0220 	mvn.w	r2, #32
 8006708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fcf0 	bl	80070f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800672e:	2302      	movs	r3, #2
 8006730:	e0b4      	b.n	800689c <HAL_TIM_PWM_ConfigChannel+0x184>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2202      	movs	r2, #2
 800673e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b0c      	cmp	r3, #12
 8006746:	f200 809f 	bhi.w	8006888 <HAL_TIM_PWM_ConfigChannel+0x170>
 800674a:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	08006785 	.word	0x08006785
 8006754:	08006889 	.word	0x08006889
 8006758:	08006889 	.word	0x08006889
 800675c:	08006889 	.word	0x08006889
 8006760:	080067c5 	.word	0x080067c5
 8006764:	08006889 	.word	0x08006889
 8006768:	08006889 	.word	0x08006889
 800676c:	08006889 	.word	0x08006889
 8006770:	08006807 	.word	0x08006807
 8006774:	08006889 	.word	0x08006889
 8006778:	08006889 	.word	0x08006889
 800677c:	08006889 	.word	0x08006889
 8006780:	08006847 	.word	0x08006847
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	4618      	mov	r0, r3
 800678c:	f000 f9f6 	bl	8006b7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0208 	orr.w	r2, r2, #8
 800679e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0204 	bic.w	r2, r2, #4
 80067ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6999      	ldr	r1, [r3, #24]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	691a      	ldr	r2, [r3, #16]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	619a      	str	r2, [r3, #24]
      break;
 80067c2:	e062      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fa3c 	bl	8006c48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6999      	ldr	r1, [r3, #24]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	021a      	lsls	r2, r3, #8
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	619a      	str	r2, [r3, #24]
      break;
 8006804:	e041      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fa87 	bl	8006d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0208 	orr.w	r2, r2, #8
 8006820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69da      	ldr	r2, [r3, #28]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 0204 	bic.w	r2, r2, #4
 8006830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69d9      	ldr	r1, [r3, #28]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	61da      	str	r2, [r3, #28]
      break;
 8006844:	e021      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fad1 	bl	8006df4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69d9      	ldr	r1, [r3, #28]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	021a      	lsls	r2, r3, #8
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	61da      	str	r2, [r3, #28]
      break;
 8006886:	e000      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006888:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_TIM_ConfigClockSource+0x18>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e0b3      	b.n	8006a24 <HAL_TIM_ConfigClockSource+0x180>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f4:	d03e      	beq.n	8006974 <HAL_TIM_ConfigClockSource+0xd0>
 80068f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068fa:	f200 8087 	bhi.w	8006a0c <HAL_TIM_ConfigClockSource+0x168>
 80068fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006902:	f000 8085 	beq.w	8006a10 <HAL_TIM_ConfigClockSource+0x16c>
 8006906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690a:	d87f      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x168>
 800690c:	2b70      	cmp	r3, #112	; 0x70
 800690e:	d01a      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0xa2>
 8006910:	2b70      	cmp	r3, #112	; 0x70
 8006912:	d87b      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x168>
 8006914:	2b60      	cmp	r3, #96	; 0x60
 8006916:	d050      	beq.n	80069ba <HAL_TIM_ConfigClockSource+0x116>
 8006918:	2b60      	cmp	r3, #96	; 0x60
 800691a:	d877      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x168>
 800691c:	2b50      	cmp	r3, #80	; 0x50
 800691e:	d03c      	beq.n	800699a <HAL_TIM_ConfigClockSource+0xf6>
 8006920:	2b50      	cmp	r3, #80	; 0x50
 8006922:	d873      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x168>
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d058      	beq.n	80069da <HAL_TIM_ConfigClockSource+0x136>
 8006928:	2b40      	cmp	r3, #64	; 0x40
 800692a:	d86f      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x168>
 800692c:	2b30      	cmp	r3, #48	; 0x30
 800692e:	d064      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x156>
 8006930:	2b30      	cmp	r3, #48	; 0x30
 8006932:	d86b      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x168>
 8006934:	2b20      	cmp	r3, #32
 8006936:	d060      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x156>
 8006938:	2b20      	cmp	r3, #32
 800693a:	d867      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x168>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d05c      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x156>
 8006940:	2b10      	cmp	r3, #16
 8006942:	d05a      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006944:	e062      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6899      	ldr	r1, [r3, #8]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f000 fb17 	bl	8006f88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006968:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	609a      	str	r2, [r3, #8]
      break;
 8006972:	e04e      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	6899      	ldr	r1, [r3, #8]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f000 fb00 	bl	8006f88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006996:	609a      	str	r2, [r3, #8]
      break;
 8006998:	e03b      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6818      	ldr	r0, [r3, #0]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6859      	ldr	r1, [r3, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f000 fa74 	bl	8006e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2150      	movs	r1, #80	; 0x50
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 facd 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 80069b8:	e02b      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6818      	ldr	r0, [r3, #0]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	6859      	ldr	r1, [r3, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	461a      	mov	r2, r3
 80069c8:	f000 fa93 	bl	8006ef2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2160      	movs	r1, #96	; 0x60
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fabd 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 80069d8:	e01b      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	6859      	ldr	r1, [r3, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f000 fa54 	bl	8006e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2140      	movs	r1, #64	; 0x40
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 faad 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 80069f8:	e00b      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f000 faa4 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006a0a:	e002      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a0c:	bf00      	nop
 8006a0e:	e000      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a34      	ldr	r2, [pc, #208]	; (8006b60 <TIM_Base_SetConfig+0xe4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00f      	beq.n	8006ab4 <TIM_Base_SetConfig+0x38>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9a:	d00b      	beq.n	8006ab4 <TIM_Base_SetConfig+0x38>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a31      	ldr	r2, [pc, #196]	; (8006b64 <TIM_Base_SetConfig+0xe8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_Base_SetConfig+0x38>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a30      	ldr	r2, [pc, #192]	; (8006b68 <TIM_Base_SetConfig+0xec>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_Base_SetConfig+0x38>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a2f      	ldr	r2, [pc, #188]	; (8006b6c <TIM_Base_SetConfig+0xf0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d108      	bne.n	8006ac6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a25      	ldr	r2, [pc, #148]	; (8006b60 <TIM_Base_SetConfig+0xe4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01b      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad4:	d017      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a22      	ldr	r2, [pc, #136]	; (8006b64 <TIM_Base_SetConfig+0xe8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d013      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a21      	ldr	r2, [pc, #132]	; (8006b68 <TIM_Base_SetConfig+0xec>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00f      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a20      	ldr	r2, [pc, #128]	; (8006b6c <TIM_Base_SetConfig+0xf0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00b      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a1f      	ldr	r2, [pc, #124]	; (8006b70 <TIM_Base_SetConfig+0xf4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d007      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a1e      	ldr	r2, [pc, #120]	; (8006b74 <TIM_Base_SetConfig+0xf8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d003      	beq.n	8006b06 <TIM_Base_SetConfig+0x8a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a1d      	ldr	r2, [pc, #116]	; (8006b78 <TIM_Base_SetConfig+0xfc>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d108      	bne.n	8006b18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a08      	ldr	r2, [pc, #32]	; (8006b60 <TIM_Base_SetConfig+0xe4>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d103      	bne.n	8006b4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	615a      	str	r2, [r3, #20]
}
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40000400 	.word	0x40000400
 8006b68:	40000800 	.word	0x40000800
 8006b6c:	40000c00 	.word	0x40000c00
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400
 8006b78:	40014800 	.word	0x40014800

08006b7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	f023 0201 	bic.w	r2, r3, #1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0303 	bic.w	r3, r3, #3
 8006bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f023 0302 	bic.w	r3, r3, #2
 8006bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a1c      	ldr	r2, [pc, #112]	; (8006c44 <TIM_OC1_SetConfig+0xc8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d10c      	bne.n	8006bf2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f023 0308 	bic.w	r3, r3, #8
 8006bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f023 0304 	bic.w	r3, r3, #4
 8006bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a13      	ldr	r2, [pc, #76]	; (8006c44 <TIM_OC1_SetConfig+0xc8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d111      	bne.n	8006c1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	621a      	str	r2, [r3, #32]
}
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	40010000 	.word	0x40010000

08006c48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	f023 0210 	bic.w	r2, r3, #16
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f023 0320 	bic.w	r3, r3, #32
 8006c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a1e      	ldr	r2, [pc, #120]	; (8006d1c <TIM_OC2_SetConfig+0xd4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d10d      	bne.n	8006cc4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a15      	ldr	r2, [pc, #84]	; (8006d1c <TIM_OC2_SetConfig+0xd4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d113      	bne.n	8006cf4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	621a      	str	r2, [r3, #32]
}
 8006d0e:	bf00      	nop
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40010000 	.word	0x40010000

08006d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	021b      	lsls	r3, r3, #8
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a1d      	ldr	r2, [pc, #116]	; (8006df0 <TIM_OC3_SetConfig+0xd0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d10d      	bne.n	8006d9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a14      	ldr	r2, [pc, #80]	; (8006df0 <TIM_OC3_SetConfig+0xd0>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d113      	bne.n	8006dca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	621a      	str	r2, [r3, #32]
}
 8006de4:	bf00      	nop
 8006de6:	371c      	adds	r7, #28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	40010000 	.word	0x40010000

08006df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	031b      	lsls	r3, r3, #12
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a10      	ldr	r2, [pc, #64]	; (8006e90 <TIM_OC4_SetConfig+0x9c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d109      	bne.n	8006e68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	019b      	lsls	r3, r3, #6
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	621a      	str	r2, [r3, #32]
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40010000 	.word	0x40010000

08006e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	f023 0201 	bic.w	r2, r3, #1
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f023 030a 	bic.w	r3, r3, #10
 8006ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b087      	sub	sp, #28
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f023 0210 	bic.w	r2, r3, #16
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	031b      	lsls	r3, r3, #12
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	621a      	str	r2, [r3, #32]
}
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	f043 0307 	orr.w	r3, r3, #7
 8006f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	609a      	str	r2, [r3, #8]
}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	021a      	lsls	r2, r3, #8
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	609a      	str	r2, [r3, #8]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f003 031f 	and.w	r3, r3, #31
 8006fda:	2201      	movs	r2, #1
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a1a      	ldr	r2, [r3, #32]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	401a      	ands	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1a      	ldr	r2, [r3, #32]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f003 031f 	and.w	r3, r3, #31
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8007000:	431a      	orrs	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
	...

08007014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007028:	2302      	movs	r3, #2
 800702a:	e050      	b.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1c      	ldr	r2, [pc, #112]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d018      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007078:	d013      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a18      	ldr	r2, [pc, #96]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00e      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a16      	ldr	r2, [pc, #88]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d009      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a15      	ldr	r2, [pc, #84]	; (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d004      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a13      	ldr	r2, [pc, #76]	; (80070ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d10c      	bne.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40010000 	.word	0x40010000
 80070e0:	40000400 	.word	0x40000400
 80070e4:	40000800 	.word	0x40000800
 80070e8:	40000c00 	.word	0x40000c00
 80070ec:	40014000 	.word	0x40014000

080070f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800712a:	2b84      	cmp	r3, #132	; 0x84
 800712c:	d005      	beq.n	800713a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800712e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	3303      	adds	r3, #3
 8007138:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800713a:	68fb      	ldr	r3, [r7, #12]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800714c:	f000 ff60 	bl	8008010 <vTaskStartScheduler>
  
  return osOK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	bd80      	pop	{r7, pc}

08007156 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007156:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007158:	b089      	sub	sp, #36	; 0x24
 800715a:	af04      	add	r7, sp, #16
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d020      	beq.n	80071aa <osThreadCreate+0x54>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d01c      	beq.n	80071aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685c      	ldr	r4, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681d      	ldr	r5, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691e      	ldr	r6, [r3, #16]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff ffc8 	bl	8007118 <makeFreeRtosPriority>
 8007188:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007192:	9202      	str	r2, [sp, #8]
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	9100      	str	r1, [sp, #0]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	4632      	mov	r2, r6
 800719c:	4629      	mov	r1, r5
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 fd6f 	bl	8007c82 <xTaskCreateStatic>
 80071a4:	4603      	mov	r3, r0
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e01c      	b.n	80071e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685c      	ldr	r4, [r3, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071b6:	b29e      	uxth	r6, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff ffaa 	bl	8007118 <makeFreeRtosPriority>
 80071c4:	4602      	mov	r2, r0
 80071c6:	f107 030c 	add.w	r3, r7, #12
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	9200      	str	r2, [sp, #0]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	4632      	mov	r2, r6
 80071d2:	4629      	mov	r1, r5
 80071d4:	4620      	mov	r0, r4
 80071d6:	f000 fdb1 	bl	8007d3c <xTaskCreate>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d001      	beq.n	80071e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	e000      	b.n	80071e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80071e4:	68fb      	ldr	r3, [r7, #12]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <osDelay+0x16>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	e000      	b.n	8007206 <osDelay+0x18>
 8007204:	2301      	movs	r3, #1
 8007206:	4618      	mov	r0, r3
 8007208:	f000 fece 	bl	8007fa8 <vTaskDelay>
  
  return osOK;
 800720c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f103 0208 	add.w	r2, r3, #8
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f04f 32ff 	mov.w	r2, #4294967295
 800722e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f103 0208 	add.w	r2, r3, #8
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f103 0208 	add.w	r2, r3, #8
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	601a      	str	r2, [r3, #0]
}
 80072ac:	bf00      	nop
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ce:	d103      	bne.n	80072d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	e00c      	b.n	80072f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3308      	adds	r3, #8
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	e002      	b.n	80072e6 <vListInsert+0x2e>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d2f6      	bcs.n	80072e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	601a      	str	r2, [r3, #0]
}
 800731e:	bf00      	nop
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	6892      	ldr	r2, [r2, #8]
 8007340:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6852      	ldr	r2, [r2, #4]
 800734a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	429a      	cmp	r2, r3
 8007354:	d103      	bne.n	800735e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	1e5a      	subs	r2, r3, #1
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
	...

08007380 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80073aa:	f001 fc63 	bl	8008c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b6:	68f9      	ldr	r1, [r7, #12]
 80073b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073ba:	fb01 f303 	mul.w	r3, r1, r3
 80073be:	441a      	add	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073da:	3b01      	subs	r3, #1
 80073dc:	68f9      	ldr	r1, [r7, #12]
 80073de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073e0:	fb01 f303 	mul.w	r3, r1, r3
 80073e4:	441a      	add	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	22ff      	movs	r2, #255	; 0xff
 80073ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	22ff      	movs	r2, #255	; 0xff
 80073f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d114      	bne.n	800742a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01a      	beq.n	800743e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3310      	adds	r3, #16
 800740c:	4618      	mov	r0, r3
 800740e:	f001 f841 	bl	8008494 <xTaskRemoveFromEventList>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d012      	beq.n	800743e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007418:	4b0c      	ldr	r3, [pc, #48]	; (800744c <xQueueGenericReset+0xcc>)
 800741a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	e009      	b.n	800743e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3310      	adds	r3, #16
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff fef1 	bl	8007216 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3324      	adds	r3, #36	; 0x24
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff feec 	bl	8007216 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800743e:	f001 fc49 	bl	8008cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007442:	2301      	movs	r3, #1
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	e000ed04 	.word	0xe000ed04

08007450 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08a      	sub	sp, #40	; 0x28
 8007454:	af02      	add	r7, sp, #8
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10a      	bne.n	800747a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	613b      	str	r3, [r7, #16]
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d102      	bne.n	8007486 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007480:	2300      	movs	r3, #0
 8007482:	61fb      	str	r3, [r7, #28]
 8007484:	e004      	b.n	8007490 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	fb02 f303 	mul.w	r3, r2, r3
 800748e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	334c      	adds	r3, #76	; 0x4c
 8007494:	4618      	mov	r0, r3
 8007496:	f001 fccf 	bl	8008e38 <pvPortMalloc>
 800749a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d011      	beq.n	80074c6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	334c      	adds	r3, #76	; 0x4c
 80074aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074b4:	79fa      	ldrb	r2, [r7, #7]
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	4613      	mov	r3, r2
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	68b9      	ldr	r1, [r7, #8]
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 f805 	bl	80074d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074c6:	69bb      	ldr	r3, [r7, #24]
	}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3720      	adds	r7, #32
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
 80074dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	e002      	b.n	80074f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074fe:	2101      	movs	r1, #1
 8007500:	69b8      	ldr	r0, [r7, #24]
 8007502:	f7ff ff3d 	bl	8007380 <xQueueGenericReset>
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2200      	movs	r2, #0
 800750a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800750c:	bf00      	nop
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08e      	sub	sp, #56	; 0x38
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007522:	2300      	movs	r3, #0
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <xQueueGenericSend+0x32>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d103      	bne.n	8007554 <xQueueGenericSend+0x40>
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <xQueueGenericSend+0x44>
 8007554:	2301      	movs	r3, #1
 8007556:	e000      	b.n	800755a <xQueueGenericSend+0x46>
 8007558:	2300      	movs	r3, #0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <xQueueGenericSend+0x60>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	623b      	str	r3, [r7, #32]
}
 8007570:	bf00      	nop
 8007572:	e7fe      	b.n	8007572 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d103      	bne.n	8007582 <xQueueGenericSend+0x6e>
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757e:	2b01      	cmp	r3, #1
 8007580:	d101      	bne.n	8007586 <xQueueGenericSend+0x72>
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <xQueueGenericSend+0x74>
 8007586:	2300      	movs	r3, #0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	61fb      	str	r3, [r7, #28]
}
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075a2:	f001 f933 	bl	800880c <xTaskGetSchedulerState>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d102      	bne.n	80075b2 <xQueueGenericSend+0x9e>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <xQueueGenericSend+0xa2>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e000      	b.n	80075b8 <xQueueGenericSend+0xa4>
 80075b6:	2300      	movs	r3, #0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10a      	bne.n	80075d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	61bb      	str	r3, [r7, #24]
}
 80075ce:	bf00      	nop
 80075d0:	e7fe      	b.n	80075d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075d2:	f001 fb4f 	bl	8008c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075de:	429a      	cmp	r2, r3
 80075e0:	d302      	bcc.n	80075e8 <xQueueGenericSend+0xd4>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d146      	bne.n	8007676 <xQueueGenericSend+0x162>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	68b9      	ldr	r1, [r7, #8]
 80075f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075f4:	f000 f98a 	bl	800790c <prvCopyDataToQueue>
 80075f8:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d015      	beq.n	800762e <xQueueGenericSend+0x11a>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d102      	bne.n	800760e <xQueueGenericSend+0xfa>
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760a:	2b00      	cmp	r3, #0
 800760c:	d12f      	bne.n	800766e <xQueueGenericSend+0x15a>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007612:	f000 fadc 	bl	8007bce <prvNotifyQueueSetContainer>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d028      	beq.n	800766e <xQueueGenericSend+0x15a>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 800761c:	4b4a      	ldr	r3, [pc, #296]	; (8007748 <xQueueGenericSend+0x234>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	e01f      	b.n	800766e <xQueueGenericSend+0x15a>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	2b00      	cmp	r3, #0
 8007634:	d010      	beq.n	8007658 <xQueueGenericSend+0x144>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	3324      	adds	r3, #36	; 0x24
 800763a:	4618      	mov	r0, r3
 800763c:	f000 ff2a 	bl	8008494 <xTaskRemoveFromEventList>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d013      	beq.n	800766e <xQueueGenericSend+0x15a>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8007646:	4b40      	ldr	r3, [pc, #256]	; (8007748 <xQueueGenericSend+0x234>)
 8007648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	e00a      	b.n	800766e <xQueueGenericSend+0x15a>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	2b00      	cmp	r3, #0
 800765c:	d007      	beq.n	800766e <xQueueGenericSend+0x15a>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 800765e:	4b3a      	ldr	r3, [pc, #232]	; (8007748 <xQueueGenericSend+0x234>)
 8007660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800766e:	f001 fb31 	bl	8008cd4 <vPortExitCritical>
				return pdPASS;
 8007672:	2301      	movs	r3, #1
 8007674:	e063      	b.n	800773e <xQueueGenericSend+0x22a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d103      	bne.n	8007684 <xQueueGenericSend+0x170>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800767c:	f001 fb2a 	bl	8008cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007680:	2300      	movs	r3, #0
 8007682:	e05c      	b.n	800773e <xQueueGenericSend+0x22a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <xQueueGenericSend+0x184>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800768a:	f107 0310 	add.w	r3, r7, #16
 800768e:	4618      	mov	r0, r3
 8007690:	f000 ff62 	bl	8008558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007694:	2301      	movs	r3, #1
 8007696:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007698:	f001 fb1c 	bl	8008cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800769c:	f000 fd18 	bl	80080d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076a0:	f001 fae8 	bl	8008c74 <vPortEnterCritical>
 80076a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076aa:	b25b      	sxtb	r3, r3
 80076ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b0:	d103      	bne.n	80076ba <xQueueGenericSend+0x1a6>
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076c0:	b25b      	sxtb	r3, r3
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	d103      	bne.n	80076d0 <xQueueGenericSend+0x1bc>
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076d0:	f001 fb00 	bl	8008cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076d4:	1d3a      	adds	r2, r7, #4
 80076d6:	f107 0310 	add.w	r3, r7, #16
 80076da:	4611      	mov	r1, r2
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 ff51 	bl	8008584 <xTaskCheckForTimeOut>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d124      	bne.n	8007732 <xQueueGenericSend+0x21e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076ea:	f000 fa15 	bl	8007b18 <prvIsQueueFull>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d018      	beq.n	8007726 <xQueueGenericSend+0x212>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	3310      	adds	r3, #16
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fea5 	bl	800844c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007704:	f000 f992 	bl	8007a2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007708:	f000 fcf0 	bl	80080ec <xTaskResumeAll>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	f47f af5f 	bne.w	80075d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007714:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <xQueueGenericSend+0x234>)
 8007716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	e755      	b.n	80075d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007728:	f000 f980 	bl	8007a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800772c:	f000 fcde 	bl	80080ec <xTaskResumeAll>
 8007730:	e74f      	b.n	80075d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007734:	f000 f97a 	bl	8007a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007738:	f000 fcd8 	bl	80080ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800773c:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800773e:	4618      	mov	r0, r3
 8007740:	3738      	adds	r7, #56	; 0x38
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08c      	sub	sp, #48	; 0x30
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007758:	2300      	movs	r3, #0
 800775a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10a      	bne.n	800777c <xQueueReceive+0x30>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	623b      	str	r3, [r7, #32]
}
 8007778:	bf00      	nop
 800777a:	e7fe      	b.n	800777a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <xQueueReceive+0x3e>
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <xQueueReceive+0x42>
 800778a:	2301      	movs	r3, #1
 800778c:	e000      	b.n	8007790 <xQueueReceive+0x44>
 800778e:	2300      	movs	r3, #0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <xQueueReceive+0x5e>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	61fb      	str	r3, [r7, #28]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077aa:	f001 f82f 	bl	800880c <xTaskGetSchedulerState>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d102      	bne.n	80077ba <xQueueReceive+0x6e>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <xQueueReceive+0x72>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <xQueueReceive+0x74>
 80077be:	2300      	movs	r3, #0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10a      	bne.n	80077da <xQueueReceive+0x8e>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	61bb      	str	r3, [r7, #24]
}
 80077d6:	bf00      	nop
 80077d8:	e7fe      	b.n	80077d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077da:	f001 fa4b 	bl	8008c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01f      	beq.n	800782a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ee:	f000 f8f7 	bl	80079e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	1e5a      	subs	r2, r3, #1
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00f      	beq.n	8007822 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007804:	3310      	adds	r3, #16
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fe44 	bl	8008494 <xTaskRemoveFromEventList>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007812:	4b3d      	ldr	r3, [pc, #244]	; (8007908 <xQueueReceive+0x1bc>)
 8007814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007822:	f001 fa57 	bl	8008cd4 <vPortExitCritical>
				return pdPASS;
 8007826:	2301      	movs	r3, #1
 8007828:	e069      	b.n	80078fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007830:	f001 fa50 	bl	8008cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007834:	2300      	movs	r3, #0
 8007836:	e062      	b.n	80078fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800783e:	f107 0310 	add.w	r3, r7, #16
 8007842:	4618      	mov	r0, r3
 8007844:	f000 fe88 	bl	8008558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007848:	2301      	movs	r3, #1
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800784c:	f001 fa42 	bl	8008cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007850:	f000 fc3e 	bl	80080d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007854:	f001 fa0e 	bl	8008c74 <vPortEnterCritical>
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800785e:	b25b      	sxtb	r3, r3
 8007860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007864:	d103      	bne.n	800786e <xQueueReceive+0x122>
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007874:	b25b      	sxtb	r3, r3
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	d103      	bne.n	8007884 <xQueueReceive+0x138>
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007884:	f001 fa26 	bl	8008cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007888:	1d3a      	adds	r2, r7, #4
 800788a:	f107 0310 	add.w	r3, r7, #16
 800788e:	4611      	mov	r1, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f000 fe77 	bl	8008584 <xTaskCheckForTimeOut>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d123      	bne.n	80078e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800789c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800789e:	f000 f925 	bl	8007aec <prvIsQueueEmpty>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d017      	beq.n	80078d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	3324      	adds	r3, #36	; 0x24
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	4611      	mov	r1, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 fdcb 	bl	800844c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078b8:	f000 f8b8 	bl	8007a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078bc:	f000 fc16 	bl	80080ec <xTaskResumeAll>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d189      	bne.n	80077da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80078c6:	4b10      	ldr	r3, [pc, #64]	; (8007908 <xQueueReceive+0x1bc>)
 80078c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	e780      	b.n	80077da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078da:	f000 f8a7 	bl	8007a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078de:	f000 fc05 	bl	80080ec <xTaskResumeAll>
 80078e2:	e77a      	b.n	80077da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80078e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e6:	f000 f8a1 	bl	8007a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078ea:	f000 fbff 	bl	80080ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f0:	f000 f8fc 	bl	8007aec <prvIsQueueEmpty>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f43f af6f 	beq.w	80077da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3730      	adds	r7, #48	; 0x30
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	e000ed04 	.word	0xe000ed04

0800790c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007920:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10d      	bne.n	8007946 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d14d      	bne.n	80079ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	4618      	mov	r0, r3
 8007938:	f000 ff86 	bl	8008848 <xTaskPriorityDisinherit>
 800793c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	609a      	str	r2, [r3, #8]
 8007944:	e043      	b.n	80079ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d119      	bne.n	8007980 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6858      	ldr	r0, [r3, #4]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007954:	461a      	mov	r2, r3
 8007956:	68b9      	ldr	r1, [r7, #8]
 8007958:	f001 fc72 	bl	8009240 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007964:	441a      	add	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	429a      	cmp	r2, r3
 8007974:	d32b      	bcc.n	80079ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	605a      	str	r2, [r3, #4]
 800797e:	e026      	b.n	80079ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68d8      	ldr	r0, [r3, #12]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	461a      	mov	r2, r3
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	f001 fc58 	bl	8009240 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	68da      	ldr	r2, [r3, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007998:	425b      	negs	r3, r3
 800799a:	441a      	add	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d207      	bcs.n	80079bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b4:	425b      	negs	r3, r3
 80079b6:	441a      	add	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d105      	bne.n	80079ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80079d6:	697b      	ldr	r3, [r7, #20]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d018      	beq.n	8007a24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	441a      	add	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68da      	ldr	r2, [r3, #12]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d303      	bcc.n	8007a14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68d9      	ldr	r1, [r3, #12]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	6838      	ldr	r0, [r7, #0]
 8007a20:	f001 fc0e 	bl	8009240 <memcpy>
	}
}
 8007a24:	bf00      	nop
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a34:	f001 f91e 	bl	8008c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a40:	e01f      	b.n	8007a82 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d009      	beq.n	8007a5e <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f8be 	bl	8007bce <prvNotifyQueueSetContainer>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d010      	beq.n	8007a7a <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8007a58:	f000 fdf6 	bl	8008648 <vTaskMissedYield>
 8007a5c:	e00d      	b.n	8007a7a <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d012      	beq.n	8007a8c <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3324      	adds	r3, #36	; 0x24
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fd12 	bl	8008494 <xTaskRemoveFromEventList>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8007a76:	f000 fde7 	bl	8008648 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dcdb      	bgt.n	8007a42 <prvUnlockQueue+0x16>
 8007a8a:	e000      	b.n	8007a8e <prvUnlockQueue+0x62>
						break;
 8007a8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	22ff      	movs	r2, #255	; 0xff
 8007a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a96:	f001 f91d 	bl	8008cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a9a:	f001 f8eb 	bl	8008c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007aa6:	e011      	b.n	8007acc <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d012      	beq.n	8007ad6 <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3310      	adds	r3, #16
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fced 	bl	8008494 <xTaskRemoveFromEventList>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8007ac0:	f000 fdc2 	bl	8008648 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	dce9      	bgt.n	8007aa8 <prvUnlockQueue+0x7c>
 8007ad4:	e000      	b.n	8007ad8 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 8007ad6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	22ff      	movs	r2, #255	; 0xff
 8007adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ae0:	f001 f8f8 	bl	8008cd4 <vPortExitCritical>
}
 8007ae4:	bf00      	nop
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007af4:	f001 f8be 	bl	8008c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b00:	2301      	movs	r3, #1
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e001      	b.n	8007b0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b0a:	f001 f8e3 	bl	8008cd4 <vPortExitCritical>

	return xReturn;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b20:	f001 f8a8 	bl	8008c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d102      	bne.n	8007b36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b30:	2301      	movs	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e001      	b.n	8007b3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b3a:	f001 f8cb 	bl	8008cd4 <vPortExitCritical>

	return xReturn;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8007b50:	2200      	movs	r2, #0
 8007b52:	2104      	movs	r1, #4
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff fc7b 	bl	8007450 <xQueueGenericCreate>
 8007b5a:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
	}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007b70:	f001 f880 	bl	8008c74 <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	e00b      	b.n	8007b9a <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]
 8007b8e:	e004      	b.n	8007b9a <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdPASS;
 8007b96:	2301      	movs	r3, #1
 8007b98:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8007b9a:	f001 f89b 	bl	8008cd4 <vPortExitCritical>

		return xReturn;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
	}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 8007bb6:	f107 030c 	add.w	r3, r7, #12
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff fdc4 	bl	800774c <xQueueReceive>
		return xReturn;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
	}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b088      	sub	sp, #32
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bdc:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8007bde:	2300      	movs	r3, #0
 8007be0:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10a      	bne.n	8007bfe <prvNotifyQueueSetContainer+0x30>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	613b      	str	r3, [r7, #16]
}
 8007bfa:	bf00      	nop
 8007bfc:	e7fe      	b.n	8007bfc <prvNotifyQueueSetContainer+0x2e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d30a      	bcc.n	8007c20 <prvNotifyQueueSetContainer+0x52>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	60fb      	str	r3, [r7, #12]
}
 8007c1c:	bf00      	nop
 8007c1e:	e7fe      	b.n	8007c1e <prvNotifyQueueSetContainer+0x50>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d225      	bcs.n	8007c78 <prvNotifyQueueSetContainer+0xaa>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c32:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8007c34:	1d3b      	adds	r3, r7, #4
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	69b8      	ldr	r0, [r7, #24]
 8007c3c:	f7ff fe66 	bl	800790c <prvCopyDataToQueue>
 8007c40:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8007c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4a:	d10e      	bne.n	8007c6a <prvNotifyQueueSetContainer+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d011      	beq.n	8007c78 <prvNotifyQueueSetContainer+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	3324      	adds	r3, #36	; 0x24
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fc1b 	bl	8008494 <xTaskRemoveFromEventList>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d009      	beq.n	8007c78 <prvNotifyQueueSetContainer+0xaa>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8007c64:	2301      	movs	r3, #1
 8007c66:	61fb      	str	r3, [r7, #28]
 8007c68:	e006      	b.n	8007c78 <prvNotifyQueueSetContainer+0xaa>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	b25a      	sxtb	r2, r3
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c78:	69fb      	ldr	r3, [r7, #28]
	}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3720      	adds	r7, #32
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b08e      	sub	sp, #56	; 0x38
 8007c86:	af04      	add	r7, sp, #16
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	607a      	str	r2, [r7, #4]
 8007c8e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10a      	bne.n	8007cac <xTaskCreateStatic+0x2a>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	623b      	str	r3, [r7, #32]
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10a      	bne.n	8007cc8 <xTaskCreateStatic+0x46>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	61fb      	str	r3, [r7, #28]
}
 8007cc4:	bf00      	nop
 8007cc6:	e7fe      	b.n	8007cc6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cc8:	2354      	movs	r3, #84	; 0x54
 8007cca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	2b54      	cmp	r3, #84	; 0x54
 8007cd0:	d00a      	beq.n	8007ce8 <xTaskCreateStatic+0x66>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	61bb      	str	r3, [r7, #24]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ce8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d01e      	beq.n	8007d2e <xTaskCreateStatic+0xac>
 8007cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d01b      	beq.n	8007d2e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cfe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9303      	str	r3, [sp, #12]
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	9302      	str	r3, [sp, #8]
 8007d10:	f107 0314 	add.w	r3, r7, #20
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	68b9      	ldr	r1, [r7, #8]
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 f850 	bl	8007dc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d28:	f000 f8d4 	bl	8007ed4 <prvAddNewTaskToReadyList>
 8007d2c:	e001      	b.n	8007d32 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d32:	697b      	ldr	r3, [r7, #20]
	}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3728      	adds	r7, #40	; 0x28
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08c      	sub	sp, #48	; 0x30
 8007d40:	af04      	add	r7, sp, #16
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 f871 	bl	8008e38 <pvPortMalloc>
 8007d56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00e      	beq.n	8007d7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d5e:	2054      	movs	r0, #84	; 0x54
 8007d60:	f001 f86a 	bl	8008e38 <pvPortMalloc>
 8007d64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	631a      	str	r2, [r3, #48]	; 0x30
 8007d72:	e005      	b.n	8007d80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d74:	6978      	ldr	r0, [r7, #20]
 8007d76:	f001 f923 	bl	8008fc0 <vPortFree>
 8007d7a:	e001      	b.n	8007d80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d017      	beq.n	8007db6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d8e:	88fa      	ldrh	r2, [r7, #6]
 8007d90:	2300      	movs	r3, #0
 8007d92:	9303      	str	r3, [sp, #12]
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	9302      	str	r3, [sp, #8]
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	9301      	str	r3, [sp, #4]
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68b9      	ldr	r1, [r7, #8]
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 f80e 	bl	8007dc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007daa:	69f8      	ldr	r0, [r7, #28]
 8007dac:	f000 f892 	bl	8007ed4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007db0:	2301      	movs	r3, #1
 8007db2:	61bb      	str	r3, [r7, #24]
 8007db4:	e002      	b.n	8007dbc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007db6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007dbc:	69bb      	ldr	r3, [r7, #24]
	}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3720      	adds	r7, #32
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b088      	sub	sp, #32
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607a      	str	r2, [r7, #4]
 8007dd2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007dde:	3b01      	subs	r3, #1
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	f023 0307 	bic.w	r3, r3, #7
 8007dec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <prvInitialiseNewTask+0x48>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	617b      	str	r3, [r7, #20]
}
 8007e0a:	bf00      	nop
 8007e0c:	e7fe      	b.n	8007e0c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d01f      	beq.n	8007e54 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e14:	2300      	movs	r3, #0
 8007e16:	61fb      	str	r3, [r7, #28]
 8007e18:	e012      	b.n	8007e40 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	4413      	add	r3, r2
 8007e20:	7819      	ldrb	r1, [r3, #0]
 8007e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	4413      	add	r3, r2
 8007e28:	3334      	adds	r3, #52	; 0x34
 8007e2a:	460a      	mov	r2, r1
 8007e2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	4413      	add	r3, r2
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d006      	beq.n	8007e48 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	61fb      	str	r3, [r7, #28]
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	2b0f      	cmp	r3, #15
 8007e44:	d9e9      	bls.n	8007e1a <prvInitialiseNewTask+0x54>
 8007e46:	e000      	b.n	8007e4a <prvInitialiseNewTask+0x84>
			{
				break;
 8007e48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e52:	e003      	b.n	8007e5c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	2b06      	cmp	r3, #6
 8007e60:	d901      	bls.n	8007e66 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e62:	2306      	movs	r3, #6
 8007e64:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e6a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e70:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e74:	2200      	movs	r2, #0
 8007e76:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff f9ea 	bl	8007256 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	3318      	adds	r3, #24
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff f9e5 	bl	8007256 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	f1c3 0207 	rsb	r2, r3, #7
 8007e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ea0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	69b8      	ldr	r0, [r7, #24]
 8007eb6:	f000 fdb3 	bl	8008a20 <pxPortInitialiseStack>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ecc:	bf00      	nop
 8007ece:	3720      	adds	r7, #32
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007edc:	f000 feca 	bl	8008c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ee0:	4b2a      	ldr	r3, [pc, #168]	; (8007f8c <prvAddNewTaskToReadyList+0xb8>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	4a29      	ldr	r2, [pc, #164]	; (8007f8c <prvAddNewTaskToReadyList+0xb8>)
 8007ee8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007eea:	4b29      	ldr	r3, [pc, #164]	; (8007f90 <prvAddNewTaskToReadyList+0xbc>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d109      	bne.n	8007f06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ef2:	4a27      	ldr	r2, [pc, #156]	; (8007f90 <prvAddNewTaskToReadyList+0xbc>)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ef8:	4b24      	ldr	r3, [pc, #144]	; (8007f8c <prvAddNewTaskToReadyList+0xb8>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d110      	bne.n	8007f22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f00:	f000 fbc6 	bl	8008690 <prvInitialiseTaskLists>
 8007f04:	e00d      	b.n	8007f22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f06:	4b23      	ldr	r3, [pc, #140]	; (8007f94 <prvAddNewTaskToReadyList+0xc0>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d109      	bne.n	8007f22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f0e:	4b20      	ldr	r3, [pc, #128]	; (8007f90 <prvAddNewTaskToReadyList+0xbc>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d802      	bhi.n	8007f22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f1c:	4a1c      	ldr	r2, [pc, #112]	; (8007f90 <prvAddNewTaskToReadyList+0xbc>)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f22:	4b1d      	ldr	r3, [pc, #116]	; (8007f98 <prvAddNewTaskToReadyList+0xc4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3301      	adds	r3, #1
 8007f28:	4a1b      	ldr	r2, [pc, #108]	; (8007f98 <prvAddNewTaskToReadyList+0xc4>)
 8007f2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	2201      	movs	r2, #1
 8007f32:	409a      	lsls	r2, r3
 8007f34:	4b19      	ldr	r3, [pc, #100]	; (8007f9c <prvAddNewTaskToReadyList+0xc8>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	4a18      	ldr	r2, [pc, #96]	; (8007f9c <prvAddNewTaskToReadyList+0xc8>)
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4a15      	ldr	r2, [pc, #84]	; (8007fa0 <prvAddNewTaskToReadyList+0xcc>)
 8007f4c:	441a      	add	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	3304      	adds	r3, #4
 8007f52:	4619      	mov	r1, r3
 8007f54:	4610      	mov	r0, r2
 8007f56:	f7ff f98b 	bl	8007270 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f5a:	f000 febb 	bl	8008cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f5e:	4b0d      	ldr	r3, [pc, #52]	; (8007f94 <prvAddNewTaskToReadyList+0xc0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00e      	beq.n	8007f84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f66:	4b0a      	ldr	r3, [pc, #40]	; (8007f90 <prvAddNewTaskToReadyList+0xbc>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d207      	bcs.n	8007f84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f74:	4b0b      	ldr	r3, [pc, #44]	; (8007fa4 <prvAddNewTaskToReadyList+0xd0>)
 8007f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20000844 	.word	0x20000844
 8007f90:	20000744 	.word	0x20000744
 8007f94:	20000850 	.word	0x20000850
 8007f98:	20000860 	.word	0x20000860
 8007f9c:	2000084c 	.word	0x2000084c
 8007fa0:	20000748 	.word	0x20000748
 8007fa4:	e000ed04 	.word	0xe000ed04

08007fa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d017      	beq.n	8007fea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fba:	4b13      	ldr	r3, [pc, #76]	; (8008008 <vTaskDelay+0x60>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <vTaskDelay+0x30>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60bb      	str	r3, [r7, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007fd8:	f000 f87a 	bl	80080d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fdc:	2100      	movs	r1, #0
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fcb8 	bl	8008954 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fe4:	f000 f882 	bl	80080ec <xTaskResumeAll>
 8007fe8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d107      	bne.n	8008000 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <vTaskDelay+0x64>)
 8007ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008000:	bf00      	nop
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	2000086c 	.word	0x2000086c
 800800c:	e000ed04 	.word	0xe000ed04

08008010 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	; 0x28
 8008014:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800801a:	2300      	movs	r3, #0
 800801c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800801e:	463a      	mov	r2, r7
 8008020:	1d39      	adds	r1, r7, #4
 8008022:	f107 0308 	add.w	r3, r7, #8
 8008026:	4618      	mov	r0, r3
 8008028:	f7f9 fd56 	bl	8001ad8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	9202      	str	r2, [sp, #8]
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	2300      	movs	r3, #0
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	2300      	movs	r3, #0
 800803c:	460a      	mov	r2, r1
 800803e:	491e      	ldr	r1, [pc, #120]	; (80080b8 <vTaskStartScheduler+0xa8>)
 8008040:	481e      	ldr	r0, [pc, #120]	; (80080bc <vTaskStartScheduler+0xac>)
 8008042:	f7ff fe1e 	bl	8007c82 <xTaskCreateStatic>
 8008046:	4603      	mov	r3, r0
 8008048:	4a1d      	ldr	r2, [pc, #116]	; (80080c0 <vTaskStartScheduler+0xb0>)
 800804a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800804c:	4b1c      	ldr	r3, [pc, #112]	; (80080c0 <vTaskStartScheduler+0xb0>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008054:	2301      	movs	r3, #1
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	e001      	b.n	800805e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800805a:	2300      	movs	r3, #0
 800805c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d116      	bne.n	8008092 <vTaskStartScheduler+0x82>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	613b      	str	r3, [r7, #16]
}
 8008076:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008078:	4b12      	ldr	r3, [pc, #72]	; (80080c4 <vTaskStartScheduler+0xb4>)
 800807a:	f04f 32ff 	mov.w	r2, #4294967295
 800807e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008080:	4b11      	ldr	r3, [pc, #68]	; (80080c8 <vTaskStartScheduler+0xb8>)
 8008082:	2201      	movs	r2, #1
 8008084:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008086:	4b11      	ldr	r3, [pc, #68]	; (80080cc <vTaskStartScheduler+0xbc>)
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800808c:	f000 fd50 	bl	8008b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008090:	e00e      	b.n	80080b0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008098:	d10a      	bne.n	80080b0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	60fb      	str	r3, [r7, #12]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <vTaskStartScheduler+0x9e>
}
 80080b0:	bf00      	nop
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	08009e00 	.word	0x08009e00
 80080bc:	08008661 	.word	0x08008661
 80080c0:	20000868 	.word	0x20000868
 80080c4:	20000864 	.word	0x20000864
 80080c8:	20000850 	.word	0x20000850
 80080cc:	20000848 	.word	0x20000848

080080d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80080d4:	4b04      	ldr	r3, [pc, #16]	; (80080e8 <vTaskSuspendAll+0x18>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3301      	adds	r3, #1
 80080da:	4a03      	ldr	r2, [pc, #12]	; (80080e8 <vTaskSuspendAll+0x18>)
 80080dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80080de:	bf00      	nop
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	2000086c 	.word	0x2000086c

080080ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080fa:	4b41      	ldr	r3, [pc, #260]	; (8008200 <xTaskResumeAll+0x114>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <xTaskResumeAll+0x2c>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	603b      	str	r3, [r7, #0]
}
 8008114:	bf00      	nop
 8008116:	e7fe      	b.n	8008116 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008118:	f000 fdac 	bl	8008c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800811c:	4b38      	ldr	r3, [pc, #224]	; (8008200 <xTaskResumeAll+0x114>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3b01      	subs	r3, #1
 8008122:	4a37      	ldr	r2, [pc, #220]	; (8008200 <xTaskResumeAll+0x114>)
 8008124:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008126:	4b36      	ldr	r3, [pc, #216]	; (8008200 <xTaskResumeAll+0x114>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d161      	bne.n	80081f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800812e:	4b35      	ldr	r3, [pc, #212]	; (8008204 <xTaskResumeAll+0x118>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d05d      	beq.n	80081f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008136:	e02e      	b.n	8008196 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008138:	4b33      	ldr	r3, [pc, #204]	; (8008208 <xTaskResumeAll+0x11c>)
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3318      	adds	r3, #24
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff f8f0 	bl	800732a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3304      	adds	r3, #4
 800814e:	4618      	mov	r0, r3
 8008150:	f7ff f8eb 	bl	800732a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	2201      	movs	r2, #1
 800815a:	409a      	lsls	r2, r3
 800815c:	4b2b      	ldr	r3, [pc, #172]	; (800820c <xTaskResumeAll+0x120>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4313      	orrs	r3, r2
 8008162:	4a2a      	ldr	r2, [pc, #168]	; (800820c <xTaskResumeAll+0x120>)
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4a27      	ldr	r2, [pc, #156]	; (8008210 <xTaskResumeAll+0x124>)
 8008174:	441a      	add	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3304      	adds	r3, #4
 800817a:	4619      	mov	r1, r3
 800817c:	4610      	mov	r0, r2
 800817e:	f7ff f877 	bl	8007270 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008186:	4b23      	ldr	r3, [pc, #140]	; (8008214 <xTaskResumeAll+0x128>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	429a      	cmp	r2, r3
 800818e:	d302      	bcc.n	8008196 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008190:	4b21      	ldr	r3, [pc, #132]	; (8008218 <xTaskResumeAll+0x12c>)
 8008192:	2201      	movs	r2, #1
 8008194:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008196:	4b1c      	ldr	r3, [pc, #112]	; (8008208 <xTaskResumeAll+0x11c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1cc      	bne.n	8008138 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081a4:	f000 fb12 	bl	80087cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80081a8:	4b1c      	ldr	r3, [pc, #112]	; (800821c <xTaskResumeAll+0x130>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d010      	beq.n	80081d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081b4:	f000 f836 	bl	8008224 <xTaskIncrementTick>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80081be:	4b16      	ldr	r3, [pc, #88]	; (8008218 <xTaskResumeAll+0x12c>)
 80081c0:	2201      	movs	r2, #1
 80081c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1f1      	bne.n	80081b4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80081d0:	4b12      	ldr	r3, [pc, #72]	; (800821c <xTaskResumeAll+0x130>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081d6:	4b10      	ldr	r3, [pc, #64]	; (8008218 <xTaskResumeAll+0x12c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d009      	beq.n	80081f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081de:	2301      	movs	r3, #1
 80081e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081e2:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <xTaskResumeAll+0x134>)
 80081e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081f2:	f000 fd6f 	bl	8008cd4 <vPortExitCritical>

	return xAlreadyYielded;
 80081f6:	68bb      	ldr	r3, [r7, #8]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	2000086c 	.word	0x2000086c
 8008204:	20000844 	.word	0x20000844
 8008208:	20000804 	.word	0x20000804
 800820c:	2000084c 	.word	0x2000084c
 8008210:	20000748 	.word	0x20000748
 8008214:	20000744 	.word	0x20000744
 8008218:	20000858 	.word	0x20000858
 800821c:	20000854 	.word	0x20000854
 8008220:	e000ed04 	.word	0xe000ed04

08008224 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800822a:	2300      	movs	r3, #0
 800822c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800822e:	4b4e      	ldr	r3, [pc, #312]	; (8008368 <xTaskIncrementTick+0x144>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	f040 8088 	bne.w	8008348 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008238:	4b4c      	ldr	r3, [pc, #304]	; (800836c <xTaskIncrementTick+0x148>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3301      	adds	r3, #1
 800823e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008240:	4a4a      	ldr	r2, [pc, #296]	; (800836c <xTaskIncrementTick+0x148>)
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d120      	bne.n	800828e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800824c:	4b48      	ldr	r3, [pc, #288]	; (8008370 <xTaskIncrementTick+0x14c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00a      	beq.n	800826c <xTaskIncrementTick+0x48>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	603b      	str	r3, [r7, #0]
}
 8008268:	bf00      	nop
 800826a:	e7fe      	b.n	800826a <xTaskIncrementTick+0x46>
 800826c:	4b40      	ldr	r3, [pc, #256]	; (8008370 <xTaskIncrementTick+0x14c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	4b40      	ldr	r3, [pc, #256]	; (8008374 <xTaskIncrementTick+0x150>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a3e      	ldr	r2, [pc, #248]	; (8008370 <xTaskIncrementTick+0x14c>)
 8008278:	6013      	str	r3, [r2, #0]
 800827a:	4a3e      	ldr	r2, [pc, #248]	; (8008374 <xTaskIncrementTick+0x150>)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	4b3d      	ldr	r3, [pc, #244]	; (8008378 <xTaskIncrementTick+0x154>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3301      	adds	r3, #1
 8008286:	4a3c      	ldr	r2, [pc, #240]	; (8008378 <xTaskIncrementTick+0x154>)
 8008288:	6013      	str	r3, [r2, #0]
 800828a:	f000 fa9f 	bl	80087cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800828e:	4b3b      	ldr	r3, [pc, #236]	; (800837c <xTaskIncrementTick+0x158>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	429a      	cmp	r2, r3
 8008296:	d348      	bcc.n	800832a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008298:	4b35      	ldr	r3, [pc, #212]	; (8008370 <xTaskIncrementTick+0x14c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d104      	bne.n	80082ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082a2:	4b36      	ldr	r3, [pc, #216]	; (800837c <xTaskIncrementTick+0x158>)
 80082a4:	f04f 32ff 	mov.w	r2, #4294967295
 80082a8:	601a      	str	r2, [r3, #0]
					break;
 80082aa:	e03e      	b.n	800832a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ac:	4b30      	ldr	r3, [pc, #192]	; (8008370 <xTaskIncrementTick+0x14c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d203      	bcs.n	80082cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082c4:	4a2d      	ldr	r2, [pc, #180]	; (800837c <xTaskIncrementTick+0x158>)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082ca:	e02e      	b.n	800832a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	3304      	adds	r3, #4
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff f82a 	bl	800732a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	3318      	adds	r3, #24
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff f821 	bl	800732a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	2201      	movs	r2, #1
 80082ee:	409a      	lsls	r2, r3
 80082f0:	4b23      	ldr	r3, [pc, #140]	; (8008380 <xTaskIncrementTick+0x15c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	4a22      	ldr	r2, [pc, #136]	; (8008380 <xTaskIncrementTick+0x15c>)
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4a1f      	ldr	r2, [pc, #124]	; (8008384 <xTaskIncrementTick+0x160>)
 8008308:	441a      	add	r2, r3
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	3304      	adds	r3, #4
 800830e:	4619      	mov	r1, r3
 8008310:	4610      	mov	r0, r2
 8008312:	f7fe ffad 	bl	8007270 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831a:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <xTaskIncrementTick+0x164>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	429a      	cmp	r2, r3
 8008322:	d3b9      	bcc.n	8008298 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008324:	2301      	movs	r3, #1
 8008326:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008328:	e7b6      	b.n	8008298 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800832a:	4b17      	ldr	r3, [pc, #92]	; (8008388 <xTaskIncrementTick+0x164>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008330:	4914      	ldr	r1, [pc, #80]	; (8008384 <xTaskIncrementTick+0x160>)
 8008332:	4613      	mov	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	440b      	add	r3, r1
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d907      	bls.n	8008352 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8008342:	2301      	movs	r3, #1
 8008344:	617b      	str	r3, [r7, #20]
 8008346:	e004      	b.n	8008352 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008348:	4b10      	ldr	r3, [pc, #64]	; (800838c <xTaskIncrementTick+0x168>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3301      	adds	r3, #1
 800834e:	4a0f      	ldr	r2, [pc, #60]	; (800838c <xTaskIncrementTick+0x168>)
 8008350:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008352:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <xTaskIncrementTick+0x16c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800835a:	2301      	movs	r3, #1
 800835c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800835e:	697b      	ldr	r3, [r7, #20]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	2000086c 	.word	0x2000086c
 800836c:	20000848 	.word	0x20000848
 8008370:	200007fc 	.word	0x200007fc
 8008374:	20000800 	.word	0x20000800
 8008378:	2000085c 	.word	0x2000085c
 800837c:	20000864 	.word	0x20000864
 8008380:	2000084c 	.word	0x2000084c
 8008384:	20000748 	.word	0x20000748
 8008388:	20000744 	.word	0x20000744
 800838c:	20000854 	.word	0x20000854
 8008390:	20000858 	.word	0x20000858

08008394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800839a:	4b27      	ldr	r3, [pc, #156]	; (8008438 <vTaskSwitchContext+0xa4>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083a2:	4b26      	ldr	r3, [pc, #152]	; (800843c <vTaskSwitchContext+0xa8>)
 80083a4:	2201      	movs	r2, #1
 80083a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083a8:	e03f      	b.n	800842a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80083aa:	4b24      	ldr	r3, [pc, #144]	; (800843c <vTaskSwitchContext+0xa8>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083b0:	4b23      	ldr	r3, [pc, #140]	; (8008440 <vTaskSwitchContext+0xac>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	fab3 f383 	clz	r3, r3
 80083bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80083be:	7afb      	ldrb	r3, [r7, #11]
 80083c0:	f1c3 031f 	rsb	r3, r3, #31
 80083c4:	617b      	str	r3, [r7, #20]
 80083c6:	491f      	ldr	r1, [pc, #124]	; (8008444 <vTaskSwitchContext+0xb0>)
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	4613      	mov	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10a      	bne.n	80083f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	607b      	str	r3, [r7, #4]
}
 80083ec:	bf00      	nop
 80083ee:	e7fe      	b.n	80083ee <vTaskSwitchContext+0x5a>
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4a12      	ldr	r2, [pc, #72]	; (8008444 <vTaskSwitchContext+0xb0>)
 80083fc:	4413      	add	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	605a      	str	r2, [r3, #4]
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	3308      	adds	r3, #8
 8008412:	429a      	cmp	r2, r3
 8008414:	d104      	bne.n	8008420 <vTaskSwitchContext+0x8c>
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	605a      	str	r2, [r3, #4]
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	4a08      	ldr	r2, [pc, #32]	; (8008448 <vTaskSwitchContext+0xb4>)
 8008428:	6013      	str	r3, [r2, #0]
}
 800842a:	bf00      	nop
 800842c:	371c      	adds	r7, #28
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	2000086c 	.word	0x2000086c
 800843c:	20000858 	.word	0x20000858
 8008440:	2000084c 	.word	0x2000084c
 8008444:	20000748 	.word	0x20000748
 8008448:	20000744 	.word	0x20000744

0800844c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	60fb      	str	r3, [r7, #12]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008472:	4b07      	ldr	r3, [pc, #28]	; (8008490 <vTaskPlaceOnEventList+0x44>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3318      	adds	r3, #24
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7fe ff1c 	bl	80072b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008480:	2101      	movs	r1, #1
 8008482:	6838      	ldr	r0, [r7, #0]
 8008484:	f000 fa66 	bl	8008954 <prvAddCurrentTaskToDelayedList>
}
 8008488:	bf00      	nop
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20000744 	.word	0x20000744

08008494 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10a      	bne.n	80084c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	60fb      	str	r3, [r7, #12]
}
 80084bc:	bf00      	nop
 80084be:	e7fe      	b.n	80084be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	3318      	adds	r3, #24
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fe ff30 	bl	800732a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ca:	4b1d      	ldr	r3, [pc, #116]	; (8008540 <xTaskRemoveFromEventList+0xac>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d11c      	bne.n	800850c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	3304      	adds	r3, #4
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe ff27 	bl	800732a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e0:	2201      	movs	r2, #1
 80084e2:	409a      	lsls	r2, r3
 80084e4:	4b17      	ldr	r3, [pc, #92]	; (8008544 <xTaskRemoveFromEventList+0xb0>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	4a16      	ldr	r2, [pc, #88]	; (8008544 <xTaskRemoveFromEventList+0xb0>)
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f2:	4613      	mov	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4a13      	ldr	r2, [pc, #76]	; (8008548 <xTaskRemoveFromEventList+0xb4>)
 80084fc:	441a      	add	r2, r3
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	3304      	adds	r3, #4
 8008502:	4619      	mov	r1, r3
 8008504:	4610      	mov	r0, r2
 8008506:	f7fe feb3 	bl	8007270 <vListInsertEnd>
 800850a:	e005      	b.n	8008518 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	3318      	adds	r3, #24
 8008510:	4619      	mov	r1, r3
 8008512:	480e      	ldr	r0, [pc, #56]	; (800854c <xTaskRemoveFromEventList+0xb8>)
 8008514:	f7fe feac 	bl	8007270 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851c:	4b0c      	ldr	r3, [pc, #48]	; (8008550 <xTaskRemoveFromEventList+0xbc>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	429a      	cmp	r2, r3
 8008524:	d905      	bls.n	8008532 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008526:	2301      	movs	r3, #1
 8008528:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800852a:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <xTaskRemoveFromEventList+0xc0>)
 800852c:	2201      	movs	r2, #1
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	e001      	b.n	8008536 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008532:	2300      	movs	r3, #0
 8008534:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008536:	697b      	ldr	r3, [r7, #20]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	2000086c 	.word	0x2000086c
 8008544:	2000084c 	.word	0x2000084c
 8008548:	20000748 	.word	0x20000748
 800854c:	20000804 	.word	0x20000804
 8008550:	20000744 	.word	0x20000744
 8008554:	20000858 	.word	0x20000858

08008558 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008560:	4b06      	ldr	r3, [pc, #24]	; (800857c <vTaskInternalSetTimeOutState+0x24>)
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008568:	4b05      	ldr	r3, [pc, #20]	; (8008580 <vTaskInternalSetTimeOutState+0x28>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	605a      	str	r2, [r3, #4]
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	2000085c 	.word	0x2000085c
 8008580:	20000848 	.word	0x20000848

08008584 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	613b      	str	r3, [r7, #16]
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10a      	bne.n	80085c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	60fb      	str	r3, [r7, #12]
}
 80085c2:	bf00      	nop
 80085c4:	e7fe      	b.n	80085c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80085c6:	f000 fb55 	bl	8008c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085ca:	4b1d      	ldr	r3, [pc, #116]	; (8008640 <xTaskCheckForTimeOut+0xbc>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e2:	d102      	bne.n	80085ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085e4:	2300      	movs	r3, #0
 80085e6:	61fb      	str	r3, [r7, #28]
 80085e8:	e023      	b.n	8008632 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	4b15      	ldr	r3, [pc, #84]	; (8008644 <xTaskCheckForTimeOut+0xc0>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d007      	beq.n	8008606 <xTaskCheckForTimeOut+0x82>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d302      	bcc.n	8008606 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008600:	2301      	movs	r3, #1
 8008602:	61fb      	str	r3, [r7, #28]
 8008604:	e015      	b.n	8008632 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	429a      	cmp	r2, r3
 800860e:	d20b      	bcs.n	8008628 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	1ad2      	subs	r2, r2, r3
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff ff9b 	bl	8008558 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008622:	2300      	movs	r3, #0
 8008624:	61fb      	str	r3, [r7, #28]
 8008626:	e004      	b.n	8008632 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800862e:	2301      	movs	r3, #1
 8008630:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008632:	f000 fb4f 	bl	8008cd4 <vPortExitCritical>

	return xReturn;
 8008636:	69fb      	ldr	r3, [r7, #28]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3720      	adds	r7, #32
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	20000848 	.word	0x20000848
 8008644:	2000085c 	.word	0x2000085c

08008648 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008648:	b480      	push	{r7}
 800864a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800864c:	4b03      	ldr	r3, [pc, #12]	; (800865c <vTaskMissedYield+0x14>)
 800864e:	2201      	movs	r2, #1
 8008650:	601a      	str	r2, [r3, #0]
}
 8008652:	bf00      	nop
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	20000858 	.word	0x20000858

08008660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008668:	f000 f852 	bl	8008710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800866c:	4b06      	ldr	r3, [pc, #24]	; (8008688 <prvIdleTask+0x28>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d9f9      	bls.n	8008668 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008674:	4b05      	ldr	r3, [pc, #20]	; (800868c <prvIdleTask+0x2c>)
 8008676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008684:	e7f0      	b.n	8008668 <prvIdleTask+0x8>
 8008686:	bf00      	nop
 8008688:	20000748 	.word	0x20000748
 800868c:	e000ed04 	.word	0xe000ed04

08008690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008696:	2300      	movs	r3, #0
 8008698:	607b      	str	r3, [r7, #4]
 800869a:	e00c      	b.n	80086b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4a12      	ldr	r2, [pc, #72]	; (80086f0 <prvInitialiseTaskLists+0x60>)
 80086a8:	4413      	add	r3, r2
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fe fdb3 	bl	8007216 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3301      	adds	r3, #1
 80086b4:	607b      	str	r3, [r7, #4]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b06      	cmp	r3, #6
 80086ba:	d9ef      	bls.n	800869c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086bc:	480d      	ldr	r0, [pc, #52]	; (80086f4 <prvInitialiseTaskLists+0x64>)
 80086be:	f7fe fdaa 	bl	8007216 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086c2:	480d      	ldr	r0, [pc, #52]	; (80086f8 <prvInitialiseTaskLists+0x68>)
 80086c4:	f7fe fda7 	bl	8007216 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086c8:	480c      	ldr	r0, [pc, #48]	; (80086fc <prvInitialiseTaskLists+0x6c>)
 80086ca:	f7fe fda4 	bl	8007216 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086ce:	480c      	ldr	r0, [pc, #48]	; (8008700 <prvInitialiseTaskLists+0x70>)
 80086d0:	f7fe fda1 	bl	8007216 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086d4:	480b      	ldr	r0, [pc, #44]	; (8008704 <prvInitialiseTaskLists+0x74>)
 80086d6:	f7fe fd9e 	bl	8007216 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086da:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <prvInitialiseTaskLists+0x78>)
 80086dc:	4a05      	ldr	r2, [pc, #20]	; (80086f4 <prvInitialiseTaskLists+0x64>)
 80086de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086e0:	4b0a      	ldr	r3, [pc, #40]	; (800870c <prvInitialiseTaskLists+0x7c>)
 80086e2:	4a05      	ldr	r2, [pc, #20]	; (80086f8 <prvInitialiseTaskLists+0x68>)
 80086e4:	601a      	str	r2, [r3, #0]
}
 80086e6:	bf00      	nop
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20000748 	.word	0x20000748
 80086f4:	200007d4 	.word	0x200007d4
 80086f8:	200007e8 	.word	0x200007e8
 80086fc:	20000804 	.word	0x20000804
 8008700:	20000818 	.word	0x20000818
 8008704:	20000830 	.word	0x20000830
 8008708:	200007fc 	.word	0x200007fc
 800870c:	20000800 	.word	0x20000800

08008710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008716:	e019      	b.n	800874c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008718:	f000 faac 	bl	8008c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800871c:	4b10      	ldr	r3, [pc, #64]	; (8008760 <prvCheckTasksWaitingTermination+0x50>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3304      	adds	r3, #4
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe fdfe 	bl	800732a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800872e:	4b0d      	ldr	r3, [pc, #52]	; (8008764 <prvCheckTasksWaitingTermination+0x54>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3b01      	subs	r3, #1
 8008734:	4a0b      	ldr	r2, [pc, #44]	; (8008764 <prvCheckTasksWaitingTermination+0x54>)
 8008736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008738:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <prvCheckTasksWaitingTermination+0x58>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3b01      	subs	r3, #1
 800873e:	4a0a      	ldr	r2, [pc, #40]	; (8008768 <prvCheckTasksWaitingTermination+0x58>)
 8008740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008742:	f000 fac7 	bl	8008cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f810 	bl	800876c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800874c:	4b06      	ldr	r3, [pc, #24]	; (8008768 <prvCheckTasksWaitingTermination+0x58>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e1      	bne.n	8008718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	20000818 	.word	0x20000818
 8008764:	20000844 	.word	0x20000844
 8008768:	2000082c 	.word	0x2000082c

0800876c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800877a:	2b00      	cmp	r3, #0
 800877c:	d108      	bne.n	8008790 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fc1c 	bl	8008fc0 <vPortFree>
				vPortFree( pxTCB );
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fc19 	bl	8008fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800878e:	e018      	b.n	80087c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008796:	2b01      	cmp	r3, #1
 8008798:	d103      	bne.n	80087a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fc10 	bl	8008fc0 <vPortFree>
	}
 80087a0:	e00f      	b.n	80087c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d00a      	beq.n	80087c2 <prvDeleteTCB+0x56>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	60fb      	str	r3, [r7, #12]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <prvDeleteTCB+0x54>
	}
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087d2:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <prvResetNextTaskUnblockTime+0x38>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087dc:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <prvResetNextTaskUnblockTime+0x3c>)
 80087de:	f04f 32ff 	mov.w	r2, #4294967295
 80087e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087e4:	e008      	b.n	80087f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <prvResetNextTaskUnblockTime+0x38>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	4a04      	ldr	r2, [pc, #16]	; (8008808 <prvResetNextTaskUnblockTime+0x3c>)
 80087f6:	6013      	str	r3, [r2, #0]
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	200007fc 	.word	0x200007fc
 8008808:	20000864 	.word	0x20000864

0800880c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008812:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <xTaskGetSchedulerState+0x34>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d102      	bne.n	8008820 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800881a:	2301      	movs	r3, #1
 800881c:	607b      	str	r3, [r7, #4]
 800881e:	e008      	b.n	8008832 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008820:	4b08      	ldr	r3, [pc, #32]	; (8008844 <xTaskGetSchedulerState+0x38>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d102      	bne.n	800882e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008828:	2302      	movs	r3, #2
 800882a:	607b      	str	r3, [r7, #4]
 800882c:	e001      	b.n	8008832 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800882e:	2300      	movs	r3, #0
 8008830:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008832:	687b      	ldr	r3, [r7, #4]
	}
 8008834:	4618      	mov	r0, r3
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	20000850 	.word	0x20000850
 8008844:	2000086c 	.word	0x2000086c

08008848 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008854:	2300      	movs	r3, #0
 8008856:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d06e      	beq.n	800893c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800885e:	4b3a      	ldr	r3, [pc, #232]	; (8008948 <xTaskPriorityDisinherit+0x100>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	429a      	cmp	r2, r3
 8008866:	d00a      	beq.n	800887e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	60fb      	str	r3, [r7, #12]
}
 800887a:	bf00      	nop
 800887c:	e7fe      	b.n	800887c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10a      	bne.n	800889c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	60bb      	str	r3, [r7, #8]
}
 8008898:	bf00      	nop
 800889a:	e7fe      	b.n	800889a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088a0:	1e5a      	subs	r2, r3, #1
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d044      	beq.n	800893c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d140      	bne.n	800893c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	3304      	adds	r3, #4
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fd33 	bl	800732a <uxListRemove>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d115      	bne.n	80088f6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ce:	491f      	ldr	r1, [pc, #124]	; (800894c <xTaskPriorityDisinherit+0x104>)
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	440b      	add	r3, r1
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10a      	bne.n	80088f6 <xTaskPriorityDisinherit+0xae>
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e4:	2201      	movs	r2, #1
 80088e6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ea:	43da      	mvns	r2, r3
 80088ec:	4b18      	ldr	r3, [pc, #96]	; (8008950 <xTaskPriorityDisinherit+0x108>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4013      	ands	r3, r2
 80088f2:	4a17      	ldr	r2, [pc, #92]	; (8008950 <xTaskPriorityDisinherit+0x108>)
 80088f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	f1c3 0207 	rsb	r2, r3, #7
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890e:	2201      	movs	r2, #1
 8008910:	409a      	lsls	r2, r3
 8008912:	4b0f      	ldr	r3, [pc, #60]	; (8008950 <xTaskPriorityDisinherit+0x108>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4313      	orrs	r3, r2
 8008918:	4a0d      	ldr	r2, [pc, #52]	; (8008950 <xTaskPriorityDisinherit+0x108>)
 800891a:	6013      	str	r3, [r2, #0]
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008920:	4613      	mov	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4a08      	ldr	r2, [pc, #32]	; (800894c <xTaskPriorityDisinherit+0x104>)
 800892a:	441a      	add	r2, r3
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	3304      	adds	r3, #4
 8008930:	4619      	mov	r1, r3
 8008932:	4610      	mov	r0, r2
 8008934:	f7fe fc9c 	bl	8007270 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008938:	2301      	movs	r3, #1
 800893a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800893c:	697b      	ldr	r3, [r7, #20]
	}
 800893e:	4618      	mov	r0, r3
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20000744 	.word	0x20000744
 800894c:	20000748 	.word	0x20000748
 8008950:	2000084c 	.word	0x2000084c

08008954 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800895e:	4b29      	ldr	r3, [pc, #164]	; (8008a04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008964:	4b28      	ldr	r3, [pc, #160]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3304      	adds	r3, #4
 800896a:	4618      	mov	r0, r3
 800896c:	f7fe fcdd 	bl	800732a <uxListRemove>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10b      	bne.n	800898e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008976:	4b24      	ldr	r3, [pc, #144]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	2201      	movs	r2, #1
 800897e:	fa02 f303 	lsl.w	r3, r2, r3
 8008982:	43da      	mvns	r2, r3
 8008984:	4b21      	ldr	r3, [pc, #132]	; (8008a0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4013      	ands	r3, r2
 800898a:	4a20      	ldr	r2, [pc, #128]	; (8008a0c <prvAddCurrentTaskToDelayedList+0xb8>)
 800898c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d10a      	bne.n	80089ac <prvAddCurrentTaskToDelayedList+0x58>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d007      	beq.n	80089ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800899c:	4b1a      	ldr	r3, [pc, #104]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3304      	adds	r3, #4
 80089a2:	4619      	mov	r1, r3
 80089a4:	481a      	ldr	r0, [pc, #104]	; (8008a10 <prvAddCurrentTaskToDelayedList+0xbc>)
 80089a6:	f7fe fc63 	bl	8007270 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089aa:	e026      	b.n	80089fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4413      	add	r3, r2
 80089b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089b4:	4b14      	ldr	r3, [pc, #80]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d209      	bcs.n	80089d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089c4:	4b13      	ldr	r3, [pc, #76]	; (8008a14 <prvAddCurrentTaskToDelayedList+0xc0>)
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3304      	adds	r3, #4
 80089ce:	4619      	mov	r1, r3
 80089d0:	4610      	mov	r0, r2
 80089d2:	f7fe fc71 	bl	80072b8 <vListInsert>
}
 80089d6:	e010      	b.n	80089fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089d8:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <prvAddCurrentTaskToDelayedList+0xc4>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	4b0a      	ldr	r3, [pc, #40]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3304      	adds	r3, #4
 80089e2:	4619      	mov	r1, r3
 80089e4:	4610      	mov	r0, r2
 80089e6:	f7fe fc67 	bl	80072b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089ea:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <prvAddCurrentTaskToDelayedList+0xc8>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d202      	bcs.n	80089fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80089f4:	4a09      	ldr	r2, [pc, #36]	; (8008a1c <prvAddCurrentTaskToDelayedList+0xc8>)
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6013      	str	r3, [r2, #0]
}
 80089fa:	bf00      	nop
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20000848 	.word	0x20000848
 8008a08:	20000744 	.word	0x20000744
 8008a0c:	2000084c 	.word	0x2000084c
 8008a10:	20000830 	.word	0x20000830
 8008a14:	20000800 	.word	0x20000800
 8008a18:	200007fc 	.word	0x200007fc
 8008a1c:	20000864 	.word	0x20000864

08008a20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3b04      	subs	r3, #4
 8008a30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3b04      	subs	r3, #4
 8008a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f023 0201 	bic.w	r2, r3, #1
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3b04      	subs	r3, #4
 8008a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a50:	4a0c      	ldr	r2, [pc, #48]	; (8008a84 <pxPortInitialiseStack+0x64>)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	3b14      	subs	r3, #20
 8008a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3b04      	subs	r3, #4
 8008a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f06f 0202 	mvn.w	r2, #2
 8008a6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3b20      	subs	r3, #32
 8008a74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a76:	68fb      	ldr	r3, [r7, #12]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	08008a89 	.word	0x08008a89

08008a88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a92:	4b12      	ldr	r3, [pc, #72]	; (8008adc <prvTaskExitError+0x54>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	d00a      	beq.n	8008ab2 <prvTaskExitError+0x2a>
	__asm volatile
 8008a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	60fb      	str	r3, [r7, #12]
}
 8008aae:	bf00      	nop
 8008ab0:	e7fe      	b.n	8008ab0 <prvTaskExitError+0x28>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	60bb      	str	r3, [r7, #8]
}
 8008ac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ac6:	bf00      	nop
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0fc      	beq.n	8008ac8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ace:	bf00      	nop
 8008ad0:	bf00      	nop
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	20000024 	.word	0x20000024

08008ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ae0:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <pxCurrentTCBConst2>)
 8008ae2:	6819      	ldr	r1, [r3, #0]
 8008ae4:	6808      	ldr	r0, [r1, #0]
 8008ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aea:	f380 8809 	msr	PSP, r0
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f04f 0000 	mov.w	r0, #0
 8008af6:	f380 8811 	msr	BASEPRI, r0
 8008afa:	4770      	bx	lr
 8008afc:	f3af 8000 	nop.w

08008b00 <pxCurrentTCBConst2>:
 8008b00:	20000744 	.word	0x20000744
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b08:	4808      	ldr	r0, [pc, #32]	; (8008b2c <prvPortStartFirstTask+0x24>)
 8008b0a:	6800      	ldr	r0, [r0, #0]
 8008b0c:	6800      	ldr	r0, [r0, #0]
 8008b0e:	f380 8808 	msr	MSP, r0
 8008b12:	f04f 0000 	mov.w	r0, #0
 8008b16:	f380 8814 	msr	CONTROL, r0
 8008b1a:	b662      	cpsie	i
 8008b1c:	b661      	cpsie	f
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	df00      	svc	0
 8008b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b2a:	bf00      	nop
 8008b2c:	e000ed08 	.word	0xe000ed08

08008b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b36:	4b46      	ldr	r3, [pc, #280]	; (8008c50 <xPortStartScheduler+0x120>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a46      	ldr	r2, [pc, #280]	; (8008c54 <xPortStartScheduler+0x124>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d10a      	bne.n	8008b56 <xPortStartScheduler+0x26>
	__asm volatile
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	613b      	str	r3, [r7, #16]
}
 8008b52:	bf00      	nop
 8008b54:	e7fe      	b.n	8008b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b56:	4b3e      	ldr	r3, [pc, #248]	; (8008c50 <xPortStartScheduler+0x120>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a3f      	ldr	r2, [pc, #252]	; (8008c58 <xPortStartScheduler+0x128>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d10a      	bne.n	8008b76 <xPortStartScheduler+0x46>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	60fb      	str	r3, [r7, #12]
}
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b76:	4b39      	ldr	r3, [pc, #228]	; (8008c5c <xPortStartScheduler+0x12c>)
 8008b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	22ff      	movs	r2, #255	; 0xff
 8008b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b90:	78fb      	ldrb	r3, [r7, #3]
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	4b31      	ldr	r3, [pc, #196]	; (8008c60 <xPortStartScheduler+0x130>)
 8008b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b9e:	4b31      	ldr	r3, [pc, #196]	; (8008c64 <xPortStartScheduler+0x134>)
 8008ba0:	2207      	movs	r2, #7
 8008ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ba4:	e009      	b.n	8008bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008ba6:	4b2f      	ldr	r3, [pc, #188]	; (8008c64 <xPortStartScheduler+0x134>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	4a2d      	ldr	r2, [pc, #180]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bba:	78fb      	ldrb	r3, [r7, #3]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d0ef      	beq.n	8008ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bc6:	4b27      	ldr	r3, [pc, #156]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f1c3 0307 	rsb	r3, r3, #7
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	d00a      	beq.n	8008be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	60bb      	str	r3, [r7, #8]
}
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008be8:	4b1e      	ldr	r3, [pc, #120]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	021b      	lsls	r3, r3, #8
 8008bee:	4a1d      	ldr	r2, [pc, #116]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bf2:	4b1c      	ldr	r3, [pc, #112]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bfa:	4a1a      	ldr	r2, [pc, #104]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c06:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c12:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a14      	ldr	r2, [pc, #80]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c1e:	f000 f8dd 	bl	8008ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c22:	4b12      	ldr	r3, [pc, #72]	; (8008c6c <xPortStartScheduler+0x13c>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c28:	f000 f8fc 	bl	8008e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c2c:	4b10      	ldr	r3, [pc, #64]	; (8008c70 <xPortStartScheduler+0x140>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a0f      	ldr	r2, [pc, #60]	; (8008c70 <xPortStartScheduler+0x140>)
 8008c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c38:	f7ff ff66 	bl	8008b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c3c:	f7ff fbaa 	bl	8008394 <vTaskSwitchContext>
	prvTaskExitError();
 8008c40:	f7ff ff22 	bl	8008a88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	e000ed00 	.word	0xe000ed00
 8008c54:	410fc271 	.word	0x410fc271
 8008c58:	410fc270 	.word	0x410fc270
 8008c5c:	e000e400 	.word	0xe000e400
 8008c60:	20000870 	.word	0x20000870
 8008c64:	20000874 	.word	0x20000874
 8008c68:	e000ed20 	.word	0xe000ed20
 8008c6c:	20000024 	.word	0x20000024
 8008c70:	e000ef34 	.word	0xe000ef34

08008c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	607b      	str	r3, [r7, #4]
}
 8008c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c8e:	4b0f      	ldr	r3, [pc, #60]	; (8008ccc <vPortEnterCritical+0x58>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3301      	adds	r3, #1
 8008c94:	4a0d      	ldr	r2, [pc, #52]	; (8008ccc <vPortEnterCritical+0x58>)
 8008c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <vPortEnterCritical+0x58>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d10f      	bne.n	8008cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <vPortEnterCritical+0x5c>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	603b      	str	r3, [r7, #0]
}
 8008cbc:	bf00      	nop
 8008cbe:	e7fe      	b.n	8008cbe <vPortEnterCritical+0x4a>
	}
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	20000024 	.word	0x20000024
 8008cd0:	e000ed04 	.word	0xe000ed04

08008cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008cda:	4b12      	ldr	r3, [pc, #72]	; (8008d24 <vPortExitCritical+0x50>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <vPortExitCritical+0x24>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	607b      	str	r3, [r7, #4]
}
 8008cf4:	bf00      	nop
 8008cf6:	e7fe      	b.n	8008cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008cf8:	4b0a      	ldr	r3, [pc, #40]	; (8008d24 <vPortExitCritical+0x50>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	4a09      	ldr	r2, [pc, #36]	; (8008d24 <vPortExitCritical+0x50>)
 8008d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d02:	4b08      	ldr	r3, [pc, #32]	; (8008d24 <vPortExitCritical+0x50>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d105      	bne.n	8008d16 <vPortExitCritical+0x42>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d16:	bf00      	nop
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	20000024 	.word	0x20000024
	...

08008d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d30:	f3ef 8009 	mrs	r0, PSP
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <pxCurrentTCBConst>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	f01e 0f10 	tst.w	lr, #16
 8008d40:	bf08      	it	eq
 8008d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d54:	f380 8811 	msr	BASEPRI, r0
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f7ff fb18 	bl	8008394 <vTaskSwitchContext>
 8008d64:	f04f 0000 	mov.w	r0, #0
 8008d68:	f380 8811 	msr	BASEPRI, r0
 8008d6c:	bc09      	pop	{r0, r3}
 8008d6e:	6819      	ldr	r1, [r3, #0]
 8008d70:	6808      	ldr	r0, [r1, #0]
 8008d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d76:	f01e 0f10 	tst.w	lr, #16
 8008d7a:	bf08      	it	eq
 8008d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d80:	f380 8809 	msr	PSP, r0
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	f3af 8000 	nop.w

08008d90 <pxCurrentTCBConst>:
 8008d90:	20000744 	.word	0x20000744
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop

08008d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	607b      	str	r3, [r7, #4]
}
 8008db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008db2:	f7ff fa37 	bl	8008224 <xTaskIncrementTick>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dbc:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <SysTick_Handler+0x40>)
 8008dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	f383 8811 	msr	BASEPRI, r3
}
 8008dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008de6:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <vPortSetupTimerInterrupt+0x38>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dec:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <vPortSetupTimerInterrupt+0x3c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a0a      	ldr	r2, [pc, #40]	; (8008e1c <vPortSetupTimerInterrupt+0x40>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	099b      	lsrs	r3, r3, #6
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <vPortSetupTimerInterrupt+0x44>)
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dfe:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008e00:	2207      	movs	r2, #7
 8008e02:	601a      	str	r2, [r3, #0]
}
 8008e04:	bf00      	nop
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	e000e010 	.word	0xe000e010
 8008e14:	e000e018 	.word	0xe000e018
 8008e18:	20000018 	.word	0x20000018
 8008e1c:	10624dd3 	.word	0x10624dd3
 8008e20:	e000e014 	.word	0xe000e014

08008e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e34 <vPortEnableVFP+0x10>
 8008e28:	6801      	ldr	r1, [r0, #0]
 8008e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e2e:	6001      	str	r1, [r0, #0]
 8008e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e32:	bf00      	nop
 8008e34:	e000ed88 	.word	0xe000ed88

08008e38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b08a      	sub	sp, #40	; 0x28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e40:	2300      	movs	r3, #0
 8008e42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e44:	f7ff f944 	bl	80080d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e48:	4b58      	ldr	r3, [pc, #352]	; (8008fac <pvPortMalloc+0x174>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e50:	f000 f910 	bl	8009074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e54:	4b56      	ldr	r3, [pc, #344]	; (8008fb0 <pvPortMalloc+0x178>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f040 808e 	bne.w	8008f7e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01d      	beq.n	8008ea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e68:	2208      	movs	r2, #8
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d014      	beq.n	8008ea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f023 0307 	bic.w	r3, r3, #7
 8008e80:	3308      	adds	r3, #8
 8008e82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00a      	beq.n	8008ea4 <pvPortMalloc+0x6c>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	617b      	str	r3, [r7, #20]
}
 8008ea0:	bf00      	nop
 8008ea2:	e7fe      	b.n	8008ea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d069      	beq.n	8008f7e <pvPortMalloc+0x146>
 8008eaa:	4b42      	ldr	r3, [pc, #264]	; (8008fb4 <pvPortMalloc+0x17c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d864      	bhi.n	8008f7e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008eb4:	4b40      	ldr	r3, [pc, #256]	; (8008fb8 <pvPortMalloc+0x180>)
 8008eb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008eb8:	4b3f      	ldr	r3, [pc, #252]	; (8008fb8 <pvPortMalloc+0x180>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ebe:	e004      	b.n	8008eca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d903      	bls.n	8008edc <pvPortMalloc+0xa4>
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1f1      	bne.n	8008ec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008edc:	4b33      	ldr	r3, [pc, #204]	; (8008fac <pvPortMalloc+0x174>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d04b      	beq.n	8008f7e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2208      	movs	r2, #8
 8008eec:	4413      	add	r3, r2
 8008eee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	6a3b      	ldr	r3, [r7, #32]
 8008ef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	2308      	movs	r3, #8
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d91f      	bls.n	8008f48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	f003 0307 	and.w	r3, r3, #7
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <pvPortMalloc+0xf8>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	613b      	str	r3, [r7, #16]
}
 8008f2c:	bf00      	nop
 8008f2e:	e7fe      	b.n	8008f2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	1ad2      	subs	r2, r2, r3
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f42:	69b8      	ldr	r0, [r7, #24]
 8008f44:	f000 f8f8 	bl	8009138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f48:	4b1a      	ldr	r3, [pc, #104]	; (8008fb4 <pvPortMalloc+0x17c>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	4a18      	ldr	r2, [pc, #96]	; (8008fb4 <pvPortMalloc+0x17c>)
 8008f54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f56:	4b17      	ldr	r3, [pc, #92]	; (8008fb4 <pvPortMalloc+0x17c>)
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	4b18      	ldr	r3, [pc, #96]	; (8008fbc <pvPortMalloc+0x184>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d203      	bcs.n	8008f6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f62:	4b14      	ldr	r3, [pc, #80]	; (8008fb4 <pvPortMalloc+0x17c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a15      	ldr	r2, [pc, #84]	; (8008fbc <pvPortMalloc+0x184>)
 8008f68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	4b10      	ldr	r3, [pc, #64]	; (8008fb0 <pvPortMalloc+0x178>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	431a      	orrs	r2, r3
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f7e:	f7ff f8b5 	bl	80080ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	f003 0307 	and.w	r3, r3, #7
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00a      	beq.n	8008fa2 <pvPortMalloc+0x16a>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	60fb      	str	r3, [r7, #12]
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <pvPortMalloc+0x168>
	return pvReturn;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3728      	adds	r7, #40	; 0x28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20004480 	.word	0x20004480
 8008fb0:	2000448c 	.word	0x2000448c
 8008fb4:	20004484 	.word	0x20004484
 8008fb8:	20004478 	.word	0x20004478
 8008fbc:	20004488 	.word	0x20004488

08008fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d048      	beq.n	8009064 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fd2:	2308      	movs	r3, #8
 8008fd4:	425b      	negs	r3, r3
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	4413      	add	r3, r2
 8008fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	4b21      	ldr	r3, [pc, #132]	; (800906c <vPortFree+0xac>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <vPortFree+0x44>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	60fb      	str	r3, [r7, #12]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <vPortFree+0x62>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	60bb      	str	r3, [r7, #8]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	4b11      	ldr	r3, [pc, #68]	; (800906c <vPortFree+0xac>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4013      	ands	r3, r2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d019      	beq.n	8009064 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d115      	bne.n	8009064 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	4b0b      	ldr	r3, [pc, #44]	; (800906c <vPortFree+0xac>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	43db      	mvns	r3, r3
 8009042:	401a      	ands	r2, r3
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009048:	f7ff f842 	bl	80080d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	4b07      	ldr	r3, [pc, #28]	; (8009070 <vPortFree+0xb0>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4413      	add	r3, r2
 8009056:	4a06      	ldr	r2, [pc, #24]	; (8009070 <vPortFree+0xb0>)
 8009058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800905a:	6938      	ldr	r0, [r7, #16]
 800905c:	f000 f86c 	bl	8009138 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009060:	f7ff f844 	bl	80080ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009064:	bf00      	nop
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	2000448c 	.word	0x2000448c
 8009070:	20004484 	.word	0x20004484

08009074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800907a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800907e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009080:	4b27      	ldr	r3, [pc, #156]	; (8009120 <prvHeapInit+0xac>)
 8009082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00c      	beq.n	80090a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3307      	adds	r3, #7
 8009092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f023 0307 	bic.w	r3, r3, #7
 800909a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	4a1f      	ldr	r2, [pc, #124]	; (8009120 <prvHeapInit+0xac>)
 80090a4:	4413      	add	r3, r2
 80090a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090ac:	4a1d      	ldr	r2, [pc, #116]	; (8009124 <prvHeapInit+0xb0>)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090b2:	4b1c      	ldr	r3, [pc, #112]	; (8009124 <prvHeapInit+0xb0>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	4413      	add	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090c0:	2208      	movs	r2, #8
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	1a9b      	subs	r3, r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 0307 	bic.w	r3, r3, #7
 80090ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	4a15      	ldr	r2, [pc, #84]	; (8009128 <prvHeapInit+0xb4>)
 80090d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090d6:	4b14      	ldr	r3, [pc, #80]	; (8009128 <prvHeapInit+0xb4>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2200      	movs	r2, #0
 80090dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090de:	4b12      	ldr	r3, [pc, #72]	; (8009128 <prvHeapInit+0xb4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	1ad2      	subs	r2, r2, r3
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090f4:	4b0c      	ldr	r3, [pc, #48]	; (8009128 <prvHeapInit+0xb4>)
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	4a0a      	ldr	r2, [pc, #40]	; (800912c <prvHeapInit+0xb8>)
 8009102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	4a09      	ldr	r2, [pc, #36]	; (8009130 <prvHeapInit+0xbc>)
 800910a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800910c:	4b09      	ldr	r3, [pc, #36]	; (8009134 <prvHeapInit+0xc0>)
 800910e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009112:	601a      	str	r2, [r3, #0]
}
 8009114:	bf00      	nop
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	20000878 	.word	0x20000878
 8009124:	20004478 	.word	0x20004478
 8009128:	20004480 	.word	0x20004480
 800912c:	20004488 	.word	0x20004488
 8009130:	20004484 	.word	0x20004484
 8009134:	2000448c 	.word	0x2000448c

08009138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009140:	4b28      	ldr	r3, [pc, #160]	; (80091e4 <prvInsertBlockIntoFreeList+0xac>)
 8009142:	60fb      	str	r3, [r7, #12]
 8009144:	e002      	b.n	800914c <prvInsertBlockIntoFreeList+0x14>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	429a      	cmp	r2, r3
 8009154:	d8f7      	bhi.n	8009146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	4413      	add	r3, r2
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	429a      	cmp	r2, r3
 8009166:	d108      	bne.n	800917a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	441a      	add	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	441a      	add	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d118      	bne.n	80091c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	4b15      	ldr	r3, [pc, #84]	; (80091e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	d00d      	beq.n	80091b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	441a      	add	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	e008      	b.n	80091c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091b6:	4b0c      	ldr	r3, [pc, #48]	; (80091e8 <prvInsertBlockIntoFreeList+0xb0>)
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	e003      	b.n	80091c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d002      	beq.n	80091d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091d6:	bf00      	nop
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20004478 	.word	0x20004478
 80091e8:	20004480 	.word	0x20004480

080091ec <__errno>:
 80091ec:	4b01      	ldr	r3, [pc, #4]	; (80091f4 <__errno+0x8>)
 80091ee:	6818      	ldr	r0, [r3, #0]
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20000028 	.word	0x20000028

080091f8 <__libc_init_array>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	4d0d      	ldr	r5, [pc, #52]	; (8009230 <__libc_init_array+0x38>)
 80091fc:	4c0d      	ldr	r4, [pc, #52]	; (8009234 <__libc_init_array+0x3c>)
 80091fe:	1b64      	subs	r4, r4, r5
 8009200:	10a4      	asrs	r4, r4, #2
 8009202:	2600      	movs	r6, #0
 8009204:	42a6      	cmp	r6, r4
 8009206:	d109      	bne.n	800921c <__libc_init_array+0x24>
 8009208:	4d0b      	ldr	r5, [pc, #44]	; (8009238 <__libc_init_array+0x40>)
 800920a:	4c0c      	ldr	r4, [pc, #48]	; (800923c <__libc_init_array+0x44>)
 800920c:	f000 fc8e 	bl	8009b2c <_init>
 8009210:	1b64      	subs	r4, r4, r5
 8009212:	10a4      	asrs	r4, r4, #2
 8009214:	2600      	movs	r6, #0
 8009216:	42a6      	cmp	r6, r4
 8009218:	d105      	bne.n	8009226 <__libc_init_array+0x2e>
 800921a:	bd70      	pop	{r4, r5, r6, pc}
 800921c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009220:	4798      	blx	r3
 8009222:	3601      	adds	r6, #1
 8009224:	e7ee      	b.n	8009204 <__libc_init_array+0xc>
 8009226:	f855 3b04 	ldr.w	r3, [r5], #4
 800922a:	4798      	blx	r3
 800922c:	3601      	adds	r6, #1
 800922e:	e7f2      	b.n	8009216 <__libc_init_array+0x1e>
 8009230:	08009e84 	.word	0x08009e84
 8009234:	08009e84 	.word	0x08009e84
 8009238:	08009e84 	.word	0x08009e84
 800923c:	08009e88 	.word	0x08009e88

08009240 <memcpy>:
 8009240:	440a      	add	r2, r1
 8009242:	4291      	cmp	r1, r2
 8009244:	f100 33ff 	add.w	r3, r0, #4294967295
 8009248:	d100      	bne.n	800924c <memcpy+0xc>
 800924a:	4770      	bx	lr
 800924c:	b510      	push	{r4, lr}
 800924e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009252:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009256:	4291      	cmp	r1, r2
 8009258:	d1f9      	bne.n	800924e <memcpy+0xe>
 800925a:	bd10      	pop	{r4, pc}

0800925c <memset>:
 800925c:	4402      	add	r2, r0
 800925e:	4603      	mov	r3, r0
 8009260:	4293      	cmp	r3, r2
 8009262:	d100      	bne.n	8009266 <memset+0xa>
 8009264:	4770      	bx	lr
 8009266:	f803 1b01 	strb.w	r1, [r3], #1
 800926a:	e7f9      	b.n	8009260 <memset+0x4>

0800926c <siprintf>:
 800926c:	b40e      	push	{r1, r2, r3}
 800926e:	b500      	push	{lr}
 8009270:	b09c      	sub	sp, #112	; 0x70
 8009272:	ab1d      	add	r3, sp, #116	; 0x74
 8009274:	9002      	str	r0, [sp, #8]
 8009276:	9006      	str	r0, [sp, #24]
 8009278:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800927c:	4809      	ldr	r0, [pc, #36]	; (80092a4 <siprintf+0x38>)
 800927e:	9107      	str	r1, [sp, #28]
 8009280:	9104      	str	r1, [sp, #16]
 8009282:	4909      	ldr	r1, [pc, #36]	; (80092a8 <siprintf+0x3c>)
 8009284:	f853 2b04 	ldr.w	r2, [r3], #4
 8009288:	9105      	str	r1, [sp, #20]
 800928a:	6800      	ldr	r0, [r0, #0]
 800928c:	9301      	str	r3, [sp, #4]
 800928e:	a902      	add	r1, sp, #8
 8009290:	f000 f868 	bl	8009364 <_svfiprintf_r>
 8009294:	9b02      	ldr	r3, [sp, #8]
 8009296:	2200      	movs	r2, #0
 8009298:	701a      	strb	r2, [r3, #0]
 800929a:	b01c      	add	sp, #112	; 0x70
 800929c:	f85d eb04 	ldr.w	lr, [sp], #4
 80092a0:	b003      	add	sp, #12
 80092a2:	4770      	bx	lr
 80092a4:	20000028 	.word	0x20000028
 80092a8:	ffff0208 	.word	0xffff0208

080092ac <__ssputs_r>:
 80092ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b0:	688e      	ldr	r6, [r1, #8]
 80092b2:	429e      	cmp	r6, r3
 80092b4:	4682      	mov	sl, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	4690      	mov	r8, r2
 80092ba:	461f      	mov	r7, r3
 80092bc:	d838      	bhi.n	8009330 <__ssputs_r+0x84>
 80092be:	898a      	ldrh	r2, [r1, #12]
 80092c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092c4:	d032      	beq.n	800932c <__ssputs_r+0x80>
 80092c6:	6825      	ldr	r5, [r4, #0]
 80092c8:	6909      	ldr	r1, [r1, #16]
 80092ca:	eba5 0901 	sub.w	r9, r5, r1
 80092ce:	6965      	ldr	r5, [r4, #20]
 80092d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092d8:	3301      	adds	r3, #1
 80092da:	444b      	add	r3, r9
 80092dc:	106d      	asrs	r5, r5, #1
 80092de:	429d      	cmp	r5, r3
 80092e0:	bf38      	it	cc
 80092e2:	461d      	movcc	r5, r3
 80092e4:	0553      	lsls	r3, r2, #21
 80092e6:	d531      	bpl.n	800934c <__ssputs_r+0xa0>
 80092e8:	4629      	mov	r1, r5
 80092ea:	f000 fb55 	bl	8009998 <_malloc_r>
 80092ee:	4606      	mov	r6, r0
 80092f0:	b950      	cbnz	r0, 8009308 <__ssputs_r+0x5c>
 80092f2:	230c      	movs	r3, #12
 80092f4:	f8ca 3000 	str.w	r3, [sl]
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092fe:	81a3      	strh	r3, [r4, #12]
 8009300:	f04f 30ff 	mov.w	r0, #4294967295
 8009304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009308:	6921      	ldr	r1, [r4, #16]
 800930a:	464a      	mov	r2, r9
 800930c:	f7ff ff98 	bl	8009240 <memcpy>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	6126      	str	r6, [r4, #16]
 800931e:	6165      	str	r5, [r4, #20]
 8009320:	444e      	add	r6, r9
 8009322:	eba5 0509 	sub.w	r5, r5, r9
 8009326:	6026      	str	r6, [r4, #0]
 8009328:	60a5      	str	r5, [r4, #8]
 800932a:	463e      	mov	r6, r7
 800932c:	42be      	cmp	r6, r7
 800932e:	d900      	bls.n	8009332 <__ssputs_r+0x86>
 8009330:	463e      	mov	r6, r7
 8009332:	6820      	ldr	r0, [r4, #0]
 8009334:	4632      	mov	r2, r6
 8009336:	4641      	mov	r1, r8
 8009338:	f000 faa8 	bl	800988c <memmove>
 800933c:	68a3      	ldr	r3, [r4, #8]
 800933e:	1b9b      	subs	r3, r3, r6
 8009340:	60a3      	str	r3, [r4, #8]
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	4433      	add	r3, r6
 8009346:	6023      	str	r3, [r4, #0]
 8009348:	2000      	movs	r0, #0
 800934a:	e7db      	b.n	8009304 <__ssputs_r+0x58>
 800934c:	462a      	mov	r2, r5
 800934e:	f000 fb97 	bl	8009a80 <_realloc_r>
 8009352:	4606      	mov	r6, r0
 8009354:	2800      	cmp	r0, #0
 8009356:	d1e1      	bne.n	800931c <__ssputs_r+0x70>
 8009358:	6921      	ldr	r1, [r4, #16]
 800935a:	4650      	mov	r0, sl
 800935c:	f000 fab0 	bl	80098c0 <_free_r>
 8009360:	e7c7      	b.n	80092f2 <__ssputs_r+0x46>
	...

08009364 <_svfiprintf_r>:
 8009364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009368:	4698      	mov	r8, r3
 800936a:	898b      	ldrh	r3, [r1, #12]
 800936c:	061b      	lsls	r3, r3, #24
 800936e:	b09d      	sub	sp, #116	; 0x74
 8009370:	4607      	mov	r7, r0
 8009372:	460d      	mov	r5, r1
 8009374:	4614      	mov	r4, r2
 8009376:	d50e      	bpl.n	8009396 <_svfiprintf_r+0x32>
 8009378:	690b      	ldr	r3, [r1, #16]
 800937a:	b963      	cbnz	r3, 8009396 <_svfiprintf_r+0x32>
 800937c:	2140      	movs	r1, #64	; 0x40
 800937e:	f000 fb0b 	bl	8009998 <_malloc_r>
 8009382:	6028      	str	r0, [r5, #0]
 8009384:	6128      	str	r0, [r5, #16]
 8009386:	b920      	cbnz	r0, 8009392 <_svfiprintf_r+0x2e>
 8009388:	230c      	movs	r3, #12
 800938a:	603b      	str	r3, [r7, #0]
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	e0d1      	b.n	8009536 <_svfiprintf_r+0x1d2>
 8009392:	2340      	movs	r3, #64	; 0x40
 8009394:	616b      	str	r3, [r5, #20]
 8009396:	2300      	movs	r3, #0
 8009398:	9309      	str	r3, [sp, #36]	; 0x24
 800939a:	2320      	movs	r3, #32
 800939c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80093a4:	2330      	movs	r3, #48	; 0x30
 80093a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009550 <_svfiprintf_r+0x1ec>
 80093aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093ae:	f04f 0901 	mov.w	r9, #1
 80093b2:	4623      	mov	r3, r4
 80093b4:	469a      	mov	sl, r3
 80093b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ba:	b10a      	cbz	r2, 80093c0 <_svfiprintf_r+0x5c>
 80093bc:	2a25      	cmp	r2, #37	; 0x25
 80093be:	d1f9      	bne.n	80093b4 <_svfiprintf_r+0x50>
 80093c0:	ebba 0b04 	subs.w	fp, sl, r4
 80093c4:	d00b      	beq.n	80093de <_svfiprintf_r+0x7a>
 80093c6:	465b      	mov	r3, fp
 80093c8:	4622      	mov	r2, r4
 80093ca:	4629      	mov	r1, r5
 80093cc:	4638      	mov	r0, r7
 80093ce:	f7ff ff6d 	bl	80092ac <__ssputs_r>
 80093d2:	3001      	adds	r0, #1
 80093d4:	f000 80aa 	beq.w	800952c <_svfiprintf_r+0x1c8>
 80093d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093da:	445a      	add	r2, fp
 80093dc:	9209      	str	r2, [sp, #36]	; 0x24
 80093de:	f89a 3000 	ldrb.w	r3, [sl]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 80a2 	beq.w	800952c <_svfiprintf_r+0x1c8>
 80093e8:	2300      	movs	r3, #0
 80093ea:	f04f 32ff 	mov.w	r2, #4294967295
 80093ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093f2:	f10a 0a01 	add.w	sl, sl, #1
 80093f6:	9304      	str	r3, [sp, #16]
 80093f8:	9307      	str	r3, [sp, #28]
 80093fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009400:	4654      	mov	r4, sl
 8009402:	2205      	movs	r2, #5
 8009404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009408:	4851      	ldr	r0, [pc, #324]	; (8009550 <_svfiprintf_r+0x1ec>)
 800940a:	f7f6 fef1 	bl	80001f0 <memchr>
 800940e:	9a04      	ldr	r2, [sp, #16]
 8009410:	b9d8      	cbnz	r0, 800944a <_svfiprintf_r+0xe6>
 8009412:	06d0      	lsls	r0, r2, #27
 8009414:	bf44      	itt	mi
 8009416:	2320      	movmi	r3, #32
 8009418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800941c:	0711      	lsls	r1, r2, #28
 800941e:	bf44      	itt	mi
 8009420:	232b      	movmi	r3, #43	; 0x2b
 8009422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009426:	f89a 3000 	ldrb.w	r3, [sl]
 800942a:	2b2a      	cmp	r3, #42	; 0x2a
 800942c:	d015      	beq.n	800945a <_svfiprintf_r+0xf6>
 800942e:	9a07      	ldr	r2, [sp, #28]
 8009430:	4654      	mov	r4, sl
 8009432:	2000      	movs	r0, #0
 8009434:	f04f 0c0a 	mov.w	ip, #10
 8009438:	4621      	mov	r1, r4
 800943a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800943e:	3b30      	subs	r3, #48	; 0x30
 8009440:	2b09      	cmp	r3, #9
 8009442:	d94e      	bls.n	80094e2 <_svfiprintf_r+0x17e>
 8009444:	b1b0      	cbz	r0, 8009474 <_svfiprintf_r+0x110>
 8009446:	9207      	str	r2, [sp, #28]
 8009448:	e014      	b.n	8009474 <_svfiprintf_r+0x110>
 800944a:	eba0 0308 	sub.w	r3, r0, r8
 800944e:	fa09 f303 	lsl.w	r3, r9, r3
 8009452:	4313      	orrs	r3, r2
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	46a2      	mov	sl, r4
 8009458:	e7d2      	b.n	8009400 <_svfiprintf_r+0x9c>
 800945a:	9b03      	ldr	r3, [sp, #12]
 800945c:	1d19      	adds	r1, r3, #4
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	9103      	str	r1, [sp, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	bfbb      	ittet	lt
 8009466:	425b      	neglt	r3, r3
 8009468:	f042 0202 	orrlt.w	r2, r2, #2
 800946c:	9307      	strge	r3, [sp, #28]
 800946e:	9307      	strlt	r3, [sp, #28]
 8009470:	bfb8      	it	lt
 8009472:	9204      	strlt	r2, [sp, #16]
 8009474:	7823      	ldrb	r3, [r4, #0]
 8009476:	2b2e      	cmp	r3, #46	; 0x2e
 8009478:	d10c      	bne.n	8009494 <_svfiprintf_r+0x130>
 800947a:	7863      	ldrb	r3, [r4, #1]
 800947c:	2b2a      	cmp	r3, #42	; 0x2a
 800947e:	d135      	bne.n	80094ec <_svfiprintf_r+0x188>
 8009480:	9b03      	ldr	r3, [sp, #12]
 8009482:	1d1a      	adds	r2, r3, #4
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	9203      	str	r2, [sp, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	bfb8      	it	lt
 800948c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009490:	3402      	adds	r4, #2
 8009492:	9305      	str	r3, [sp, #20]
 8009494:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009560 <_svfiprintf_r+0x1fc>
 8009498:	7821      	ldrb	r1, [r4, #0]
 800949a:	2203      	movs	r2, #3
 800949c:	4650      	mov	r0, sl
 800949e:	f7f6 fea7 	bl	80001f0 <memchr>
 80094a2:	b140      	cbz	r0, 80094b6 <_svfiprintf_r+0x152>
 80094a4:	2340      	movs	r3, #64	; 0x40
 80094a6:	eba0 000a 	sub.w	r0, r0, sl
 80094aa:	fa03 f000 	lsl.w	r0, r3, r0
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	4303      	orrs	r3, r0
 80094b2:	3401      	adds	r4, #1
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ba:	4826      	ldr	r0, [pc, #152]	; (8009554 <_svfiprintf_r+0x1f0>)
 80094bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094c0:	2206      	movs	r2, #6
 80094c2:	f7f6 fe95 	bl	80001f0 <memchr>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d038      	beq.n	800953c <_svfiprintf_r+0x1d8>
 80094ca:	4b23      	ldr	r3, [pc, #140]	; (8009558 <_svfiprintf_r+0x1f4>)
 80094cc:	bb1b      	cbnz	r3, 8009516 <_svfiprintf_r+0x1b2>
 80094ce:	9b03      	ldr	r3, [sp, #12]
 80094d0:	3307      	adds	r3, #7
 80094d2:	f023 0307 	bic.w	r3, r3, #7
 80094d6:	3308      	adds	r3, #8
 80094d8:	9303      	str	r3, [sp, #12]
 80094da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094dc:	4433      	add	r3, r6
 80094de:	9309      	str	r3, [sp, #36]	; 0x24
 80094e0:	e767      	b.n	80093b2 <_svfiprintf_r+0x4e>
 80094e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80094e6:	460c      	mov	r4, r1
 80094e8:	2001      	movs	r0, #1
 80094ea:	e7a5      	b.n	8009438 <_svfiprintf_r+0xd4>
 80094ec:	2300      	movs	r3, #0
 80094ee:	3401      	adds	r4, #1
 80094f0:	9305      	str	r3, [sp, #20]
 80094f2:	4619      	mov	r1, r3
 80094f4:	f04f 0c0a 	mov.w	ip, #10
 80094f8:	4620      	mov	r0, r4
 80094fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094fe:	3a30      	subs	r2, #48	; 0x30
 8009500:	2a09      	cmp	r2, #9
 8009502:	d903      	bls.n	800950c <_svfiprintf_r+0x1a8>
 8009504:	2b00      	cmp	r3, #0
 8009506:	d0c5      	beq.n	8009494 <_svfiprintf_r+0x130>
 8009508:	9105      	str	r1, [sp, #20]
 800950a:	e7c3      	b.n	8009494 <_svfiprintf_r+0x130>
 800950c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009510:	4604      	mov	r4, r0
 8009512:	2301      	movs	r3, #1
 8009514:	e7f0      	b.n	80094f8 <_svfiprintf_r+0x194>
 8009516:	ab03      	add	r3, sp, #12
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	462a      	mov	r2, r5
 800951c:	4b0f      	ldr	r3, [pc, #60]	; (800955c <_svfiprintf_r+0x1f8>)
 800951e:	a904      	add	r1, sp, #16
 8009520:	4638      	mov	r0, r7
 8009522:	f3af 8000 	nop.w
 8009526:	1c42      	adds	r2, r0, #1
 8009528:	4606      	mov	r6, r0
 800952a:	d1d6      	bne.n	80094da <_svfiprintf_r+0x176>
 800952c:	89ab      	ldrh	r3, [r5, #12]
 800952e:	065b      	lsls	r3, r3, #25
 8009530:	f53f af2c 	bmi.w	800938c <_svfiprintf_r+0x28>
 8009534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009536:	b01d      	add	sp, #116	; 0x74
 8009538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953c:	ab03      	add	r3, sp, #12
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	462a      	mov	r2, r5
 8009542:	4b06      	ldr	r3, [pc, #24]	; (800955c <_svfiprintf_r+0x1f8>)
 8009544:	a904      	add	r1, sp, #16
 8009546:	4638      	mov	r0, r7
 8009548:	f000 f87a 	bl	8009640 <_printf_i>
 800954c:	e7eb      	b.n	8009526 <_svfiprintf_r+0x1c2>
 800954e:	bf00      	nop
 8009550:	08009e48 	.word	0x08009e48
 8009554:	08009e52 	.word	0x08009e52
 8009558:	00000000 	.word	0x00000000
 800955c:	080092ad 	.word	0x080092ad
 8009560:	08009e4e 	.word	0x08009e4e

08009564 <_printf_common>:
 8009564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	4616      	mov	r6, r2
 800956a:	4699      	mov	r9, r3
 800956c:	688a      	ldr	r2, [r1, #8]
 800956e:	690b      	ldr	r3, [r1, #16]
 8009570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009574:	4293      	cmp	r3, r2
 8009576:	bfb8      	it	lt
 8009578:	4613      	movlt	r3, r2
 800957a:	6033      	str	r3, [r6, #0]
 800957c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009580:	4607      	mov	r7, r0
 8009582:	460c      	mov	r4, r1
 8009584:	b10a      	cbz	r2, 800958a <_printf_common+0x26>
 8009586:	3301      	adds	r3, #1
 8009588:	6033      	str	r3, [r6, #0]
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	0699      	lsls	r1, r3, #26
 800958e:	bf42      	ittt	mi
 8009590:	6833      	ldrmi	r3, [r6, #0]
 8009592:	3302      	addmi	r3, #2
 8009594:	6033      	strmi	r3, [r6, #0]
 8009596:	6825      	ldr	r5, [r4, #0]
 8009598:	f015 0506 	ands.w	r5, r5, #6
 800959c:	d106      	bne.n	80095ac <_printf_common+0x48>
 800959e:	f104 0a19 	add.w	sl, r4, #25
 80095a2:	68e3      	ldr	r3, [r4, #12]
 80095a4:	6832      	ldr	r2, [r6, #0]
 80095a6:	1a9b      	subs	r3, r3, r2
 80095a8:	42ab      	cmp	r3, r5
 80095aa:	dc26      	bgt.n	80095fa <_printf_common+0x96>
 80095ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095b0:	1e13      	subs	r3, r2, #0
 80095b2:	6822      	ldr	r2, [r4, #0]
 80095b4:	bf18      	it	ne
 80095b6:	2301      	movne	r3, #1
 80095b8:	0692      	lsls	r2, r2, #26
 80095ba:	d42b      	bmi.n	8009614 <_printf_common+0xb0>
 80095bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095c0:	4649      	mov	r1, r9
 80095c2:	4638      	mov	r0, r7
 80095c4:	47c0      	blx	r8
 80095c6:	3001      	adds	r0, #1
 80095c8:	d01e      	beq.n	8009608 <_printf_common+0xa4>
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	68e5      	ldr	r5, [r4, #12]
 80095ce:	6832      	ldr	r2, [r6, #0]
 80095d0:	f003 0306 	and.w	r3, r3, #6
 80095d4:	2b04      	cmp	r3, #4
 80095d6:	bf08      	it	eq
 80095d8:	1aad      	subeq	r5, r5, r2
 80095da:	68a3      	ldr	r3, [r4, #8]
 80095dc:	6922      	ldr	r2, [r4, #16]
 80095de:	bf0c      	ite	eq
 80095e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095e4:	2500      	movne	r5, #0
 80095e6:	4293      	cmp	r3, r2
 80095e8:	bfc4      	itt	gt
 80095ea:	1a9b      	subgt	r3, r3, r2
 80095ec:	18ed      	addgt	r5, r5, r3
 80095ee:	2600      	movs	r6, #0
 80095f0:	341a      	adds	r4, #26
 80095f2:	42b5      	cmp	r5, r6
 80095f4:	d11a      	bne.n	800962c <_printf_common+0xc8>
 80095f6:	2000      	movs	r0, #0
 80095f8:	e008      	b.n	800960c <_printf_common+0xa8>
 80095fa:	2301      	movs	r3, #1
 80095fc:	4652      	mov	r2, sl
 80095fe:	4649      	mov	r1, r9
 8009600:	4638      	mov	r0, r7
 8009602:	47c0      	blx	r8
 8009604:	3001      	adds	r0, #1
 8009606:	d103      	bne.n	8009610 <_printf_common+0xac>
 8009608:	f04f 30ff 	mov.w	r0, #4294967295
 800960c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009610:	3501      	adds	r5, #1
 8009612:	e7c6      	b.n	80095a2 <_printf_common+0x3e>
 8009614:	18e1      	adds	r1, r4, r3
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	2030      	movs	r0, #48	; 0x30
 800961a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800961e:	4422      	add	r2, r4
 8009620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009628:	3302      	adds	r3, #2
 800962a:	e7c7      	b.n	80095bc <_printf_common+0x58>
 800962c:	2301      	movs	r3, #1
 800962e:	4622      	mov	r2, r4
 8009630:	4649      	mov	r1, r9
 8009632:	4638      	mov	r0, r7
 8009634:	47c0      	blx	r8
 8009636:	3001      	adds	r0, #1
 8009638:	d0e6      	beq.n	8009608 <_printf_common+0xa4>
 800963a:	3601      	adds	r6, #1
 800963c:	e7d9      	b.n	80095f2 <_printf_common+0x8e>
	...

08009640 <_printf_i>:
 8009640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009644:	7e0f      	ldrb	r7, [r1, #24]
 8009646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009648:	2f78      	cmp	r7, #120	; 0x78
 800964a:	4691      	mov	r9, r2
 800964c:	4680      	mov	r8, r0
 800964e:	460c      	mov	r4, r1
 8009650:	469a      	mov	sl, r3
 8009652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009656:	d807      	bhi.n	8009668 <_printf_i+0x28>
 8009658:	2f62      	cmp	r7, #98	; 0x62
 800965a:	d80a      	bhi.n	8009672 <_printf_i+0x32>
 800965c:	2f00      	cmp	r7, #0
 800965e:	f000 80d8 	beq.w	8009812 <_printf_i+0x1d2>
 8009662:	2f58      	cmp	r7, #88	; 0x58
 8009664:	f000 80a3 	beq.w	80097ae <_printf_i+0x16e>
 8009668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800966c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009670:	e03a      	b.n	80096e8 <_printf_i+0xa8>
 8009672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009676:	2b15      	cmp	r3, #21
 8009678:	d8f6      	bhi.n	8009668 <_printf_i+0x28>
 800967a:	a101      	add	r1, pc, #4	; (adr r1, 8009680 <_printf_i+0x40>)
 800967c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009680:	080096d9 	.word	0x080096d9
 8009684:	080096ed 	.word	0x080096ed
 8009688:	08009669 	.word	0x08009669
 800968c:	08009669 	.word	0x08009669
 8009690:	08009669 	.word	0x08009669
 8009694:	08009669 	.word	0x08009669
 8009698:	080096ed 	.word	0x080096ed
 800969c:	08009669 	.word	0x08009669
 80096a0:	08009669 	.word	0x08009669
 80096a4:	08009669 	.word	0x08009669
 80096a8:	08009669 	.word	0x08009669
 80096ac:	080097f9 	.word	0x080097f9
 80096b0:	0800971d 	.word	0x0800971d
 80096b4:	080097db 	.word	0x080097db
 80096b8:	08009669 	.word	0x08009669
 80096bc:	08009669 	.word	0x08009669
 80096c0:	0800981b 	.word	0x0800981b
 80096c4:	08009669 	.word	0x08009669
 80096c8:	0800971d 	.word	0x0800971d
 80096cc:	08009669 	.word	0x08009669
 80096d0:	08009669 	.word	0x08009669
 80096d4:	080097e3 	.word	0x080097e3
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	1d1a      	adds	r2, r3, #4
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	602a      	str	r2, [r5, #0]
 80096e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096e8:	2301      	movs	r3, #1
 80096ea:	e0a3      	b.n	8009834 <_printf_i+0x1f4>
 80096ec:	6820      	ldr	r0, [r4, #0]
 80096ee:	6829      	ldr	r1, [r5, #0]
 80096f0:	0606      	lsls	r6, r0, #24
 80096f2:	f101 0304 	add.w	r3, r1, #4
 80096f6:	d50a      	bpl.n	800970e <_printf_i+0xce>
 80096f8:	680e      	ldr	r6, [r1, #0]
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	2e00      	cmp	r6, #0
 80096fe:	da03      	bge.n	8009708 <_printf_i+0xc8>
 8009700:	232d      	movs	r3, #45	; 0x2d
 8009702:	4276      	negs	r6, r6
 8009704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009708:	485e      	ldr	r0, [pc, #376]	; (8009884 <_printf_i+0x244>)
 800970a:	230a      	movs	r3, #10
 800970c:	e019      	b.n	8009742 <_printf_i+0x102>
 800970e:	680e      	ldr	r6, [r1, #0]
 8009710:	602b      	str	r3, [r5, #0]
 8009712:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009716:	bf18      	it	ne
 8009718:	b236      	sxthne	r6, r6
 800971a:	e7ef      	b.n	80096fc <_printf_i+0xbc>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	6820      	ldr	r0, [r4, #0]
 8009720:	1d19      	adds	r1, r3, #4
 8009722:	6029      	str	r1, [r5, #0]
 8009724:	0601      	lsls	r1, r0, #24
 8009726:	d501      	bpl.n	800972c <_printf_i+0xec>
 8009728:	681e      	ldr	r6, [r3, #0]
 800972a:	e002      	b.n	8009732 <_printf_i+0xf2>
 800972c:	0646      	lsls	r6, r0, #25
 800972e:	d5fb      	bpl.n	8009728 <_printf_i+0xe8>
 8009730:	881e      	ldrh	r6, [r3, #0]
 8009732:	4854      	ldr	r0, [pc, #336]	; (8009884 <_printf_i+0x244>)
 8009734:	2f6f      	cmp	r7, #111	; 0x6f
 8009736:	bf0c      	ite	eq
 8009738:	2308      	moveq	r3, #8
 800973a:	230a      	movne	r3, #10
 800973c:	2100      	movs	r1, #0
 800973e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009742:	6865      	ldr	r5, [r4, #4]
 8009744:	60a5      	str	r5, [r4, #8]
 8009746:	2d00      	cmp	r5, #0
 8009748:	bfa2      	ittt	ge
 800974a:	6821      	ldrge	r1, [r4, #0]
 800974c:	f021 0104 	bicge.w	r1, r1, #4
 8009750:	6021      	strge	r1, [r4, #0]
 8009752:	b90e      	cbnz	r6, 8009758 <_printf_i+0x118>
 8009754:	2d00      	cmp	r5, #0
 8009756:	d04d      	beq.n	80097f4 <_printf_i+0x1b4>
 8009758:	4615      	mov	r5, r2
 800975a:	fbb6 f1f3 	udiv	r1, r6, r3
 800975e:	fb03 6711 	mls	r7, r3, r1, r6
 8009762:	5dc7      	ldrb	r7, [r0, r7]
 8009764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009768:	4637      	mov	r7, r6
 800976a:	42bb      	cmp	r3, r7
 800976c:	460e      	mov	r6, r1
 800976e:	d9f4      	bls.n	800975a <_printf_i+0x11a>
 8009770:	2b08      	cmp	r3, #8
 8009772:	d10b      	bne.n	800978c <_printf_i+0x14c>
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	07de      	lsls	r6, r3, #31
 8009778:	d508      	bpl.n	800978c <_printf_i+0x14c>
 800977a:	6923      	ldr	r3, [r4, #16]
 800977c:	6861      	ldr	r1, [r4, #4]
 800977e:	4299      	cmp	r1, r3
 8009780:	bfde      	ittt	le
 8009782:	2330      	movle	r3, #48	; 0x30
 8009784:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009788:	f105 35ff 	addle.w	r5, r5, #4294967295
 800978c:	1b52      	subs	r2, r2, r5
 800978e:	6122      	str	r2, [r4, #16]
 8009790:	f8cd a000 	str.w	sl, [sp]
 8009794:	464b      	mov	r3, r9
 8009796:	aa03      	add	r2, sp, #12
 8009798:	4621      	mov	r1, r4
 800979a:	4640      	mov	r0, r8
 800979c:	f7ff fee2 	bl	8009564 <_printf_common>
 80097a0:	3001      	adds	r0, #1
 80097a2:	d14c      	bne.n	800983e <_printf_i+0x1fe>
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295
 80097a8:	b004      	add	sp, #16
 80097aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ae:	4835      	ldr	r0, [pc, #212]	; (8009884 <_printf_i+0x244>)
 80097b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097b4:	6829      	ldr	r1, [r5, #0]
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80097bc:	6029      	str	r1, [r5, #0]
 80097be:	061d      	lsls	r5, r3, #24
 80097c0:	d514      	bpl.n	80097ec <_printf_i+0x1ac>
 80097c2:	07df      	lsls	r7, r3, #31
 80097c4:	bf44      	itt	mi
 80097c6:	f043 0320 	orrmi.w	r3, r3, #32
 80097ca:	6023      	strmi	r3, [r4, #0]
 80097cc:	b91e      	cbnz	r6, 80097d6 <_printf_i+0x196>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	f023 0320 	bic.w	r3, r3, #32
 80097d4:	6023      	str	r3, [r4, #0]
 80097d6:	2310      	movs	r3, #16
 80097d8:	e7b0      	b.n	800973c <_printf_i+0xfc>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	f043 0320 	orr.w	r3, r3, #32
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	2378      	movs	r3, #120	; 0x78
 80097e4:	4828      	ldr	r0, [pc, #160]	; (8009888 <_printf_i+0x248>)
 80097e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097ea:	e7e3      	b.n	80097b4 <_printf_i+0x174>
 80097ec:	0659      	lsls	r1, r3, #25
 80097ee:	bf48      	it	mi
 80097f0:	b2b6      	uxthmi	r6, r6
 80097f2:	e7e6      	b.n	80097c2 <_printf_i+0x182>
 80097f4:	4615      	mov	r5, r2
 80097f6:	e7bb      	b.n	8009770 <_printf_i+0x130>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	6826      	ldr	r6, [r4, #0]
 80097fc:	6961      	ldr	r1, [r4, #20]
 80097fe:	1d18      	adds	r0, r3, #4
 8009800:	6028      	str	r0, [r5, #0]
 8009802:	0635      	lsls	r5, r6, #24
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	d501      	bpl.n	800980c <_printf_i+0x1cc>
 8009808:	6019      	str	r1, [r3, #0]
 800980a:	e002      	b.n	8009812 <_printf_i+0x1d2>
 800980c:	0670      	lsls	r0, r6, #25
 800980e:	d5fb      	bpl.n	8009808 <_printf_i+0x1c8>
 8009810:	8019      	strh	r1, [r3, #0]
 8009812:	2300      	movs	r3, #0
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	4615      	mov	r5, r2
 8009818:	e7ba      	b.n	8009790 <_printf_i+0x150>
 800981a:	682b      	ldr	r3, [r5, #0]
 800981c:	1d1a      	adds	r2, r3, #4
 800981e:	602a      	str	r2, [r5, #0]
 8009820:	681d      	ldr	r5, [r3, #0]
 8009822:	6862      	ldr	r2, [r4, #4]
 8009824:	2100      	movs	r1, #0
 8009826:	4628      	mov	r0, r5
 8009828:	f7f6 fce2 	bl	80001f0 <memchr>
 800982c:	b108      	cbz	r0, 8009832 <_printf_i+0x1f2>
 800982e:	1b40      	subs	r0, r0, r5
 8009830:	6060      	str	r0, [r4, #4]
 8009832:	6863      	ldr	r3, [r4, #4]
 8009834:	6123      	str	r3, [r4, #16]
 8009836:	2300      	movs	r3, #0
 8009838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800983c:	e7a8      	b.n	8009790 <_printf_i+0x150>
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	462a      	mov	r2, r5
 8009842:	4649      	mov	r1, r9
 8009844:	4640      	mov	r0, r8
 8009846:	47d0      	blx	sl
 8009848:	3001      	adds	r0, #1
 800984a:	d0ab      	beq.n	80097a4 <_printf_i+0x164>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	079b      	lsls	r3, r3, #30
 8009850:	d413      	bmi.n	800987a <_printf_i+0x23a>
 8009852:	68e0      	ldr	r0, [r4, #12]
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	4298      	cmp	r0, r3
 8009858:	bfb8      	it	lt
 800985a:	4618      	movlt	r0, r3
 800985c:	e7a4      	b.n	80097a8 <_printf_i+0x168>
 800985e:	2301      	movs	r3, #1
 8009860:	4632      	mov	r2, r6
 8009862:	4649      	mov	r1, r9
 8009864:	4640      	mov	r0, r8
 8009866:	47d0      	blx	sl
 8009868:	3001      	adds	r0, #1
 800986a:	d09b      	beq.n	80097a4 <_printf_i+0x164>
 800986c:	3501      	adds	r5, #1
 800986e:	68e3      	ldr	r3, [r4, #12]
 8009870:	9903      	ldr	r1, [sp, #12]
 8009872:	1a5b      	subs	r3, r3, r1
 8009874:	42ab      	cmp	r3, r5
 8009876:	dcf2      	bgt.n	800985e <_printf_i+0x21e>
 8009878:	e7eb      	b.n	8009852 <_printf_i+0x212>
 800987a:	2500      	movs	r5, #0
 800987c:	f104 0619 	add.w	r6, r4, #25
 8009880:	e7f5      	b.n	800986e <_printf_i+0x22e>
 8009882:	bf00      	nop
 8009884:	08009e59 	.word	0x08009e59
 8009888:	08009e6a 	.word	0x08009e6a

0800988c <memmove>:
 800988c:	4288      	cmp	r0, r1
 800988e:	b510      	push	{r4, lr}
 8009890:	eb01 0402 	add.w	r4, r1, r2
 8009894:	d902      	bls.n	800989c <memmove+0x10>
 8009896:	4284      	cmp	r4, r0
 8009898:	4623      	mov	r3, r4
 800989a:	d807      	bhi.n	80098ac <memmove+0x20>
 800989c:	1e43      	subs	r3, r0, #1
 800989e:	42a1      	cmp	r1, r4
 80098a0:	d008      	beq.n	80098b4 <memmove+0x28>
 80098a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098aa:	e7f8      	b.n	800989e <memmove+0x12>
 80098ac:	4402      	add	r2, r0
 80098ae:	4601      	mov	r1, r0
 80098b0:	428a      	cmp	r2, r1
 80098b2:	d100      	bne.n	80098b6 <memmove+0x2a>
 80098b4:	bd10      	pop	{r4, pc}
 80098b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098be:	e7f7      	b.n	80098b0 <memmove+0x24>

080098c0 <_free_r>:
 80098c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098c2:	2900      	cmp	r1, #0
 80098c4:	d044      	beq.n	8009950 <_free_r+0x90>
 80098c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ca:	9001      	str	r0, [sp, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f1a1 0404 	sub.w	r4, r1, #4
 80098d2:	bfb8      	it	lt
 80098d4:	18e4      	addlt	r4, r4, r3
 80098d6:	f000 f913 	bl	8009b00 <__malloc_lock>
 80098da:	4a1e      	ldr	r2, [pc, #120]	; (8009954 <_free_r+0x94>)
 80098dc:	9801      	ldr	r0, [sp, #4]
 80098de:	6813      	ldr	r3, [r2, #0]
 80098e0:	b933      	cbnz	r3, 80098f0 <_free_r+0x30>
 80098e2:	6063      	str	r3, [r4, #4]
 80098e4:	6014      	str	r4, [r2, #0]
 80098e6:	b003      	add	sp, #12
 80098e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098ec:	f000 b90e 	b.w	8009b0c <__malloc_unlock>
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d908      	bls.n	8009906 <_free_r+0x46>
 80098f4:	6825      	ldr	r5, [r4, #0]
 80098f6:	1961      	adds	r1, r4, r5
 80098f8:	428b      	cmp	r3, r1
 80098fa:	bf01      	itttt	eq
 80098fc:	6819      	ldreq	r1, [r3, #0]
 80098fe:	685b      	ldreq	r3, [r3, #4]
 8009900:	1949      	addeq	r1, r1, r5
 8009902:	6021      	streq	r1, [r4, #0]
 8009904:	e7ed      	b.n	80098e2 <_free_r+0x22>
 8009906:	461a      	mov	r2, r3
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	b10b      	cbz	r3, 8009910 <_free_r+0x50>
 800990c:	42a3      	cmp	r3, r4
 800990e:	d9fa      	bls.n	8009906 <_free_r+0x46>
 8009910:	6811      	ldr	r1, [r2, #0]
 8009912:	1855      	adds	r5, r2, r1
 8009914:	42a5      	cmp	r5, r4
 8009916:	d10b      	bne.n	8009930 <_free_r+0x70>
 8009918:	6824      	ldr	r4, [r4, #0]
 800991a:	4421      	add	r1, r4
 800991c:	1854      	adds	r4, r2, r1
 800991e:	42a3      	cmp	r3, r4
 8009920:	6011      	str	r1, [r2, #0]
 8009922:	d1e0      	bne.n	80098e6 <_free_r+0x26>
 8009924:	681c      	ldr	r4, [r3, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	6053      	str	r3, [r2, #4]
 800992a:	4421      	add	r1, r4
 800992c:	6011      	str	r1, [r2, #0]
 800992e:	e7da      	b.n	80098e6 <_free_r+0x26>
 8009930:	d902      	bls.n	8009938 <_free_r+0x78>
 8009932:	230c      	movs	r3, #12
 8009934:	6003      	str	r3, [r0, #0]
 8009936:	e7d6      	b.n	80098e6 <_free_r+0x26>
 8009938:	6825      	ldr	r5, [r4, #0]
 800993a:	1961      	adds	r1, r4, r5
 800993c:	428b      	cmp	r3, r1
 800993e:	bf04      	itt	eq
 8009940:	6819      	ldreq	r1, [r3, #0]
 8009942:	685b      	ldreq	r3, [r3, #4]
 8009944:	6063      	str	r3, [r4, #4]
 8009946:	bf04      	itt	eq
 8009948:	1949      	addeq	r1, r1, r5
 800994a:	6021      	streq	r1, [r4, #0]
 800994c:	6054      	str	r4, [r2, #4]
 800994e:	e7ca      	b.n	80098e6 <_free_r+0x26>
 8009950:	b003      	add	sp, #12
 8009952:	bd30      	pop	{r4, r5, pc}
 8009954:	20004490 	.word	0x20004490

08009958 <sbrk_aligned>:
 8009958:	b570      	push	{r4, r5, r6, lr}
 800995a:	4e0e      	ldr	r6, [pc, #56]	; (8009994 <sbrk_aligned+0x3c>)
 800995c:	460c      	mov	r4, r1
 800995e:	6831      	ldr	r1, [r6, #0]
 8009960:	4605      	mov	r5, r0
 8009962:	b911      	cbnz	r1, 800996a <sbrk_aligned+0x12>
 8009964:	f000 f8bc 	bl	8009ae0 <_sbrk_r>
 8009968:	6030      	str	r0, [r6, #0]
 800996a:	4621      	mov	r1, r4
 800996c:	4628      	mov	r0, r5
 800996e:	f000 f8b7 	bl	8009ae0 <_sbrk_r>
 8009972:	1c43      	adds	r3, r0, #1
 8009974:	d00a      	beq.n	800998c <sbrk_aligned+0x34>
 8009976:	1cc4      	adds	r4, r0, #3
 8009978:	f024 0403 	bic.w	r4, r4, #3
 800997c:	42a0      	cmp	r0, r4
 800997e:	d007      	beq.n	8009990 <sbrk_aligned+0x38>
 8009980:	1a21      	subs	r1, r4, r0
 8009982:	4628      	mov	r0, r5
 8009984:	f000 f8ac 	bl	8009ae0 <_sbrk_r>
 8009988:	3001      	adds	r0, #1
 800998a:	d101      	bne.n	8009990 <sbrk_aligned+0x38>
 800998c:	f04f 34ff 	mov.w	r4, #4294967295
 8009990:	4620      	mov	r0, r4
 8009992:	bd70      	pop	{r4, r5, r6, pc}
 8009994:	20004494 	.word	0x20004494

08009998 <_malloc_r>:
 8009998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800999c:	1ccd      	adds	r5, r1, #3
 800999e:	f025 0503 	bic.w	r5, r5, #3
 80099a2:	3508      	adds	r5, #8
 80099a4:	2d0c      	cmp	r5, #12
 80099a6:	bf38      	it	cc
 80099a8:	250c      	movcc	r5, #12
 80099aa:	2d00      	cmp	r5, #0
 80099ac:	4607      	mov	r7, r0
 80099ae:	db01      	blt.n	80099b4 <_malloc_r+0x1c>
 80099b0:	42a9      	cmp	r1, r5
 80099b2:	d905      	bls.n	80099c0 <_malloc_r+0x28>
 80099b4:	230c      	movs	r3, #12
 80099b6:	603b      	str	r3, [r7, #0]
 80099b8:	2600      	movs	r6, #0
 80099ba:	4630      	mov	r0, r6
 80099bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c0:	4e2e      	ldr	r6, [pc, #184]	; (8009a7c <_malloc_r+0xe4>)
 80099c2:	f000 f89d 	bl	8009b00 <__malloc_lock>
 80099c6:	6833      	ldr	r3, [r6, #0]
 80099c8:	461c      	mov	r4, r3
 80099ca:	bb34      	cbnz	r4, 8009a1a <_malloc_r+0x82>
 80099cc:	4629      	mov	r1, r5
 80099ce:	4638      	mov	r0, r7
 80099d0:	f7ff ffc2 	bl	8009958 <sbrk_aligned>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	4604      	mov	r4, r0
 80099d8:	d14d      	bne.n	8009a76 <_malloc_r+0xde>
 80099da:	6834      	ldr	r4, [r6, #0]
 80099dc:	4626      	mov	r6, r4
 80099de:	2e00      	cmp	r6, #0
 80099e0:	d140      	bne.n	8009a64 <_malloc_r+0xcc>
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	4631      	mov	r1, r6
 80099e6:	4638      	mov	r0, r7
 80099e8:	eb04 0803 	add.w	r8, r4, r3
 80099ec:	f000 f878 	bl	8009ae0 <_sbrk_r>
 80099f0:	4580      	cmp	r8, r0
 80099f2:	d13a      	bne.n	8009a6a <_malloc_r+0xd2>
 80099f4:	6821      	ldr	r1, [r4, #0]
 80099f6:	3503      	adds	r5, #3
 80099f8:	1a6d      	subs	r5, r5, r1
 80099fa:	f025 0503 	bic.w	r5, r5, #3
 80099fe:	3508      	adds	r5, #8
 8009a00:	2d0c      	cmp	r5, #12
 8009a02:	bf38      	it	cc
 8009a04:	250c      	movcc	r5, #12
 8009a06:	4629      	mov	r1, r5
 8009a08:	4638      	mov	r0, r7
 8009a0a:	f7ff ffa5 	bl	8009958 <sbrk_aligned>
 8009a0e:	3001      	adds	r0, #1
 8009a10:	d02b      	beq.n	8009a6a <_malloc_r+0xd2>
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	442b      	add	r3, r5
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	e00e      	b.n	8009a38 <_malloc_r+0xa0>
 8009a1a:	6822      	ldr	r2, [r4, #0]
 8009a1c:	1b52      	subs	r2, r2, r5
 8009a1e:	d41e      	bmi.n	8009a5e <_malloc_r+0xc6>
 8009a20:	2a0b      	cmp	r2, #11
 8009a22:	d916      	bls.n	8009a52 <_malloc_r+0xba>
 8009a24:	1961      	adds	r1, r4, r5
 8009a26:	42a3      	cmp	r3, r4
 8009a28:	6025      	str	r5, [r4, #0]
 8009a2a:	bf18      	it	ne
 8009a2c:	6059      	strne	r1, [r3, #4]
 8009a2e:	6863      	ldr	r3, [r4, #4]
 8009a30:	bf08      	it	eq
 8009a32:	6031      	streq	r1, [r6, #0]
 8009a34:	5162      	str	r2, [r4, r5]
 8009a36:	604b      	str	r3, [r1, #4]
 8009a38:	4638      	mov	r0, r7
 8009a3a:	f104 060b 	add.w	r6, r4, #11
 8009a3e:	f000 f865 	bl	8009b0c <__malloc_unlock>
 8009a42:	f026 0607 	bic.w	r6, r6, #7
 8009a46:	1d23      	adds	r3, r4, #4
 8009a48:	1af2      	subs	r2, r6, r3
 8009a4a:	d0b6      	beq.n	80099ba <_malloc_r+0x22>
 8009a4c:	1b9b      	subs	r3, r3, r6
 8009a4e:	50a3      	str	r3, [r4, r2]
 8009a50:	e7b3      	b.n	80099ba <_malloc_r+0x22>
 8009a52:	6862      	ldr	r2, [r4, #4]
 8009a54:	42a3      	cmp	r3, r4
 8009a56:	bf0c      	ite	eq
 8009a58:	6032      	streq	r2, [r6, #0]
 8009a5a:	605a      	strne	r2, [r3, #4]
 8009a5c:	e7ec      	b.n	8009a38 <_malloc_r+0xa0>
 8009a5e:	4623      	mov	r3, r4
 8009a60:	6864      	ldr	r4, [r4, #4]
 8009a62:	e7b2      	b.n	80099ca <_malloc_r+0x32>
 8009a64:	4634      	mov	r4, r6
 8009a66:	6876      	ldr	r6, [r6, #4]
 8009a68:	e7b9      	b.n	80099de <_malloc_r+0x46>
 8009a6a:	230c      	movs	r3, #12
 8009a6c:	603b      	str	r3, [r7, #0]
 8009a6e:	4638      	mov	r0, r7
 8009a70:	f000 f84c 	bl	8009b0c <__malloc_unlock>
 8009a74:	e7a1      	b.n	80099ba <_malloc_r+0x22>
 8009a76:	6025      	str	r5, [r4, #0]
 8009a78:	e7de      	b.n	8009a38 <_malloc_r+0xa0>
 8009a7a:	bf00      	nop
 8009a7c:	20004490 	.word	0x20004490

08009a80 <_realloc_r>:
 8009a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a84:	4680      	mov	r8, r0
 8009a86:	4614      	mov	r4, r2
 8009a88:	460e      	mov	r6, r1
 8009a8a:	b921      	cbnz	r1, 8009a96 <_realloc_r+0x16>
 8009a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a90:	4611      	mov	r1, r2
 8009a92:	f7ff bf81 	b.w	8009998 <_malloc_r>
 8009a96:	b92a      	cbnz	r2, 8009aa4 <_realloc_r+0x24>
 8009a98:	f7ff ff12 	bl	80098c0 <_free_r>
 8009a9c:	4625      	mov	r5, r4
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa4:	f000 f838 	bl	8009b18 <_malloc_usable_size_r>
 8009aa8:	4284      	cmp	r4, r0
 8009aaa:	4607      	mov	r7, r0
 8009aac:	d802      	bhi.n	8009ab4 <_realloc_r+0x34>
 8009aae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ab2:	d812      	bhi.n	8009ada <_realloc_r+0x5a>
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	f7ff ff6e 	bl	8009998 <_malloc_r>
 8009abc:	4605      	mov	r5, r0
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d0ed      	beq.n	8009a9e <_realloc_r+0x1e>
 8009ac2:	42bc      	cmp	r4, r7
 8009ac4:	4622      	mov	r2, r4
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	bf28      	it	cs
 8009aca:	463a      	movcs	r2, r7
 8009acc:	f7ff fbb8 	bl	8009240 <memcpy>
 8009ad0:	4631      	mov	r1, r6
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	f7ff fef4 	bl	80098c0 <_free_r>
 8009ad8:	e7e1      	b.n	8009a9e <_realloc_r+0x1e>
 8009ada:	4635      	mov	r5, r6
 8009adc:	e7df      	b.n	8009a9e <_realloc_r+0x1e>
	...

08009ae0 <_sbrk_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4d06      	ldr	r5, [pc, #24]	; (8009afc <_sbrk_r+0x1c>)
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	4608      	mov	r0, r1
 8009aea:	602b      	str	r3, [r5, #0]
 8009aec:	f7f9 fae8 	bl	80030c0 <_sbrk>
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	d102      	bne.n	8009afa <_sbrk_r+0x1a>
 8009af4:	682b      	ldr	r3, [r5, #0]
 8009af6:	b103      	cbz	r3, 8009afa <_sbrk_r+0x1a>
 8009af8:	6023      	str	r3, [r4, #0]
 8009afa:	bd38      	pop	{r3, r4, r5, pc}
 8009afc:	20004498 	.word	0x20004498

08009b00 <__malloc_lock>:
 8009b00:	4801      	ldr	r0, [pc, #4]	; (8009b08 <__malloc_lock+0x8>)
 8009b02:	f000 b811 	b.w	8009b28 <__retarget_lock_acquire_recursive>
 8009b06:	bf00      	nop
 8009b08:	2000449c 	.word	0x2000449c

08009b0c <__malloc_unlock>:
 8009b0c:	4801      	ldr	r0, [pc, #4]	; (8009b14 <__malloc_unlock+0x8>)
 8009b0e:	f000 b80c 	b.w	8009b2a <__retarget_lock_release_recursive>
 8009b12:	bf00      	nop
 8009b14:	2000449c 	.word	0x2000449c

08009b18 <_malloc_usable_size_r>:
 8009b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b1c:	1f18      	subs	r0, r3, #4
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bfbc      	itt	lt
 8009b22:	580b      	ldrlt	r3, [r1, r0]
 8009b24:	18c0      	addlt	r0, r0, r3
 8009b26:	4770      	bx	lr

08009b28 <__retarget_lock_acquire_recursive>:
 8009b28:	4770      	bx	lr

08009b2a <__retarget_lock_release_recursive>:
 8009b2a:	4770      	bx	lr

08009b2c <_init>:
 8009b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2e:	bf00      	nop
 8009b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b32:	bc08      	pop	{r3}
 8009b34:	469e      	mov	lr, r3
 8009b36:	4770      	bx	lr

08009b38 <_fini>:
 8009b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3a:	bf00      	nop
 8009b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b3e:	bc08      	pop	{r3}
 8009b40:	469e      	mov	lr, r3
 8009b42:	4770      	bx	lr
